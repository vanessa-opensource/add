#Использовать "."

#Использовать v8runner
#Использовать cmdline
#Использовать logos
#Использовать json

Перем ВозможныеКоманды;
Перем Лог;
Перем ЭтоWindows;

Процедура ИнициализацияОкружения()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;

	Лог = Исходники.ПолучитьЛог();
	Лог.УстановитьУровень(УровниЛога.Отладка);

	ВозможныеКоманды = Новый Структура("file, server", "file", "server");

	Парсер = Новый ПарсерАргументовКоманднойСтроки();

	Исходники.УстановитьПараметрыСборкиРазборкиДляКоманднойСтроки(Парсер);

	Парсер.ДобавитьИменованныйПараметр("--v8version", "Версия платформы", Истина);
	Парсер.ДобавитьИменованныйПараметр(Исходники.КлючКаталогБинарныхФайлов(), "Каталог сборки исходников");

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды.file);
	Парсер.ДобавитьКоманду(ОписаниеКоманды);

	ОписаниеКоманды1 = Парсер.ОписаниеКоманды(ВозможныеКоманды.server);
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--srvr", "Сервер 1С" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--srvrport", "Порт сервера 1С" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--srvrproto", "Протокол, TCP" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--ref", "Имя базы на сервере 1C" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbms", "Тип базы данных [MSSQLServer, PostgreSQL, IBMDB2, OracleDatabase]" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbsrvr", "Сервера SQL" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbname", "Имя базы на сервере SQL, по умолчанию равно --ref" );
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbuid", "Имя пользователя базы данных");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--dbpwd", "Пароль пользователя");
	// SQLYOffs - нафиг этот прошлый век, такой параметр неправильным даже поддерживать не будем.
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--locale", "язык (страна)");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--crsqldb", "создать базу в случаии ее ее отсутствия [Y|N], по умолчанию Y");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--schjobdn", "Запретить выполнение регламентных созданий (Y/N). Значение по умолчанию - Y");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--susr", "имя администратора кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--spwd", "пароль администратора кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--licdstr", "разрешить получение клиентских лицензий через сервер Y|N, default - Y");
	//LicDstr
	//Zn
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды1, "--zn", "Разделители. ");
	Парсер.ДобавитьКоманду(ОписаниеКоманды1);

	Аргументы = Парсер.РазобратьКоманду(АргументыКоманднойСтроки);

	Если Аргументы = Неопределено Тогда
		ЗначенияПараметров = Парсер.Разобрать(АргументыКоманднойСтроки);
		Аргументы = Новый Структура("Команда, ЗначенияПараметров", "file", ЗначенияПараметров);
	КонецЕсли;
	КомандаИзАргументов = Аргументы.Команда;

	ВерсияПлатформы = 	?(Аргументы.ЗначенияПараметров["--v8version"] = Неопределено,
						"8.3.10",
						Аргументы.ЗначенияПараметров["--v8version"]
						);
	СтрокаПодключения = "";
	Лог.Информация("Получили команду %1", КомандаИзАргументов);
	Лог.Информация("Версия платформы %1", ВерсияПлатформы);

	ОписаниеСборкиРазборки = Исходники.ОписаниеСборкиРазборки(Аргументы.ЗначенияПараметров, Лог);
	Бинарники1СХранятсяРядомСИсходниками = ОписаниеСборкиРазборки.Бинарники1СХранятсяРядомСИсходниками;

	ИмяКаталогаСборки = ОписаниеСборкиРазборки.ПутьКаталогаСборки;
	КаталогСборки = ?(Бинарники1СХранятсяРядомСИсходниками, "", СтрШаблон("./%1", ИмяКаталогаСборки));

	ИмяФайлаНастройки = СтрШаблон("./tools/JSON/env.json.%1.build", КомандаИзАргументов);
	НастройкиОкружения.СкопироватьЗаполнитьШаблон(ИмяФайлаНастройки, КаталогСборки);

	СоздатьКаталог("./build/ServiceBases/allurereport/");
	СоздатьКаталог("./build/ServiceBases/junitreport/");
	СоздатьКаталог("./build/ServiceBases/cucumber/");

	СоздатьКаталог("./build/allure");
	СоздатьКаталог("./build/allure-tdd");
	СоздатьКаталог("./build/junit-smoke");
	СоздатьКаталог("./build/junit-tdd");

	СоздатьКаталог("./build/allure-ordinaryapp");
	СоздатьКаталог("./build/allure-tdd-ordinaryapp");
	СоздатьКаталог("./build/junit-smoke-ordinaryapp");
	СоздатьКаталог("./build/junit-tdd-ordinaryapp");

	Если КомандаИзАргументов = ВозможныеКоманды.file Тогда

		Лог.Информация("Создание основной файловой базы - runner init-dev");

		СтрокаПодключения = "/F./build/ib";

	ИначеЕсли КомандаИзАргументов = ВозможныеКоманды.server Тогда
		Лог.Информация("Создание основной базы сервер - runner init-dev");

		ЗапуститьСозданиеСервернойБазы(Аргументы.ЗначенияПараметров);

		СтрокаПодключения = СтрШаблон("/S%1:%2/%3", Аргументы.ЗначенияПараметров["--srvr"],
									Строка(Аргументы.ЗначенияПараметров["--srvrport"]),
									Строка(Аргументы.ЗначенияПараметров["--ref"]));
	Иначе
		ВызватьИсключение "Неизвестная команда " + КомандаИзАргументов;
	КонецЕсли;

	НастройкиОкружения.ЗаписатьВНастройкиПараметры(СтрокаПодключения, ВерсияПлатформы);

	СтрокаВыполнения = "vrunner init-dev --src ./lib/CF/83NoSync --ibconnection " + СтрокаПодключения;
	ИсполнитьКоманду(СтрокаВыполнения);

	СтрокаВыполнения = "vrunner init-dev --dev --src ./lib/CF/83NoSync --ibconnection /F./build/ibservice --nocacheuse";
	ИсполнитьКоманду(СтрокаВыполнения);

	СтрокаВыполнения = "vrunner init-dev --src ./lib/CF/83xddNoSync --ibconnection /F./build/ibservicexdd --nocacheuse";
	ИсполнитьКоманду(СтрокаВыполнения);

	Если НЕ Новый Файл("./build/1Cv8.cf").Существует() Тогда
		ИсполнитьКоманду("vrunner unload ./build/1Cv8.cf --ibconnection /F./build/ibservice");
	Иначе
		Лог.Информация("./build/1Cv8.cf существует, пропускаем компиляцию");
	КонецЕсли;

	УстановитьПеременнуюСреды("vRUNNER_DBUSER", " ");
	УстановитьПеременнуюСреды("vRUNNER_DBPWD", " ");

	СтрокаЗапуска = "vrunner updatedb --uccode test";
	ИсполнитьКоманду(СтрокаЗапуска);

	Если Не Бинарники1СХранятсяРядомСИсходниками Тогда

		СоздатьКаталог(СтрШаблон("%1features", КаталогСборки));
		СоздатьКаталог(СтрШаблон("%1tools", КаталогСборки));
		СоздатьКаталог(СтрШаблон("%1lib", КаталогСборки));
		СоздатьКаталог(СтрШаблон("%1plugins", КаталогСборки));
		СоздатьКаталог(СтрШаблон("%1vendor", КаталогСборки));
		СоздатьКаталог(СтрШаблон("%1lib/TemplateEpf", КаталогСборки));

	КонецЕсли;

	СоздатьКаталог(СтрШаблон("%1/vanessa-add", КаталогВременныхФайлов()));

	СтрокаЗапуска = СтрШаблон("vrunner compileepf ./tools %1tools --ibconnection /F./build/ibservice", КаталогСборки);
	ИсполнитьКоманду(СтрокаЗапуска);

	СтрокаЗапуска = СтрШаблон("vrunner run --command VBParams=./tools/epf/init.json --execute %1tools/epf/init.epf", КаталогСборки);
	ИсполнитьКоманду(СтрокаЗапуска);

	СтрокаЗапуска = "vrunner run --command СоздатьАдминистратора --ibconnection /F./build/ibservicexdd";
	ИсполнитьКоманду(СтрокаЗапуска);

	СтрокаЗапуска = Исходники.СтрокаЗапускаКомандыСборки(Бинарники1СХранятсяРядомСИсходниками, ИмяКаталогаСборки);
	ИсполнитьКоманду(СтрокаЗапуска);

	СтрокаЗапуска = СтрШаблон("vrunner compileepf ./lib %1lib --ibconnection /F./build/ibservice", КаталогСборки);
	ИсполнитьКоманду(СтрокаЗапуска);

	Если НЕ Бинарники1СХранятсяРядомСИсходниками Тогда
		СтрокаЗапуска = СтрШаблон("vrunner compileepf ./lib/TemplateEpf %1lib/TemplateEpf --onlycopy --ibconnection /F./build/ibservice", КаталогСборки);
		ИсполнитьКоманду(СтрокаЗапуска);

		СтрокаЗапуска = СтрШаблон("vrunner compileepf ./lib/TemplateEpfUF %1lib/TemplateEpfUF --onlycopy --ibconnection /F./build/ibservice", КаталогСборки);
		ИсполнитьКоманду(СтрокаЗапуска);

		СтрокаЗапуска = СтрШаблон("vrunner compileepf ./locales %1locales --onlycopy --ibconnection /F./build/ibservice", КаталогСборки);
		ИсполнитьКоманду(СтрокаЗапуска);

	КонецЕсли;

	Лог.Информация("ВСЕ!");
КонецПроцедуры

Процедура ЗапуститьСозданиеСервернойБазы(Параметры)
		Команда = Новый Команда;

		СИ = Новый СистемнаяИнформация;
		СоответствиеПеременных = Новый Соответствие();
		СоответствиеПеременных.Вставить("vRUNNER_srvr", "--srvr");
		СоответствиеПеременных.Вставить("vRUNNER_srvrport", "--srvrport");
		СоответствиеПеременных.Вставить("vRUNNER_srvrproto", "--srvrproto");
		СоответствиеПеременных.Вставить("vRUNNER_ref", "--ref");
		СоответствиеПеременных.Вставить("vRUNNER_dbms", "--dbms");
		СоответствиеПеременных.Вставить("vRUNNER_dbsrvr", "--dbsrvr");
		СоответствиеПеременных.Вставить("vRUNNER_dbname", "--dbname");
		СоответствиеПеременных.Вставить("vRUNNER_dbuid", "--dbuid");
		СоответствиеПеременных.Вставить("vRUNNER_dbpwd", "--dbpwd");
		СоответствиеПеременных.Вставить("vRUNNER_locale", "--locale");
		СоответствиеПеременных.Вставить("vRUNNER_crsqldb", "--crsqldb");
		СоответствиеПеременных.Вставить("vRUNNER_schjobdn", "--schjobdn");
		СоответствиеПеременных.Вставить("vRUNNER_susr", "--susr");
		СоответствиеПеременных.Вставить("vRUNNER_spwd", "--spwd");
		СоответствиеПеременных.Вставить("vRUNNER_licdstr", "--licdstr");
		СоответствиеПеременных.Вставить("vRUNNER_zn", "--zn");

		ПодключитьСценарий(ОбъединитьПути(ТекущийСценарий().Каталог, "..", "tools", "vrunner.os"), "vrunner");
		runner = Новый runner();
		runner.ДополнитьАргументыИзПеременныхОкружения(Параметры, СоответствиеПеременных);

		Параметры["--srvrport"] = ЗначениеПоУмолчанию(Параметры["--srvrport"], Строка(1541));
		Параметры["--srvrproto"] = ЗначениеПоУмолчанию(Параметры["--srvrproto"], "tcp://");
		Параметры["--dbms"] = ЗначениеПоУмолчанию(Параметры["--dbms"], "PostgreSQL");
		Параметры["--locale"] = ЗначениеПоУмолчанию(Параметры["--locale"], "ru");
		Параметры["--dbname"] = ЗначениеПоУмолчанию(Параметры["--dbname"], Параметры["--ref"]);
		Параметры["--crsqldb"] = ЗначениеПоУмолчанию(Параметры["--crsqldb"], "Y");
		Параметры["--licdstr"] = ЗначениеПоУмолчанию(Параметры["--licdstr"], "Y");
		Параметры["--schjobdn"] = ЗначениеПоУмолчанию(Параметры["--schjobdn"], "N");

		Параметры["--srvr"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERONEC")),
			ПолучитьПеременнуюСреды("SERVERONEC"),
			Параметры["--srvr"]);
		Параметры["--ref"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERBASE")),
			ПолучитьПеременнуюСреды("SERVERBASE"),
			Параметры["--ref"]);
		Параметры["--ref"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERBASE")),
			ПолучитьПеременнуюСреды("SERVERBASE"),
			Параметры["--ref"]);
		Параметры["--dbsrvr"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERPOSTGRES")),
			ПолучитьПеременнуюСреды("SERVERPOSTGRES"),
			Параметры["--dbsrvr"]);

		Параметры["--dbuid"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERPOSTGRESUSER")),
			ПолучитьПеременнуюСреды("SERVERPOSTGRESUSER"),
			Параметры["--dbuid"]);

		Параметры["--dbpwd"] = ?(
			ЗначениеЗаполнено(ПолучитьПеременнуюСреды("SERVERPOSTGRESPASSWD")),
			ПолучитьПеременнуюСреды("SERVERPOSTGRESPASSWD"),
			Параметры["--dbpwd"]);

		Параметры["--srvr"] = ЗначениеПоУмолчанию(Параметры["--srvr"], "serveronec.service.consul");
		Параметры["--srvr"] = ЗначениеПоУмолчанию(Параметры["--srvr"], "dev");
		Параметры["--dbsrvr"] = ЗначениеПоУмолчанию(Параметры["--dbsrvr"], "postgres");
		Параметры["--dbuid"] = ЗначениеПоУмолчанию(Параметры["--dbuid"], "postgres");
		Параметры["--dbpwd"] = ЗначениеПоУмолчанию(Параметры["--dbpwd"], "postgres");

		СтрокаПодключенияСервера = "" + Параметры["--srvrproto"] + Параметры["--srvr"] + ":" + Строка(Параметры["--srvrport"]);
		СтрокаСозданияБазы = "";

		СтрокаСозданияБазы = СтрШаблон("Srvr=%1;Ref=%2",
				СтрокаПодключенияСервера,
				Параметры["--ref"]
				);
		СтрокаСозданияБазы = СтрШаблон("%1;DBMS=%2",
				СтрокаСозданияБазы,
				Параметры["--dbms"]
			);
		СтрокаСозданияБазы = СтрШаблон("%1;DBSrvr=%2;DB=%3",
			СтрокаСозданияБазы,
			Параметры["--dbsrvr"],
			Параметры["--dbname"]);

		Если ЗначениеЗаполнено(Параметры["--dbuid"]) Тогда
			СтрокаСозданияБазы = СтрШаблон("%1;DBUID=%2", СтрокаСозданияБазы, Параметры["--dbuid"]);
			Если ЗначениеЗаполнено(Параметры["--dbpwd"]) Тогда
				СтрокаСозданияБазы = СтрШаблон("%1;DBPwd=%2", СтрокаСозданияБазы, Параметры["--dbpwd"]);
			КонецЕсли;
		КонецЕсли;

		Если Параметры["--dbms"] = "MSSQLServer" Тогда
			СтрокаСозданияБазы = СтрШаблон("%1;SQLYOffs=%2", СтрокаСозданияБазы, "2000");
		КонецЕсли;

		СтрокаСозданияБазы = СтрШаблон("%1;Locale=%2", СтрокаСозданияБазы, Параметры["--locale"]);
		СтрокаСозданияБазы = СтрШаблон("%1;CrSQLDB=Y", СтрокаСозданияБазы);
		СтрокаСозданияБазы = СтрШаблон("%1;SchJobDn=%2", СтрокаСозданияБазы, Параметры["--schjobdn"]);
		Если ЗначениеЗаполнено(Параметры["--susr"]) Тогда
			СтрокаСозданияБазы = СтрШаблон("%1;SUsr=%2", СтрокаСозданияБазы, Параметры["--susr"]);
			Если ЗначениеЗаполнено(Параметры["--spwd"]) Тогда
				СтрокаСозданияБазы = СтрШаблон("%1;SPwd=%2", СтрокаСозданияБазы, Параметры["--spwd"]);
			КонецЕсли;
		КонецЕсли;

		Аргументы = Новый Структура();
		Аргументы.Вставить("Команда", "server");
		Аргументы.Вставить("ЗначенияПараметров", Параметры);
		runner.ОпределитьПараметрыРаботы(Аргументы);

		Конфигуратор = Новый УправлениеКонфигуратором();

		ВерсияПлатформы = Аргументы.ЗначенияПараметров["--v8version"];
		Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
			Лог.Отладка("ИнициализацироватьБазуДанных ВерсияПлатформы:" + ВерсияПлатформы);
			Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
		КонецЕсли;

		ПараметрыЗапуска = Новый Массив;
		ПараметрыЗапуска.Добавить("CREATEINFOBASE");

		Если НЕ ЭтоWindows Тогда
			СтрокаСозданияБазы = """" + СтрокаСозданияБазы + """";
			СтрокаСозданияБазы = СтрЗаменить(СтрокаСозданияБазы, """", "\""");
			СтрокаСозданияБазы = СтрЗаменить(СтрокаСозданияБазы,  ";", "\;");
		КонецЕсли;
		Лог.Отладка(СтрокаСозданияБазы);

		ПараметрыЗапуска.Добавить(СтрокаСозданияБазы);
		ПараметрыЗапуска.Добавить("/L" + Параметры["--locale"]);
		ПараметрыЗапуска.Добавить("/Out""" + Конфигуратор.ФайлИнформации() + """");

		СтрокаЗапуска = "";
		СтрокаДляЛога = "";
		Для Каждого Параметр Из ПараметрыЗапуска Цикл
			СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
		КонецЦикла;

		Приложение = "";
		Приложение = Конфигуратор.ПутьКПлатформе1С();
		Если Найти(Приложение, " ") > 0 Тогда
			Приложение = runner.ОбернутьПутьВКавычки(Приложение);
		КонецЕсли;
		СтрокаЗапуска = Приложение + " " + СтрокаЗапуска;
		Сообщить(СтрокаЗапуска);

		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку();

		Процесс = СоздатьПроцесс(СтрокаЗапуска, "./", Истина, Истина);
		Процесс.Запустить();
		Процесс.ОжидатьЗавершения();
		ЗаписьXML.ЗаписатьБезОбработки(Процесс.ПотокВывода.Прочитать());
		РезультатРаботыПроцесса = ЗаписьXML.Закрыть();
		Сообщить(РезультатРаботыПроцесса);

		РезультатСообщение = ПрочитатьФайлИнформации(Конфигуратор.ФайлИнформации());
		Если НЕ (СтрНайти(РезультатСообщение, "успешно завершено") > 0 ИЛИ СтрНайти(РезультатСообщение, "completed successfully") > 0) Тогда
			ВызватьИсключение "Результат работы не успешен: " + Символы.ПС + РезультатСообщение;
		КонецЕсли;

		Попытка
			УдалитьФайлы(Конфигуратор.ФайлИнформации());
		Исключение
			Лог.Отладка("Не удалось удалить служебный файл от 1С " + Конфигуратор.ФайлИнформации());
		КонецПопытки;

		Параметры = Аргументы.ЗначенияПараметров;

КонецПроцедуры

Функция ПрочитатьФайлИнформации(Знач ПутьКФайлу)

	Текст = "";
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя);
		Текст = Чтение.Прочитать();
		Чтение.Закрыть();
	Иначе
		Текст = "Информации об ошибке нет";
	КонецЕсли;

	Лог.Отладка("файл информации:
	|" + Текст);
	Возврат Текст;

КонецФункции


Функция ЗначениеПоУмолчанию(value, defValue = "")
	res = ?( ЗначениеЗаполнено(value), value, defValue);
	Возврат res;
КонецФункции

Процедура ИсполнитьКоманду(СтрокаВыполнения)

	Исходники.ИсполнитьКоманду(СтрокаВыполнения);

КонецПроцедуры

ИнициализацияОкружения();
