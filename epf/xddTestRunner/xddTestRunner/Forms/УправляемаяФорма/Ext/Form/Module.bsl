&НаКлиенте
Перем КэшФормПлагинов;
&НаКлиенте
Перем ПодключенныеВнешниеОбработки;

&НаКлиенте
Перем ЭтоLinux Экспорт;

&НаКлиенте
Перем Версия836ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8315ИлиВыше Экспорт;

&НаКлиенте
Перем КешРежимСовместимости;

&НаКлиенте
Перем КешВерсияРежимСовместимости;

&НаКлиенте
Перем АСинк;

&НаКлиенте
Перем РегулярныеВыражения;

&НаКлиенте
Перем СкрыватьПолныйСтекВызововПриОшибкахТестирования; // Булево, уменьшаем количество шумовых строк от браузера тестирования в ошибках

&НаКлиенте
Перем ИсключаемыеСтрокиСтекаВызовов; // массив строк, которые нужно удалять из пользовательских сообщений

// Поле в котором можно хранить клиентский контекст на протяжении сеанса
// данный контекст можно использовать для передачи данных между тестами
&НаКлиенте
Перем ГлобальныйКонтекст;

// { События формы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");

	ЕстьПоддержкаАсинхронныхВызовов = КонфигурацияПоддерживаетАсинхронныеВызовы();
	ЕстьПоддержкаНемодальныхФорм    = УзнатьЕстьПоддержкаНемодальныхФорм();
	ЕстьЗащитаОтОпасныхДействий     = УзнатьЕстьЗащитаОтОпасныхДействий();

	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();

	Если НЕ Объект.ЭтоВстроеннаяОбработка Тогда // Используемое имя файла меняется в зависимости от того
										// встроена обработка в конфигурацию или нет
		ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	КонецЕсли;

	ЗначениеВРеквизитФормы(ОбъектНаСервере, "Объект"); //для загрузки настроек

	ОбновитьКомандыИсторииЗагрузкиТестов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	Объект.ИспользоватьПрямыеПутиФайлов = КлиентИСерверРасположеныНаОднойМашине();

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия836ИлиВыше    = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.6.0");
	Версия8315ИлиВыше    = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.15.0");
	
	СкрыватьПолныйСтекВызововПриОшибкахТестирования = Истина;

	ЭтоLinux = Ложь;
	Если Найти(Строка(СистемнаяИнформация.ТипПлатформы), "Linux")>0 Тогда
		ЭтоLinux = Истина;
	КонецЕсли;

	ЗагрузитьПлагины();
	
	ОбновитьДекорацияНастройкиЗагружены();
	
	ГлобальныйКонтекстИнициализировать();

	//КэшироватьПеречисленияПлагинов();
	//СброситьПодключенныеВнешниеОбработки();
	//
	//КаталогПроекта = КаталогВременныхФайлов();

	//ЭтоПакетныйЗапуск = ЗначениеЗаполнено(ПараметрЗапуска);
	//Если ЭтоПакетныйЗапуск Тогда
	//	ВыполнитьПакетныйЗапуск(ПараметрЗапуска);
	//Иначе
	//	ПерезагрузитьПоследниеТестыПоИстории();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение()
	КэшироватьПеречисленияПлагинов();
	СброситьПодключенныеВнешниеОбработки();

	КаталогПроекта = ПолучитьКаталогВременныхФайлов();

	ЭтоПакетныйЗапуск = Найти(ПараметрЗапуска, "xdd") > 0;
	Если ЭтоПакетныйЗапуск Тогда
		ВыполнитьПакетныйЗапуск(ПараметрЗапуска);
	Иначе
		ПерезагрузитьПоследниеТестыПоИстории();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы = Неопределено)

	Если ЭтоПакетныйЗапуск Тогда
		Возврат;
	КонецЕсли;

	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;

	ПриЗакрытииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	ЭтотОбъектНаСервере().СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеВыполненияТестов(Знач ИмяСобытия, Знач Параметр) Экспорт
	Если ИмяСобытия = Объект.ВозможныеСобытия.ВыполненТестовыйМетод Тогда
		Если Параметр.Состояние = Объект.СостоянияТестов.НеРеализован Тогда
			Если Элементы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
				Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
			КонецЕсли;
		ИначеЕсли Параметр.Состояние = Объект.СостоянияТестов.Сломан Тогда
			Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		КонецЕсли;
		ИндикаторВыполнения = ИндикаторВыполнения + 1;
	КонецЕсли;
	ОбновитьОтображениеДанных();
КонецПроцедуры
// } События формы

// { Управляющие воздействия пользователя
&НаКлиенте
Процедура ЗагрузитьТестыПоУмолчанию(Команда)
	ЗагрузчикПоУмолчанию = ЗагрузчикПоУмолчанию();
	ОписаниеПлагина = ЗагрузчикПоУмолчанию.ОписаниеПлагина(ЭтаФорма, Объект.ТипыПлагинов);
	Если ОписаниеПлагина = Неопределено Тогда
		ВызватьИсключение "У загрузчика по умолчанию не задано описание плагина";
	КонецЕсли;
	ИдентификаторЗагрузчикаПоУмолчанию = ОписаниеПлагина.Идентификатор;
	Подключаемый_ИнтерактивныйВызовЗагрузчика(Новый Структура("Имя", ИдентификаторЗагрузчикаПоУмолчанию));
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)
	ВыполнитьТестыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестыНаКлиенте(Знач Фильтр = Неопределено)
	Если ЗначениеЗаполнено(ЭтаФорма.ДеревоОтЗагрузчика) Тогда
		ОчиститьСообщения();

		ПервичнаяНастройка();

		КоличествоТестовыхМетодов = ПолучитьКоличествоТестовыхМетодов(ЭтаФорма.ДеревоОтЗагрузчика, Фильтр);
		ИнициализироватьИндикаторВыполнения(КоличествоТестовыхМетодов);

		РезультатыТестирования = ВыполнитьТесты(Плагин(ИдентификаторЗагрузчика), ЭтаФорма.ДеревоОтЗагрузчика, Фильтр, ЭтаФорма);

		ОбновитьДеревоТестовНаОснованииРезультатовТестирования(ДеревоТестов.ПолучитьЭлементы()[0], РезультатыТестирования);

		ГенераторОтчетаMXL = Плагин("ГенераторОтчетаMXL");
		Отчет = ГенераторОтчетаMXL.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);
		ГенераторОтчетаMXL.Показать(Отчет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТесты(Команда)
	Фильтр = Новый Массив;
	ВыделенныеСтроки = Элементы.ДеревоТестов.ВыделенныеСтроки;
	Для каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = ДеревоТестов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Фильтр.Добавить(Новый УникальныйИдентификатор(ВыделеннаяСтрока.Ключ));
	КонецЦикла;
	Если Фильтр.Количество() > 0 Тогда
		ВыполнитьТестыНаКлиенте(Фильтр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьФорму(Команда)
	Перем АдресХранилища;

	Закрыть();

	Если Объект.ЭтоВстроеннаяОбработка Тогда // Для встроенной в конф. обработки открываем форму

		ОткрытьФорму(ЭтаФорма.ИмяФормы);

	Иначе

		ОписаниеЗавершения  = АСинк().смв_НовыйОписаниеОповещения("КомандаПерезагрузитьФормуЗавершение", ЭтаФорма);
		АСинк().смв_ПоместитьФайл(ОписаниеЗавершения, АдресХранилища, ЭтаФорма.ИспользуемоеИмяФайла );

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГенераторМакетовДанных(Команда)
	ОткрытьИнструмент("СериализаторMXL", ПолучитьПутьКПлагинам());
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГУИД(Команда)
	ОткрытьИнструмент("xddGuidShow");
КонецПроцедуры

&НаКлиенте
Процедура КонвертерТестов(Команда)
	ОткрытьИнструмент("xddTestsConvertIntoRebornFormat");
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьЖурналДействийПользователяВТест(Команда)
	ОткрытьИнструмент("UILogToScript", ПолучитьПутьКПлагинам() + "..\vendor\1C");
КонецПроцедуры

&НаКлиенте
Процедура ИнструментУправленияДымовымиТестами(Команда)
	ОткрытьИнструмент("УправлениеДымовымиТестами");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)

	ОповещениеВыбора = АСинк().смв_НовыйОписаниеОповещения("ЗагрузитьНастройкиИзФайлаЗавершение", ЭтаФорма);
	Асинк().смв_ПоказатьДиалогОткрытие(ОповещениеВыбора,
										"Настройки (*.json)|*.json",
										"Выберите файл настройки Vanessa-ADD",
										,
										ПутьФайлаНастроек());

КонецПроцедуры

&НаКлиенте
Процедура ТехническаяИнформация(Команда)
	Информатор = Плагин("Информатор");
	Информатор.Открыть();
КонецПроцедуры

// } Управляющие воздействия пользователя

// { Плагины
&НаКлиенте
Процедура ЗагрузитьПлагины()
	Если Объект.ПлагиныЗагружены Тогда
		Возврат;
	КонецЕсли;

	Объект.Плагины = Новый Структура;
	КэшФормПлагинов = Новый Структура;

	// Для встроенного в состав конфигурации браузера тестов
	// плагины также загружаем из встроенных обработок
	Если Объект.ЭтоВстроеннаяОбработка Тогда

		ЗагрузитьВстроенныеПлагины();
		Для Каждого Плагин Из Объект.Плагины Цикл
			КэшФормПлагинов.Вставить(Плагин.Ключ, Истина);
		КонецЦикла;

		ДобавитьКомандыЗагрузчиковНаФорме();

	Иначе

		КаталогПлагинов = ПолучитьПутьКПлагинам();

		ОбработчикПоискаКлиентскихПлагинов = АСинк().смв_НовыйОписаниеОповещения("ОбработчикПоискаКлиентскихПлагинов", ЭтаФорма);
		АСинк().смв_НайтиФайлы(ОбработчикПоискаКлиентскихПлагинов,
										КаталогПлагинов, "*.epf", Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагинов(Знач НайденныеФайлы, Знач ДополнительныеПараметры) Экспорт

	ПомещаемыеФайлы = Новый Массив;
	ИдентификаторыПлагинов = Новый Соответствие;

	Если Объект.ИспользоватьПрямыеПутиФайлов Тогда
		ПомещенныеФайлы = Новый Массив;
		Для каждого ФайлОбработки Из НайденныеФайлы Цикл

			ПолноеИмяФайла = ФайлОбработки.ПолноеИмя;
			ОписаниеПередаваемогоФайла = Новый Структура("Имя", ПолноеИмяФайла);
			ПомещенныеФайлы.Добавить(ОписаниеПередаваемогоФайла);

			ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
			ИдентификаторыПлагинов.Вставить(ПолноеИмяФайла, ИмяПлагина);

		КонецЦикла;

		ПодключитьНайденныеКлиентскиеПлагины(ПомещенныеФайлы, ИдентификаторыПлагинов);

	Иначе

		Для каждого ФайлОбработки Из НайденныеФайлы Цикл

			ПолноеИмяФайла = ФайлОбработки.ПолноеИмя;
			ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла);
			ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);

			ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
			ИдентификаторыПлагинов.Вставить(ПолноеИмяФайла, ИмяПлагина);

		КонецЦикла;

		Если ПомещаемыеФайлы.Количество() Тогда

			ПараметрыЗавершения = Новый Структура("ИдентификаторыПлагинов", ИдентификаторыПлагинов);
			//ПараметрыЗавершения.Вставить("ПомещаемыеФайлы", ПомещаемыеФайлы);

			ОписаниеЗавершения  = АСинк().смв_НовыйОписаниеОповещения("ОбработчикПоискаКлиентскихПлагиновЗавершение", ЭтаФорма, ПараметрыЗавершения);
			АСинк().смв_ПоместитьФайлы(ОписаниеЗавершения, ПомещаемыеФайлы);

		Иначе

			ПодключитьНайденныеКлиентскиеПлагины(Новый Массив, ИдентификаторыПлагинов);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагиновЗавершение(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт

	ПодключитьНайденныеКлиентскиеПлагины(ПомещенныеФайлы, ДополнительныеПараметры.ИдентификаторыПлагинов);

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьНайденныеКлиентскиеПлагины(Знач ЗагруженныеФайлы, Знач ИдентификаторыПлагинов)
	Перем ЗагруженныйФайл, ИмяПлагина, ОписаниеПлагина, ОписанияПлагинов;
	Перем ОбъектПлагина, ОписанияПлагиновКлиент, ПодключенныеРанее, МассивФормПлагинов;

	// в режиме совместимости 8.3.13 и выше для объекта ОписаниеПереданногоФайла свойство ПолноеИмя вместо Имя
	ИспользоватьПолноеИмя = Ложь;
	Если ЗагруженныеФайлы.Количество() > 0 Тогда
		ИспользоватьПолноеИмя = ЕстьСвойство(ЗагруженныеФайлы[0], "ПолноеИмя");
	КонецЕсли;

	ОписанияПлагинов = ПодключитьПлагиныНаСервере(ЗагруженныеФайлы, ИспользоватьПолноеИмя);

	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		Объект.ПлагиныЗагружены = Истина;
		Если ИспользоватьПолноеИмя Тогда
			КлючФайла = ЗагруженныйФайл.ПолноеИмя;
		Иначе
			КлючФайла = ЗагруженныйФайл.Имя;
		КонецЕсли;

		ИмяПлагина = ИдентификаторыПлагинов[КлючФайла];

		ОписаниеПлагина = ОписанияПлагинов.Получить(КлючФайла);
		Если ОписаниеПлагина = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);
		КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, Истина);

	КонецЦикла;

	ЗагрузкаПлагиновЗавершение();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПлагиновЗавершение() Экспорт
	ДобавитьКомандыЗагрузчиковНаФорме();
	ПриОткрытииЗавершение();
КонецПроцедуры

&НаСервере
Функция ПодключитьПлагиныНаСервере(Знач ЗагружаемыеФайлы, Знач ИспользоватьПолноеИмя)

	ОписанияПлагинов = Новый Соответствие;

	Для Каждого ОписаниеФайла Из ЗагружаемыеФайлы Цикл
		Если ИспользоватьПолноеИмя Тогда
			КлючФайла = ОписаниеФайла.ПолноеИмя;
		Иначе
			КлючФайла = ОписаниеФайла.Имя;
		КонецЕсли;
		ФайлОбъект = Новый Файл(КлючФайла);
		ИмяПлагина = ФайлОбъект.ИмяБезРасширения;

		Если Не Объект.ИспользоватьПрямыеПутиФайлов Тогда
			ПодключитьФайлОбработкиНаСервере(ОписаниеФайла.Хранение, ИмяПлагина);
		КонецЕсли;

		Попытка
			ЭтотОбъектНаСервере = ЭтотОбъектНаСервере();
			ОбъектОбработки = СоздатьФайлОбработкиНаСервере(КлючФайла, ИмяПлагина);
			ОбъектОбработки.Инициализация(ЭтотОбъектНаСервере);
			ОписаниеПлагина = ОбъектОбработки.ОписаниеПлагина(ЭтотОбъектНаСервере, Объект.ТипыПлагинов);
			Если ОписаниеПлагина <> Неопределено Тогда
				ОписанияПлагинов.Вставить(КлючФайла, ОписаниеПлагина);
			КонецЕсли;
		Исключение
			Ошибка = "Возникла ошибка при загрузке плагина: " + КлючФайла
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщить(Ошибка);
			Продолжить;
		КонецПопытки;

	КонецЦикла;

	Возврат Новый ФиксированноеСоответствие(ОписанияПлагинов);

КонецФункции // ПодключитьПлагиныНаСервере()

&НаКлиенте
Процедура КэшироватьПеречисленияПлагинов()
	Объект.ТипыУзловДереваТестов = Плагин("ПостроительДереваТестов").Объект.ТипыУзловДереваТестов;
КонецПроцедуры

&НаКлиенте
Функция Плагин(Знач Идентификатор) Экспорт

	ОбъектПлагин = Неопределено;
	ИдентификаторБезПрефиксовПодсистемы = ПолучитьИдентификаторБезПрефиксаПодсистемы(Идентификатор, Объект.ИспользуемыйПрефиксПодсистемы);
	Если КэшФормПлагинов.Свойство(ИдентификаторБезПрефиксовПодсистемы) Тогда
		ОбъектПлагин = КэшФормПлагинов[ИдентификаторБезПрефиксовПодсистемы];
	КонецЕсли;

	Если ОбъектПлагин = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный идентификатор плагина: <"+Идентификатор+">'");
	ИначеЕсли ОбъектПлагин = Истина Тогда
		// загрузка клиентского плагина "По требованию"
		ИмяПлагина = Объект.Плагины[ПолучитьИдентификаторБезПрефиксаПодсистемы(Идентификатор, Объект.ИспользуемыйПрефиксПодсистемы)];
		Попытка
			Если Объект.ЭтоВстроеннаяОбработка Тогда
				ОбъектПлагин = ПолучитьФорму("Обработка." + ДополнитьИдентификаторПрефиксомПодсистемы(ИмяПлагина, Объект.ИспользуемыйПрефиксПодсистемы) + ".Форма", , ЭтаФорма);
			Иначе
				ОбъектПлагин = ПолучитьФорму("ВнешняяОбработка." + ИмяПлагина + ".Форма", , ЭтаФорма);
			КонецЕсли;

			Попытка
				ОбъектПлагин.Инициализация(ЭтаФорма);
			Исключение
				Инфо = ИнформацияОбОшибке();
				Если (Инфо.Описание = "Метод объекта не обнаружен (Инициализация)" Или
					Найти(Инфо.Описание, "Object method not found (Инициализация)") > 0) И
					Найти(Инфо.ИсходнаяСтрока, "ОбъектПлагин.Инициализация(ЭтаФорма);") > 0 И
					( Найти(Инфо.ИмяМодуля, "Форма.УправляемаяФорма.Форма") > 0 Или
					//ExternalDataProcessor.xddTestRunner.Form.УправляемаяФорма.Form
					Найти(Инфо.ИмяМодуля, "Form.УправляемаяФорма.Form") > 0 )
					Тогда
					Иначе
						ВызватьИсключение;
					КонецЕсли;
			КонецПопытки;

			КэшФормПлагинов.Вставить(ИдентификаторБезПрефиксовПодсистемы, ОбъектПлагин);
		Исключение
			// TODO добавить поведение при отсутствии управляемой формы у плагина
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;

	Возврат ОбъектПлагин;
КонецФункции

&НаСервере
Процедура ДобавитьКомандыЗагрузчиковНаФорме()
	ОписанияЗагрузчиков = ПолучитьОписанияЗагрузчиковНаСервере();
	Для каждого Описание Из ОписанияЗагрузчиков Цикл
		Команда = ЭтаФорма.Команды.Добавить(Описание.Идентификатор);
		Команда.Действие = "Подключаемый_ИнтерактивныйВызовЗагрузчика";
		ПунктМеню = ЭтаФорма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПлагиныЗагрузчики);
		ПунктМеню.Заголовок = Описание.Представление;
		ПунктМеню.ИмяКоманды = Команда.Имя;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписанияПлагиновПоТипу(Знач ТипПлагина) Экспорт
	Результат = ПолучитьОписанияПлагиновПоТипуНаСервере(ТипПлагина);

	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьОписанияПлагиновПоТипуНаСервере(Знач ТипПлагина)
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ТипПлагина);

	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьОписанияЗагрузчиковНаСервере()
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОписанияЗагрузчиков = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ОбъектНаСервере.ТипыПлагинов.Загрузчик);

	Возврат ОписанияЗагрузчиков;
КонецФункции

&НаКлиенте
Функция ЗагрузчикПоУмолчанию() Экспорт
	Возврат Плагин("ЗагрузчикКаталога");
КонецФункции
// } Плагины

// { Работа с деревом тестов
&НаКлиенте
Процедура Подключаемый_ИнтерактивныйВызовЗагрузчика(Команда)
	ИдентификаторВыбранногоЗагрузчика = Команда.Имя;
	Плагин(ИдентификаторВыбранногоЗагрузчика).ВыбратьПутьИнтерактивно(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТесты(Знач ИдентификаторВыбранногоЗагрузчика, Знач Путь) Экспорт
	ИнициализироватьИндикаторВыполнения();

	ЭтаФорма.ИдентификаторЗагрузчика = ИдентификаторВыбранногоЗагрузчика;
	ФормаЗагрузчика = Плагин(ИдентификаторВыбранногоЗагрузчика);

	Попытка
		ЭтаФорма.ДеревоОтЗагрузчика = ФормаЗагрузчика.Загрузить(ЭтаФорма, Путь);
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	ОбновитьИменаИПредставлениеТестов(ДеревоОтЗагрузчика);

	ЭлементыДереваТестов = ЭтаФорма.ДеревоТестов.ПолучитьЭлементы();
	ЭлементыДереваТестов.Очистить();
	ЗаполнитьДеревоТестов(ЭтаФорма.ДеревоТестов, ДеревоОтЗагрузчика);

	КоличествоТестовыхСлучаев = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ЭтаФорма.ДеревоТестов);
	РазвернутьСтрокиДерева(КоличествоТестовыхСлучаев < 30);

	СохранитьВИсториюЗагрузкиТестов(ИдентификаторВыбранногоЗагрузчика, Путь);
	ОбновитьКомандыИсторииЗагрузкиТестов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоТестов(РодительскаяСтрокаДереваТестов, Знач КонтейнерДереваТестовЗагрузчика)
	СтрокаКонтейнера = РодительскаяСтрокаДереваТестов.ПолучитьЭлементы().Добавить();
	СтрокаКонтейнера.Имя = КонтейнерДереваТестовЗагрузчика.Имя;
	СтрокаКонтейнера.ИконкаУзла = КонтейнерДереваТестовЗагрузчика.ИконкаУзла;
	СтрокаКонтейнера.Ключ = КонтейнерДереваТестовЗагрузчика.Ключ;

	Для каждого ЭлементКоллекции Из КонтейнерДереваТестовЗагрузчика.Строки Цикл
		Если ЭлементКоллекции.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
			ЗаполнитьДеревоТестов(СтрокаКонтейнера, ЭлементКоллекции);
		ИначеЕсли ЭлементКоллекции.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
			СтрокаЭлемента = СтрокаКонтейнера.ПолучитьЭлементы().Добавить();
			СтрокаЭлемента.Имя = ЭлементКоллекции.Представление;
			СтрокаЭлемента.Путь = ЭлементКоллекции.Путь;
			СтрокаЭлемента.ИконкаУзла = ЭлементКоллекции.ИконкаУзла;
			СтрокаЭлемента.Ключ = ЭлементКоллекции.Ключ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИменаИПредставлениеТестов(Знач КонтейнерДереваТестовЗагрузчика)

	НовоеИмя = ПредставлениеТеста(КонтейнерДереваТестовЗагрузчика.Имя);
	КонтейнерДереваТестовЗагрузчика.Имя = НовоеИмя;
	Отладка(СтрШаблон_("КонтейнерДереваТестовЗагрузчика.Имя %1, Новое имя %2", КонтейнерДереваТестовЗагрузчика.Имя, НовоеИмя));

	Для каждого ЭлементКоллекции Из КонтейнерДереваТестовЗагрузчика.Строки Цикл
		Если ЭлементКоллекции.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
			ОбновитьИменаИПредставлениеТестов(ЭлементКоллекции);
		ИначеЕсли ЭлементКоллекции.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
			НовоеИмя = ПредставлениеТеста(ЭлементКоллекции.Представление);
			ЭлементКоллекции.Представление = НовоеИмя;
			Отладка(СтрШаблон_("ЭлементКоллекции.Представление %1, Новое представление %2", ЭлементКоллекции.Представление, НовоеИмя));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеТеста(Знач ПредставлениеТеста)

	Если Объект.Настройки.Свойство("ДобавлятьИмяПользователяВПредставлениеТеста") И
		Объект.Настройки.ДобавлятьИмяПользователяВПредставлениеТеста Тогда

			ПредставлениеТеста = СтрШаблон_("%1 - <%2>", ПредставлениеТеста, ИмяПользователя());
	КонецЕсли;
	Возврат ПредставлениеТеста;
КонецФункции

&НаКлиенте
Функция ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если КоллекцияСтрок.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	ОбщееКоличествоТестов = 0;
	Для каждого СтрокаДерева из КоллекцияСтрок Цикл
		КоличествоТестовВСтроке = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = КоличествоТестовВСтроке;
		ОбщееКоличествоТестов = ОбщееКоличествоТестов + КоличествоТестовВСтроке;
	КонецЦикла;

	Возврат ОбщееКоличествоТестов;
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокиДерева(Знач ВключаяПодчиненные = Ложь)
	Для каждого СтрокаДерева из ДеревоТестов.ПолучитьЭлементы() Цикл
		Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоТестов.Развернуть(Идентификатор, ВключаяПодчиненные);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоТестовНаОснованииРезультатовТестирования(УзелДереваТестов, Знач РезультатТестирования)
	УзелДереваТестов.Состояние = РезультатТестирования.Состояние;
	УзелДереваТестов.ВремяВыполнения = РезультатТестирования.ВремяВыполнения;
	Если РезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
		Для каждого ДочернийРезультатТестирования Из РезультатТестирования.Строки Цикл
			ДочернийУзелДереваТестов = НайтиСтрокуВДеревеТестовПоКлючу(УзелДереваТестов, ДочернийРезультатТестирования.Ключ);
			ОбновитьДеревоТестовНаОснованииРезультатовТестирования(ДочернийУзелДереваТестов, ДочернийРезультатТестирования);
		КонецЦикла;
	ИначеЕсли РезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
		Если РезультатТестирования.Свойство("Сообщение") И ЗначениеЗаполнено(РезультатТестирования.Сообщение) Тогда
			Сообщить(РезультатТестирования.ПодробноеСообщение, СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуВДеревеТестовПоКлючу(УзелДереваТестов, Знач Ключ)
	Результат = Неопределено;
	Для каждого ЭлементКоллекции Из УзелДереваТестов.ПолучитьЭлементы() Цикл
		Если ЭлементКоллекции.Ключ = Ключ Тогда
			Результат = ЭлементКоллекции;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции
// } Работа с деревом тестов

// { Выполнение тестов
&НаКлиенте
Функция ПолучитьКоличествоТестовыхМетодов(Знач КонтейнерДереваТестов, Знач Фильтр = Неопределено) Экспорт
	Возврат ПолучитьКоличествоТестовыхМетодовНаСервере(КонтейнерДереваТестов, Фильтр);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоТестовыхМетодовНаСервере(Знач КонтейнерДереваТестов, Знач Фильтр)
	Возврат ЭтотОбъектНаСервере().ПолучитьКоличествоТестовыхМетодов(КонтейнерДереваТестов, Фильтр);
КонецФункции

&НаКлиенте
Функция ВыполнитьТесты(Знач Загрузчик, Знач КонтейнерДереваТестов, Знач Фильтр = Неопределено, Знач Подписчик = Неопределено, ИерархияИсполнения = Неопределено, ПараметрыПотоковыхОтчетов = Неопределено) Экспорт

	Родитель = Новый Структура("Родитель, Ключ, Тип, Имя", ИерархияИсполнения);
	ЗаполнитьЗначенияСвойств(Родитель, КонтейнерДереваТестов, "Ключ, Тип, Имя");

	РезультатТестирования = СоздатьКонтейнерРезультатовТестирования(КонтейнерДереваТестов);
	ФильтрДляДочернихУзлов = Неопределено;
	Если Не УзелДереваТестовУдовлетворяетФильтру(КонтейнерДереваТестов, Фильтр) Тогда
		ФильтрДляДочернихУзлов = Фильтр;
	КонецЕсли;

	ПутьИзКонтейнера = КонтейнерДереваТестов.Путь;

	ВывестиСообщениеВЛогФайл("");
	ВывестиСообщениеВЛогФайл(".  ==>> набор тестов " + КонтейнерДереваТестов.Имя);

	Если ПутьИзКонтейнера <> "" Тогда
		КонтекстВыполненияДляКонтейнера = ПолучитьКонтекстВыполненияПоПути(Загрузчик, ПутьИзКонтейнера);
	КонецЕсли;

	Если КонтейнерДереваТестов.СлучайныйПорядокВыполнения Тогда
		СтрокиКонтейнера = ПеремешатьМассив(КонтейнерДереваТестов.Строки);
	Иначе
		СтрокиКонтейнера = КонтейнерДереваТестов.Строки;
	КонецЕсли;

	Для каждого ДочернийУзел Из СтрокиКонтейнера Цикл
		ДочернийРезультатТестирования = Неопределено;
		Если ДочернийУзел.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
			ДочернийРезультатТестирования = ВыполнитьТесты(Загрузчик, ДочернийУзел, ФильтрДляДочернихУзлов, Подписчик, Родитель, ПараметрыПотоковыхОтчетов);
		ИначеЕсли ДочернийУзел.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
			Если УзелДереваТестовУдовлетворяетФильтру(ДочернийУзел, ФильтрДляДочернихУзлов) Тогда

				ВывестиСообщениеВЛогФайл(".    -->> тест " + ДочернийУзел.Представление);

				Если ПутьИзКонтейнера = ДочернийУзел.Путь Тогда
					КонтекстВыполнения = КонтекстВыполненияДляКонтейнера;
				Иначе
					КонтекстВыполнения = ПолучитьКонтекстВыполненияПоПути(Загрузчик, ДочернийУзел.Путь);
					// Заполняем служебные поля, если они имеются
					Если ПеременнаяСодержитСвойство(КонтекстВыполнения, "ИспользуемыйПрефиксПодсистемы") Тогда
						КонтекстВыполнения.ИспользуемыйПрефиксПодсистемы = Объект.ИспользуемыйПрефиксПодсистемы;
					КонецЕсли;
				КонецЕсли;
				Объект.ТекущийКонтейнер = КонтейнерДереваТестов;
				ДочернийРезультатТестирования = ВыполнитьТестовыйМетод(КонтекстВыполнения, ДочернийУзел);
				КонтейнерДереваТестов.Контекст = Объект.ТекущийКонтейнер.Контекст;

				Если Подписчик <> Неопределено Тогда
					ОповеститьОСобытии(Подписчик, Объект.ВозможныеСобытия.ВыполненТестовыйМетод, ДочернийРезультатТестирования);
				КонецЕсли;

				ДочернийРезультатТестирования.Вставить("Родитель", Родитель);

				Если ПараметрыПотоковыхОтчетов <> Неопределено Тогда
					Для Каждого Параметр Из ПараметрыПотоковыхОтчетов Цикл
						ПотоковыйВывод = Плагин(Параметр[0]);
						Путь = Параметр[1];
						ПотоковыйВывод.ЗаписатьРезультатТеста(ЭтаФорма, ДочернийРезультатТестирования, Путь);
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		Если ДочернийРезультатТестирования <> Неопределено Тогда
			РезультатТестирования.Строки.Добавить(ДочернийРезультатТестирования);
			РезультатТестирования.Состояние = ВыбратьХудшееСостояниеВыполненияТестов(РезультатТестирования.Состояние, ДочернийРезультатТестирования.Состояние);
			ЗаполнитьДанныеСтатистики(РезультатТестирования, ДочернийРезультатТестирования);
			Если Не КонтейнерДереваТестов.ПродолжитьВыполнениеПослеПаденияТеста И ДочернийРезультатТестирования.Состояние <> Объект.СостоянияТестов.Пройден Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если РезультатТестирования.Строки.Количество() = 0 Тогда
		РезультатТестирования = Неопределено;
	Иначе

		Если Не КонтейнерДереваТестов.СлучайныйПорядокВыполнения И ПутьИзКонтейнера <> "" И РезультатТестирования.Состояние <> Объект.СостоянияТестов.Пройден Тогда
			ЭлементДеструктор = КонтейнерДереваТестов.ЭлементДеструктор;

			Если ЭлементДеструктор <> Неопределено И Строка(ДочернийРезультатТестирования.Ключ) <> Строка(ЭлементДеструктор.Ключ) Тогда

				НовыйДочернийРезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДеструктор);
				НовыйДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.Пройден;

				Попытка
					
					ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(КонтекстВыполненияДляКонтейнера, ЭлементДеструктор.ИмяМетода);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки_(ИнформацияОбОшибке);
					НовыйДочернийРезультатТестирования.Сообщение          = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
					НовыйДочернийРезультатТестирования.ПодробноеСообщение = ПодробныйТекстОшибки;

					Если ЭтоОшибкаПроверки(ПодробныйТекстОшибки) Тогда
						НовыйДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан;
					Иначе
						НовыйДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
					КонецЕсли;
					
				КонецПопытки;

				РезультатТестирования.Строки.Добавить(НовыйДочернийРезультатТестирования);
				РезультатТестирования.Состояние = ВыбратьХудшееСостояниеВыполненияТестов(РезультатТестирования.Состояние, ДочернийРезультатТестирования.Состояние);
				ЗаполнитьДанныеСтатистики(РезультатТестирования, ДочернийРезультатТестирования);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Функция УзелДереваТестовУдовлетворяетФильтру(Знач УзелДереваТестов, Знач Фильтр)
	Возврат (Фильтр = Неопределено) Или (Фильтр.Найти(УзелДереваТестов.Ключ) <> Неопределено);
КонецФункции

&НаКлиенте
Функция ПолучитьКонтекстВыполненияПоПути(Знач Загрузчик, Знач Путь)
	КонтекстВыполнения = Загрузчик.ПолучитьКонтекстПоПути(ЭтаФорма, Путь);

	Возврат КонтекстВыполнения;
КонецФункции

&НаКлиенте
Функция ЭтоСерверныйКонтекстВыполнения(Знач КонтекстВыполнения)
	Результат = ТипЗнч(КонтекстВыполнения) = Тип("ФиксированнаяСтруктура");

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеСтатистики(РезультатТестирования, Знач ДочернийРезультатТестирования)
	Если ДочернийРезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Контейнер Тогда
		РезультатТестирования.КоличествоТестов = РезультатТестирования.КоличествоТестов + ДочернийРезультатТестирования.КоличествоТестов;
		РезультатТестирования.КоличествоСломанныхТестов = РезультатТестирования.КоличествоСломанныхТестов + ДочернийРезультатТестирования.КоличествоСломанныхТестов;
		РезультатТестирования.КоличествоНеРеализованныхТестов = РезультатТестирования.КоличествоНеРеализованныхТестов + ДочернийРезультатТестирования.КоличествоНеРеализованныхТестов;
		РезультатТестирования.КоличествоОшибочныхТестов = РезультатТестирования.КоличествоОшибочныхТестов + ДочернийРезультатТестирования.КоличествоОшибочныхТестов;

	ИначеЕсли ДочернийРезультатТестирования.Тип = Объект.ТипыУзловДереваТестов.Элемент Тогда
		РезультатТестирования.КоличествоТестов = РезультатТестирования.КоличествоТестов + 1;
		Если ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан Тогда
			РезультатТестирования.КоличествоСломанныхТестов = РезультатТестирования.КоличествоСломанныхТестов + 1;
		ИначеЕсли ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован Тогда
			РезультатТестирования.КоличествоНеРеализованныхТестов = РезультатТестирования.КоличествоНеРеализованныхТестов + 1;
		ИначеЕсли ДочернийРезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка Тогда
			РезультатТестирования.КоличествоОшибочныхТестов = РезультатТестирования.КоличествоОшибочныхТестов + 1;
		КонецЕсли;
	КонецЕсли;
	РезультатТестирования.ВремяВыполнения = РезультатТестирования.ВремяВыполнения + ДочернийРезультатТестирования.ВремяВыполнения;
КонецПроцедуры

&НаКлиенте
Функция ВыбратьХудшееСостояниеВыполненияТестов(Знач Состояние1, Знач Состояние2)
	Возврат Макс(Состояние1, Состояние2);
КонецФункции

&НаКлиенте
Функция ТестУпалИлиНеРеализован(Знач Состояние)
	СостояниеПройден = Объект.СостоянияТестов.Пройден;
	Возврат ВыбратьХудшееСостояниеВыполненияТестов(Состояние, СостояниеПройден) <> СостояниеПройден;
КонецФункции

&НаКлиенте
Функция ВыполнитьТестовыйМетод(Знач КонтекстВыполнения, Знач ЭлементДереваТестов)
	Перем РезультатТестирования;

	Если ЭтоСерверныйКонтекстВыполнения(КонтекстВыполнения) Тогда
		РезультатТестирования = ВыделитьТестовыйМетодНаСервереСОбработкойОшибокПередачиМеждуНаКлиентомИСервером(КонтекстВыполнения, ЭлементДереваТестов);
	Иначе
		РезультатТестирования = ВыполнитьТестовыйМетодНаКлиенте(КонтекстВыполнения, ЭлементДереваТестов);
	КонецЕсли;

	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Функция ВыполнитьТестовыйМетодНаКлиенте(Знач КонтекстВыполнения, Знач ЭлементДереваТестов) Экспорт

	РезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);
	НачалоВыполнения      = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Если ВыполнитьИнициализациюКонтекста(КонтекстВыполнения, РезультатТестирования) Тогда

		Попытка
			ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(КонтекстВыполнения, ЭлементДереваТестов.ПередЗапускомТеста);
			ВыполнитьПроцедуруКонтекста(КонтекстВыполнения, ЭлементДереваТестов.ИмяМетода, ЭлементДереваТестов.Параметры);

			РезультатТестирования.Состояние = Объект.СостоянияТестов.Пройден;
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки_(ИнформацияОбОшибке);
			КраткийТекстОшибки   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			
			Если ЕстьОшибка_МетодОбъектаНеОбнаружен(КраткийТекстОшибки, ЭлементДереваТестов.ИмяМетода) Тогда
				
				РезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован;
				Сообщение = НСтр("ru = 'Отсутствует реализация тестового метода (%1).'");
				РезультатТестирования.Сообщение = СтрЗаменить(Сообщение, "%1", ЭлементДереваТестов.ИмяМетода);
				
			Иначе
				
				РезультатТестирования.Сообщение          = КраткийТекстОшибки;
				РезультатТестирования.ПодробноеСообщение = ПодробныйТекстОшибки;
				
				Если ЭтоОшибкаПроверки(КраткийТекстОшибки) Тогда
					РезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан;
				ИначеЕсли ЭтоПропущенныйТест(КраткийТекстОшибки) Тогда
					РезультатТестирования.Состояние = Объект.СостоянияТестов.НеРеализован;
				Иначе
					РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
				КонецЕсли;
				
			КонецЕсли;

			ВывестиСообщениеВЛогФайл(" ");
			ВывестиСообщениеВЛогФайл("  ОШИБКА:");
			ВывестиСообщениеВЛогФайл(РезультатТестирования.ПодробноеСообщение);
			ВывестиСообщениеВЛогФайл("  =======:");
			ВывестиСообщениеВЛогФайл(" ");
		КонецПопытки;
		
		Попытка
			
			ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(КонтекстВыполнения, ЭлементДереваТестов.ПослеЗапускаТеста);
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			РезультатТестирования.Сообщение          = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			РезультатТестирования.ПодробноеСообщение = ПодробноеПредставлениеОшибки_(ИнформацияОбОшибке);

			КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			
			Если ЭтоОшибкаПроверки(КраткийТекстОшибки) Тогда
				РезультатТестирования.Состояние = Объект.СостоянияТестов.Сломан;
			Иначе
				РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
			КонецЕсли;

			ВывестиОписаниеОшибкиВЛогФайл(РезультатТестирования);

		КонецПопытки;
		
	КонецЕсли;

	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатТестирования.ВремяВыполнения = (ОкончаниеВыполнения - НачалоВыполнения) / 1000;
	РезультатТестирования.ВремяНачала = НачалоВыполнения;
	РезультатТестирования.ВремяОкончания = ОкончаниеВыполнения;

	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Функция ВыполнитьИнициализациюКонтекста(КонтекстВыполнения, РезультатТестирования)
	Попытка
		КонтекстВыполнения.Инициализация(ЭтаФорма);
		Возврат Истина;
	Исключение
		РезультатТестирования.Сообщение = ПодробноеПредставлениеОшибки_(ИнформацияОбОшибке());
		РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
	КонецПопытки;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ВыделитьТестовыйМетодНаСервереСОбработкойОшибокПередачиМеждуНаКлиентомИСервером(Знач КонтекстВыполнения, Знач ЭлементДереваТестов)

	Перем ПолныйТекстОшибки, РезультатТестирования;

	МассивСообщений = Новый Массив;

	Попытка
		
		РезультатТестирования = ВыполнитьТестовыйМетодНаСервере(КонтекстВыполнения, ЭлементДереваТестов, МассивСообщений);
		
		Если ТестУпалИлиНеРеализован(РезультатТестирования.Состояние) Тогда
			ВывестиНакопленныеСообщенияОтСервера(МассивСообщений);
		Иначе
			ВывестиНакопленныеСообщенияОтСервераВРежимеОтладки(МассивСообщений);
		КонецЕсли;

	Исключение
		
		РезультатТестирования = СоздатьЭлементРезультатовТестирования(ЭлементДереваТестов);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		РезультатТестирования.Сообщение          = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		РезультатТестирования.ПодробноеСообщение = ПодробноеПредставлениеОшибки_(ИнформацияОбОшибке);
		РезультатТестирования.Состояние = Объект.СостоянияТестов.НеизвестнаяОшибка;
		
		ВывестиНакопленныеСообщенияОтСервераВРежимеОтладки(МассивСообщений);
		ВывестиОписаниеОшибкиВЛогФайл(РезультатТестирования);
		
	КонецПопытки;
	
	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Процедура ВывестиНакопленныеСообщенияОтСервераВРежимеОтладки(Знач МассивСообщений) Экспорт
	Если Не Объект.ФлагОтладки Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиНакопленныеСообщенияОтСервера(МассивСообщений);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиНакопленныеСообщенияОтСервера(Знач МассивСообщений) Экспорт
	
	Для Каждого Сообщение Из МассивСообщений Цикл
		Сообщение.Текст = ПолучитьСообщениеБезСтекаВызововОтБраузераТестов(Сообщение.Текст);

		Сообщение.Сообщить();
		ВывестиСообщениеВЛогФайл(Сообщение.Текст);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьТестовыйМетодНаСервере(Знач ОписаниеКонтекста, Знач ЭлементДереваТестов, МассивСообщений)
	ОбъектНаСервере = ЭтотОбъектНаСервере();

	Если ОписаниеКонтекста.ЭтоОбщийМодуль Тогда
		
		УстановитьБезопасныйРежим(Истина);
		КонтекстВыполнения = Вычислить(ОписаниеКонтекста.Идентификатор);
		УстановитьБезопасныйРежим(Ложь);

	Иначе
	
		Если ОписаниеКонтекста.ЭтоВнутренняяОбработка Тогда
			ЭтоОтчет = (Метаданные.Отчеты.Найти(ОписаниеКонтекста.Идентификатор) <> Неопределено);
		Иначе
			ФайлОбработки = Новый Файл(ЭлементДереваТестов.Путь);
			ЭтоОтчет = (НРег(ФайлОбработки.Расширение) = ".erf");
		КонецЕсли;

		КонтекстВыполнения = СоздатьОбъектПлагина(ОписаниеКонтекста.Идентификатор, 
			ОписаниеКонтекста.ЭтоВнутренняяОбработка, ЭтоОтчет);
		КонтекстВыполнения.Инициализация(ОбъектНаСервере);

		// Заполняем служебные поля, если они имеются
		ЗаполнитьСвойствоПриНаличии(КонтекстВыполнения, "ПутьКФайлуПолный", ЭлементДереваТестов.Путь);
	
	КонецЕсли;

	РезультатТестирования = ОбъектНаСервере.ВыполнитьТестовыйМетод(КонтекстВыполнения, ЭлементДереваТестов);
	
	МассивСообщений = ПолучитьСообщенияПользователю(Истина);

	Возврат РезультатТестирования;
КонецФункции

&НаКлиенте
Процедура ВыполнитьНеобязательнуюПроцедуруТестовогоСлучая(Знач КонтекстВыполнения, Знач ИмяПроцедуры)
	Попытка
		ВыполнитьПроцедуруКонтекста(КонтекстВыполнения, ИмяПроцедуры);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки_(ИнформацияОбОшибке());
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяПроцедуры) Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруКонтекста(Знач КонтекстВыполнения, Знач ПроцедураКонтекста, Знач Параметры = Неопределено)
	
	СтрокаПараметров = СформироватьСтрокуПараметров(Параметры);
	ДополнитьСтрокуПараметровКонтекстаОбщегоМодуля(КонтекстВыполнения, СтрокаПараметров);
	
	ИсполняемыйКод = "КонтекстВыполнения." + ПроцедураКонтекста + "(" + СтрокаПараметров + ");";
	Выполнить(ИсполняемыйКод);

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтрокуПараметровКонтекстаОбщегоМодуля(КонтекстВыполнения, СтрокаПараметров)
	
	Если ТипЗнч(КонтекстВыполнения) = Тип("ОбщийМодуль") Тогда
		
		Если ПустаяСтрока(СтрокаПараметров) Тогда
			СтрокаПараметров = "ЭтаФорма";
		Иначе
			СтрокаПараметров = "ЭтаФорма, " + СтрокаПараметров;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтрокуПараметров(Знач Параметры)
	СтрокаПараметров = "";
	Если ТипЗнч(Параметры) = Тип("Массив") Тогда
		Для Сч = 0 По Параметры.Количество() - 1 Цикл
			СтрокаПараметров = СтрокаПараметров + ",Параметры[" + Формат(Сч, "ЧН=0; ЧГ=") + "]";
		КонецЦикла;
	КонецЕсли;

	Возврат Сред(СтрокаПараметров, 2);
КонецФункции

&НаКлиенте
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(Знач ТекстОшибки, Знач ИмяМетода)
	Результат = Ложь;
	Если Найти(ТекстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0
		ИЛИ Найти(ТекстОшибки, "Object method not found (" + ИмяМетода + ")") > 0  Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЭтоОшибкаПроверки(ТекстОшибки)

	Возврат Найти(ТекстОшибки, "["+ Объект.СтатусыРезультатаТестирования.ОшибкаПроверки + "]") = 1;

КонецФункции

&НаКлиенте
Функция ЭтоПропущенныйТест(ТекстОшибки)

	Возврат Найти(ТекстОшибки, "["+ Объект.СтатусыРезультатаТестирования.ТестПропущен + "]") > 0;

КонецФункции

&НаКлиенте
Процедура ВывестиОписаниеОшибкиВЛогФайл(Знач РезультатТестирования)

	Если РезультатТестирования.Состояние <> Объект.СостоянияТестов.НеРеализован Тогда

		ВывестиСообщениеВЛогФайл(" ");
		ВывестиСообщениеВЛогФайл("  ОШИБКА:");
		ВывестиСообщениеВЛогФайл(РезультатТестирования.ПодробноеСообщение);
		ВывестиСообщениеВЛогФайл("  =======:");
		ВывестиСообщениеВЛогФайл(" ");

	КонецЕсли;

КонецПроцедуры

// } Выполнение тестов

// { Генерация результатов тестирования
&НаКлиенте
Функция СоздатьКонтейнерРезультатовТестирования(Знач КонтейнерДереваТестов)
	ГруппаРезультатовТестирования = Новый Структура;
	ГруппаРезультатовТестирования.Вставить("Ключ", КонтейнерДереваТестов.Ключ);
	ГруппаРезультатовТестирования.Вставить("Тип", КонтейнерДереваТестов.Тип);
	ГруппаРезультатовТестирования.Вставить("Имя", КонтейнерДереваТестов.Имя);
	ГруппаРезультатовТестирования.Вставить("ИконкаУзла", КонтейнерДереваТестов.ИконкаУзла);
	ГруппаРезультатовТестирования.Вставить("Состояние", Объект.СостоянияТестов.НеВыполнен);
	ГруппаРезультатовТестирования.Вставить("КоличествоТестов", 0);
	ГруппаРезультатовТестирования.Вставить("КоличествоСломанныхТестов", 0);
	ГруппаРезультатовТестирования.Вставить("КоличествоОшибочныхТестов", 0);
	ГруппаРезультатовТестирования.Вставить("КоличествоНеРеализованныхТестов", 0);
	ГруппаРезультатовТестирования.Вставить("ВремяВыполнения", 0);
	ГруппаРезультатовТестирования.Вставить("Строки", Новый Массив);

	Возврат ГруппаРезультатовТестирования;
КонецФункции

&НаКлиенте
Функция СоздатьЭлементРезультатовТестирования(Знач ЭлементДереваТестов)
	РезультатТестирования = Новый Структура;
	РезультатТестирования.Вставить("Ключ", ЭлементДереваТестов.Ключ);
	РезультатТестирования.Вставить("Тип", ЭлементДереваТестов.Тип);
	РезультатТестирования.Вставить("Путь", ЭлементДереваТестов.Путь);
	РезультатТестирования.Вставить("ИмяМетода", ЭлементДереваТестов.ИмяМетода);
	РезультатТестирования.Вставить("Представление", ЭлементДереваТестов.Представление);
	РезультатТестирования.Вставить("Параметры", ЭлементДереваТестов.Параметры);
	РезультатТестирования.Вставить("Состояние", Объект.СостоянияТестов.НеВыполнен);
	РезультатТестирования.Вставить("ВремяВыполнения", 0);
	РезультатТестирования.Вставить("ВремяНачала", 0);
	РезультатТестирования.Вставить("ВремяОкончания", 0);
	РезультатТестирования.Вставить("Сообщение", "");
	РезультатТестирования.Вставить("ПодробноеСообщение", "");

	Возврат РезультатТестирования;
КонецФункции
// } Генерация результатов тестирования

// { История загрузки тестов
&НаКлиенте
Процедура СохранитьВИсториюЗагрузкиТестов(Знач ИдентификаторЗагрузчика, Знач Путь) Экспорт
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	Для Сч = - ИсторияЗагрузкиТестов.Количество() + 1 По 0 Цикл
		Индекс = -Сч;
		ЭлементИстории = ИсторияЗагрузкиТестов[Индекс];
		Если ЭлементИстории.ИдентификаторЗагрузчика = ИдентификаторЗагрузчика И ЭлементИстории.Путь = Путь Тогда
			ИсторияЗагрузкиТестов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;

	ИсторияЗагрузкиТестов.Вставить(0, Новый Структура("ИдентификаторЗагрузчика, Путь", ИдентификаторЗагрузчика, Путь));
	ДлинаИстории = 10;
	Пока ИсторияЗагрузкиТестов.Количество() > ДлинаИстории Цикл
		ИсторияЗагрузкиТестов.Удалить(ДлинаИстории);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыИсторииЗагрузкиТестов()
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	ПодменюИсторияЗагрузкиТестов = Элементы.ПодменюИсторияЗагрузкиТестов;
	Для Сч = 0 По ИсторияЗагрузкиТестов.Количество() - 1 Цикл
		ИмяКоманды = "История_" + Сч;
		НайденнаяКоманда = Команды.Найти(ИмяКоманды);
		Если НайденнаяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "Подключаемый_ЗагрузитьТестыИзИстории";
			ПунктМеню = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ПодменюИсторияЗагрузкиТестов);
			ПунктМеню.ИмяКоманды = НоваяКоманда.Имя;
		Иначе
			ПунктМеню = Элементы.Найти(ИмяКоманды);
		КонецЕсли;
		ЭлементИстории = ИсторияЗагрузкиТестов[Сч];
		ПунктМеню.Заголовок = ЭлементИстории.ИдентификаторЗагрузчика + ": " + ЭлементИстории.Путь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьТестыИзИстории(Команда)
	ИндексИстории = Число(Сред(Команда.Имя, Найти(Команда.Имя, "_") + 1));
	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	ЭлементИстории = ИсторияЗагрузкиТестов[ИндексИстории];
	ЗагрузитьТестИзИстории(ЭлементИстории);
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьПоследниеТестыПоИстории(Команда = Неопределено)

	ПерезагрузитьНастройкиИзФайла();

	ИсторияЗагрузкиТестов = Объект.Настройки.ИсторияЗагрузкиТестов;
	Если ИсторияЗагрузкиТестов.Количество() > 0 Тогда
		ЭлементИстории = ИсторияЗагрузкиТестов[0];
		Попытка
			ЗагрузитьТестИзИстории(ЭлементИстории);
		Исключение
			Сообщить("Не удалось загрузить тесты из истории <" + ЭлементИстории.ИдентификаторЗагрузчика + ": " +
				ЭлементИстории.Путь + ">" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестИзИстории(Знач ЭлементИстории)

	Перем ПутьТестов;

	СброситьПодключенныеВнешниеОбработки();

	ИдентификаторЗагрузчика = ЭлементИстории.ИдентификаторЗагрузчика;
	ПутьТестов = ЭлементИстории.Путь;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		НачатьЗагрузкуТестов(Неопределено, ИдентификаторЗагрузчика, ПутьТестов);
	Иначе
		ЗагрузитьТесты(ИдентификаторЗагрузчика, ПутьТестов);
	КонецЕсли;

КонецПроцедуры

Функция ПутьФайлаНастроек() Экспорт
	Возврат Объект.ПутьФайлаНастроек;
КонецФункции
// } История загрузки тестов

// { Пакетный запуск
&НаКлиенте
Процедура ВыполнитьПакетныйЗапуск(Знач ПараметрЗапуска)
	Перем РезультатыТестирования;

	Попытка

		ПарсерКоманднойСтроки = Плагин("ПарсерКоманднойСтроки");
		ПараметрыЗапуска = ПарсерКоманднойСтроки.Разобрать(ПараметрЗапуска);

		ВозможныеКлючи = ПарсерКоманднойСтроки.Объект.ВозможныеКлючи;

		Если ПараметрыЗапуска.Свойство(ВозможныеКлючи.debug) Тогда
			Объект.ФлагОтладки = Истина;
		КонецЕсли;

		Если Объект.ФлагОтладки Тогда
			Отладка("");
			Отладка("ПараметрЗапуска <" + ПараметрЗапуска + ">");
			Отладка("Переданные параметры:");
			Для Каждого КлючЗначение Из ПараметрыЗапуска Цикл
				Значение = КлючЗначение.Значение;
				Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
					Отладка("Ключ <" + КлючЗначение.Ключ + ">, количество = <" + Значение.Количество() + ">");
					Для каждого Элемент Из Значение  Цикл
						Отладка("  Значение <" + Элемент + ">");
					КонецЦикла;
				Иначе
					Отладка("Ключ <" + КлючЗначение.Ключ + ">, Значение = <" + Значение + ">");
				КонецЕсли;
			КонецЦикла;
			Отладка("");
		КонецЕсли;

		Параметры_xddConfig = Неопределено;
		Если ПараметрыЗапуска.Свойство(ВозможныеКлючи.xddConfig, Параметры_xddConfig) Тогда
			Объект.ПутьФайлаНастроек = Параметры_xddConfig[0];
		КонецЕсли;

		Параметры_КаталогПроекта = Неопределено;
		Если ПараметрыЗапуска.Свойство(ВозможныеКлючи.workspaceRoot, Параметры_КаталогПроекта) Тогда
			Объект.КаталогПроекта = Параметры_КаталогПроекта[0];
		КонецЕсли;

		Параметры_xddTestClient = Неопределено;
		Если ПараметрыЗапуска.Свойство(ВозможныеКлючи.xddTestClient, Параметры_xddTestClient) Тогда
			Параметры_xddTestClientAdditional = Неопределено;
			ПараметрыЗапуска.Свойство(ВозможныеКлючи.xddTestClientAdditional, Параметры_xddTestClientAdditional);

			ТестКлиенты = Плагин("ТестКлиенты");
			ТестКлиенты.ПодключитьТестКлиент_ПакетныйРежим(Параметры_xddTestClient, Параметры_xddTestClientAdditional);
		КонецЕсли;

		НастройкиШагов = Новый Структура;
		НастройкиШагов.Вставить("Параметры_xddRun");
		НастройкиШагов.Вставить("Параметры_xddReport");
		НастройкиШагов.Вставить("Параметры_xddStreamReport");
		НастройкиШагов.Вставить("Параметры_xddExitCodePath");
		НастройкиШагов.Вставить("xddShutdown");
		НастройкиШагов.Вставить("ТестКлиенты", ТестКлиенты);

		ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddRun, НастройкиШагов.Параметры_xddRun);
		ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddExitCodePath, НастройкиШагов.Параметры_xddExitCodePath);
		НастройкиШагов.xddShutdown = ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddShutdown);

		СобратьНастройкиОтчетовТестирования(НастройкиШагов, ПараметрыЗапуска);

		Если Не ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВыполнитьПакетныйЗапускСинхронно(НастройкиШагов);
		Иначе
			ВыполнитьПакетныйЗапускАсинхронно(НастройкиШагов)
		КонецЕсли;

	Исключение
		Инфо = ИнформацияОбОшибке();
		ОписаниеОшибки = "Ошибка загрузки и выполнения тестов в пакетном режиме
		|" + ПодробноеПредставлениеОшибки(Инфо);

		ЗафиксироватьОшибкуВЖурналеРегистрации("ПакетныйРежим", ОписаниеОшибки);

		ВывестиСообщение(ОписаниеОшибки, СтатусСообщения.ОченьВажное);

		ЗавершитьРаботуСистемы(Ложь);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура СобратьНастройкиОтчетовТестирования(НастройкиШагов, ПараметрыЗапуска)

	ПарсерКоманднойСтроки = Плагин("ПарсерКоманднойСтроки");

	Параметры_xddReport = Новый Массив;
	Параметры_xddStreamReport = Новый Массив;

	МассивДанныхОтчетов = Неопределено;
	Если ПараметрыЗапуска.Свойство(ПарсерКоманднойСтроки.Объект.ВозможныеКлючи.xddReport, МассивДанныхОтчетов) Тогда
		ПереданаОднаНастройкаОтчета = МассивДанныхОтчетов.Количество() > 1 И ТипЗнч(МассивДанныхОтчетов[0]) = Тип("Строка");
		Если ПереданаОднаНастройкаОтчета Тогда
			ВремМассивДанныхОтчетов = Новый Массив;
			ВремМассивДанныхОтчетов.Добавить(МассивДанныхОтчетов);
			МассивДанныхОтчетов = ВремМассивДанныхОтчетов;
		КонецЕсли;

		Для Каждого ГенераторОтчета Из МассивДанныхОтчетов Цикл
			Параметры_xddReport.Добавить(ГенераторОтчета);
			ОписаниеПлагина = Плагин(ГенераторОтчета[0]).ОписаниеПлагина(ЭтаФорма, Объект.ТипыПлагинов);
			Если ОписаниеПлагина.Свойство("ПотоковыйВывод") И ОписаниеПлагина.ПотоковыйВывод Тогда
				Параметры_xddStreamReport.Добавить(ГенераторОтчета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НастройкиШагов.Параметры_xddReport = Новый ФиксированныйМассив(Параметры_xddReport);
	НастройкиШагов.Параметры_xddStreamReport = Новый ФиксированныйМассив(Параметры_xddStreamReport);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакетныйЗапускСинхронно(Знач ПараметрыЗапуска)

	Перем РезультатыТестирования;

	Если ПараметрыЗапуска.Параметры_xddRun <> Неопределено Тогда
		РезультатыТестирования = ЗагрузитьИВыполнитьТесты_ПакетныйРежим(ПараметрыЗапуска.Параметры_xddRun);
		Если РезультатыТестирования = Неопределено Тогда
			ВывестиСообщение("Не найдено результатов тестирования");
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(РезультатыТестирования) И ПараметрыЗапуска.Параметры_xddReport <> Неопределено Тогда
		СформироватьОтчетОТестированииИЭкспортировать_ПакетныйРежим(ПараметрыЗапуска.Параметры_xddReport, РезультатыТестирования);
	КонецЕсли;

	Если ПараметрыЗапуска.Параметры_xddExitCodePath <> Неопределено Тогда
		СформироватьФайлКодаВозврата(ПараметрыЗапуска.Параметры_xddExitCodePath, РезультатыТестирования);
	КонецЕсли;

	Если ПараметрыЗапуска.xddShutdown = Истина Тогда
		Если ПараметрыЗапуска.ТестКлиенты <> Неопределено Тогда
			ПараметрыЗапуска.ТестКлиенты.ЗавершитьВсеТестКлиенты();
		КонецЕсли;

		ПрекратитьРаботуСистемы();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакетныйЗапускАсинхронно(Знач ПараметрыЗапуска)
	ПервичнаяНастройка();

	Состояние = Новый Структура;
	Состояние.Вставить("НастройкиШагов", ПараметрыЗапуска);
	Состояние.Вставить("СледующийШаг");
	Состояние.Вставить("ТекущийШаг");
	Состояние.Вставить("РезультатыТестирования");

	Если ПараметрыЗапуска.Параметры_xddRun <> Неопределено Тогда
		Состояние.СледующийШаг = "ЗагрузитьТесты";
	ИначеЕсли ПараметрыЗапуска.xddShutdown = Истина Тогда
		Состояние.СледующийШаг = "ЗавершитьРаботу";
	Иначе
		ВызватьИсключение НСтр("ru = 'Vanessa-ADD: Я не знаю что мне делать. Нет приказа на выполнение тестов или закрытие.'");
	КонецЕсли;

	ВыполнитьШагПакетногоЗапуска(, Состояние);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШагПакетногоЗапуска(Знач РезультатПредыдущегоШага, Знач Состояние) Экспорт

	ОбработкаОповещения = АСинк().смв_НовыйОписаниеОповещения("ВыполнитьШагПакетногоЗапуска", ЭтаФорма, Состояние, "ВыполнитьШагПакетногоЗапускаИсключение", ЭтаФорма);
	Состояние.ТекущийШаг = Состояние.СледующийШаг;

	Если Состояние.СледующийШаг = "ЗагрузитьТесты" Тогда

		НачатьЗагрузкуТестовПакетныйРежим(ОбработкаОповещения);

	ИначеЕсли Состояние.СледующийШаг = "ЗапуститьТесты" Тогда

		НачатьВыполнениеТестов(РезультатПредыдущегоШага, ОбработкаОповещения);

	ИначеЕсли Состояние.СледующийШаг = "СоставитьОтчет" Тогда

		СоставитьОтчетОТестировании(РезультатПредыдущегоШага, ОбработкаОповещения);

	ИначеЕсли Состояние.СледующийШаг = "ЗавершитьРаботу" Тогда

		Если Состояние.НастройкиШагов.Параметры_xddExitCodePath <> Неопределено Тогда

			СформироватьФайлКодаВозврата(Состояние.НастройкиШагов.Параметры_xddExitCodePath, Состояние.РезультатыТестирования);

		КонецЕсли;

		ТестКлиенты = Состояние.НастройкиШагов.ТестКлиенты;
		Если ТестКлиенты = Неопределено Тогда
			ТестКлиенты = Плагин("ТестКлиенты");
		КонецЕсли;

		Если ТестКлиенты <> Неопределено Тогда

			ТестКлиенты.ЗавершитьВсеТестКлиенты();

		КонецЕсли;

		ПрекратитьРаботуСистемы();

	КонецЕсли;

КонецПроцедуры // ВыполнитьШагПакетногоЗапуска()

&НаКлиенте
Процедура ВыполнитьШагПакетногоЗапускаИсключение(Знач ИнформацияОбОшибке, СтандартнаяОбработка, Знач Состояние) Экспорт

	СтандартнаяОбработка = Ложь;

	ТекстОшибки = СтрШаблон_("Ошибка при асинхронном режиме пакетного запуска:
	|Состояние:
	|	Текущий шаг:  %1
	|	Следующий шаг:%2
	|	Исключение:   %3",
	Состояние.ТекущийШаг, Состояние.СледующийШаг, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

	ЗафиксироватьОшибкуВЖурналеРегистрации("xUnitFor1C.АсинхронныйПакетныйЗапуск", ТекстОшибки);
	Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуТестовПакетныйРежим(Знач ОбработкаОповещения)

	Параметры_xddRun = ОбработкаОповещения.ДополнительныеПараметры.НастройкиШагов.Параметры_xddRun;
	ИдентификаторЗагрузчика = Параметры_xddRun[0];
	Загрузчик = ЭтаФорма.Плагин(ИдентификаторЗагрузчика);

	ПутьКТестам = Параметры_xddRun[1];

	ОбработкаОповещения.ДополнительныеПараметры.СледующийШаг = "ЗапуститьТесты";
	ОбработкаОповещения.ДополнительныеПараметры.Вставить("Загрузчик", Загрузчик);
	Загрузчик.НачатьЗагрузку(ОбработкаОповещения, ЭтаФорма, ПутьКТестам);

КонецПроцедуры

&НаКлиенте
Процедура НачатьВыполнениеТестов(ДеревоТестовОтЗагрузчика, ОбработкаОповещения)

	Загрузчик = ОбработкаОповещения.ДополнительныеПараметры.Загрузчик;

	Параметры_xddStreamReport = Неопределено;
	ОбработкаОповещения.ДополнительныеПараметры.НастройкиШагов.Свойство("Параметры_xddStreamReport", Параметры_xddStreamReport);

	РезультатыТестирования = ЭтаФорма.ВыполнитьТесты(Загрузчик, ДеревоТестовОтЗагрузчика,,,,Параметры_xddStreamReport);

	Если РезультатыТестирования = Неопределено Тогда
		ВывестиСообщение("Не найдено результатов тестирования");
	КонецЕсли;

	ОбработкаОповещения.ДополнительныеПараметры.СледующийШаг = "СоставитьОтчет";
	ОбработкаОповещения.ДополнительныеПараметры.РезультатыТестирования = РезультатыТестирования;
	АСинк().смв_ВыполнитьОбработкуОповещения(ОбработкаОповещения, РезультатыТестирования);

КонецПроцедуры

&НаКлиенте
Процедура СоставитьОтчетОТестировании(РезультатыТестирования, ОбработкаОповещения)

	Параметры_xddReport = ОбработкаОповещения.ДополнительныеПараметры.НастройкиШагов.Параметры_xddReport;
	Если Не ЗначениеЗаполнено(РезультатыТестирования) или Параметры_xddReport = Неопределено Тогда
		// Отчет не нужен
		ОбработкаОповещения.ДополнительныеПараметры.СледующийШаг = "ЗавершитьРаботу";
		АСинк().смв_ВыполнитьОбработкуОповещения(ОбработкаОповещения, Неопределено);
		Возврат;
	КонецЕсли;

	Если Параметры_xddReport.Количество() > 0 И ТипЗнч(Параметры_xddReport[0]) <> Тип("ФиксированныйМассив") Тогда
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Параметры_xddReport);
		Параметры_xddReport = НовыйМассивПараметров;
	КонецЕсли;

	ЭкспортируемыеОтчеты = Новый Массив;

	Для Каждого ОчередныеПараметры Из Параметры_xddReport Цикл

		ИдентификаторГенератораОтчета	= ОчередныеПараметры[0];
		ГенераторОтчета					= ЭтаФорма.Плагин(ИдентификаторГенератораОтчета);
		Отчет							= ГенераторОтчета.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);
		ПутьКОтчету						= ОчередныеПараметры[1];

		НаборОтчетов = Отчет;
		Если ТипЗнч(НаборОтчетов) <> Тип("Массив") Тогда
			НовыйНаборОтчетов = Новый Массив;
			НовыйНаборОтчетов.Добавить(НаборОтчетов);
			НаборОтчетов = НовыйНаборОтчетов;
		КонецЕсли;

		СтрокаЭкспорта					= СтрокаЭкспортируемыхОтчетов();
		СтрокаЭкспорта.Отчет			= НаборОтчетов;
		СтрокаЭкспорта.Путь				= ПутьКОтчету;
		СтрокаЭкспорта.ГенераторОтчета	= ГенераторОтчета;
		СтрокаЭкспорта.ИдентификаторГенератораОтчета	= ИдентификаторГенератораОтчета;

		ЭкспортируемыеОтчеты.Добавить(СтрокаЭкспорта);

	КонецЦикла;

	ПараметрыДиспетчера = Новый Структура;
	ПараметрыДиспетчера.Вставить("ИндексВидаОтчета", 0);
	ПараметрыДиспетчера.Вставить("ИндексОтчета", 0);
	ПараметрыДиспетчера.Вставить("СписокОтчетов", ЭкспортируемыеОтчеты);
	ПараметрыДиспетчера.Вставить("Финализация", ОбработкаОповещения);

	ДиспетчерЭкспортаОтчетовАсинхронныйПакетныйРежим(, ПараметрыДиспетчера);

КонецПроцедуры

&НаКлиенте
Функция СтрокаЭкспортируемыхОтчетов()
	Возврат Новый Структура("Отчет,Путь,ГенераторОтчета,ИдентификаторГенератораОтчета");
КонецФункции

&НаКлиенте
Процедура ДиспетчерЭкспортаОтчетовАсинхронныйПакетныйРежим(Знач РезультатЭкспорта, Знач ПараметрыДиспетчера) Экспорт

	СписокОтчетов = ПараметрыДиспетчера.СписокОтчетов;

	Если ПараметрыДиспетчера.ИндексВидаОтчета < СписокОтчетов.Количество() Тогда
		СтрокаЭкспорта = СписокОтчетов[ПараметрыДиспетчера.ИндексВидаОтчета];
		ГенераторОтчета = СтрокаЭкспорта.генераторОтчета;
		ИдентификаторГенератораОтчета = СтрокаЭкспорта.ИдентификаторГенератораОтчета;

		ПутьКОтчету = СтрокаЭкспорта.Путь;

		ОписаниеОшибки = СтрШаблон_("УФ: Формируем отчет тестирования - путь %1", ПутьКОтчету);
		ЗафиксироватьОшибкуВЖурналеРегистрации(ИдентификаторГенератораОтчета, ОписаниеОшибки, Истина);

		НаборОтчетов = СтрокаЭкспорта.Отчет;

		Если ПараметрыДиспетчера.ИндексОтчета < НаборОтчетов.Количество() Тогда

			Отчет = НаборОтчетов[ПараметрыДиспетчера.ИндексОтчета];
			ПараметрыДиспетчера.ИндексОтчета = ПараметрыДиспетчера.ИндексОтчета + 1;

		КонецЕсли;

		Если ПараметрыДиспетчера.ИндексОтчета >= НаборОтчетов.Количество() Тогда

			ПоказатьПутьОтчетТестирования(ПараметрыДиспетчера, СписокОтчетов);

			ПараметрыДиспетчера.ИндексВидаОтчета = ПараметрыДиспетчера.ИндексВидаОтчета + 1;
			ПараметрыДиспетчера.ИндексОтчета = 0;

		КонецЕсли;

		ОбработчикЭкспорта = АСинк().смв_НовыйОписаниеОповещения("ДиспетчерЭкспортаОтчетовАсинхронныйПакетныйРежим", ЭтаФорма, ПараметрыДиспетчера,
																	"ДиспетчерЭкспортаОтчетовАсинхронныйПакетныйРежимИсключение", ЭтаФорма);

		ОписаниеПлагина = ГенераторОтчета.ОписаниеПлагина(ЭтаФорма, Объект.ТипыПлагинов);
		Если ОписаниеПлагина = Неопределено Тогда
			ВызватьИсключение "У Генератора отчета не задано описание - " + ИдентификаторГенератораОтчета;
		КонецЕсли;

		ЕстьПотоковыйВывод = ОписаниеПлагина.Свойство("ПотоковыйВывод") И ОписаниеПлагина.ПотоковыйВывод;
		ФормироватьСводныйФайл = Истина;
		Если ЕстьПотоковыйВывод Тогда
			Если ОписаниеПлагина.Свойство("ФормироватьСводныйФайл") Тогда
				ФормироватьСводныйФайл = ОписаниеПлагина.ФормироватьСводныйФайл;
			КонецЕсли;
		КонецЕсли;

		Если ФормироватьСводныйФайл Тогда
			// т.к. при потоковом выводе нет смысла записывать сводный файл по тестированию
			ГенераторОтчета.НачатьЭкспорт(ОбработчикЭкспорта, Отчет, СтрокаЭкспорта.Путь);
		Иначе
			Асинк().смв_ВыполнитьОбработкуОповещения(ОбработчикЭкспорта);
		КонецЕсли;

	Иначе

		ОбработкаОповещения = ПараметрыДиспетчера.Финализация;
		ОбработкаОповещения.ДополнительныеПараметры.СледующийШаг = "ЗавершитьРаботу";
		Асинк().смв_ВыполнитьОбработкуОповещения(ОбработкаОповещения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПутьОтчетТестирования(ПараметрыДиспетчера, СписокОтчетов)
	Если ПараметрыДиспетчера.ИндексВидаОтчета < СписокОтчетов.Количество() Тогда
		СтрокаЭкспорта = СписокОтчетов[ПараметрыДиспетчера.ИндексВидаОтчета];
		ПутьКОтчету = СтрокаЭкспорта.Путь;
		ВывестиСообщение(СтрШаблон_("Формируется отчет тестирования %1", ПутьКОтчету));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчерЭкспортаОтчетовАсинхронныйПакетныйРежимИсключение(Знач ИнформацияОбОшибке, СтандартнаяОбработка, Знач ПараметрыДиспетчера) Экспорт

	СтандартнаяОбработка = Ложь;

	СписокОтчетов = ПараметрыДиспетчера.СписокОтчетов;
	Если СписокОтчетов.Количество() > ПараметрыДиспетчера.ИндексВидаОтчета Тогда
		СтрокаЭкспорта = СписокОтчетов[ПараметрыДиспетчера.ИндексВидаОтчета];
		ГенераторОтчета = СтрокаЭкспорта.генераторОтчета;

		ТекстОшибки = СтрШаблон_("Ошибка при асинхронном режиме генерации отчетов пакетного запуска:
		|Состояние:
		|	Генератор отчета:  %1
		|	Отчет:		%2
		|	Путь файла:	%3
		|	Исключение: %4",
		ГенераторОтчета, СтрокаЭкспорта.Отчет, СтрокаЭкспорта.Путь, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

	Иначе
		ТекстОшибки = СтрШаблон_("Ошибка при асинхронном режиме генерации отчетов пакетного запуска:
		|Состояние:
		|	Исключение: %1",
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

	КонецЕсли;

	ЗафиксироватьОшибкуВЖурналеРегистрации("xUnitFor1C.АсинхронныйПакетныйЗапуск", ТекстОшибки);
	Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);

	ОбработкаОповещения = ПараметрыДиспетчера.Финализация;
	ОбработкаОповещения.ДополнительныеПараметры.СледующийШаг = "ЗавершитьРаботу";
	АСинк().смв_ВыполнитьОбработкуОповещения(ОбработкаОповещения);
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьИВыполнитьТесты_ПакетныйРежим(Знач Параметры_xddRun)

	ПервичнаяНастройка();

	ИдентификаторЗагрузчика = Параметры_xddRun[0];
	Загрузчик = Плагин(ИдентификаторЗагрузчика);

	ПутьКТестам = Параметры_xddRun[1];
	ДеревоТестовОтЗагрузчика = Загрузчик.Загрузить(ЭтаФорма, ПутьКТестам);
	
	Если ЗначениеЗаполнено(ДеревоТестовОтЗагрузчика.Строки) Тогда

		ОбновитьИменаИПредставлениеТестов(ДеревоТестовОтЗагрузчика);

		РезультатыТестирования = ВыполнитьТесты(Загрузчик, ДеревоТестовОтЗагрузчика);
	Иначе

		ВывестиСообщение("Не найдено загруженных тестов. Выполнение тестов завершается");

	КонецЕсли;

	Возврат РезультатыТестирования;
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетОТестированииИЭкспортировать_ПакетныйРежим(Знач Параметры_xddReport, Знач РезультатыТестирования)
	Если Параметры_xddReport.Количество() > 0 И ТипЗнч(Параметры_xddReport[0]) <> Тип("ФиксированныйМассив") Тогда
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Параметры_xddReport);
		Параметры_xddReport = НовыйМассивПараметров;
	КонецЕсли;
	Для Каждого ОчередныеПараметры Из Параметры_xddReport Цикл
		Попытка
			ИдентификаторГенератораОтчета = ОчередныеПараметры[0];
			ГенераторОтчета = Плагин(ИдентификаторГенератораОтчета);

			НаборОтчетов = ГенераторОтчета.СоздатьОтчет(ЭтаФорма, РезультатыТестирования);
			Если ТипЗнч(НаборОтчетов) <> Тип("Массив") Тогда
				НовыйНаборОтчетов = Новый Массив;
				НовыйНаборОтчетов.Добавить(НаборОтчетов);
				НаборОтчетов = НовыйНаборОтчетов;
			КонецЕсли;

			ПутьКОтчету = ОчередныеПараметры[1];
			ВывестиСообщение(СтрШаблон_("Сформирован отчет тестирования %1", ПутьКОтчету));

			ОписаниеОшибки = СтрШаблон_("УФ ПутьКОтчету %1", ПутьКОтчету);
			ЗафиксироватьОшибкуВЖурналеРегистрации(ИдентификаторГенератораОтчета, ОписаниеОшибки, Истина);

			Для Каждого Отчет Из НаборОтчетов Цикл
				ГенераторОтчета.Экспортировать(Отчет, ПутьКОтчету);
			КонецЦикла;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОписаниеОшибки = "Ошибка формирования и экспорта отчета о тестировании в пакетном режиме
			|" + ПодробноеПредставлениеОшибки(Инфо);

			ЗафиксироватьОшибкуВЖурналеРегистрации(ИдентификаторГенератораОтчета, ОписаниеОшибки);
			ВывестиСообщение(ОписаниеОшибки, СтатусСообщения.ОченьВажное);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлКодаВозврата(Знач Параметры_xddExitCodePath, Знач РезультатыТестирования)
	Попытка
		ИдентификаторПлагина = Параметры_xddExitCodePath[0];
		ГенераторКодаВозврата = Плагин(ИдентификаторПлагина);

		ПутьФайлаКодаВозврата = Параметры_xddExitCodePath[1];
		ГенераторКодаВозврата.СформироватьФайл(ЭтаФорма, ПутьФайлаКодаВозврата, РезультатыТестирования);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ОписаниеОшибки = "Ошибка формирования файла статуса возврата при выполнении тестов в пакетном режиме
		|" + ПодробноеПредставлениеОшибки(Инфо);

		ЗафиксироватьОшибкуВЖурналеРегистрации("ПакетныйРежим", ОписаниеОшибки);
		ВывестиСообщение(ОписаниеОшибки, СтатусСообщения.ОченьВажное);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВЖурналеРегистрации(Знач Событие, Знач Описание) Экспорт
	ЗафиксироватьВЖурналеРегистрацииСервер(Событие, Описание);
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьОшибкуВЖурналеРегистрации(Знач Событие, Знач ОписаниеОшибки, ЭтоПредупреждение = Ложь) Экспорт
	ЗафиксироватьОшибкуВЖурналеРегистрацииСервер(Событие, ОписаниеОшибки, ЭтоПредупреждение);
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьВЖурналеРегистрацииСервер(Знач Событие, Знач Описание)
	Если Не ПустаяСтрока(Описание) Тогда
		ЗаписьЖурналаРегистрации("xUnitFor1C." + Событие, УровеньЖурналаРегистрации.Информация, , , Описание);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьОшибкуВЖурналеРегистрацииСервер(Знач Событие, Знач ОписаниеОшибки, ЭтоПредупреждение = Ложь)
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		Уровень = ?(ЭтоПредупреждение, УровеньЖурналаРегистрации.Предупреждение, УровеньЖурналаРегистрации.Ошибка);
		ЗаписьЖурналаРегистрации("xUnitFor1C." + Событие, Уровень, , , ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры
// } Пакетный запуск

// { Контекст
&НаКлиенте
Процедура СохранитьКонтекст(Знач Контекст) Экспорт
	Если Объект.ТекущийКонтейнер.СлучайныйПорядокВыполнения Тогда
		ВызватьИсключение Объект.ВозможныеИсключения.СохранятьКонтекстТолькоВСтрогомРежиме;
	КонецЕсли;
	Объект.ТекущийКонтейнер.Контекст = Контекст;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКонтекст() Экспорт
	Если Объект.ТекущийКонтейнер.СлучайныйПорядокВыполнения Тогда
		ВызватьИсключение Объект.ВозможныеИсключения.ПолучатьКонтекстТолькоВСтрогомРежиме;
	КонецЕсли;

	Возврат Объект.ТекущийКонтейнер.Контекст;
КонецФункции
// } Контекст

Процедура ВызватьОшибкуПроверки(СообщениеОшибки = "") Экспорт

	Префикс = "["+ Объект.СтатусыРезультатаТестирования.ОшибкаПроверки + "]";
	ВызватьИсключение Префикс + " " + СообщениеОшибки;

КонецПроцедуры

Процедура ПропуститьТест(Знач Сообщение = "") Экспорт

	Префикс = "[" + Объект.СтатусыРезультатаТестирования.ТестПропущен + "]";
	Если ПустаяСтрока(Сообщение) Тогда
		Сообщение = НСтр("ru = 'Тест пропущен'");
	КонецЕсли;
	ВызватьИсключение Префикс + " " + Сообщение;

КонецПроцедуры

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
//
&НаКлиенте
Процедура ВывестиСообщение(ТекстСообщения, Статус=Неопределено) Экспорт

	Сообщить(ТекстСообщения, Статус);

	ВывестиСообщениеВЛогФайл(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеВЛогФайл(Знач Сообщение) Экспорт

	Если Объект.ВыводитьЛогВыполненияСценариевВТекстовыйФайл Тогда

		ПлагинВыводВЛогФайл = Плагин("ВыводВЛогФайл");
		ПлагинВыводВЛогФайл.Вывести(Сообщение);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Отладка(Знач Сообщение) Экспорт
	Если Объект.ФлагОтладки Тогда
		ВывестиСообщение("ОТЛАДКА: " + Сообщение);
	КонецЕсли;
КонецПроцедуры

// Получить сообщение без стека вызовов от браузера тестов
//
// Параметры:
//  Сообщение	 - Строка - исходная строка
// 
// Возвращаемое значение:
//   Строка - строка, в которой удалены подстроки, указанные в массиве настроек по ключу "ИсключаемыеСтрокиСтекаВызовов"
//
&НаКлиенте
Функция ПолучитьСообщениеБезСтекаВызововОтБраузераТестов(Знач Сообщение) Экспорт

	Если Не СкрыватьПолныйСтекВызововПриОшибкахТестирования Тогда
		Возврат Сообщение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсключаемыеСтрокиСтекаВызовов) Тогда
		ИсключаемыеСтрокиСтекаВызовов = Новый Массив;
	КонецЕсли;
	Результат = Плагин("СтроковыеУтилиты").ПолучитьСообщениеБезСтекаВызовов(Сообщение, ИсключаемыеСтрокиСтекаВызовов);
	Возврат Результат;
	
КонецФункции

// { Внешние интерфейсные инструменты
&НаКлиенте
Процедура ОткрытьИнструмент(Знач ИмяИнструмента, Знач ПутьИнструмента = "", Знач ИмяФормы = "Форма")

	// Для встроенного в состав конфигурации браузера тестов
	// инструменты находятся также в составе конфигурации
	Если Объект.ЭтоВстроеннаяОбработка Тогда
		// Преобразование имени инструмента к имени обработки
		Если ИмяИнструмента = "UILogToScript" Тогда
			ИмяИнструмента = "ПреобразованиеЖурналаДействийПользователя";
		КонецЕсли;
		ИмяИнструмента = ДополнитьИдентификаторПрефиксомПодсистемы(ИмяИнструмента, Объект.ИспользуемыйПрефиксПодсистемы);
		ФормаИнструмента = ПолучитьФорму("Обработка." + ИмяИнструмента + "." + ИмяФормы);
		ФормаИнструмента.Открыть();
		ФормаИнструмента = Неопределено;

	Иначе
		Если Не ПустаяСтрока(ПутьИнструмента) Тогда
			ПутьКВнешнимИнструментам = ПутьИнструмента + "\";
		Иначе
			ПутьКВнешнимИнструментам = ПолучитьПутьКВнешнимИнструментам();
		КонецЕсли;

		ПутьИнструмента = ПутьКВнешнимИнструментам + ИмяИнструмента + ".epf";
		ФайлИнструмента = Новый Файл(ПутьИнструмента);

		ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения(
			"ОткрытьИнструментПроверкаСуществованияКонец", ЭтаФорма,
																	Новый Структура("ИмяИнструмента, ИмяФормы, ФайлИнструмента",
							 ИмяИнструмента, ИмяФормы, ФайлИнструмента));

		АСинк().смв_Файл_Существует(ФайлИнструмента, ОписаниеОповещения);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструментПроверкаСуществованияКонец(Существует, ДополнительныеПараметры) Экспорт

	Перем АдресХранилища, ИмяФормы;

	ИмяИнструмента  = ДополнительныеПараметры.ИмяИнструмента;
	ИмяФормы        = ДополнительныеПараметры.ИмяФормы;
	ФайлИнструмента = ДополнительныеПараметры.ФайлИнструмента;

	Если Не Существует Тогда
		Сообщить("Инструмент <" + ИмяИнструмента + "> не найден в каталоге <" + ФайлИнструмента.Путь + ">");
		Возврат;
	КонецЕсли;

	Оповещение = АСинк().смв_НовыйОписаниеОповещения("ОткрытьИнструментЗавершение", ЭтаФорма,
		Новый Структура("ИмяИнструмента, ИмяФормыИнструмента", ИмяИнструмента, ИмяФормы));
	АСинк().смв_ПоместитьФайл(Оповещение, АдресХранилища, ФайлИнструмента.ПолноеИмя, Ложь);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьКПлагинам()
	// Для встроенного в состав конфигурации браузера тестов
	// используемое имя файла не используется
	Если НЕ Объект.ЭтоВстроеннаяОбработка Тогда
		ФайлЯдра = Новый Файл(ЭтаФорма["ИспользуемоеИмяФайла"]);
		Результат = ФайлЯдра.Путь + "plugins/";
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКВнешнимИнструментам()
	ФайлЯдра = Новый Файл(ЭтаФорма.ИспользуемоеИмяФайла);
	Результат = ФайлЯдра.Путь + "tools\epf\utils\";

	Возврат Результат;
КонецФункции

// } Внешние интерфейсные инструменты

// { Helpers
&НаКлиенте
Процедура ПодключитьВнешнююОбработку(ФайлОбработки) Экспорт
	Перем АдресХранилища;

	Если ПодключенныеВнешниеОбработки.Получить(ФайлОбработки.ИмяБезРасширения) = Неопределено Тогда

		ЭтоОтчет = (НРег(ФайлОбработки.Расширение) = ".erf");

		Оповещение = АСинк().смв_НовыйОписаниеОповещения("ПодключитьВнешнююОбработкуЗавершение", ЭтаФорма, Новый Структура("ФайлОбработки, ЭтоОтчет", ФайлОбработки, ЭтоОтчет));
		АСинк().смв_ПоместитьФайл(Оповещение, АдресХранилища, ФайлОбработки.ПолноеИмя, Ложь);

	КонецЕсли;

КонецПроцедуры

#Область АсинхронныйAPI

&НаКлиенте
Процедура НачатьПодключениеВнешнейОбработки(Знач ОбработкаОповещения, Знач ФайлОбработки) Экспорт
	Перем АдресХранилища;

	Если ПодключенныеВнешниеОбработки.Получить(ФайлОбработки.ИмяБезРасширения) = Неопределено Тогда

		ЭтоОтчет = (НРег(ФайлОбработки.Расширение) = ".erf");

		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ФайлОбработки", ФайлОбработки);
		ПараметрыОповещения.Вставить("ЭтоОтчет", ЭтоОтчет);
		ПараметрыОповещения.Вставить("ОбработкаЗавершения", ОбработкаОповещения);

		Оповещение = АСинк().смв_НовыйОписаниеОповещения("ПодключитьВнешнююОбработкуЗавершение", ЭтаФорма, ПараметрыОповещения);
		АСинк().смв_ПоместитьФайл(Оповещение, АдресХранилища, ФайлОбработки.ПолноеИмя , Ложь);

	Иначе

		АСинк().смв_ВыполнитьОбработкуОповещения(ОбработкаОповещения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуТестов(Знач ОбработкаОповещения, Знач ИдентификаторВыбранногоЗагрузчика, Знач Путь) Экспорт

	ИнициализироватьИндикаторВыполнения();

	ЭтаФорма.ИдентификаторЗагрузчика = ИдентификаторВыбранногоЗагрузчика;
	ФормаЗагрузчика = Плагин(ИдентификаторВыбранногоЗагрузчика);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОбработкаОповещения);
	ДополнительныеПараметры.Вставить("ИдентификаторВыбранногоЗагрузчика", ИдентификаторВыбранногоЗагрузчика);
	ДополнительныеПараметры.Вставить("Путь", Путь);

	Обработчик = АСинк().смв_НовыйОписаниеОповещения("ЗагрузкаТестовЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ФормаЗагрузчика.НачатьЗагрузку(Обработчик, ЭтаФорма, Путь);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаТестовЗавершение(Знач ДеревоОтЗагрузчика, Знач ДополнительныеПараметры) Экспорт

	ЭтаФорма.ДеревоОтЗагрузчика = ДеревоОтЗагрузчика;
	ЭлементыДереваТестов = ЭтаФорма.ДеревоТестов.ПолучитьЭлементы();
	ЭлементыДереваТестов.Очистить();
	ЗаполнитьДеревоТестов(ЭтаФорма.ДеревоТестов, ДеревоОтЗагрузчика);

	КоличествоТестовыхСлучаев = ЗаполнитьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ЭтаФорма.ДеревоТестов);
	РазвернутьСтрокиДерева(КоличествоТестовыхСлучаев < 30);

	СохранитьВИсториюЗагрузкиТестов(ДополнительныеПараметры.ИдентификаторВыбранногоЗагрузчика, ДополнительныеПараметры.Путь);
	ОбновитьКомандыИсторииЗагрузкиТестов();

	АСинк().смв_ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения);

КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура ПодключитьФайлОбработкиНаСервере(Знач АдресХранилища, Знач ИдентификаторОбработки, ЭтоОтчет = Ложь)
	Если ЭтоОтчет = Истина Тогда
		ВнешниеОтчеты.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь);
	Иначе
		ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьФайлОбработкиНаСервере(Знач ПолныйПутьФайла, Знач ИдентификаторОбработки, ЭтоОтчет = Ложь)
	Если ЭтоОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	Если Объект.ИспользоватьПрямыеПутиФайлов Тогда
		ОбъектОбработки = Менеджер.Создать(ПолныйПутьФайла, Ложь);
	Иначе
		ОбъектОбработки = Менеджер.Создать(ИдентификаторОбработки, Ложь);
	КонецЕсли;

	Возврат ОбъектОбработки;
КонецФункции

&НаСервере
Процедура СоздатьФайлОбработки(Знач ПолныйПутьФайла, Знач ИдентификаторОбработки, ЭтоОтчет = Ложь)
	СоздатьФайлОбработкиНаСервере(ПолныйПутьФайла, ИдентификаторОбработки, ЭтоОтчет);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеКонтекстаВыполнения(Знач Идентификатор, Знач ЭтоВнутренняяОбработка = Ложь) Экспорт
	
	ОписаниеКонтекстаВыполнения = НовоеОписаниеКонтекстаВыполнения();
	ОписаниеКонтекстаВыполнения.Идентификатор = Идентификатор;
	ОписаниеКонтекстаВыполнения.ЭтоВнутренняяОбработка = ЭтоВнутренняяОбработка;

	Возврат Новый ФиксированнаяСтруктура(ОписаниеКонтекстаВыполнения);
	
КонецФункции

&НаКлиенте
Функция НовыйКонтекстВыполненияОбщегоМодуля(Знач Идентификатор) Экспорт
	
	ОписаниеКонтекстаВыполнения = НовоеОписаниеКонтекстаВыполнения();
	ОписаниеКонтекстаВыполнения.Идентификатор = Идентификатор;
	ОписаниеКонтекстаВыполнения.ЭтоОбщийМодуль = Истина;
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеКонтекстаВыполнения);
	
КонецФункции

&НаКлиенте
Функция НовоеОписаниеКонтекстаВыполнения()
	
	ОписаниеКонтекста = Новый Структура();
	ОписаниеКонтекста.Вставить("Идентификатор", "");
	ОписаниеКонтекста.Вставить("ЭтоВнутренняяОбработка", Ложь);
	ОписаниеКонтекста.Вставить("ЭтоОбщийМодуль", Ложь);
	
	Возврат ОписаниеКонтекста; 
	
КонецФункции

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура ИнициализироватьИндикаторВыполнения(Знач КоличествоТестовыхМетодов = 0)
	Элементы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхМетодов;
	ИндикаторВыполнения = 0;
	Элементы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОСобытии(Знач Подписчик, Знач Событие, Знач ПараметрыСобытия)
	Выполнить("Подписчик.ОбработатьСобытиеВыполненияТестов(Событие, ПараметрыСобытия);");
КонецПроцедуры

&НаКлиенте
Функция ПеремешатьМассив(Знач ИсходныйМассив) Экспорт
	Результат = Новый Массив;
	Для Каждого Элемент Из ИсходныйМассив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	// алгоритм перемешивания взят из книги Кнута "Искусство программирования" т.2
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ПоследнийИндекс = Результат.ВГраница();
	Для Индекс = 1 По ПоследнийИндекс Цикл
		ТекущийИндекс = ПоследнийИндекс - Индекс + 1;
		НовыйИндекс = ГСЧ.СлучайноеЧисло(0, ТекущийИндекс);
		Если НовыйИндекс <> ТекущийИндекс Тогда
			Значение = Результат[НовыйИндекс];
			Результат[НовыйИндекс] = Результат[ТекущийИндекс];
			Результат[ТекущийИндекс] = Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НайтиРезультатТестированияПоИдентификатору(Знач КонтейнерРезультатовТестирования, Знач ИдентификаторТеста, Знач ВключатьПодчиненные = Ложь) Экспорт
	Результат = НайтиРезультатТестированияПоИдентификатору_НаСервере(КонтейнерРезультатовТестирования, ИдентификаторТеста, ВключатьПодчиненные);

	Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиРезультатТестированияПоИдентификатору_НаСервере(Знач КонтейнерРезультатовТестирования, Знач ИдентификаторТеста, Знач ВключатьПодчиненные) Экспорт
	Результат = ЭтотОбъектНаСервере().НайтиРезультатТестированияПоИдентификатору(КонтейнерРезультатовТестирования, ИдентификаторТеста, ВключатьПодчиненные);

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СброситьПодключенныеВнешниеОбработки()
	ПодключенныеВнешниеОбработки = Новый Соответствие;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыМетода(Знач Парам1, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено, Знач Парам6 = Неопределено, Знач Парам7 = Неопределено, Знач Парам8 = Неопределено, Знач Парам9 = Неопределено) Экспорт
	ВсеПараметры = Новый Массив;
	ВсеПараметры.Добавить(Парам1);
	ВсеПараметры.Добавить(Парам2);
	ВсеПараметры.Добавить(Парам3);
	ВсеПараметры.Добавить(Парам4);
	ВсеПараметры.Добавить(Парам5);
	ВсеПараметры.Добавить(Парам6);
	ВсеПараметры.Добавить(Парам7);
	ВсеПараметры.Добавить(Парам8);
	ВсеПараметры.Добавить(Парам9);

	ИндексСПоследнимПараметром = 0;
	Для Сч = 0 По ВсеПараметры.ВГраница() Цикл
		Индекс = ВсеПараметры.ВГраница() - Сч;
		Если ВсеПараметры[Индекс] <> Неопределено Тогда
			ИндексСПоследнимПараметром = Индекс;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ПараметрыМетода = Новый Массив;
	Для Сч = 0 По ИндексСПоследнимПараметром Цикл
		ПараметрыМетода.Добавить(ВсеПараметры[Сч]);
	КонецЦикла;

	Возврат ПараметрыМетода;
КонецФункции

&НаСервере
Процедура ЗагрузитьВстроенныеПлагины()

	ОбъектНаСервере = ЭтотОбъектНаСервере();
	Объект.Плагины = ОбъектНаСервере.ПолучитьПлагины();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьВерсиюОбработкиКлиент() Экспорт
	Возврат ПолучитьВерсиюОбработкиСервер(Ложь);
КонецФункции

&НаКлиенте
Функция ПолучитьНаименованиеИВерсиюОбработкиКлиент() Экспорт
	Возврат ПолучитьВерсиюОбработкиСервер(Истина);
КонецФункции

&НаСервере
Функция ПолучитьВерсиюОбработкиСервер(ДобавлятьНазвание)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Если ДобавлятьНазвание Тогда
		Возврат ОбъектСервер.НаименованиеИВерсия();
	КонецЕсли;
	Возврат ОбъектСервер.Версия();
КонецФункции

// } Helpers

// { Подсистема конфигурации xUnitFor1C

// Универсальная функция для проверки наличия
// свойств у значения любого типа данных
// Переменные:
// 1. Переменная - переменная любого типа,
// для которой необходимо проверить наличие свойства
// 2. ИмяСвойства - переменная типа "Строка",
// содержащая искомое свойства
//
&НаКлиентеНаСервереБезКонтекста
Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства)
     // Инициализируем структуру для теста
     // с ключом (значение переменной "ИмяСвойства")
     // и значением произвольного GUID'а
     GUIDПроверка = Новый УникальныйИдентификатор;
     СтруктураПроверка = Новый Структура;
     СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);
     // Заполняем созданную структуру из переданного
     // значения переменной
     ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);
     // Если значение для свойства структуры осталось
     // NULL, то искомое свойство не найдено,
     // и наоборот.
     Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
          Возврат Ложь;
     Иначе
          Возврат Истина;
     КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСвойствоПриНаличии(ОбъектЗаполнения, ИмяСвойство, ЗначениеСвойства)

	Если ПеременнаяСодержитСвойство(ОбъектЗаполнения, ИмяСвойство) Тогда
		ОбъектЗаполнения[ИмяСвойство] = ЗначениеСвойства;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ДополнитьИдентификаторПрефиксомПодсистемы(Знач Идентификатор, Знач ИспользуемыйПрефиксПодсистемы) Экспорт

	Если НЕ ЗначениеЗаполнено(ИспользуемыйПрефиксПодсистемы) Тогда
		Возврат Идентификатор;
	КонецЕсли;

	ДлинаПрефикса = СтрДлина(ИспользуемыйПрефиксПодсистемы);
	Если Лев(Идентификатор, ДлинаПрефикса) = ИспользуемыйПрефиксПодсистемы Тогда
		Возврат Идентификатор;
	Иначе
		Возврат ИспользуемыйПрефиксПодсистемы + Идентификатор;
	КонецЕсли;

КонецФункции
&НаКлиенте
Функция ПолучитьИдентификаторБезПрефиксаПодсистемы(Знач Идентификатор, Знач ИспользуемыйПрефиксПодсистемы) Экспорт

	Если НЕ ЗначениеЗаполнено(ИспользуемыйПрефиксПодсистемы) Тогда
		Возврат Идентификатор;
	КонецЕсли;

	ДлинаПрефикса = СтрДлина(ИспользуемыйПрефиксПодсистемы);
	Если Лев(Идентификатор, ДлинаПрефикса) = ИспользуемыйПрефиксПодсистемы Тогда
		Возврат Прав(Идентификатор, СтрДлина(Идентификатор) - ДлинаПрефикса);
	Иначе
		Возврат Идентификатор;
	КонецЕсли;

КонецФункции

&НаСервере
Функция СоздатьОбъектПлагина(Идентификатор, ВстроенаВКонфигурацию = Ложь, ЭтоОтчет = Ложь)

	ОбъектНаСервере = ЭтотОбъектНаСервере();

	Возврат ОбъектНаСервере.СоздатьОбъектПлагина(Идентификатор, ВстроенаВКонфигурацию, ЭтоОтчет);

КонецФункции

// } Подсистема конфигурации xUnitFor1C

// { Вспомогательные методы

&НаКлиенте
Процедура ПодключитьВнешнююОбработкуЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	ФайлОбработки = ДополнительныеПараметры.ФайлОбработки;
	ЭтоОтчет = ДополнительныеПараметры.ЭтоОтчет;

	Если Не Объект.ИспользоватьПрямыеПутиФайлов Тогда
		ПодключитьФайлОбработкиНаСервере(Адрес, ФайлОбработки.ИмяБезРасширения, ЭтоОтчет);
	Иначе
		СоздатьФайлОбработки(ФайлОбработки.ПолноеИмя, ФайлОбработки.ИмяБезРасширения, ЭтоОтчет);
	КонецЕсли;

	ПодключенныеВнешниеОбработки.Вставить(ФайлОбработки.ИмяБезРасширения, Истина);

	Если ДополнительныеПараметры.Свойство("ОбработкаЗавершения") Тогда

		АСинк().смв_ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаЗавершения, Результат);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструментЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	ИмяИнструмента = ДополнительныеПараметры.ИмяИнструмента;
	ИмяФормыИнструмента = ДополнительныеПараметры.ИмяФормыИнструмента;

	ПодключитьФайлОбработкиНаСервере(Адрес, ИмяИнструмента);

	ФормаИнструмента = ПолучитьФорму("ВнешняяОбработка." + ИмяИнструмента + "." + ИмяФормыИнструмента);
	Если ФормаИнструмента = Неопределено Тогда
		Сообщить("Инструмент <" + ИмяИнструмента + ">: не удалось получить основную форму!");
		Возврат;
	КонецЕсли;

	ФормаИнструмента.Открыть();
	ФормаИнструмента = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьФормуЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	ПодключитьФайлОбработкиНаСервере(Адрес, Неопределено);

	НоваяФорма = ПолучитьФорму(ЭтаФорма.ИмяФормы,,,Истина);
	НоваяФорма.ИспользуемоеИмяФайла = ЭтаФорма.ИспользуемоеИмяФайла;
	НоваяФорма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ФайлНастройки = ВыбранныеФайлы.Получить(0);
	Объект.ПутьФайлаНастроек = ФайлНастройки;

	ПлагинНастроек = Плагин("Настройки");
	ПлагинНастроек.Обновить();
	
	ОбновитьДекорацияНастройкиЗагружены();

КонецПроцедуры

// { работа с настройками

&НаКлиенте
Процедура ПерезагрузитьНастройкиИзФайла()

	Если Не ПустаяСтрока(ПутьФайлаНастроек()) Тогда

		Попытка
			Плагин("Настройки").Обновить();
		Исключение
			Сообщить("Не удалось загрузить настройки из файла '" + ПутьФайлаНастроек() + "' по причине: ");
			Сообщить(ОписаниеОшибки());
		КонецПопытки

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПервичнаяНастройка()

	Перем ПлагинВыводВЛогФайл, ПлагинНастроек;

	ПлагинНастроек = Плагин("Настройки");
	ПлагинНастроек.Обновить();

	Для Каждого КлючЗначение Из ПлагинНастроек.ПолучитьНастройки() Цикл
		Объект.Настройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Если Не Объект.ФлагОтладки Тогда
		Объект.ФлагОтладки = ПлагинНастроек.ПолучитьНастройку("Отладка") = Истина;
	КонецЕсли;

	Объект.ВыводитьПодробноеПредставлениеОшибки = Истина;
	Если ПлагинНастроек.ЕстьНастройка("ВыводитьПодробноеПредставлениеОшибки") Тогда
		Объект.ВыводитьПодробноеПредставлениеОшибки = Объект.Настройки.ВыводитьПодробноеПредставлениеОшибки;
	КонецЕсли;

	Объект.ВыводитьЛогВыполненияСценариевВТекстовыйФайл = Ложь;
	Если ПлагинНастроек.ЕстьНастройка("ДелатьЛогВыполненияСценариевВТекстовыйФайл") Тогда
		Объект.ВыводитьЛогВыполненияСценариевВТекстовыйФайл = Объект.Настройки.ДелатьЛогВыполненияСценариевВТекстовыйФайл;
	КонецЕсли;
	Объект.ИмяФайлаЛогВыполненияСценариев = "";
	Если ПлагинНастроек.ЕстьНастройка("ИмяФайлаЛогВыполненияСценариев") Тогда
		Объект.ИмяФайлаЛогВыполненияСценариев = Объект.Настройки.ИмяФайлаЛогВыполненияСценариев;
		//Иначе
		//	ИмяФайлаЛогВыполненияСценариев = ПолучитьИмяВременногоФайла(".log");
	КонецЕсли;

	ПодготовитьВыводВЛогФайл();

	ВывестиСообщениеВЛогФайл(Плагин("Информатор").ТехническаяИнформация());

	Отладка(СтрШаблон_("ВыводитьЛогВыполненияСценариевВТекстовыйФайл <%1>", Объект.ВыводитьЛогВыполненияСценариевВТекстовыйФайл));
	Отладка(СтрШаблон_("ИмяФайлаЛогВыполненияСценариев <%1>", Объект.ИмяФайлаЛогВыполненияСценариев));
	
	ПодготовитьИсключаемыеСтрокиСтекаВызовов();

КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьВыводВЛогФайл()

	Перем ПлагинВыводВЛогФайл;

	Если Объект.ВыводитьЛогВыполненияСценариевВТекстовыйФайл Тогда

		ПлагинВыводВЛогФайл = Плагин("ВыводВЛогФайл");

		ПлагинВыводВЛогФайл.ОткрытьФайл(Объект.ИмяФайлаЛогВыполненияСценариев);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьИсключаемыеСтрокиСтекаВызовов()

	
	ИсключаемыеСтрокиСтекаВызовов = Новый Массив;

	ПоказПолногоСтекаВызововВОшибках = Плагин("Настройки").ПолучитьНастройку("ПоказПолногоСтекаВызововВОшибках");
	
	Если ЗначениеЗаполнено(ПоказПолногоСтекаВызововВОшибках) Тогда
		ПоказыватьПолныйСтек = Истина;
		Если ПоказПолногоСтекаВызововВОшибках.Свойство("Показывать", ПоказыватьПолныйСтек) Тогда
			СкрыватьПолныйСтекВызововПриОшибкахТестирования = (ПоказыватьПолныйСтек = Ложь);
		Иначе
			СкрыватьПолныйСтекВызововПриОшибкахТестирования = Истина;
		КонецЕсли;
	
		Если СкрыватьПолныйСтекВызововПриОшибкахТестирования Тогда
		
			ИсключаемыеСтрокиСтекаВызовов = Новый Массив;
			Если ПоказПолногоСтекаВызововВОшибках.Свойство("ИсключаемыеСтрокиСтекаВызовов", ИсключаемыеСтрокиСтекаВызовов) Тогда
				
				Если Не ЗначениеЗаполнено(ИсключаемыеСтрокиСтекаВызовов) Тогда
					ИсключаемыеСтрокиСтекаВызовов = Новый Массив;
				КонецЕсли;

				ИсключаемыеСтрокиСтекаВызовов.Добавить("ВнешняяОбработка.xddTestRunner.");
				ИсключаемыеСтрокиСтекаВызовов.Добавить("ExternalDataProcessor.xddTestRunner.");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПутьФайлаНастроекПредставление()
	Перем сПредставление;
	
	сПредставление = "<Настройки не загружены>";
	
	Если НЕ ПустаяСтрока(ЭтотОбъект.Объект.ПутьФайлаНастроек) Тогда
		сПредставление = СтрШаблон_("%1: %2","Настройки загружены из файла", ЭтотОбъект.Объект.ПутьФайлаНастроек);
	КонецЕсли;
	
	Возврат сПредставление;
КонецФункции

&НаКлиенте
Процедура ОбновитьДекорацияНастройкиЗагружены()
	
	ЭтотОбъект.Элементы.ДекорацияНастройкиЗагружены.Заголовок = ПутьФайлаНастроекПредставление();
	Если ЭтотОбъект.Элементы.Найти("ДеревоТестов") <> Неопределено Тогда
		ЭтотОбъект.ТекущийЭлемент = ЭтотОбъект.Элементы.ДеревоТестов;
	КонецЕсли;
	
КонецПроцедуры

// } работа с настройками

// { режим совместимости 8.3.5

// Замена функции СтрШаблон на конфигурациях с режимом совместимости < 8.3.6
// При внедрении в конфигурацию с режимом совместимости >= 8.3.6 данную функцию необходимо удалить
//
&НаКлиенте
Функция СтрШаблон_(Знач СтрокаШаблон, Знач Парам1 = Неопределено, Знач Парам2 = Неопределено,
	Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено,
	Знач Парам6 = Неопределено, Знач Парам7 = Неопределено, Знач Парам8 = Неопределено,
	Знач Парам9 = Неопределено) Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Парам1);
	МассивПараметров.Добавить(Парам2);
	МассивПараметров.Добавить(Парам3);
	МассивПараметров.Добавить(Парам4);
	МассивПараметров.Добавить(Парам5);
	МассивПараметров.Добавить(Парам6);
	МассивПараметров.Добавить(Парам7);
	МассивПараметров.Добавить(Парам8);
	МассивПараметров.Добавить(Парам9);

	Для Сч = 1 По МассивПараметров.Количество() Цикл
		ТекЗначение = МассивПараметров[Сч-1];
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, "%"+Сч, Строка(ТекЗначение));
	КонецЦикла;
	Возврат СтрокаШаблон;
КонецФункции

// Аналог СтрРазделить() для старых версий платформы
// Описание параметров аналогично описанию параметров для СтрРазделить()
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт

	Результат = Новый Массив;

	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;

	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

//позволяет сделать поиск в строке "ПроверяемаяСтрока" подстроки "Шаблон"
//при этом подстрока "Шаблон" может содержать символы *
//например СтрокаСоответствуетШаблону("Привет","*вет")
&НаКлиенте
Функция СтрокаСоответствуетШаблону(ПроверяемаяСтрока, Знач Шаблон) Экспорт

	Если РегулярныеВыражения = Неопределено Тогда
		РегулярныеВыражения = Плагин("РегулярныеВыражения");
	КонецЕсли;

	Нашли = РегулярныеВыражения.СтрокаСоответствуетШаблону(ПроверяемаяСтрока, Шаблон);
	Возврат Нашли;

КонецФункции

// }

&НаКлиенте
Функция КлиентИСерверРасположеныНаОднойМашине()

	Если ИнформационнаяБазаФайловая() Тогда
		Возврат Истина;
	Иначе

		ИмяКомпьютераНаКлиенте = ИмяКомпьютера();
		ИмяКомпьютераНаСервере = ИмяКомпьютераСервер();

		Если НРег(ИмяКомпьютераНаКлиенте) = НРег(ИмяКомпьютераНаСервере) Тогда
			Возврат Истина;
		КонецЕсли;
		Если НРег(ИмяКомпьютераНаСервере) = "localhost" Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяКомпьютераСервер()

	Возврат ИмяКомпьютера();

КонецФункции

&НаКлиенте
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
      Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
            СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
      КонецЕсли;
      Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
КонецФункции

&НаКлиенте
Функция ПодходящийРежимСовместимостиПлатформыКлиент(Знач НеобходимаяВерсияПриложения) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если Не ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, НеобходимаяВерсияПриложения) Тогда
		Возврат Ложь;
	КонецЕсли;

	ВерсияРежимаСовместимости = ВерсияРежимаСовместимостиКлиент();
	
	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(ВерсияРежимаСовместимости, НеобходимаяВерсияПриложения);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2) Экспорт
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2, ".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Мин(Массив1.Количество(), Массив2.Количество()) - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиенте
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданнаяКлиент(Версия1, Версия2) Экспорт

	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2);

КонецФункции

&НаСервереБезКонтекста
Функция КонфигурацияПоддерживаетАсинхронныеВызовы()

	СистемнаяИнформация = Новый СистемнаяИнформация;

	Если Не ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.5.1383") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ИспользуютсяСинхронныеВызовыРасширенийПлатформыИВнешнихКомпонент(СистемнаяИнформация.ВерсияПриложения) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.13.0") Тогда
		РежимСовместимостиПоУмолчанию = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать;
		//РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент.НеИспользовать;
		РежимСовместимости = РежимСовместимости(РежимСовместимостиПоУмолчанию);
		Если РежимСовместимости = РежимСовместимостиПоУмолчанию Тогда
			Возврат Истина;
		КонецЕсли;
		РежимСовместимостиВерсия = СтрЗаменить(РежимСовместимости, "Версия", "");
		РежимСовместимостиВерсия = СтрЗаменить(РежимСовместимостиВерсия, "_", ".");
		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(РежимСовместимостиВерсия, "8.3.13") Тогда
			Возврат Истина;
		КонецЕсли;
		//ИмяСвойства = "РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент";
		//Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент.НеИспользовать[ИмяСвойства].Использовать

	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция ИспользуютсяСинхронныеВызовыРасширенийПлатформыИВнешнихКомпонент(ВерсияПриложения)

	ИмяСвойства = ИмяСвойстваСинхронныеВызовыРасширенийПлатформыИВнешнихКомпонент(ВерсияПриложения);

	Если Метаданные[ИмяСвойства] = Метаданные.СвойстваОбъектов[ИмяСвойства].Использовать
		Или Метаданные[ИмяСвойства] = Метаданные.СвойстваОбъектов[ИмяСвойства].ИспользоватьСПредупреждениями Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ИмяСвойстваСинхронныеВызовыРасширенийПлатформыИВнешнихКомпонент(ВерсияПриложения)

	Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(ВерсияПриложения, "8.3.8.1") Тогда
		Возврат "РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент";
	Иначе
		Возврат "РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент";
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция УзнатьРежимСовместимостиКлиент(Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(КешРежимСовместимости) Тогда
		КешРежимСовместимости = РежимСовместимости(ЗначениеПоУмолчанию);
	КонецЕсли;

	Возврат КешРежимСовместимости;
КонецФункции

&НаКлиенте
Функция ВерсияРежимаСовместимостиКлиент(Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(КешВерсияРежимСовместимости) Тогда
		РежимСовместимостиВерсия = СтрЗаменить(УзнатьРежимСовместимостиКлиент(ЗначениеПоУмолчанию), "Версия", "");
		КешВерсияРежимСовместимости = СтрЗаменить(РежимСовместимостиВерсия, "_", ".");
	КонецЕсли;

	Возврат КешВерсияРежимСовместимости;
КонецФункции

&НаСервереБезКонтекста
Функция РежимСовместимости(Знач ЗначениеПоУмолчанию = Неопределено)
		
	Если ЗначениеПоУмолчанию = Неопределено Тогда
		ЗначениеПоУмолчанию = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать;;
	КонецЕсли;
	Значение = ЗначениеПоУмолчанию;

	Попытка
		Значение = Вычислить("Метаданные.РежимСовместимости");
	Исключение
		Возврат Значение;
	КонецПопытки;

	Возврат Значение;

КонецФункции

&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641", ".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаСервереБезКонтекста
Функция УзнатьЕстьЗащитаОтОпасныхДействий()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.9.2033", ".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКаталогВременныхФайлов()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("123");
	ВременныйФайл = Новый Файл(ИмяВременногоФайла);
	Возврат ВременныйФайл.Путь;
КонецФункции

// Универсальная функция для проверки наличия свойств у значения любого типа данных
//
// Параметры:
//   Объект - Любой - Коллекция любого типа, для которой необходимо проверить наличие свойства
//   ИмяСвойства - Строка - имя проверяемого свойства
//
//  Возвращаемое значение:
//   Булево - Истина, если свойство существует
//
//&НаКлиентеНаСервереБезКонтекста
&НаКлиенте
Функция ЕстьСвойство(Знач Объект, Знач ИмяСвойства) Экспорт
    НачальноеЗначение = Новый УникальныйИдентификатор();
    ЗначениеРеквизита = Новый Структура(ИмяСвойства, НачальноеЗначение);
    ЗаполнитьЗначенияСвойств(ЗначениеРеквизита, Объект);
    Если ЗначениеРеквизита[ИмяСвойства] <> НачальноеЗначение Тогда
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// Проверка наличие элемента в исключаемой коллекции
//
// Параметры:
//  ЧтоИщем				 - Строка	 - искомое значение
//  КоллекцияДляПоиска	 - Массив, СписокЗначений	 - коллекция, в которой ищем элементы по простому совпадению или шаблону со звездочками
// 
// Возвращаемое значение:
//   Булево - нашли или нет
//
&НаКлиенте
Функция ЕстьВИсключаемойКоллекции(Знач ЧтоИщем, Знач КоллекцияДляПоиска) Экспорт
	
	Перем СтрокаГдеИщем;
	
	ТипКоллекции = ТипЗнч(КоллекцияДляПоиска);
	Если ТипКоллекции = Тип("СписокЗначений") Тогда
		Если КоллекцияДляПоиска.НайтиПоЗначению(ЧтоИщем) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого ЭлементСписка Из КоллекцияДляПоиска Цикл
			Если СтрокаСоответствуетШаблону(ЧтоИщем, ЭлементСписка.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции = Тип("Массив") Тогда
		Для Каждого СтрокаГдеИщем Из КоллекцияДляПоиска Цикл
			Если СтрокаСоответствуетШаблону(ЧтоИщем, СтрокаГдеИщем) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ВызватьИсключение "Неверный тип параметра КоллекцияДляПоиска. Нужен Массив или СписокЗначений, а получили " + ТипКоллекции;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Функция АСинк() Экспорт

	Если АСинк = Неопределено Тогда

		Если Объект.ЭтоВстроеннаяОбработка Тогда

			АСинк = ПолучитьФорму("Обработка.xddTestRunner.Форма.МодульАсинк", , ЭтаФорма, ЭтаФорма);

		Иначе

			АСинк = ПолучитьФорму("ВнешняяОбработка.xddTestRunner.Форма.МодульАсинк", , ЭтаФорма, ЭтаФорма);

		КонецЕсли;

		АСинк.МодальностьЗапрещена = ЕстьПоддержкаАсинхронныхВызовов;
		АСинк.Версия8315ИлиВыше = Версия8315ИлиВыше;

	КонецЕсли;

	Возврат АСинк;

КонецФункции

&НаКлиенте
Функция ПодробноеПредставлениеОшибки_(ИнформацияОбОшибке)

	Если Объект.ВыводитьПодробноеПредставлениеОшибки Тогда
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// } Вспомогательные методы

#Область Глобальный_контекст

// Решение проблемы описанной в Issues #818 (https://github.com/vanessa-opensource/add/issues/818)
//
// Существует проблема:
// Некоторые объекты, например СертификатКриптографии, не поддерживают передачу с клиента на сервер
// и обратно. При модульном тестировании клиентских методов между которыми через КонтекстЯдра 
// СохранитьКонтекст() / ПолучитьКонтекст() передаем подобные объекты получаем ошибку отображения.
//
// Хотелось бы иметь следующую функциональность:
// В браузере тестирования xddTestRunner иметь глобальный клиентский контекст, который существует
// на протяжении всего сеанса работы основной формы xddTestRunner.

// Значение элемента Глобального контекста (структура)
//
// Параметры:
//  Ключ - Строка - ключ элемента контекста, который требуется получить
// 
// Возвращаемое значение:
//  Произвольный - значение Глобального контекста
//
&НаКлиенте
Функция ГлобальныйКонтекстЗначение(Знач Ключ) Экспорт
	Перем ЗначениеКонтекста;
	
	Если ГлобальныйКонтекст.Свойство(Ключ, ЗначениеКонтекста) Тогда
		Возврат ЗначениеКонтекста;
	КонецЕсли;
	
	ЗначениеКонтекста = Неопределено;
	Возврат ЗначениеКонтекста;
КонецФункции

// Добавить элемент в Глобальный контекст (структура)
//
// Параметры:
//  Ключ				 - Строка - ключ элемента контекста, который будет добавлен
//  ЗначениеКонтекста	 - Произвольный - значение контекста, который будет добавлен
//
&НаКлиенте
Процедура ГлобальныйКонтекстДобавить(Знач Ключ, Знач ЗначениеКонтекста) Экспорт
	
	ГлобальныйКонтекст.Вставить(Ключ, ЗначениеКонтекста);
	
КонецПроцедуры

// Удалить элемент из Глобального контекста
//
// Параметры:
//  Ключ - Строка - ключ элемента контекста, который будет удален
//
&НаКлиенте
Процедура ГлобальныйКонтекстУдалить(Знач Ключ) Экспорт
	
	Если ГлобальныйКонтекст.Свойство(Ключ) Тогда
		ГлобальныйКонтекст.Удалить(Ключ);
	КонецЕсли;
	
КонецПроцедуры

// Получить глобальный контекст вцелом
// 
// Возвращаемое значение:
//  Произвольный - значение приватного поля "ГлобальныйКонтекст"
//
&НаКлиенте
Функция ГлобальныйКонтекст() Экспорт
	
	Возврат ГлобальныйКонтекст;
	
КонецФункции

// Очистить глобальный контекст (пустая структура)
//
&НаКлиенте
Процедура ГлобальныйКонтекстОчистить() Экспорт
	
	ГлобальныйКонтекст = Новый Структура();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлобальныйКонтекстИнициализировать()
	
	ГлобальныйКонтекст = Новый Структура();
	
КонецПроцедуры

#КонецОбласти
