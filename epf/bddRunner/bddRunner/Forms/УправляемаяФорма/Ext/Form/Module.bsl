#Область ОписаниеПеременных

#Область ЭкспортируемыеПеременныеФормы

//Необходима для работы автотестирования Vanessa-ADD
&НаКлиенте
Перем СлужебнаяПеременная Экспорт;

//Необходима для работы автотестирования Vanessa-ADD
&НаКлиенте
Перем ХостСистема Экспорт;

&НаКлиенте
Перем ЭтоLinux Экспорт; // todo добавить метод КонтекстЯдра.ЭтоЛинукс()

&НаКлиенте
Перем ЭтоЗапускВРежимеКоманднойСтроки Экспорт;

&НаКлиенте
Перем КешДанныеПеревода Экспорт;

&НаКлиенте
Перем Версия836ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8311ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8312ИлиВыше Экспорт;

&НаКлиенте
Перем Версия8313ИлиВыше Экспорт;

#КонецОбласти

#Область ГлобальныеПеременныеФормы

&НаКлиенте
Перем КэшФормПлагинов;

&НаКлиенте
Перем мСинхронныйРежимРазрешен;

&НаКлиенте
Перем ОбъектКонтекст;

&НаКлиенте
Перем ОбъектКонтекстСохраняемый Экспорт;

&НаКлиенте
Перем МассивСостоянияКонтекстовДоВыполненияШага;

&НаКлиенте
Перем ТаблицаУжеСуществующихСценариев;

&НаКлиенте
Перем КоллекцияВерсийFeatureИмяФайла;

&НаКлиенте
Перем МассивВерсийEPFИмяФайла;
&НаКлиенте
Перем МассивВерсийEPFВерсия;

&НаКлиенте
Перем ИдетОпросЭлементовФормTestClient;
&НаКлиенте
Перем МассивСостояниеФормTestClient;

&НаКлиенте
Перем ОбработкаСвязаннаяСИсполняемойФичей;

&НаКлиенте
Перем ТаблицаКонтекстовОбработок;

&НаКлиенте
Перем КоллекцияИменКонтекстовОбработок;

&НаКлиенте
Перем ВыполнятьСценарииАсинхронно;

&НаКлиенте
Перем МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы;

&НаКлиенте
Перем ТекИД_СценарияВМассиве;

&НаКлиенте
Перем ТекИД_ШагаВМассиве;

&НаКлиенте
Перем ТекИД_ВыполненногоШагаВМассиве;

&НаКлиенте
Перем СохраненноеСостояниеФормыTestClient;

&НаКлиенте
Перем ВсёЕщёИдётВыполнениеШагов;

&НаКлиенте
Перем МассивИДСтрокиДерева;

&НаКлиенте
Перем МассивРезультатПрохожденияТестовСценария;

&НаКлиенте
Перем ЦветУспешно;
&НаКлиенте
Перем ЦветОжидает;
&НаКлиенте
Перем ЦветНеУспешно;
&НаКлиенте
Перем ЦветЧужойСнипет;

&НаКлиенте
Перем ШагСтрокДляМодуля;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииHTML, ТекущаяФичаИнструкцииHTML;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииMarkdown, ТекущаяФичаИнструкцииMarkdown;

&НаКлиенте
Перем СтатусЗапускаСценариев;

&НаКлиенте
Перем СтатусыВыполненияСтрок;

&НаКлиенте
Перем ПриоритетыСтатусовВыполненияСтрок;

&НаКлиенте
Перем ТаблицаОбработокДляОтладки;

&НаКлиенте
Перем СтрокаШагаСКоторогоНадоВыполнятьСценарий;

&НаКлиенте
Перем ПредставлениеВертЧертыВТабДок;

&НаКлиенте
Перем ТекущийИсполняемыйФичаФайл;

&НаКлиенте
Перем ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий;

&НаКлиенте
Перем ПрекратитьВыполнениеВсехСценариев;

&НаКлиенте
Перем ПрекратитьВыполнениеДанногоСценария;

&НаКлиенте
Перем МассивPIDОкон1С, ЗначениеПараметровДляСнятияСкриншотов, ТекProcessID, МассивКоординатОкон1С;

&НаКлиенте
Перем ИмяФайлаСубтитров, ИнтервалВыполненияШагаПриЗаписиВидео, БылаОшибкаСкриптовСборкиВидео;

&НаКлиенте
Перем СкриншотСделанВСценарии;

&НаКлиенте
Перем WshShell;

&НаКлиенте
Перем МассивСнипетовПрерывающихЗаписьСценария;

&НаКлиенте
Перем ЭтоЗапускВРежимеБезЗагрукиНастроек;

&НаКлиенте
Перем МассивTTS;

&НаКлиенте
Перем МодульРаботыСВидео;

&НаКлиенте
Перем НедавноЗагруженныеФичи;

&НаКлиенте
Перем Брейкпоинты;

&НаКлиенте
Перем ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки;
&НаКлиенте
Перем СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример;

&НаКлиенте
Перем ОбработанноеИдОповещения;

&НаКлиенте
Перем СтруктураПоискаСтрокДерева;

&НаКлиенте
Перем КешВерсияОбработки;

&НаКлиенте
Перем КешРежимСовместимости;

&НаКлиенте
Перем КешВерсияРежимСовместимости;

&НаКлиенте
Перем СчетчикШаговБезТаймера, МаксСчетчикШаговБезТаймера;

&НаКлиенте
Перем НадоПерейтиКСтрокеДерева;

&НаКлиенте
Перем ТекстСообщенийПользователю;

&НаКлиенте
Перем ВозниклаОшибкаПодключенияTestClient;

//Признак, выполняем шаг вручную, не автоматически - считаем что все шаги выполняются успешно.
&НаКлиенте
Перем ПризнакРучногоВыполненияШага Экспорт;

&НаКлиенте
Перем ВозниклаОшибкаВШагеКонтекста;

&НаКлиенте
Перем ГлобальныеЗначенияТаблиц;

&НаКлиенте
Перем ЗафиксированнаяФормаTestClient;

&НаКлиенте
Перем АСинк;

#КонецОбласти

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура Брейкпоинт(Команда)
	ОбработатьУстановкуСнятиеБрейкпоинта();
КонецПроцедуры

&НаКлиенте
Процедура БрейкпоинтУбратьВсе(Команда)
	КопияБрейкпоинты = Новый Массив;

	Для каждого Элем Из Брейкпоинты Цикл
		КопияБрейкпоинты.Добавить(Элем);
	КонецЦикла;
	Для каждого Элем Из КопияБрейкпоинты Цикл
		УдалитьБрейкПоинт(Элем);
	КонецЦикла;

	СнятьПометкуБрейкпоинтаРекурсивно(Объект.ДеревоТестов.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарийФорма(Команда)
	ВыполнитьВыделенныйСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФичуФорма(Команда)
	ВыполнитьФичу();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОдинШагФорма(Команда)
	ВыполнитьОдинШаг();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФичиИзКаталога(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	ОбновитьКнопкуЗагрузитьФичи();

	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;

	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОднуФичу(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();

	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;
	СтрокаШагаСКоторогоНадоВыполнятьСценарий      = Неопределено;
	МассивСостоянияКонтекстовДоВыполненияШага     = Новый Массив;

	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры

&НаКлиенте
Процедура Перезагрузить(Команда)
	Объект.ИдетВыполнениеСценариев = Ложь;
	Если НЕ (Объект.ПроверкаРаботыVanessaADDВРежимеTestClient ИЛИ Объект.РежимСамотестирования) Тогда
		ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
		КонецЕсли;
	КонецЕсли;

	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарииФорма(Команда)

	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;
	СделатьПараметрыКорректными();

	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;

	ВыполнитьСценарии();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокКоманда(Команда)
	СоздатьШаблоныОбработок();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнить(Команда)
	Объект.ИдетВыполнениеСценариев                                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;

	Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнитьДанныйСценарийФорма(Команда)
	ПерезагрузитьИВыполнитьДанныйСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФичаФайл(Команда)
	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПолныйПуть   = СтрокаФичи.ПолныйПуть;
	ИмяФайлаФичи = Неопределено;
	Если Найти(НРег(ПолныйПуть), ".feature") > 0 Тогда
		ИмяФайлаФичи = ИмяФайлаФичиИзПолногоПути(ПолныйПуть);
	КонецЕсли;

	Если ИмяФайлаФичи = Неопределено Тогда
		Если СтрокаФичи.Тип <> "Фича" Тогда
			СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
			Если СтрокаФичи = Неопределено Тогда
				Сообщить("Строка с фича-файлом не найдена.");
				Возврат;
			КонецЕсли;

			ИмяФайлаФичи = СтрокаФичи.ПолныйПуть;
		КонецЕсли;
	КонецЕсли;

	НомерСтрокиВФиче = СтрокаФичи.НомерСтрокиВФиче;

	СтрокаЗапуска = ИмяФайлаФичи;

	Если ЗначениеЗаполнено(Объект.КоманднаяСтрокаРедактированияФичи) Тогда
		СтрокаЗапуска = Объект.КоманднаяСтрокаРедактированияФичи;
		СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "%FeatureFile%", """" + ИмяФайлаФичи + """");
		СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "%FeatureLine%", XMLСтрока(НомерСтрокиВФиче));
	КонецЕсли;

	ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапуска, Ложь, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФичи(Команда)

	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;

	Если СтрокаФичи = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если СтрокаФичи.Тип <> "Фича" Тогда

		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);

		Если СтрокаФичи = Неопределено Тогда

			Сообщить("Строка с фича-файлом не найдена.");
			Возврат;

		КонецЕсли;

	КонецЕсли;

	Файл = Новый Файл(СтрокаФичи.ПолныйПуть);

	ОписаниеОповещения = Асинк().смв_ПустоеОповещение();
	Асинк().смв_ЗапуститьПриложение(ОписаниеОповещения, Файл.Путь);

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователяКнопка(Команда)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Если ДанныеКлиентовТестирования.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Имя", "Этот клиент");

			НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
				Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = ДанныеЗапускаКлиентаТестирования.ПолучитьИдентификатор();
				ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ТекущиеДанные = Неопределено Тогда
		СделатьСообщение("Не найден TestClient для подключения.");
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		СделатьСообщение("Web клиент не поддерживает запись действий пользователя.");
		Возврат;
	КонецЕсли;

	ЭтаФорма.ТекущийЭлемент = Элементы.РаботасUI;
	НачатьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя("НачатьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ПриостановитьЗаписьДействийПользователя(Команда)
	УправлениеВидимостьюЗаписиДействийПользователя("ПриостановитьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаписьДействийПользователя(Команда)
	УправлениеВидимостьюЗаписиДействийПользователя("ПродолжитьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодключитьTestClient(Команда)
	ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаписьДействийПользователяКнопка(Команда)
	ЗавершитьЗаписьДействийПользователя();
	УправлениеВидимостьюЗаписиДействийПользователя("ЗавершитьЗапись");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуВыполнятьСценарийСЭтогоШага(Команда)
	ПроцУстановитьПометкуВыполнятьСценарийСЭтогоШага();
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуВыполнятьСценарийСЭтогоШага(Команда)
	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Ложь;
	Если СтрокаШагаСКоторогоНадоВыполнятьСценарий <> Неопределено Тогда
		ПромСтрока = Неопределено;
		НайтиСтрокуДереваПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), ПромСтрока);
		СтрокаШагаСКоторогоНадоВыполнятьСценарий = ПромСтрока;

		СтрокаШагаСКоторогоНадоВыполнятьСценарий.ВыполнятьСценарийСЭтогоШага = Ложь;
	КонецЕсли;

	СтрокаШагаСКоторогоНадоВыполнятьСценарий = Неопределено;

	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость = Ложь;

	Сообщить("Пометка снята.");
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСостояниеФормыTestClientКнопка(Команда)
	ЗапомнитьСостояниеФормыTestClient();
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСостояниеФормыTestClientКнопка(Команда)
	ЗабытьСостояниеФормыTestClient();
КонецПроцедуры

&НаКлиенте
Процедура ИсследовательФормы(Команда)
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Сообщить(ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Язык", Объект.ЯзыкГенератораGherkin);
	ФормаДобавитьШаг = ПолучитьФорму("ВнешняяОбработка.bddRunner.Форма.ИсследовательФормы", ПараметрыФормы, ЭтаФорма);
	ФормаДобавитьШаг.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзмененияФормыGherkinКнопка(Команда)
	ПолучитьИзмененияФормыGherkin();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеТекущегоЭлементаФормыКнопка(Команда)
	ПолучитьСостояниеТекущегоЭлементаФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДляВызоваКонфигуратора(Команда)
	Зн = 1 / 0;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоФич(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоФичРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоДоСценариев(Команда)
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	СвернутьДеревоДоСценариевРекурсивно(ДеревоФормыСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЧтоЗаписьВидеоБудетРаботать(Команда)
	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ПроверитьЧтоЗаписьВидеоБудетРаботать(ПараметрыВидео);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)

	ПлагинНастроек = Плагин("LoadSettings");
	ПлагинНастроек.СохранитьНастройки(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПоУмолчанию(Команда)
	ПараметрыФайла = ПрочитатьСтруктуруИзJSONФайлаКлиент(Объект.КаталогИнструментов + "\tools\JSON\VideoDefault.json");

	Для Каждого Элем Из ПараметрыФайла Цикл
		Если Лев(Элем.Ключ, 11) = "ЗаписьВидео" Тогда
			Если Найти(Элем.Ключ, "ВодянойЗнак") > 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Найти(Элем.Ключ, "СловарьЗаменСписок") > 0 Тогда
				Объект.ЗаписьВидеоСловарьЗамен.Очистить();
				Для Каждого ПутьКСловарюЗамен Из Элем.Значение Цикл
					Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(ПутьКСловарюЗамен));
				КонецЦикла;

				Продолжить;
			КонецЕсли;

			Если Найти(Элем.Ключ, "СловарьЗамен") > 0 Тогда
				Объект.ЗаписьВидеоСловарьЗамен.Очистить();
				Объект.ЗаписьВидеоСловарьЗамен.Добавить(ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение));
				Продолжить;
			КонецЕсли;
			Если Найти(Элем.Ключ, "КаталогДляВременныхФайлов") > 0 Тогда
				ВременныйФайл = Новый Файл(ПолучитьИмяВременногоФайла());
				ПутьВременногоКаталогаДляВидео = ВременныйФайл.Путь + "VideoTemp" +
				ПолучитьРазделительПути() + ВременныйФайл.Имя;
				СоздатьКаталогКомандаСистемы(ПутьВременногоКаталогаДляВидео);

				Объект[Элем.Ключ] = ПутьВременногоКаталогаДляВидео;
				Продолжить;
			КонецЕсли;

			Значение = Элем.Значение;
			Если Лев(Элем.Значение, 1) = "." Тогда
				Значение = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
			КонецЕсли;
			Объект[Элем.Ключ] = Значение;
		КонецЕсли;
	КонецЦикла;

	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКлиентовТестированияКоманда(Команда)
	СохранитьКлиентовТестирования();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВыбранногоКлиентаТестирования(Команда)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	ПодключитьПрофильTestClientПоИмени(ТекущиеДанные.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КлиентТестированияТекущейИнфобазы(Команда)

	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	ТекущиеДанные.ПутьКИнфобазе = СтрокаСоединенияИнформационнойБазы();

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользлователяВВыбранномКлиентеТестирования(Команда)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;

	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		СделатьСообщение("Web клиент не поддерживает запись действий пользователя.");
		Возврат;
	КонецЕсли;

	Если Не ТекущиеДанные.Подключен Тогда
		ПодключитьВыбранногоКлиентаТестирования("");
	КонецЕсли;

	НачатьЗаписьДействийПользователя(Ложь);
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаДополнительно;

	УправлениеВидимостьюЗаписиДействийПользователя("НачатьЗапись");

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВыбранногоКлиентаТестирования(Команда)
	РазорватьСоединениеTestClient();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу1(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[0].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу2(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[1].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу3(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[2].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу4(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[3].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу5(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[4].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу6(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[5].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу7(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[6].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу8(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[7].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНедавнююФичу9(Команда)
	Объект.КаталогФич = НедавноЗагруженныеФичи[8].Путь;
	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзвестныйШаг(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаИзвестныхStepDefinition", ТаблицаИзвестныхStepDefinition);
	ПараметрыФормы.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариев);
	ПараметрыФормы.Вставить("ЯзыкГенератораGherkin", Объект.ЯзыкГенератораGherkin);
	ПараметрыФормы.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	ПараметрыФормы.Вставить("МакетШаблонПеревода", МакетШаблонПеревода);
	ПараметрыФормы.Вставить("ДвоичныеДанныеФайлПеревода", ПолучитьФайлыПеревода());

	ФормаДобавитьШаг = ПолучитьФорму("ВнешняяОбработка.bddRunner.Форма.ВыборИзвестногоШага", ПараметрыФормы, ЭтаФорма);
	ФормаДобавитьШаг.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаФорма(Команда)
	ВыполнитьДанныйСценарийСТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаСПродолжениемФорма(Команда)
	ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением();
КонецПроцедуры

&НаКлиенте
Процедура СброситьКешИзвестныхStepDefinition(Команда) Экспорт
	СброситьКешИзвестныхStepDefinitionСервер();
	СделатьСообщение("Надо сделать перезапуск Vanessa-ADD.");
КонецПроцедуры

//	{ управление видимостью колонок ДереваТестов
&НаКлиенте
Процедура ПоказатьСкрытьПутьКФайлу(Команда)
	ПоказатьСкрытьКолонкуДереваТестов("ДеревоТестовПолныйПуть", "ПоказатьСкрытьПутьКФайлу", Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСнипет(Команда)
	ПоказатьСкрытьКолонкуДереваТестов("ДеревоТестовСнипет", "ПоказатьСкрытьСнипет", Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьАдресСнипета(Команда)
	ПоказатьСкрытьКолонкуДереваТестов("ДеревоТестовАдресСнипета", "ПоказатьСкрытьАдресСнипета", Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСтрокаРеальнойПроцедуры(Команда)
	ПоказатьСкрытьКолонкуДереваТестов("ДеревоТестовСтрокаРеальнойПроцедуры", "ПоказатьСкрытьСтрокаРеальнойПроцедуры", Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВсеКолонки(Команда)

	Если Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСтрокаРеальнойПроцедуры.Видимость Или
		Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовАдресСнипета.Видимость Или
		Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовСнипет.Видимость Или
		Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовПолныйПуть.Видимость Или
		Не Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовИДСтроки.Видимость

		Тогда

		ПоказатьСкрытьСтрокаРеальнойПроцедуры("Показать");
		ПоказатьСкрытьАдресСнипета("Показать");
		ПоказатьСкрытьСнипет("Показать");
		ПоказатьСкрытьПутьКФайлу("Показать");
		ПоказатьСкрытьИДСтроки("Показать");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.СнятьФлажки;

	Иначе
		ПоказатьСкрытьСтрокаРеальнойПроцедуры("");
		ПоказатьСкрытьАдресСнипета("");
		ПоказатьСкрытьСнипет("");
		ПоказатьСкрытьПутьКФайлу("");
		ПоказатьСкрытьИДСтроки("");
		Элементы.ПоказатьСкрытьВсеКолонки.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИДСтроки(Команда)
	ПоказатьСкрытьКолонкуДереваТестов("ДеревоТестовИДСтроки", "ПоказатьСкрытьИДСтроки", Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьКолонкуДереваТестов(Знач ИмяКолонки, Знач ИмяПоляФормы, Знач Команда)
	ЭлементКолонки = Элементы.ДеревоТестов.ПодчиненныеЭлементы[ИмяКолонки];
	ЭлементФормы = Элементы[ИмяПоляФормы];
	Если Не ЭлементКолонки.Видимость Или Команда = "Показать" Тогда
		ЭлементКолонки.Видимость = Истина;
		ЭлементФормы.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		ЭлементКолонки.Видимость = Ложь;
		ЭлементФормы.Картинка = БиблиотекаКартинок.СнятьФлажки;
	КонецЕсли;
КонецПроцедуры
//	} управление видимостью колонок ДереваТестов

&НаКлиенте
Процедура РедактироватьТаблицуТекст(Команда)
	ОткрытьРедактированиеТаблицыGherkin();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМакетПоТаблице(Команда)
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Объект.СгенерированныйСценарий, Символы.ПС);

	МассивСтрокДляРедактирования = Новый Массив;
	Для Ккк = (НижняяГраница - 1) По ВерхняяГраница - 1 Цикл
		МассивСтрокДляРедактирования.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;

	Если МассивСтрокДляРедактирования.Количество() = 0 Тогда
		СделатьСообщение("Не найдена таблица для редактирования.");
		Возврат;
	КонецЕсли;

	ТабДок = Новый ТабличныйДокумент;
	НомСтр = 0;
	Для Каждого СтрокаМассива Из МассивСтрокДляРедактирования Цикл
		НомСтр = НомСтр + 1;

		Стр = СокрЛП(СтрокаМассива);
		Если Лев(Стр, 1) = "|" Тогда
			Стр = Сред(Стр, 2);
		КонецЕсли;

		Если Прав(Стр, 1) = "|" Тогда
			Стр = Лев(Стр, СтрДлина(Стр) - 1);
		КонецЕсли;

		МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");

		НомКол = 0;
		Для Ккк = 0 По МассивЗначений.Количество() - 1 Цикл
			НомКол = НомКол + 1;

			ТекЗначение = СокрЛП(МассивЗначений[Ккк]);
			Если ТекЗначение = "''" Тогда
				ТекЗначение = "";
			КонецЕсли;

			Если Лев(ТекЗначение, 1) = "'" И Прав(ТекЗначение, 1) = "'" Тогда
				ТекЗначение = Сред(ТекЗначение, 2);
				ТекЗначение = Лев(ТекЗначение, СтрДлина(ТекЗначение) - 1);
			КонецЕсли;

			ТекЗначение = СтрЗаменить(ТекЗначение, "\n", Символы.ПС);

			ТабДок.Область(НомСтр, НомКол, НомСтр, НомКол).Текст = ТекЗначение;

			Если НомСтр = 1 Тогда
				ТабДок.Область(НомСтр, НомКол, НомСтр, НомКол).ШиринаКолонки = 12;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКод(Команда)
	Выполнить(РеквизитПроизвольныйКод);
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеанса(Команда)
	ВычислитьPIDЭтогоСеансаСлужебный();
КонецПроцедуры

//СохранитьНастройкиКлиент(Команда)

&НаКлиенте
Процедура ДобавитьСтрокуВСписокБиблиотек(Команда)
	Элементы.КаталогиБиблиотек.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокиВСпискеБиблиотек(Команда)
	Объект.КаталогиБиблиотек.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВСписокСловарейЗамен(Команда)
	Элементы.ЗаписьВидеоСловарьЗамен.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСгенерированныйСценарий(Команда)
	Объект.СгенерированныйСценарий = "";
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиТекстНаДругойЯзык(Команда)
	Перевод = ПеревестиТекст(Объект.СгенерированныйСценарий);
	Объект.СгенерированныйСценарий = Перевод;
КонецПроцедуры

#КонецОбласти //КомандыФормы

#Область ОбработкаСобытийДеревоТестов

&НаКлиенте
Процедура ДеревоТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	Если МассивСценариевДляВыполнения <> Неопределено И Элемент.ТекущиеДанные.Тип = "Шаг" Тогда
		Родитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
		Если Родитель <> Неопределено И Родитель.Статус =  "Failed" Тогда
			ИДСтрокиСценария = Родитель.ИДСтроки;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			Если РезультатПрохожденияТестовСценария <> Неопределено Тогда
				ВыполненныеШаги = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
				Для каждого ИсторияШага из ВыполненныеШаги Цикл
					Если ИсторияШага.Статус = "Failed" Тогда
						Если ИсторияШага.Свойство("ОписаниеОшибки") Тогда
							СделатьСообщение(ИсторияШага["ОписаниеОшибки"]);
						Иначе
							СделатьСообщение("Нет описания ошибки");
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда //F9
		ОбработатьУстановкуСнятиеБрейкпоинта();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		Если НРег(ПараметрыПеретаскивания.Значение.Расширение) = ".feature" Тогда
			Объект.КаталогФич = ПараметрыПеретаскивания.Значение.ПолноеИмя;
			ЗагрузитьФичи();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //ОбработкаСобытийДеревоТестов

#Область ОбработкаСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектНаСервере = Объект();
	ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;

	ЕстьПоддержкаНемодальныхФорм    = УзнатьЕстьПоддержкаНемодальныхФорм();
	ЕстьПоддержкаАсинхронныхВызовов = УзнатьЕстьПоддержкаАсинхронныхВызовов();
	ЕстьЗащитаОтОпасныхДействий     = УзнатьЕстьЗащитаОтОпасныхДействий();

	Если Параметры.Свойство("КаталогИнструментов") Тогда
		Объект.КаталогИнструментов = Параметры.КаталогИнструментов;
	КонецЕсли;
	Если Параметры.Свойство("КаталогПроекта") Тогда
		Объект.КаталогПроекта = Параметры.КаталогПроекта;
	КонецЕсли;

	Объект.КоличествоСекундПоискаОкна = 10;

	МакетШаблонПеревода = ОбъектНаСервере.ПолучитьМакет("ШаблонПеревода");

	СтатусыРезультатаТестирования = ОбъектНаСервере.СтатусыРезультатаТестирования;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПеременныеТелаМодуля();

	Объект.ИспользоватьПрямыеПутиФайлов = Объект.ИспользоватьПрямыеПути И КлиентИСерверРасположеныНаОднойМашине();

	// видимость колонок Дерева тестов
	Если НЕ Объект.РежимСамотестирования Тогда
		ПоказатьСкрытьСтрокаРеальнойПроцедуры("");
		ПоказатьСкрытьАдресСнипета("");
		ПоказатьСкрытьСнипет("");
		ПоказатьСкрытьПутьКФайлу("");
		ПоказатьСкрытьИДСтроки("Показать");
	КонецЕсли;

	УстановитьВидимостьСлужебныхЭлементов();

	Объект.ВыполнятьШагиАссинхронно = Ложь;
	Объект.ЯзыкГенератораGherkin = "ru";

	ОбъектКонтекст            = Новый Структура;
	ОбъектКонтекстСохраняемый = Новый Структура;
	Если Объект.ДополнительныеПараметры  = Неопределено Тогда
		Объект.ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	ЗаполнитьКаталогИнструментовЕслиОнПустой();

	Обрабочик_ПриОткрытииЗавершение = Асинк().смв_НовыйОписаниеОповещения("ПриОткрытииЗавершение", ЭтаФорма);
	ЗагрузитьПлагины(Ложь, Обрабочик_ПриОткрытииЗавершение);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьОбработчикОжидания("ОпросЭлементовФормTestClient");
	ОтключитьОбработчикОжидания("ПроверкаВнешнихКоманд");
	Если НЕ ЭтоЗапускВРежимеБезЗагрукиНастроек Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если Не ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") Тогда
			КомандаСохранитьНастройки(Неопределено);
		КонецЕсли;
	КонецЕсли;

	Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.РазорватьСоединение();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыборИзвестногоШага" Тогда
		Объект.СгенерированныйСценарий = Объект.СгенерированныйСценарий + Символы.ПС + Символы.Таб + Параметр;
	ИначеЕсли ИмяСобытия = "РедактированиеТаблицыGherkin" Тогда
		ЗаменитьТаблицуGherkinПослеРедактирования(Параметр);
	ИначеЕсли Найти(ИмяСобытия, "ВыполнитьСценарий") > 0 или Найти(ИмяСобытия, "ЗагрузитьСценарий") Тогда

		Если НЕ ЭтаФорма.Открыта() Тогда
			Возврат;
		КонецЕсли;

		НадоПерейтиКСтрокеДерева = -1;

		ИдОповещения = Параметр.ИдОповещения;
		Если ИдОповещения = ОбработанноеИдОповещения Тогда
			Возврат;
		КонецЕсли;

		ОбработанноеИдОповещения = ИдОповещения;

		Объект.КаталогПроекта = Параметр.КаталогПроекта;
		Объект.КаталогФич     = Параметр.ПутьКСценариям;

		Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;

		Если Параметр.Свойство("ОстановкаПриВозникновенииОшибки") Тогда
			Объект.ОстановкаПриВозникновенииОшибки = Параметр.ОстановкаПриВозникновенииОшибки;
		КонецЕсли;

		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Ложь;

		Если Параметр.Свойство("СТекущегоШага") Тогда
			Если Параметр.СТекущегоШага Тогда
				НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
				НомерСтрокиСценарияПереданныйИзвне           = Параметр.НомерСтрокиДляЗапускаСТекущегоШагаСценария;
				ЗагрузитьФичи();
				ПодключитьОбработчикОжидания("ЗапуститьСценарийСоСтрокиПрисланнойИзвне", 0.1, Истина);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если Найти(ИмяСобытия, "ВыполнитьСценарий") > 0 Тогда
			Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
		ИначеЕсли Найти(ИмяСобытия, "ЗагрузитьСценарий") > 0 Тогда
			ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
			Если ТекущиеДанныеДерева <> Неопределено И НЕ Объект.РежимСамотестирования Тогда
				НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
			КонецЕсли;
		КонецЕсли;

		Объект.ВыполнениеСценарияИзОбработкиОповещения = Истина;
		ЗагрузитьФичи();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //ОбработкаСобытийФормы

#Область ОбработкаСобытийЭлементовФормы

&НаКлиенте
Процедура КаталогиБиблиотекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.КаталогиБиблиотек.ТекущиеДанные;

	ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("КаталогиБиблиотекЗначениеНачалоВыбораЗавершение", ЭтаФорма);

	АСинк().смв_ПоказатьДиалогВыбораКаталога(ОписаниеОповещения,
												"Выберите каталог библиотеки",
												ТекущиеДанные,
												Ложь);

КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекЗначениеНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено
			Или ВыбранныеФайлы.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Для Каждого Строка Из Объект.КаталогиБиблиотек Цикл

		Если Строка.Значение = Элементы.КаталогиБиблиотек.ТекущиеДанные.Значение Тогда

			Строка.Значение = ВыбранныеФайлы[0];
			СохранитьНастройкиВХранилище("КаталогиБиблиотек", Объект.КаталогиБиблиотек);

			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ЗаписьВидеоСловарьЗаменНачалоВыбораЗавершение", ЭтаФорма);

	АСинк().смв_ПоказатьДиалогОткрытие(ОписаниеОповещения,
										,
										,
										,
										Элементы.ЗаписьВидеоСловарьЗамен.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено
			Или ВыбранныеФайлы.Количество() = 0 Тогда

		Возврат;
	КонецЕсли;

	Для Каждого Строка Из Объект.ЗаписьВидеоСловарьЗамен Цикл

		Если Строка.Значение = Элементы.ЗаписьВидеоСловарьЗамен.ТекущиеДанные.Значение Тогда

			Строка.Значение = ВыбранныеФайлы[0];
			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


#Область Выбор_реквизитов_объекта_каталог_и_файл

&НаКлиенте
Процедура РеквизитОбъектаКаталогНачалоВыбора(ИмяРеквизитаОбъекта)

	СтандартнаяОбработка = Ложь;

	ПараметрыОбработчика = Новый Структура("ИмяРеквизитаОбъекта", ИмяРеквизитаОбъекта);
	ОписаниеОповещения = Асинк().смв_НовыйОписаниеОповещения("РеквизитОбъектаНачалоВыбораЗавершение",
																ЭтаФорма, ПараметрыОбработчика);

	АСинк().смв_ПоказатьДиалогВыбораКаталога(ОписаниеОповещения,
												,
												Объект[ИмяРеквизитаОбъекта],
												Ложь);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитОбъектаФайлНачалоВыбора(ИмяРеквизитаОбъекта)

	СтандартнаяОбработка = Ложь;

	ПараметрыОбработчика = Новый Структура("ИмяРеквизитаОбъекта", ИмяРеквизитаОбъекта);
	ОписаниеОповещения = Асинк().смв_НовыйОписаниеОповещения("РеквизитОбъектаНачалоВыбораЗавершение",
																ЭтаФорма, ПараметрыОбработчика);

	АСинк().смв_ПоказатьДиалогОткрытие(ОписаниеОповещения,
												,
												,
												,
												Объект[ИмяРеквизитаОбъекта],
												Ложь);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитОбъектаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено
			Или ВыбранныеФайлы.Количество() = 0 Тогда

		Возврат;
	КонецЕсли;

	ИмяРеквизитаОбъекта = ДополнительныеПараметры.ИмяРеквизитаОбъекта;
	Объект[ИмяРеквизитаОбъекта] = ВыбранныеФайлы[0];

КонецПроцедуры


&НаКлиенте
Процедура КаталогПроектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогПроекта");

КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputAllureНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогOutputAllure");

КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputСкриншотыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогOutputСкриншоты");

КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputjUnitНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогOutputjUnit");

КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputCucumberJsonНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогOutputCucumberJson");

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЛогВыполненияСценариевНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("ИмяФайлаЛогВыполненияСценариев");

КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЛогОшибокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаФайлНачалоВыбора("ИмяКаталогаЛогОшибок");

КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияHTMLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогOutputИнструкцияHTML");

КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияMarkdownНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогOutputИнструкцияMarkdown");

КонецПроцедуры

&НаКлиенте
Процедура КаталогOutputИнструкцияВидеоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогOutputИнструкцияВидео");

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоКаталогМузыкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("ЗаписьВидеоКаталогМузыки");

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоПутьКДвижкуTTSНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаФайлНачалоВыбора("ЗаписьВидеоПутьКДвижкуTTS");

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоСловарьЗаменНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаФайлНачалоВыбора("ЗаписьВидеоСловарьЗамен");

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлКурсораМышкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаФайлНачалоВыбора("ЗаписьВидеоФайлКурсораМышки");

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоФайлВодянойЗнакНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаФайлНачалоВыбора("ЗаписьВидеоФайлВодянойЗнак");

КонецПроцедуры

&НаКлиенте
Процедура VanessaStackCommonsНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("VanessaStackCommons");

КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогИнструментов");

КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыДляГенерацииEPFНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("ВерсияПлатформыДляГенерацииEPF");

КонецПроцедуры

&НаКлиенте
Процедура КаталогВнешнихОбработокEDTНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	РеквизитОбъектаКаталогНачалоВыбора("КаталогВнешнихОбработокEDT");

КонецПроцедуры

#КонецОбласти

#Область ПрочиеЭлементыФормы

&НаКлиенте
Процедура ПроверкаРаботыVanessaADDВРежимеTestClientПриИзменении(Элемент)
	УстановитьВидимостьСлужебныхЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнструментовСлужебныйПриИзменении(Элемент)

	ОбработчикЗавершения = Асинк().смв_НовыйОписаниеОповещения("Обрабочик_ПодключитьБиблиотекуРаботыСВидео", ЭтаФорма);
	ЗагрузитьПлагины(Истина, ОбработчикЗавершения);

КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюВидеоПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюHTMLПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьИнструкциюMarkdownПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьСкриншотПриВозникновенииОшибкиПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеАллюрПриИзменении(Элемент)
	Если Не Объект.ДелатьОтчетВФорматеАллюр Тогда

		Объект.ОтображатьОтчетAllureВБраузере = Ложь;

	КонецЕсли;
	Элементы.ДанныеАллюрМеток.Видимость = Объект.ДелатьОтчетВФорматеАллюр;
	НастройкаДоступностиВидимостиЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеxUnitПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьОтчетВФорматеCucumberJsonПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьЛогВыполненияСценариевВТекстовыйФайлПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДелатьЛогОшибокВТекстовыйФайлПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВидеоДелатьНаложениеTTSПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускатьТестКлиентВРежимеОтладкиПриИзменении(Элемент)
	НастройкаДоступностиВидимостиЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РежимСамотестированияПриИзменении(Элемент)
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура КаталогиБиблиотекПослеУдаления(Элемент)
	СохранитьНастройкиВХранилище("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;

	Если ТекущиеДанные.Имя = "Этот клиент"
		И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияДопПараметры"
		И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияТипКлиента"
		И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияПорт"
		И Элементы.ДанныеКлиентовТестирования.ТекущийЭлемент.Имя <> "ДанныеКлиентовТестированияПутьКИнфобазе"
		Тогда
		Сообщить("Нельзя изменять текущее поле у зарезервированного подключения <Этот клиент>.");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	// проверка на дубли в колонке "Имя"
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", Элемент.ТекущиеДанные.Имя);

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = "В таблице подключений уже есть подключение с именем <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Элемент.ТекущиеДанные.Имя);
		Сообщить(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИмяКомпьютера) Тогда
		Элемент.ТекущиеДанные.ИмяКомпьютера = "localhost";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияПослеУдаления(Элемент)

	Если ДанныеКлиентовТестирования.Количество() = 0 Тогда
		Сообщить("Должна оставаться строка подключения текущего клиента");
		ЗаполнитьДанныеТекущейИнфобазы();
	КонецЕсли;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", "Этот клиент");

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СделатьСообщение("Данные по основному подключению Testclient перезаполнены.");
		ЗаполнитьДанныеТекущейИнфобазы();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияТипКлиентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		Если НРег(ТекущиеДанные.ИмяКомпьютера) = "localhost" Тогда
			ТекущиеДанные.ПортЗапускаТестКлиента = 1538;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлиентовТестированияИмяКомпьютераПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ТипКлиента = "Web" Тогда
		Если НРег(ТекущиеДанные.ИмяКомпьютера) <> "localhost" Тогда
			Если ТекущиеДанные.ПортЗапускаТестКлиента = 1538 Тогда
				ТекущиеДанные.ПортЗапускаТестКлиента = 1541;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.ПортЗапускаТестКлиента = 1541 Тогда
				ТекущиеДанные.ПортЗапускаТестКлиента = 1538;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкГенератораGherkinПриИзменении(Элемент)
	ОбновитьВидимостьЭлементовСвязанныхСПереводомТекста();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКодНаКлиенте(Команда)
	Перем Ванесса;
	Ванесса = ЭтаФорма;
	Выполнить(Объект.СгенерированныйСценарийКод);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКодНаСервере(Команда)
	ВыполнитьКодНаСервереНаСервере();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

#Область ВыполнениеШагов

&НаКлиенте
Процедура Шаг(Стр, ВыполнятьЧерезВременнуюФичу = Ложь) Экспорт
	Перем РезультатПрохожденияШага, Поз, ДвДанныеvbFeatureReader, ТекШаг;
	Поз = Найти(Стр, Символы.ПС);
	Если (Поз > 0) или ВыполнятьЧерезВременнуюФичу Тогда //значит это многострочный текст - для него будем работать через временную фичу
		ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр);
	Иначе
		ДвДанныеvbFeatureReader = ПутьФайлаИлиДвоичныеДанныеДляСервера(ПолучитьПутьКFeatureReader());
		ТекШаг                  = ПолучитьДанныеДляВыполненияОдногоШага(Стр, ДвДанныеvbFeatureReader);

		Если НЕ ТекШаг.ШагНайден Тогда
			ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр);
			Возврат;
		КонецЕсли;

		РезультатПрохожденияШага = ОписаниеВложенногоШага(Стр);
		ОбработкаТеста                     = ПолучитьКонтекстТестаПоАдресСнипета(ТекШаг.ИмяФайла);
		ОбработкаТеста.Контекст            = ОбъектКонтекст;
		ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;

		СписокАргументов = ТекШаг.ЗначенияПараметров;
		МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);

		ИмяПроцедуры = ТекШаг.ИмяПроцедуры;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);

		РезультатПрохожденияШага.Вставить("Статус", "Success");
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		//это одна строка. для неё будем вызывать преобразование строки Gherkin
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостояниеVanessaADD() Экспорт
	Рез        = Новый Структура;

	ТекущаяФича = Новый Структура;
	ТекущаяФича.Вставить("Имя", Неопределено);
	ТекущаяФича.Вставить("ПолныйПуть", Неопределено);

	ТекущийСценарий = Новый Структура;
	ТекущийСценарий.Вставить("Имя", Неопределено);
	ТекущийСценарий.Вставить("ИдСценария", Неопределено);
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	ТекущийСценарий.Вставить("ОписаниеСценария", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	ТекущийСценарий.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);

	ТекущийШаг = Новый Структура;
	ТекущийШаг.Вставить("Имя", Неопределено);
	ТекущийШаг.Вставить("ЗначенияПараметров", Неопределено);
	ТекущийШаг.Вставить("ИдСтроки", Неопределено);

	Рез.Вставить("ТекущаяФича", ТекущаяФича);
	Рез.Вставить("ТекущийСценарий", ТекущийСценарий);
	Рез.Вставить("ТекущийШаг", ТекущийШаг);

	Если ВсеСценарииВыполнены() Тогда
		Возврат Рез;
	КонецЕсли;

	ТекущийСценарий.Вставить("Имя", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	ТекущийСценарий.Вставить("ИдСценария", ТекИД_СценарияВМассиве);

	ТекущаяФича.Вставить("Имя", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи);
	ТекущаяФича.Вставить("ПолныйПуть", МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);

	Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;

	Если (Шаги.Количество() - 1) < ТекИД_ШагаВМассиве Тогда
		Возврат Рез;
	КонецЕсли;

	Если ТекИД_ШагаВМассиве < 0 Тогда
		Возврат Рез;
	КонецЕсли;

	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	ТекущийШаг.Вставить("Имя", ТекШаг.Имя);
	ТекущийШаг.Вставить("ИдСтроки", ТекШаг.СтрокаШага);
	ТекущийШаг.Вставить("ЗначенияПараметров", ТекШаг.ЗначенияПараметров.Скопировать());

	Возврат Рез;

КонецФункции

&НаКлиенте
Процедура ЗапретитьВыполнениеШагов() Экспорт
	Объект.ОстановитьВыполнениеШагов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеШагов(ШагУпал = Ложь, ОписаниеОшибки = "") Экспорт
	Объект.ОстановитьВыполнениеШагов = Ложь;

	Если ШагУпал Тогда
		УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки);
	КонецЕсли;

	Если ВсёЕщёИдётВыполнениеШагов
			Или МассивСценариевДляВыполнения <> Неопределено И ВсеСценарииВыполнены() Тогда
			Возврат;
		КонецЕсли;

	ИдСледующегоШага = Неопределено;
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		Если (МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги.Количество() - 1) >= ТекИД_ШагаВМассиве Тогда
			ТекШаг = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги[ТекИД_ШагаВМассиве];
			ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
		КонецЕсли;
	КонецЕсли;

	ПерейтиКВыполнениюСледующегоШага(Истина, Истина, ИдСледующегоШага);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатУсловия(Результат) Экспорт
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		ТекстСообщения = "В процедуру <УстановитьРезультатУсловия> передан неверный тип параметра <%1>. Ожидаемый тип: Булево.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Результат);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Объект.РезультатУсловия = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарии(ТекСценарий = Неопределено, ДопПараметры = Неопределено) Экспорт
	Если Объект.ИдетВыполнениеСценариев Тогда
		ПрекратитьВыполнениеВсехСценариев = Истина;
		Возврат;
	КонецЕсли;

	Оповестить("ЗапускСценариевVB");

	ОчиститьСообщения();

	ФлагСценарииВыполнены             = Ложь;
	ВозниклаОшибкаПодключенияTestClient = Ложь;
	ВозниклаОшибкаВШагеКонтекста        = Ложь;

	Объект.ИдетВыполнениеСценариев    = Истина;
	ОбновитьСтатусКнопкиВыполнитьСценарии();

	БылаОшибкаСкриптовСборкиВидео     = Ложь;
	Объект.ОстановитьВыполнениеШагов  = Ложь;
	Объект.ИдетЗаписьВидео            = Ложь;

	СтатусЗапускаСценариев            = Истина;
	ПрекратитьВыполнениеВсехСценариев = Ложь;
	ПрекратитьВыполнениеДанногоСценария = Ложь;
	ТекущийИсполняемыйФичаФайл        = Неопределено;

	СчетчикШаговБезТаймера = 0;

	ЭтоПример   = Ложь;
	ЭтоКонтекст = Ложь;
	ИдСценарияПоСтрокеШага = ОпределитьИдСценарияПоСтрокеШагаКлиент(Элементы.ДеревоТестов.ТекущиеДанные,
		ЭтоПример, ЭтоКонтекст);

	ЭтоПример   = Ложь;
	ЭтоКонтекст = Ложь;
	ИдСценарияПоСтрокеШага = ОпределитьИдСценарияПоСтрокеШагаКлиент(Элементы.ДеревоТестов.ТекущиеДанные,
		ЭтоПример, ЭтоКонтекст);

	ТекущаяСтрокаДереваИдСтроки = Неопределено;
	Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		НужнаяСтрока = Неопределено;
		ТекущаяСтрокаДереваИдСтроки = ОпределитьИдИсполняемойСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные, НужнаяСтрока);
		Если Объект.РежимВыполненияОдногоШага Тогда
			Если ТекущаяСтрокаДереваИдСтроки <> Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки Тогда
				Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			СоздатьСтруктуруПоискаДляСтрокиДерева(Элементы.ДеревоТестов.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;

	МассивИДСтрокиДерева                     = Новый Массив;
	МассивРезультатПрохожденияТестовСценария = Новый Массив;

	МассивСценариевДляВыполнения             = Новый Массив;
	МассивСтрокДереваДанныеФормы             = Новый Массив;

	ЕстьСохранённыйКонтекст = Ложь;
	Если (ТекСценарий = Неопределено) и (Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов) Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);

		СохраненнаяСтруктура   = ПолучитьСостоянияКонтекстовПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
		Если СохраненнаяСтруктура <> Неопределено Тогда //значит есть сохранённый контекст
			ЕстьСохранённыйКонтекст = Истина;
		КонецЕсли;

	ИначеЕсли (ТекСценарий = Неопределено) и (Объект.РежимВыполненияДанногоСценарияСТекущегоШага) Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
	ИначеЕсли (ТекСценарий = Неопределено) и (Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением) Тогда
		ТекСценарий = Новый Массив;
		ТекСценарий.Добавить(ИдСценарияПоСтрокеШага);
	КонецЕсли;

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ЭтоПример") Тогда
		ДопПараметры.Вставить("ЭтоПример", ЭтоПример);
	КонецЕсли;

	ДопПараметры.Вставить("ЭтоLinux", ЭтоLinux);

	ДопПараметры.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов", Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов и ЕстьСохранённыйКонтекст);
	ДопПараметры.Вставить("РежимВыполненияДанногоСценарияСТекущегоШага", Объект.РежимВыполненияДанногоСценарияСТекущегоШага);
	ДопПараметры.Вставить("РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением", Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением);
	ДопПараметры.Вставить("РежимВыполненияОдногоШага", Объект.РежимВыполненияОдногоШага);
	ДопПараметры.Вставить("ДобавитьСценарииПослеНайденного", Ложь);
	ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", Неопределено);
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов", СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	ИначеЕсли Объект.РежимВыполненияДанногоСценарияСТекущегоШага Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
		ДопПараметры.Вставить("НашелСценарий", Ложь);
	ИначеЕсли Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
		ДопПараметры.Вставить("ДобавитьСценарииПослеНайденного", Истина);
		ДопПараметры.Вставить("НашелСценарий", Ложь);
	ИначеЕсли Объект.РежимВыполненияОдногоШага Тогда
		ДопПараметры.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага", ТекущаяСтрокаДереваИдСтроки);
	КонецЕсли;

	Если Объект.РежимВыполненияОдногоШага Тогда
		ЗаполнитьМассивСценариевДляВыполненияКлиент(МассивСценариевДляВыполнения);
	Иначе
		ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы, ТекСценарий,
			КоллекцияИменКонтекстовОбработок, ДопПараметры);
	КонецЕсли;

	ЗапомнитьСтрокиДереваДанныеФормы();
	//ниже не должно быть серверных вызовов, которые бы изменили ДеревоТестов, иначе кеш данных формы надо будет строить заново

	ТекущаяФичаИнструкцииHTML     = "";
	ТекущаяФичаИнструкцииMarkdown = "";
	Если НЕ ПроверитьНаличиеИнструментаДляСозданияСкриншотов() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Или Объект.СниматьСкриншотКаждогоОкна1С Тогда
		Если Не ЗначениеЗаполнено(Объект.КомандаСделатьСкриншот) Тогда
			СделатьСообщение("Не указана команда для выполнения скриншотов. Например <""C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=>");
			Возврат;
		КонецЕсли;
		СоздатьКаталогСкриншотов();
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюВидео Тогда
		Если Не ЗначениеЗаполнено(Объект.КаталогOutputИнструкцияВидео) Тогда
			ТекстСообщения = "Не указан каталог для формирования видео инструкции.";
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияВидео), "*.mp4");
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ЗаписьВидеоКаталогДляВременныхФайлов));
		ВыполнитьПодготовкуКЗаписиВидео();
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюHTML Тогда
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML));
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияMarkdown));
	КонецЕсли;

	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputAllure));
	КонецЕсли;

	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputjUnit));
	КонецЕсли;

	Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
		СоздатьКаталогЕслиЕгоНет(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputCucumberJson));
	КонецЕсли;

	ПодготовитьВыводЛогаВФайл();

	Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Если ФайлСуществуетКомандаСистемы(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяКаталогаЛогОшибок)) Тогда
			ОчиститьСодержимоеКаталога(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяКаталогаЛогОшибок));
		КонецЕсли;
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюВидео Тогда
		ПрочитатьИзФичиПараметрыСборкиВидео();
	КонецЕсли;

	Если ВыполнятьСценарииАсинхронно Тогда
		ТекИД_СценарияВМассиве = -1;
		ПерейтиКВыполнениюСледующегоСценария();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШага() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;

	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Истина;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДанныйСценарийСТекущегоШагаСПродолжением() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;

	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Истина;
	Объект.РежимВыполненияОдногоШага                                = Ложь;
	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОдинШаг() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;

	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Истина;

	ВыполнитьСценарии();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарий() Экспорт
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;

	СтрокаСценария = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭтоПример = Ложь;
	Если СтрокаСценария.Тип <> "Сценарий" Тогда
		ЭтоШагКонтекста = Ложь;
		СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаСценария, ЭтоПример, ЭтоШагКонтекста);
		Если СтрокаСценария = Неопределено Тогда
			Сообщить("Не найден строка сценария.");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЭтоПример", ЭтоПример);

	Массив = Новый Массив;
	Массив.Добавить(СтрокаСценария.ИДСтроки);
	ВыполнитьСценарии(Массив, ДопПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьИВыполнитьДанныйСценарий() Экспорт
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;

	СтрокаСценария = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭтоПример = Ложь;
	Если СтрокаСценария.Тип <> "Сценарий" Тогда
		ЭтоШагКонтекста = Ложь;
		СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаСценария, ЭтоПример, ЭтоШагКонтекста);
		Если СтрокаСценария = Неопределено Тогда
			Сообщить("Не найден строка сценария.");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки             = СтрокаСценария.Имя;
	СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример = ЭтоПример;

	Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;

	ЗагрузитьФичи();
КонецПроцедуры

&НаКлиенте
Процедура ПроцУстановитьПометкуВыполнятьСценарийСЭтогоШага() Экспорт
	ТекущиеДанные = Элементы.ДеревоТестов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Тип <> "Шаг" Тогда
		Сообщить("Это возможно только для шага.");
		Возврат;
	КонецЕсли;

	Если СтрокаШагаСКоторогоНадоВыполнятьСценарий <> Неопределено Тогда
		Если СтрокаШагаСКоторогоНадоВыполнятьСценарий.Тип = "Шаг" Тогда
			ПромСтрока = Неопределено;
			НайтиСтрокуДереваПоИдСтроки(СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки, Объект.ДеревоТестов.ПолучитьЭлементы(), ПромСтрока);
			СтрокаШагаСКоторогоНадоВыполнятьСценарий = ПромСтрока;

			СтрокаШагаСКоторогоНадоВыполнятьСценарий.ВыполнятьСценарийСЭтогоШага = Ложь;
		КонецЕсли;
	КонецЕсли;

	СтрокаШагаСКоторогоНадоВыполнятьСценарий  = ТекущиеДанные;
	ТекущиеДанные.ВыполнятьСценарийСЭтогоШага = Истина;

	АктивироватьСоседнююСтрокуДерева(СтрокаШагаСКоторогоНадоВыполнятьСценарий);

	Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Истина;
	Если НЕ Объект.СохранятьКонтекстыПередВыполнениемШагов Тогда
		Объект.СохранятьКонтекстыПередВыполнениемШагов = Истина;
		СделатьСообщение("Флаг <Сохранять контексты перед выполнением шагов> установлен в <Истина>.");
	КонецЕсли;

	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость   = Истина;

	Сообщить("Пометка для шаг установлена.");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияШаговВсехСценариев() Экспорт
	ПрекратитьВыполнениеВсехСценариев = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагОстановкиВыполненияШаговОдногоСценария() Экспорт
	ПрекратитьВыполнениеДанногоСценария = Истина;
КонецПроцедуры

#КонецОбласти //ВыполнениеШагов

#Область СообщенияПользователю

//Делает сообщение пользователю
&НаКлиенте
Процедура СделатьСообщение(Знач Сообщение, ТипСообщения = "Информация") Экспорт
	ТекстСообщения = ПолучитьТекстСообщения(Сообщение);
	НовыйСтатусСообщения = ?(ТипСообщения = "Информация", СтатусСообщения.Обычное, СтатусСообщения.ОченьВажное);

	Сообщить(ТекстСообщения, НовыйСтатусСообщения);

	Если ТипСообщения <> "Информация" Или Объект.DebugLog Тогда
		ВывестиВЛогФайл(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Делает сообшение пользователю. Совместимость с xdd
//
// Параметры:
//  ТекстСообщения  - Строка - сообщение для пользователя
//  Стаутс  - СтатусСообщения
//
Процедура ВывестиСообщение(ТекстСообщения, Статус = Неопределено) Экспорт

	Если Статус = СтатусСообщения.Важное
			ИЛИ Статус = СтатусСообщения.ОченьВажное Тогда

		СтатусСтрока = "Важное";

	Иначе

		СтатусСтрока = "Информация";

	КонецЕсли;

	СделатьСообщение(ТекстСообщения, СтатусСтрока);


КонецПроцедуры // ВывестиСообщение()


//Показать предупреждение пользователю
&НаКлиенте
Процедура ВывестиПредупреждение(Знач Событие, Знач Сообщение) Экспорт
	ТекстСообщения = ПолучитьТекстСообщения(Сообщение);

	Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
	ЗаписатьЛогВТекстПредупреждение(Событие, ТекстСообщения);
КонецПроцедуры

//Делает сообщение пользователю, если установлен флаг "Включить отладочные сообщения"
&НаКлиенте
Процедура Отладка(Знач Сообщение) Экспорт
	Если Объект.DebugLog Тогда
		СделатьСообщение(Сообщение);
		ВывестиВЛогФайл(Сообщение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстСообщения(Знач Сообщение)
	Если Лев(Сообщение, 1) = "$" и Прав(Сообщение, 1) = "$" Тогда
		РасшифровкаСлужебногоСообщения = ТекстСообщенийПользователю[Сообщение];
		Если ЗначениеЗаполнено(РасшифровкаСлужебногоСообщения) Тогда
			Сообщение = РасшифровкаСлужебногоСообщения;
		КонецЕсли;
	КонецЕсли;

	ТекстСообщения = Строка(ТекущаяДата()) + " " + Сообщение;
	Возврат ТекстСообщения;
КонецФункции

#КонецОбласти //СообщенияПользователю

#Область TestClient

//Возвращает переменную типа ТестируемоеПриложение
&НаКлиенте
Функция ПолучитьТестовоеПриложение() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$");
	КонецЕсли;

	Если ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$");
	КонецЕсли;

	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение;
КонецФункции

//фиксирует форму TestClient, с которой будет происходить работа
//в ней будет происходить поиск элементов формы
&НаКлиенте
Процедура ЗафиксироватьФормуTestClient(ФормаПриложения) Экспорт
	ЗафиксированнаяФормаTestClient = ФормаПриложения;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуАктивногоОкна(ДопПараметры = Неопределено) Экспорт
	ОчиститьКешАктивнойТаблицыTestClient();

	СбрасыватьЗафиксированнуюФорму = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("СбрасыватьЗафиксированнуюФорму") Тогда
			СбрасыватьЗафиксированнуюФорму = ДопПараметры.СбрасыватьЗафиксированнуюФорму;
		КонецЕсли;
	КонецЕсли;

	Если СбрасыватьЗафиксированнуюФорму Тогда
		//убираем фиксацию формы, т.к. окно сменилось
		ЗафиксироватьФормуTestClient(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКешАктивнойТаблицыTestClient() Экспорт
	ОбъектКонтекст.Вставить("АктивнаяТаблицаTestClient", Новый Структура("ИмяТаблицы,Значение", Неопределено, Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКешТаблицуTestClient(ИмяТаблицы, Таблица) Экспорт
	Если ТипЗнч(Таблица) = Тип("ТестируемаяТаблицаФормы") Тогда
		ОбъектКонтекст.Вставить("АктивнаяТаблицаTestClient", Новый Структура("ИмяТаблицы,Значение", ИмяТаблицы, Таблица));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректноеЗначениеДляРаботыСПолем(Знач Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = XMLСтрока(Значение);
	ИначеЕсли Лев(Значение, 2) = "$$" и  Прав(Значение, 2) = "$$" Тогда
		ИмяПеременной = Сред(Значение, 3, СтрДлина(Значение) - 4);

		Попытка
			ЕстьТакаяПеременная = ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной);
		Исключение
			ЕстьТакаяПеременная = Ложь;
		КонецПопытки;

		Если ЕстьТакаяПеременная Тогда
			Возврат ОбъектКонтекстСохраняемый[ИмяПеременной];
		КонецЕсли;

		СохраненноеЗначение = ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной);

		Если СохраненноеЗначение = Неопределено Тогда
			ТекстСообщения = "Не смог найти сохранненное значение по переменой <%1>";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяПеременной);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		Возврат СохраненноеЗначение;
	КонецЕсли;
	Возврат Значение;
КонецФункции

&НаКлиенте
Функция СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclient(ОжидаемаяТаблица, ТаблицаTestClient, СтрокаОшибки) Экспорт
	Возврат СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclientСервер(ОжидаемаяТаблица, ТаблицаTestClient, СтрокаОшибки);
КонецФункции

&НаКлиенте
Функция НайтиВсеОкнаTestClient() Экспорт
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
КонецФункции

&НаКлиенте
Функция НайтиОкноTestClientПоЗаголовку(ЗаголовокОкна) Экспорт
	Возврат ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), ЗаголовокОкна);
КонецФункции

&НаКлиенте
Функция НайтиОкноVB() Экспорт
	МассивОкон = НайтиВсеОкнаTestClient();
	ОкноVB = Неопределено;

	Для Каждого ОкноИзМассива Из МассивОкон Цикл
		Если Найти(ОкноИзМассива.Заголовок, "autotest") > 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(ОкноИзМассива.Заголовок, "Vanessa ADD") > 0 Тогда
			ОкноVB = ОкноИзМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ОкноVB;
КонецФункции

&НаКлиенте
Функция НайтиТаблицыФормыTestClient(ТекущаяФорма) Экспорт
	Возврат  ТекущаяФорма.НайтиОбъекты(Тип("ТестируемаяТаблицаФормы"));
КонецФункции

&НаКлиенте
Функция НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени = Ложь,
	ВызыватьИсключение = Истина, ТипПоля = Неопределено, ДопПараметры = Неопределено) Экспорт

	Нашли = Ложь;
	МассивФорм = НайтиФормыТекущегоОкнаTestClient();

	ПолеРеквизит = Неопределено;
	НайтиРеквизитВМассивеФорм(МассивФорм, ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры);

	Если НЕ Версия8311ИлиВыше И ПолеРеквизит = Неопределено Тогда
		//проверим, что возможно есть окно, которое некорректно определяется как активное окно
		МассивФорм = НайтиФормыОкнаИзКонтекста();
		Если МассивФорм <> Неопределено Тогда
			НайтиРеквизитВМассивеФорм(МассивФорм, ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры);
		КонецЕсли;
	КонецЕсли;

	Если ПолеРеквизит <> Неопределено Тогда
		Возврат ПолеРеквизит;
	КонецЕсли;

	Если ВызыватьИсключение Тогда
		Если НЕ Нашли Тогда
			Если ИскатьПоИмени Тогда
				ТекстСообщения = "Элемента формы с именем <%1> не найдено.";
			Иначе
				ТекстСообщения = "Элемента формы с заголовком <%1> не найдено.";
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяРеквизита);

			Сообщить(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит) Экспорт
	Тип = ТипЗнч(ПолеРеквизит);

	Если Тип = Тип("ТестируемоеПолеФормы") Тогда
		Если ПолеРеквизит.Вид = ВидПоляФормы.ПолеВвода Тогда
			Попытка
				Возврат ПолеРеквизит.ПолучитьТекстРедактирования();
			Исключение
				//если поле невидимое - тогда получим представление данных
				Возврат ПолеРеквизит.ПолучитьПредставлениеДанных();
			КонецПопытки;
		КонецЕсли;
		Попытка
			ПредставлениеДанных = ПолеРеквизит.ПолучитьПредставлениеДанных();
		Исключение
			ПредставлениеДанных = Неопределено;
			СделатьСообщение(ОписаниеОшибки());
		КонецПопытки;

		Возврат ПредставлениеДанных;
	ИначеЕсли Тип = Тип("ТестируемаяДекорацияФормы") Тогда
		Стр = ПолеРеквизит.ПолучитьПредставлениеДанных();
		Если Не ЗначениеЗаполнено(Стр) Тогда
			Стр = ПолеРеквизит.ТекстЗаголовка;
		КонецЕсли;
		Возврат Стр;
	ИначеЕсли Тип = Тип("ТестируемаяТаблицаФормы") Тогда
		ТабДок = ПолучитьЗначениеТестируемаяТаблицаФормы(ПолеРеквизит);
		Возврат ТабДок;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяРеквизита, ИскатьПоИмени = Ложь, ДопПараметры = Неопределено) Экспорт
	ПолеРеквизит = ПолучитьЭлементФормыИзКешЕслиЭтоВозможно(ИмяРеквизита);
	Если ПолеРеквизит <> Неопределено Тогда
		Возврат ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит);
	КонецЕсли;

	ВызыватьИсключение = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ВызыватьИсключение") Тогда
			ВызыватьИсключение = ДопПараметры.ВызыватьИсключение;
		КонецЕсли;
	КонецЕсли;

	Нашли = Ложь;
	МассивФорм = НайтиФормыТекущегоОкнаTestClient();
	Для каждого ТекущаяФорма Из МассивФорм Цикл

		Попытка
			Если ИскатьПоИмени Тогда
				МассивЭлементов        = ТекущаяФорма.НайтиОбъекты(, , ИмяРеквизита);
			Иначе
				МассивЭлементов        = ТекущаяФорма.НайтиОбъекты(, ИмяРеквизита);
			КонецЕсли;

		Исключение
			//это возможно, если форма закрылась по ходу выполнения сценария
			Продолжить;
		КонецПопытки;

		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если МассивЭлементов.Количество() > 1  Тогда
			ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
			ТекстСообщения = "Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяРеквизита);
			Сообщить(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ПолеРеквизит = МассивЭлементов[0];
		СохранитьВКешТаблицуTestClient(ИмяРеквизита, ПолеРеквизит);

		Возврат ПолучитьПредставлениеДанныхЭлементаФормы(ПолеРеквизит);
	КонецЦикла;

	Если Не ВызыватьИсключение Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			ТекстСообщения = "Элемента формы с именем <%1> не найдено.";
		Иначе
			ТекстСообщения = "Элемента формы с заголовком <%1> не найдено.";
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяРеквизита);

		Сообщить(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция НайтиРеквизитТаблицы(ИмяТЧ, ИмяРеквизита, ИскатьПоИмени = Ложь) Экспорт
	ТЧ = НайтиТЧПоИмени(ИмяТЧ);

	Если ИскатьПоИмени Тогда
		ПолеРеквизит = ТЧ.НайтиОбъект(Тип("ТестируемоеПолеФормы"), , ИмяРеквизита);
	Иначе
		ПолеРеквизит = ТЧ.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ИмяРеквизита);
	КонецЕсли;

	Возврат ПолеРеквизит;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеРеквизитаОткрытойФормыПоИмени(ИмяРеквизита) Экспорт
	Возврат ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяРеквизита, Истина);
КонецФункции

&НаКлиенте
Функция НайтиТЧПоИмени(ИмяТЧ, НужнаяФорма = Неопределено, ИскатьПоИмени = Истина, ВызыватьИсключение = Истина) Экспорт
	Если ОбъектКонтекст.Свойство("АктивнаяТаблицаTestClient") Тогда
		Если ОбъектКонтекст.АктивнаяТаблицаTestClient <> Неопределено Тогда
			Если ОбъектКонтекст.АктивнаяТаблицаTestClient.ИмяТаблицы = ИмяТЧ Тогда
				Возврат ОбъектКонтекст.АктивнаяТаблицаTestClient.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НужнаяФорма = Неопределено Тогда

		Если ЗафиксированнаяФормаTestClient = Неопределено Тогда
			ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
			Если ОкноПриложения <> Неопределено Тогда
				НужнаяФорма           = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
			КонецЕсли;
		Иначе
			НужнаяФорма = ЗафиксированнаяФормаTestClient;
		КонецЕсли;

		Если НужнаяФорма = Неопределено Тогда
			//это бывает когда ОкноПриложения это начальная страница и на ней нет форм
			ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
			Если ОкноПриложения <> Неопределено Тогда
				НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ТЧ = НайтиТЧВДаннойФорме(ИмяТЧ, НужнаяФорма, ИскатьПоИмени);

	Если НужнаяФорма = Неопределено или ТЧ = Неопределено Тогда
		//иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
		//сначала поищем в недавно открытом окне

		Попытка
			ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
			НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
			ТЧ             = НайтиТЧВДаннойФорме(ИмяТЧ, НужнаяФорма, ИскатьПоИмени);
		Исключение

		КонецПопытки;
	КонецЕсли;

	Если НужнаяФорма = Неопределено Тогда
		ТекстСообщения = "Не найдена активная форма.";
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Если ТЧ = Неопределено и ВызыватьИсключение Тогда
		ТекстСообщения = "Таблица формы с именем <%1> не найдена.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТЧ);
		Сообщить(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Если ТЧ <> Неопределено Тогда
		ОбъектКонтекст.Вставить("ТекущаяТЧ", ТЧ);
	КонецЕсли;

	СохранитьВКешТаблицуTestClient(ИмяТЧ, ТЧ);

	Возврат ТЧ;
КонецФункции

&НаКлиенте
Процедура ЗапомнитьАктивноеОкно(АктивноеОкно, ДопПараметры = Неопределено) Экспорт
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ЗапомнитьАктивноеОкно") Тогда
			Если Не ДопПараметры.ЗапомнитьАктивноеОкно Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если АктивноеОкно <> Неопределено Тогда
		Если ОбъектКонтекст.Свойство("АктивноеОкно") Тогда
			ОбъектКонтекст.Вставить("ПредыдущееАктивноеОкно", ОбъектКонтекст.АктивноеОкно);
		КонецЕсли;
		ОбъектКонтекст.Вставить("АктивноеОкно", АктивноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры = Неопределено) Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$");
	КонецЕсли;

	Если НЕ Версия8311ИлиВыше Тогда
		//обход ошибки платформы определения активного окна, когда открыт модальный диалог
		ИскатьМодальныйДиалог = Ложь;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("ИскатьМодальныйДиалог") Тогда
				ИскатьМодальныйДиалог = ДопПараметры.ИскатьМодальныйДиалог;
			КонецЕсли;
		КонецЕсли;

		Если ИскатьМодальныйДиалог Тогда
			//если в платформе не исправлена ошибка определения активного окна
			//указать версию
			ОкноМодальногоДиалога = НайтиОкноМодальногоДиалога();
			Если ОкноМодальногоДиалога <> Неопределено Тогда
				Возврат ОкноМодальногоДиалога;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
	ЗапомнитьАктивноеОкно(АктивноеОкно, ДопПараметры);
	Возврат АктивноеОкно;
КонецФункции

&НаКлиенте
Функция ПолучитьГлавноеОкноИзТестовоеПриложение() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		ВызватьИсключение ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$");
	КонецЕсли;

	ОкнаПриложения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));

	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ОкноПриложения.Основное Тогда
			Возврат ОкноПриложения;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НайтиТекущееОкноTestClient() Экспорт
	Возврат ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции

&НаКлиенте
Функция НайтиФормыТекущегоОкнаTestClient(ДопПараметры = Неопределено) Экспорт
	Если ЗафиксированнаяФормаTestClient <> Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(ЗафиксированнаяФормаTestClient);
		Возврат Массив;
	КонецЕсли;

	ОкноПриложения         = ПолучитьАктивноеОкноИзТестовоеПриложение(ДопПараметры);
	Если ОкноПриложения = Неопределено Тогда
		ТекстСообщения = "Не получилось определить активное окно TestClient.";
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	МассивФорм             = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("АктивноеОкно", ОкноПриложения);
	КонецЕсли;
	Возврат МассивФорм;
КонецФункции

&НаКлиенте
Функция НайтиФормыОкнаИзКонтекста(ДопПараметры = Неопределено) Экспорт
	ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
	Если ОкноПриложения = Неопределено Тогда
		ТекстСообщения = "Не получилось определить активное окно TestClient из Контекста.";
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Попытка
		МассивФорм             = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Исключение
		//Скорее всего окно уже закрылось, но пока ещё есть в контексте.
		Возврат Неопределено;
	КонецПопытки;

	Возврат МассивФорм;
КонецФункции

&НаКлиенте
Функция НайтиОкноМодальногоДиалога(ТолькоПредупреждение = Ложь) Экспорт
	НужноеОкно = Неопределено;

	ОкнаПриложения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ОкноПриложения.Заголовок)
			или ((ОкноПриложения.Заголовок = "Выбор типа данных") и НЕ ТолькоПредупреждение)
			или ((ОкноПриложения.Заголовок = "Список значений") и НЕ ТолькоПредупреждение)
			Тогда
			НужноеОкно = ОкноПриложения;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НужноеОкно <> Неопределено Тогда
		ЗапомнитьАктивноеОкно(НужноеОкно);
	КонецЕсли;

	Возврат НужноеОкно;
КонецФункции

&НаКлиенте
Функция НайтиОкноПредупреждения() Экспорт
	Возврат НайтиОкноМодальногоДиалога(Истина);
КонецФункции

&НаКлиенте
Функция ЭтоЗаголовокОкнаМодальногоДиалога(Заголовок) Экспорт
	Если Заголовок = "1С:Предприятие" Тогда
		Возврат Истина;
	ИначеЕсли Заголовок = "1C:Enterprise" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ПолучитьТекстОкнаПредупреждения(НужноеОкно) Экспорт
	ПоляФормы = НужноеОкно.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	Если ПоляФормы.Количество() = 0 Тогда
		ТекстСообщения = "У окна <%1> не найдено ни одного элемента с типом <ТестируемоеПолеФормы>.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НужноеОкно.Заголовок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ПолеФормы = ПоляФормы[0];

	Возврат ПолеФормы.ТекстЗаголовка;
КонецФункции

&НаКлиенте
Функция НайтиФормуПоЗаголовку(ИмяФормы) Экспорт
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	НужнаяФорма = Неопределено;
	Если ОкноПриложения <> Неопределено Тогда
		НужнаяФорма = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
	КонецЕсли;
	Если НужнаяФорма = Неопределено Тогда
		//иногда 1С некорректно отдаёт текущее окно, тогда будем искать во всех окнах
		//сначала поищем в недавно открытом окне

		Попытка
			ОкноПриложения = ПолучитьАктивноеОкноИзКонтекста();
			НужнаяФорма    = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;
		Исключение

		КонецПопытки;

		//затем будем искать во всех окнах
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		Для каждого ТекОкно Из МассивОкон Цикл

			НужнаяФорма    = ТекОкно.НайтиОбъект(Тип("ТестируемаяФорма"), ИмяФормы);
			Если НужнаяФорма <> Неопределено Тогда
				ЗапомнитьАктивноеОкно(ТекОкно); //произошла неявная смена активного окна
				Возврат НужнаяФорма;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Если НужнаяФорма = Неопределено Тогда
		ТекстСообщения = "Форма с заголовком <%1> не найдена.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФормы);
		Сообщить(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
	Возврат НужнаяФорма;
КонецФункции

&НаКлиенте
Функция НайтиТекущуюФормуTestClient() Экспорт
	//НайтиТекущуюФормуTestClient() надо использовать, когда известно, что у текущего окна только одна форма, иначе надо использовать НайтиФормыТекущегоОкна()
	Получилось = Истина;
	Попытка
		ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
		ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
	Исключение
		Получилось = Ложь;
	КонецПопытки;

	Если Не Получилось Тогда
		ОкноПриложения         = ПолучитьАктивноеОкноИзТестовоеПриложение();
		ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип("ТестируемаяФорма"));
		ЗапомнитьАктивноеОкно(ОкноПриложения); //произошла неявная смена активного окна
	КонецЕсли;

	Возврат ТекущаяФорма;
КонецФункции

&НаКлиенте
Процедура ПолучитьПараметрыОбластиМакета(Знач ИмяОбласти, НачСтр, НачКол, КолСтр, КолКол) Экспорт
	ИмяОбластиОригинал = ИмяОбласти;

	ИмяОбласти = СокрЛП(ВРег(ИмяОбласти));
	Поз = Найти(ИмяОбласти, "R");
	Если Поз = 0 Тогда
		ТекстСообщения = "Неверный формат области <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяОбластиОригинал);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	Поз = Найти(ИмяОбласти, "C");
	Если Поз = 0 Тогда
		ТекстСообщения = "Неверный формат области <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяОбластиОригинал);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	НачСтр = Число(Лев(ИмяОбласти, Поз - 1));

	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	Поз = Найти(ИмяОбласти, ":");
	Если Поз = 0 Тогда
		КолСтр = НачСтр;
		Поз = Найти(ИмяОбластиОригинал, "C");
		НачКол = Число(Сред(ИмяОбластиОригинал, Поз + 1));
		КолКол = НачКол;
		Возврат;
	КонецЕсли;
	НачКол = Число(Лев(ИмяОбласти, Поз - 1));

	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);

	ИмяОбласти = СокрЛП(ВРег(ИмяОбласти));
	Поз = Найти(ИмяОбласти, "R");
	Если Поз = 0 Тогда
		ТекстСообщения = "Неверный формат области <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяОбластиОригинал);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	//вторая часть, после символа :

	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	Поз = Найти(ИмяОбласти, "C");
	Если Поз = 0 Тогда
		ТекстСообщения = "Неверный формат области <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяОбластиОригинал);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	КолСтр = Число(Лев(ИмяОбласти, Поз - 1)) - НачСтр + 1;

	ИмяОбласти = Сред(ИмяОбласти, Поз + 1);
	КолКол = Число(ИмяОбласти) - НачКол + 1;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьДействийПользователя(ОдинКлиентТестирования = Истина) Экспорт
	Если ОдинКлиентТестирования Тогда
		ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий();
	КонецЕсли;

	Если ТекущийTestclientЭтоWebКлиент Тогда
		СделатьСообщение("Web клиент не поддерживает запись действий пользователя.");
		Возврат;
	КонецЕсли;

	Если Элементы.кнНачатьЗаписьДействийПользователя.Видимость = Истина Тогда
		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.НачатьЗаписьЖурналаДействийПользователя();
			СделатьСообщение("Запись действий пользователя начата.");
		Исключение
			ТекстСообщения = "НачатьЗаписьДействийПользователя:%1";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
			СделатьСообщение(ТекстСообщения);
			Возврат;
		КонецПопытки;

	ИначеЕсли Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Заголовок = "Продолжить запись поведения";

		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПриостановитьЗаписьЖурналаДействийПользователя();
			СделатьСообщение("Запись действий пользователя приостановлена.");
		Исключение
			ТекстСообщения = "НачатьЗаписьДействийПользователя:%1";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
			СделатьСообщение(ТекстСообщения);
			Возврат;
		КонецПопытки;

	ИначеЕсли Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость = Истина Тогда

		Попытка
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПродолжитьЗаписьЖурналаДействийПользователя(); ;
			СделатьСообщение("Запись действий пользователя продолжена.");
		Исключение
			ТекстСообщения = "НачатьЗаписьДействийПользователя:%1";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
			СделатьСообщение(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;

	ИдетОпросЭлементовФормTestClient = Ложь;
	МассивСостояниеФормTestClient    = Новый Массив;
	ПодключитьОбработчикОжидания("ОпросЭлементовФормTestClient", 1);
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьТаблицуGherkin(МассивТаблицы) Экспорт
	МассивПараметров = ОпределитьПараметрыВСтрокеПримера(МассивТаблицы[0]);
	КолПараметров = МассивПараметров.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивПараметров Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;

	Для каждого СтрТзн Из МассивТаблицы Цикл
		МассивПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн);

		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			ДлинаСтроки = СтрДлина(СокрЛП(МассивПараметров.Получить(Ккк)));
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Ррр = 0 по (МассивТаблицы.Количество() - 1) Цикл
		СтрТзн = МассивТаблицы[Ррр];
		МассивПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн);
		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивПараметров[Ккк]);
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + " ";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;

		СтрПараметров = СокрЛП(СтрПараметров);

		МассивТаблицы[Ррр] = СтрПараметров;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаписьДействийПользователя() Экспорт

	Элементы.кнНачатьЗаписьДействийПользователя.Заголовок = "Начать запись поведения";

	ОтключитьОбработчикОжидания("ОпросЭлементовФормTestClient");
	Попытка
		Стр = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ЗавершитьЗаписьЖурналаДействийПользователя();
		СделатьСообщение("Запись действий пользователя закончена.");
	Исключение
		ТекстСообщения = "ЗавершитьЗаписьДействийПользователя:%1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
		Возврат;
	КонецПопытки;

	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Стр);

	Объект.СгенерированныйXML = Текст.ПолучитьТекст();

	ОбработатьXMLВUILogToScript(Стр);

	СделатьПереводСгенерированногоТекстаGherkin();

КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИсходныйXML() Экспорт
	Стр = Объект.СгенерированныйXML;
	ОбработатьXMLВUILogToScript(Стр);
	СделатьПереводСгенерированногоТекстаGherkin();

	ЭтаФорма.ТекущийЭлемент = Элементы.СценарийПоведения;
КонецПроцедуры

&НаКлиенте
Функция НаЭкранеОкноПредупреждения()
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;

	Попытка
		МассивОкон = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Для Каждого ТекущееОкно Из МассивОкон Цикл
		Если ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция НаЭкранеДиалогАвторизации() Экспорт
	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат Ложь;
	КонецЕсли;

	Попытка
		НужноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения")
		, "1С:Предприятие. Доступ к информационной базе");
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Если НужноеОкно = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ЗакрытьДиалогАвторизации()

	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Возврат;
	КонецЕсли;

	ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;

	Попытка
		ТестовоеПриложение.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Отмена").Нажать();
		ТестовоеПриложение.РазорватьСоединение();
	Исключение
		Возврат;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьПортНаЗанятость(Знач Порт = 1538) Экспорт

	Если Порт < 0 Или Порт > 65536 Тогда
		Порт = 1538;
	КонецЕсли;

	НачалоДиапазонаПортов    = 48000;
	ОкончаниеДиапазонаПортов = 50000;

	Если ЗначениеЗаполнено(Объект.ДиапазонПортовTestclient) Тогда
		//там должна быть строка вида 48000-48020
		МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(Объект.ДиапазонПортовTestclient, "-");
		Если МассивЗначений.Количество() <> 2 Тогда
			ТекстСообщения = "Указан неверный диапазон портов: <%1>";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Объект.ДиапазонПортовTestclient);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		НачалоДиапазонаПортов = Число(МассивЗначений[0]);
		ОкончаниеДиапазонаПортов = Число(МассивЗначений[1]);
	КонецЕсли;

	МассивЗанятыхПортов = ПолучитьМассивЗанятыхПортов();
	Если МассивЗанятыхПортов.Найти(Порт) <> Неопределено Тогда
		// найти свободный порт в диапазоне
		Для Счетчик = НачалоДиапазонаПортов По ОкончаниеДиапазонаПортов Цикл
			Если МассивЗанятыхПортов.Найти(Счетчик) = Неопределено Тогда
				СвободныйПорт = Счетчик;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат СвободныйПорт;
	КонецЕсли;

	Возврат Порт;

КонецФункции // ПолучитьСвободныйПорт()

&НаКлиенте
Функция ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующий(ДопПараметр = "", СтрокаОшибки = Неопределено) Экспорт

	ТекущиеДанные = Элементы.ДанныеКлиентовТестирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", "Этот клиент");
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", ТекущиеДанные.Имя);
	КонецЕсли;

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеЗапускаКлиентаТестирования = НайденныеСтроки[0];
	КонецЕсли;

	ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДопПараметр;

	РезультатПодключения = ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования, СтрокаОшибки);

	Возврат РезультатПодключения;

КонецФункции

//возвращает массив
//каждая строка массива - массив значений исходного табличного документа
//если возможно используется ЗаписатьСодержимоеВФайл
//для web клиента и для платформы меньше 8.3.8 - считывает макет по ячейкам, согласно указанных параметров
//если использовался метод ЗаписатьСодержимоеВФайл - будет взята только часть макета, согласно указанных параметров чтения макета
//параметры чтения макета задаются через шаг: Тогда Я задаю системные параметры считывания макета НачСтр 1 НачКол 1 КолСтр 5 КолКол 3
&НаКлиенте
Функция ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы, ДопПараметры = Неопределено) Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если НЕ ТекущийTestclientЭтоWebКлиент И ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") Тогда
		//значит можно сохранить макет в файл и пробросить в TestManager
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");

		ТекущаяДоступность = Истина;
		Попытка
			ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
		Исключение
		КонецПопытки;

		Если ТекущаяДоступность Тогда
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяВременногоФайла);
			ЭлементФормы.ЗаписатьСодержимоеВФайл();

			КоличествоПопытокПроверкиСуществованияФайла     = 0;
			МаксКоличествоПопытокПроверкиСуществованияФайла = ЗначениеТаймаутаДляАсинхронногоШага(10);
			Пока Истина Цикл
				КоличествоПопытокПроверкиСуществованияФайла = КоличествоПопытокПроверкиСуществованияФайла + 1;
				Если КоличествоПопытокПроверкиСуществованияФайла > МаксКоличествоПопытокПроверкиСуществованияФайла Тогда
					Прервать;
				КонецЕсли;

				Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
					Прервать;
				КонецЕсли;

				Sleep(1);
			КонецЦикла;
		Иначе
			Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы, ДопПараметры);
		КонецЕсли;

		Если Не ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			//значит либо файл не успел сохраниться, либо ТабличныйДокумент не доступен для редактирования, и просто не может сохранить файл
			//значит надо считать ТабличныйДокумент по ячейкам
			Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы, ДопПараметры);
		КонецЕсли;

		ПутьМакетаИлиДвоичныеДанные = Неопределено;
		КоличествоПопытокПолученияДвоичныхДанных     = 0;
		МаксКоличествоПопытокПолученияДвоичныхДанных = ЗначениеТаймаутаДляАсинхронногоШага(10);
		Пока Истина Цикл
			КоличествоПопытокПолученияДвоичныхДанных = КоличествоПопытокПолученияДвоичныхДанных + 1;

			Попытка
				ПутьМакетаИлиДвоичныеДанные = ПутьФайлаИлиДвоичныеДанныеДляСервера(ИмяВременногоФайла);
				Прервать;
			Исключение

			КонецПопытки;

			Если КоличествоПопытокПолученияДвоичныхДанных > МаксКоличествоПопытокПолученияДвоичныхДанных Тогда
				ТекстСообщения = "Не смог получить данные файла <%1>";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяВременногоФайла);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;

			Sleep(1);
		КонецЦикла;

		ТабДок = ПреобразоватьФайлМакетаВМассив(ПутьМакетаИлиДвоичныеДанные, ДопПараметры);

		УдалятьПустыеСтрокиИзМакета = Истина;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("УдалятьПустыеСтрокиИзМакета") Тогда
				УдалятьПустыеСтрокиИзМакета = ДопПараметры.УдалятьПустыеСтрокиИзМакета;
			КонецЕсли;
		КонецЕсли;

		Если УдалятьПустыеСтрокиИзМакета Тогда
			УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок);
		КонецЕсли;

		Возврат ТабДок;
	Иначе
		//значит надо считывать макет по каждой ячейке
		Возврат МакетTestClientПоЯчейкеКакМассив(ЭлементФормы, ДопПараметры);
	КонецЕсли;
КонецФункции

//возвращает ТабличныйДокумент
//для тонкого клиента, если возможно - использует ЗаписатьСодержимоеВФайл, при этом макет сохраняется целиком как есть
//для web клиента и для платформы меньше 8.3.8 - считывает макет по ячейкам, согласно указанных параметров чтения макета
//параметры чтения макета задаются через шаг: Тогда Я задаю системные параметры считывания макета НачСтр 1 НачКол 1 КолСтр 5 КолКол 3
&НаКлиенте
Функция ПолучитьТабличныйДокументTestClient(ЭлементФормы, ДопПараметры = Неопределено) Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если НЕ ТекущийTestclientЭтоWebКлиент И ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") Тогда
		//значит можно сохранить макет в файл и пробросить в TestManager
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");

		ТекущаяДоступность = Истина;
		Попытка
			ТекущаяДоступность = ЭлементФормы.ТекущаяДоступность();
		Исключение
		КонецПопытки;

		Если ТекущаяДоступность Тогда
			ОбъектКонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Истина, ИмяВременногоФайла);
			ЭлементФормы.ЗаписатьСодержимоеВФайл();

			КоличествоПопытокПроверкиСуществованияФайла     = 0;
			МаксКоличествоПопытокПроверкиСуществованияФайла = ЗначениеТаймаутаДляАсинхронногоШага(10);
			Пока Истина Цикл
				КоличествоПопытокПроверкиСуществованияФайла = КоличествоПопытокПроверкиСуществованияФайла + 1;
				Если КоличествоПопытокПроверкиСуществованияФайла > МаксКоличествоПопытокПроверкиСуществованияФайла Тогда
					Прервать;
				КонецЕсли;

				Если ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
					Прервать;
				КонецЕсли;

				Sleep(1);
			КонецЦикла;
		Иначе
			Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы, ДопПараметры);
		КонецЕсли;

		Если Не ФайлСуществуетКомандаСистемы(ИмяВременногоФайла) Тогда
			//значит либо файл не успел сохраниться, либо ТабличныйДокумент не доступен для редактирования, и просто не может сохранить файл
			//значит надо считать ТабличныйДокумент по ячейкам
			Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы, ДопПараметры);
		КонецЕсли;

		ПутьМакетаИлиДвоичныеДанные = Неопределено;
		КоличествоПопытокПолученияДвоичныхДанных     = 0;
		МаксКоличествоПопытокПолученияДвоичныхДанных = ЗначениеТаймаутаДляАсинхронногоШага(10);
		Пока Истина Цикл
			КоличествоПопытокПолученияДвоичныхДанных = КоличествоПопытокПолученияДвоичныхДанных + 1;

			Попытка
				ПутьМакетаИлиДвоичныеДанные = ПутьФайлаИлиДвоичныеДанныеДляСервера(ИмяВременногоФайла);
				Прервать;
			Исключение

			КонецПопытки;

			Если КоличествоПопытокПолученияДвоичныхДанных > МаксКоличествоПопытокПолученияДвоичныхДанных Тогда
				ТекстСообщения = "Не смог получить данные файла <%1>";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяВременногоФайла);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;

			Sleep(1);
		КонецЦикла;

		НадоСчитатьОбласть = Ложь;
		Если ДопПараметры <> Неопределено Тогда
			Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
				НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
			КонецЕсли;
		КонецЕсли;

		Если НадоСчитатьОбласть Тогда
			ТабДок = ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ПутьМакетаИлиДвоичныеДанные,
				ДопПараметры.НачСтр, ДопПараметры.НачКол, ДопПараметры.КолСтр, ДопПараметры.КолКол);
		Иначе
			ТабДок = ТабличныйДокументИзДвоичныхДанных(ПутьМакетаИлиДвоичныеДанные);
		КонецЕсли;

		Возврат ТабДок;
	Иначе
		//значит надо считывать макет по ячейке
		Возврат ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы, ДопПараметры);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементФормы, ДопПараметры = Неопределено) Экспорт
	ВыделятьВсеСтроки = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ВыделятьВсеСтроки") Тогда
			ВыделятьВсеСтроки = ДопПараметры.ВыделятьВсеСтроки;
		КонецЕсли;
	КонецЕсли;

	ТекущийРежимРедактирование = Ложь;
	Попытка
		ТекущийРежимРедактирование = ЭлементФормы.ТекущийРежимРедактирование();
	Исключение
	КонецПопытки;

	Если ТекущийРежимРедактирование Тогда
		Попытка
			ЭлементФормы.ЗакончитьРедактированиеСтроки();
		Исключение
		КонецПопытки;
	КонецЕсли;

	НадоПолучатьСтроки = Истина;
	ЗначениеТЧ         = Новый Массив;

	Попытка
		Если ВыделятьВсеСтроки Тогда
			ЭлементФормы.ПерейтиКПервойСтроке();
		КонецЕсли;
	Исключение
		//значит это не таблица
		НадоПолучатьСтроки = Ложь;
		ЗначениеТЧ         = Неопределено;
	КонецПопытки;

	Если НадоПолучатьСтроки  Тогда
		Попытка
			ТекЭлемент         = ЭлементФормы.ПолучитьТекстЯчейки();
			Если ВыделятьВсеСтроки Тогда
				ЭлементФормы.ВыделитьВсеСтроки();
				Если ТекущийTestclientЭтоWebКлиент Тогда
					//чтобы дать web клиенту успеть выделить строки
					sleep(1);
				КонецЕсли;
			КонецЕсли;
			ЗначениеТЧ         = ЭлементФормы.ПолучитьВыделенныеСтроки();
			НадоПолучатьСтроки = Ложь;
		Исключение
		КонецПопытки;
	КонецЕсли;

	Если НадоПолучатьСтроки Тогда
		//для случая когда в таблице нет строк
		Попытка
			ЗначениеТЧ = ЭлементФормы.ПолучитьВыделенныеСтроки();
		Исключение
			СделатьСообщение(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

	Возврат ЗначениеТЧ;
КонецФункции

&НаКлиенте
Процедура ЗапомнитьСостояниеФормыTestClient() Экспорт
	ДопПараметры = Новый Структура;
	СохраненноеСостояниеФормыTestClient = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Элементы.ПолучитьИзмененияФормыGherkin.Заголовок = ПолучитьТекстСообщенияПользователю("$Получить изменения формы$");
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСостояниеФормыTestClient() Экспорт
	СохраненноеСостояниеФормыTestClient = Неопределено;
	Элементы.ПолучитьИзмененияФормыGherkin.Заголовок =
		ПолучитьТекстСообщенияПользователю("$Получить состояние всей формы$");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеТекущегоЭлементаФормы() Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТолькоАктивныйЭлемент", Истина);
	ПолучитьИзмененияФормы("Gherkin", ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзмененияФормыGherkin() Экспорт
	ДопПараметры = Новый Структура;
	ПолучитьИзмененияФормы("Gherkin", ДопПараметры);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьПрофильTestClientПоИмени(ИмяКлиентаТестирования) Экспорт
	РазорватьСоединениеTestClient();

	// отключить существующий сеанс, если это не повторный запуск
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Подключен", Истина);

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОбъектКонтекстСохраняемый.Удалить("ТестовоеПриложение");
		ОбъектКонтекстСохраняемый.Удалить("ГлавноеОкноТестируемого");
	КонецЕсли;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);
	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = "Не найден профиль TestClient <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяКлиентаТестирования);
		Сообщить(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	СтрокаПрофиля = НайденныеСтроки[0];

	ЕстьПодключение = ПолучитьКлиентаТестирования(ИмяКлиентаТестирования);
	Если Не ЕстьПодключение Тогда
		СтрокаПрофиля.Подключен = Ложь;
	Иначе
		Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
			НайденнаяСтрока.Подключен = Ложь;
		КонецЦикла;

		СтрокаПрофиля.Подключен = Истина;
	КонецЕсли;

	Возврат ЕстьПодключение;
КонецФункции

&НаКлиенте
Функция ПолучитьКлиентаТестирования(ИмяКлиентаТестирования, ДопПараметр = "", СтрокаОшибки = Неопределено) Экспорт

	// отключаем существующее подключение
	РазорватьСоединениеTestClient();

	ДанныеЗапускаКлиентаТестирования = НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования);
	ДанныеЗапускаКлиентаТестирования.ДопПараметры = ДопПараметр + ДанныеЗапускаКлиентаТестирования.ДопПараметры;
	ЕстьПодключение = ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования, СтрокаОшибки);

	Если ЕстьПодключение Тогда
		СохранитьКлиентовТестирования();
	КонецЕсли;

	Возврат ЕстьПодключение;

КонецФункции

&НаКлиенте
Функция НайтиДанныеЗапускаКлиентаТестирования(ИмяКлиентаТестирования) Экспорт
	Результат = Неопределено;

	ПараметрыОтбора = Новый Структура;

	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0];
	КонецЕсли;

	Возврат Результат;
КонецФункции

//Делает переход к нужной строке таблицы
&НаКлиенте
Функция СделатьПереход(ТаблицаСписок, ОписаниеСтроки, ОшибкаПереходВниз, ОшибкаПереходВверх) Экспорт
	ПолучилосьПерейти = Ложь;
	Попытка
		ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить("НаправлениеПереходаКСтроке.Вниз"));
	Исключение
		ОшибкаПереходВниз = ОписаниеОшибки();
	КонецПопытки;

	Если НЕ ПолучилосьПерейти Тогда
		Попытка
			ПолучилосьПерейти = ТаблицаСписок.ПерейтиКСтроке(ОписаниеСтроки, Вычислить("НаправлениеПереходаКСтроке.Вверх"));
		Исключение
			ОшибкаПереходВверх = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;

	Возврат ПолучилосьПерейти;
КонецФункции

//пытается получить значения таблицы Gherkin из Контекста
&НаКлиенте
Функция ПолучитьЗначенияТаблицыGherkinИзКонтекста(ТабПарам) Экспорт
	Для Каждого СтрокаТабПарам Из ТабПарам Цикл
		Для Каждого Колонка Из СтрокаТабПарам Цикл
			СтрокаТабПарам[Колонка.Ключ] = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Колонка.Значение);
		КонецЦикла;
	КонецЦикла;
	Возврат ТабПарам;
КонецФункции

// Получает значение переменной из контекста
// РЕКОМЕНДАЦИЯ - похожий метод ВычислитьПеременныеКонтекстаВнутриСтроки
//
//проверяет значение на спецсимволы
//Если значение вида $ИмяПеременной$, тогда будет возвращено ОбъектКонтекст.ИмяПеременной
//ИначеЕсли значение вида $$ИмяПеременной$$, тогда будет возвращено ОбъектКонтекстСохраняемый.ИмяПеременной
//ИначеЕсли значение вида $$$ИмяПеременной$$$, это значит, что надо отбросить $$ слева и справа, т.е. символ $ экранирован
//Иначе будет возвращено просто значение
//
// Параметры:
//   Значение - Строка - <описание параметра>
//
//  Возвращаемое значение:
//   Произвольный - Исходное значение или значение переменного из контекста или сохраняемого контекста
//
&НаКлиенте
Функция ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Знач Значение) Экспорт
	Если (Лев(Значение, 1) = "$") Тогда
		ДлинаРазделителяГлобальныхПеременных = 2;
		ДлинаРазделителяЭкранированногоДоллара = 3;
		Если (Лев(Значение, ДлинаРазделителяЭкранированногоДоллара) = "$$$")
			И (Прав(Значение, ДлинаРазделителяЭкранированногоДоллара) = "$$$") Тогда
			//это значит, что надо отбросить $$ слева и справа
			ЗначениеДляПерехода = Сред(Значение, ДлинаРазделителяЭкранированногоДоллара);
			ЗначениеДляПерехода = Лев(ЗначениеДляПерехода, СтрДлина(ЗначениеДляПерехода)
				- (ДлинаРазделителяЭкранированногоДоллара - 1));

			Значение = ЗначениеДляПерехода;
		ИначеЕсли (Лев(Значение, ДлинаРазделителяГлобальныхПеременных) = "$$")
				И (Прав(Значение, ДлинаРазделителяГлобальныхПеременных) = "$$") Тогда
			ИмяПеременной = Сред(Значение, ДлинаРазделителяГлобальныхПеременных + 1);
			ИмяПеременной = Лев(ИмяПеременной, СтрДлина(ИмяПеременной) - ДлинаРазделителяГлобальныхПеременных);

			ПредполагаемоеЗначение = Неопределено;
			Попытка
				ЕстьТакаяПеременная = ОбъектКонтекстСохраняемый.Свойство(ИмяПеременной, ПредполагаемоеЗначение);
			Исключение
				ЕстьТакаяПеременная = Ложь;
			КонецПопытки;

			Если ЕстьТакаяПеременная Тогда
				Значение = ПредполагаемоеЗначение;
			Иначе
				//попробуем найти значение по ключу
				Значение = ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной);
				Если Значение = Неопределено Тогда
					ТекстСообщения = "Не смог по переменной <%1> найти сохраненное значение.";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяПеременной);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли Прав(Значение, 1) = "$" Тогда
			ИмяПеременной = Сред(Значение, 2);
			ИмяПеременной = Лев(ИмяПеременной, СтрДлина(ИмяПеременной) - 1);

			ПредполагаемоеЗначение = Неопределено;
			Попытка
				ЕстьТакаяПеременная = ОбъектКонтекст.Свойство(ИмяПеременной, ПредполагаемоеЗначение);
			Исключение
				ЕстьТакаяПеременная = Ложь;
			КонецПопытки;

			Если ЕстьТакаяПеременная Тогда
				Значение = ПредполагаемоеЗначение;
			Иначе
				Значение = ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной);
				Если Значение = Неопределено Тогда
					ТекстСообщения = "Не смог по переменной <%1> найти сохраненное значение.";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяПеременной);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Значение;
КонецФункции

// Вычисляет переменные контекста (со значениями типа "Строка")
//	и заменяет на соответствующие значения внутри строки
//
// Пример смотрите в фиче features\Core\FeatureReader\ПроверкаВычисленияПеременных.feature
//
//	Сценарий: Вычисление сложного выражения с переменными контекста в обычном параметре-строке
// 		Когда Я запоминаю строку "Привет" как переменную "ПроверяемаяПеременная"
// 		Когда Я запоминаю строку "$ПроверяемаяПеременная$" как переменную "Другая Проверяемая Переменная"
// 		Тогда переменная "Другая Проверяемая Переменная" имеет значение "$ПроверяемаяПеременная$"
// 		И выражение внутреннего языка '"$Другая Проверяемая Переменная$" = "$ПроверяемаяПеременная$"' Истинно
//
// Параметры:
//   Строка - Строка - строка, параметр-шага, в которой может быть использование переменных контекста
//	Например, "$Проверяемая Переменная$" или "$ГлобальнаяПеременная$"
//		или "Контекст.ПроверяемаяПеременная = ""$ПроверяемаяПеременная$"""
//		или """$Другая Проверяемая Переменная$"" = ""$ПроверяемаяПеременная$"""
//		или """$$Другая Глобальная Переменная$$"" = ""$$ГлобальнаяПеременная$$"""
//
//  Возвращаемое значение:
//   Строка - строка, в которой заменены переменные из контекста и сохраняемого контекста
//
&НаКлиенте
Функция ВычислитьПеременныеКонтекстаВнутриСтроки(Знач Строка) Экспорт
	ЭкранированиеВзаменТрехДолларов = "~=$~$=~";
	Результат = СтрЗаменить(Строка, "$$$", ЭкранированиеВзаменТрехДолларов);
	Результат = СтрЗаменить(Результат, "$КаталогПроекта$", Объект.КаталогПроекта);
	Результат = СтрЗаменить(Результат, "$КаталогВанессы$", Объект.КаталогИнструментов);
	Попытка
		Результат = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Результат);
	Исключение
		Результат = Строка;
	КонецПопытки;
	Результат = ВычислитьПеременныеИзКонтекстовВнутриСтроки(Результат, ОбъектКонтекстСохраняемый, "$$");
	Результат = ВычислитьПеременныеИзКонтекстовВнутриСтроки(Результат, ОбъектКонтекст, "$");
	Результат = СтрЗаменить(Результат, ЭкранированиеВзаменТрехДолларов, "$$$");
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВычислитьПеременныеИзКонтекстовВнутриСтроки(Знач Значение, Знач Контекст, Знач РазделительПеременной)
	Результат = Значение;
	Если Найти(Результат, РазделительПеременной) = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Результат = ЗаменитьПеременныеИзКонтекстовВнутриСтроки(Результат, Контекст, РазделительПеременной);
	СохраняемыеЗначения = Неопределено;
	Если Контекст.Свойство("СохраняемыеЗначения", СохраняемыеЗначения) Тогда
		Результат = ЗаменитьПеременныеИзКонтекстовВнутриСтроки(Результат, СохраняемыеЗначения, РазделительПеременной);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЗаменитьПеременныеИзКонтекстовВнутриСтроки(Знач Строка, Знач КоллекцияКонтекста, Знач РазделительПеременной)
	Результат = Строка;
	Для каждого КлючЗначение Из КоллекцияКонтекста Цикл
		ЗначениеИзКонтекста = КлючЗначение.Значение;
		Если ТипЗнч(ЗначениеИзКонтекста) = Тип("Строка") Тогда
			// ЗначениеДляСтроки = """" + СтрЗаменить(ЗначениеИзКонтекста, """", """""") + """";
			ЗначениеДляСтроки = ЗначениеИзКонтекста;
			Результат = СтрЗаменить(Результат, РазделительПеременной + КлючЗначение.Ключ + РазделительПеременной,
				ЗначениеДляСтроки);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтрокиИзТаблицы(ТабПарам, ИмяТаблицы = Неопределено) Экспорт
	ОписаниеСтроки = Новый Соответствие();

	Строка1    = ТабПарам[0];
	Строка2    = ТабПарам[1];
	КолКолонок = Строка1.Количество();

	Для Ккк = 1 По КолКолонок Цикл
		Ключ     = Строка1["Кол" + XMlСтрока(Ккк)];
		Значение = Строка2["Кол" + XMlСтрока(Ккк)];
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Значение = СтрЗаменить(Значение, Символы.НПП, "");
		КонецЕсли;

		Значение = СтрЗаменить(Значение, "\n", Символы.ПС);
		Значение = ПолучитьЗначениеИзКонтекстаЕслиЭтоВозможно(Значение);

		Если ИмяТаблицы = "TypeTree" И Ключ = "Значение" Тогда
			//обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
			Ключ = "";
		ИначеЕсли ИмяТаблицы = "TypeTree" И Ключ = "Колонка1" и НЕ (ТекущийTestclientЭтоWebКлиент) Тогда
			//обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
			Ключ = "";
		ИначеЕсли ИмяТаблицы = "ValueList" И Ключ = "" Тогда
			//обход бага разного представления таблицы выбора типа в тонком клиенте и в web клиенте
			Ключ = "Значение";
		КонецЕсли;

		ОписаниеСтроки.Вставить(Ключ, Значение);
	КонецЦикла;

	Возврат ОписаниеСтроки;
КонецФункции

&НаКлиенте
Процедура АктивизироватьЭлементформы(ЭлементФормы) Экспорт
	Попытка
		ЭлементФормы.Активизировать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСоединениеTestClient() Экспорт
	Если ОбъектКонтекстСохраняемый <> Неопределено Тогда
		Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
			ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
			Попытка
				ТестовоеПриложение.РазорватьСоединение();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	ТекущийTestclientЭтоWebКлиент = Ложь;

	ОбъектКонтекстСохраняемый.Удалить("ТестовоеПриложение");
	ОбъектКонтекстСохраняемый.Удалить("ГлавноеОкноТестируемого");

	СброситьФлагПодключенияКлиентаТестирования();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректоеЗначениеДляСравненияТекста(Знач Стр) Экспорт
	Стр = СтрЗаменить(Стр, Символы.НПП, " ");
	Возврат Стр;
КонецФункции

//проверяет значение флага по его представлению
&НаКлиенте
Функция ЗначениеФлагаСоответствуетИстина(ПредставлениеДанных) Экспорт
	Если Найти(ПредставлениеДанных, Строка(Истина)) = 1 Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "да" Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "yes" Тогда
		Возврат Истина;
	ИначеЕсли НРег(ПредставлениеДанных) = "1" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

//преобразует переданное значение в макет.
//например массив структур или массив соответствий
&НаКлиенте
Функция ПреобразоватьЗначениеВМакет(Значение, МассивКлючей = Неопределено, ТолькоТекстЯчеек = Ложь) Экспорт
	ПереданМассивКлючей = Ложь;
	Если МассивКлючей <> Неопределено Тогда
		ПереданМассивКлючей = Истина;
	КонецЕсли;

	ТипЗначения = Неопределено;
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		ТипЗначения = Значение.Тип;
		Значение    = Значение.Значение;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Массив") или ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		Если Значение.Количество() = 0 Тогда
			Возврат Новый ТабличныйДокумент;
		КонецЕсли;

		ЧитаемИзМассиваСтруктур = Ложь;
		ПерваяСтрокаСлужебная = Ложь;
		ПерваяСтрока = Значение[0];
		Если ТипЗнч(ПерваяСтрока) = Тип("Структура") и ТипЗначения <> "Макет" Тогда
			ЧитаемИзМассиваСтруктур = Истина;
			//из первой строки берём массив ключей
			ПерваяСтрокаСлужебная = Истина;

			Если Не ПереданМассивКлючей Тогда
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из ПерваяСтрока Цикл
					МассивКлючей.Добавить(Элем.Значение);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПерваяСтрока) = Тип("Соответствие") и ТипЗначения <> "Макет" Тогда
			Если Не ПереданМассивКлючей  Тогда
				МассивКлючей = Новый Массив;
				Для Каждого Элем Из ПерваяСтрока Цикл
					МассивКлючей.Добавить(Элем.Ключ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		НовоеЗначение = Новый ТабличныйДокумент;

		ИдСтроки = 1;

		ИдКолонки = 0;
		Если МассивКлючей <> Неопределено Тогда
			Для Каждого Ключ Из МассивКлючей Цикл
				ИдКолонки = ИдКолонки + 1;
				НовоеЗначение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст = Ключ;
			КонецЦикла;
			ИдСтроки = ИдСтроки + 1;
		КонецЕсли;

		Если ЧитаемИзМассиваСтруктур Тогда
			Для Ккк = (ИдСтроки - 1) По Значение.Количество() - 1 Цикл
				СтрокаЗначение = Значение[Ккк];

				ИдКолонки = 0;
				Если МассивКлючей <> Неопределено Тогда
					Для Каждого Элем Из МассивКлючей Цикл
						ИдКолонки = ИдКолонки + 1;
						НовоеЗначение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст = СтрокаЗначение["Кол" + XMlСтрока(ИдКолонки)];
					КонецЦикла;
				КонецЕсли;

				ИдСтроки = ИдСтроки + 1;
			КонецЦикла;
		Иначе
			Если ИдСтроки = 2 Тогда
				НачЗначениеСчетчика = ИдСтроки - 2;
			Иначе
				НачЗначениеСчетчика = ИдСтроки - 1;
			КонецЕсли;

			Для Ккк = НачЗначениеСчетчика По Значение.Количество() - 1 Цикл
				СтрокаЗначение = Значение[Ккк];

				ИдКолонки = 0;
				Если МассивКлючей <> Неопределено Тогда
					Для Каждого Ключ Из МассивКлючей Цикл
						ИдКолонки = ИдКолонки + 1;
						НовоеЗначение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст = СтрокаЗначение[Ключ];
					КонецЦикла;
				Иначе
					Если ТипЗнч(СтрокаЗначение) = Тип("Структура") Тогда
						Для СчетчикКолонок = 1 По СтрокаЗначение.Количество() Цикл
							НовоеЗначение.Область(ИдСтроки, СчетчикКолонок, ИдСтроки, СчетчикКолонок).Текст = СтрокаЗначение["Кол" + XMlСтрока(СчетчикКолонок)];
						КонецЦикла;
					Иначе
						Для СчетчикКолонок = 0 По СтрокаЗначение.Количество() - 1 Цикл
							НовоеЗначение.Область(ИдСтроки, СчетчикКолонок + 1, ИдСтроки, СчетчикКолонок + 1).Текст = СтрокаЗначение[СчетчикКолонок];
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;

				ИдСтроки = ИдСтроки + 1;
			КонецЦикла;
		КонецЕсли;

		Возврат НовоеЗначение;
	ИначеЕсли ТипЗнч(Значение) = Тип("ТабличныйДокумент") Тогда
		Если ТолькоТекстЯчеек Тогда
			НовоеЗначение = Новый ТабличныйДокумент;

			Для ИдСтроки = 1 По Значение.ВысотаТаблицы Цикл
				Для ИдКолонки = 1 По Значение.ШиринаТаблицы Цикл
					НовоеЗначение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст = Значение.Область(ИдСтроки, ИдКолонки, ИдСтроки, ИдКолонки).Текст;
				КонецЦикла;
			КонецЦикла;

			Возврат НовоеЗначение;
		Иначе
			Возврат Значение;
		КонецЕсли;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции

//определяет как надо искать элемент формы
//если ИмяПоля начинается с символа !, тогда поиск будет по имени поля
//иначе по заголовку
//если заголовок поля начинается с символа !, тогда в значении ИмяПоля он должен быть проэкранирован \!
&НаКлиенте
Процедура ОпределитьРежимПоискаЭлементаНаФорме(ИмяПоля, ИскатьПоИмени) Экспорт
	ДлинаЭкранированногоЗнака = 2; //\!
	Если Лев(ИмяПоля, ДлинаЭкранированногоЗнака) = "\!" Тогда
		ИмяПоля = Сред(ИмяПоля, ДлинаЭкранированногоЗнака);
		ИскатьПоИмени = Ложь;
		Возврат;
	ИначеЕсли Лев(ИмяПоля, 1) = "!" Тогда
		ИмяПоля = Сред(ИмяПоля, ДлинаЭкранированногоЗнака);
		ИскатьПоИмени = Истина;
		Возврат;
	КонецЕсли;
	ИскатьПоИмени = Ложь;
КонецПроцедуры

&НаКлиенте
Функция ЗначениеТаймаутаДляАсинхронногоШага(Знач КолСекунд) Экспорт
	Попытка
		КолСекунд = Число(КолСекунд);
	Исключение
		ТекстСообщения = "Значение параметра таймаута ожидания должно быть числом. Переданное значение: %1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КолСекунд);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

	Возврат Макс(Объект.ТаймаутДляАсинхронныхШагов, КолСекунд);
КонецФункции

#КонецОбласти //TestClient

#Область ОбщегоНазначения

//Возвращает текст сообщения пользователю с учетом языка
&НаКлиенте
Функция ПолучитьТекстСообщенияПользователю(Текст) Экспорт
	Значение = ТекстСообщенийПользователю[Текст];
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;

	Возврат Текст;
КонецФункции

//Делает паузу во время исполнения кода на указанное число секунд
//Для реализации используется команда ping
//Кроссплатформенно
&НаКлиенте
Процедура Sleep(КолСекунд) Экспорт

	Попытка
		Если ЭтоLinux Тогда
			Команда = "ping -i " + Строка(КолСекунд) + " 127.0.0.1 -c 2 > /dev/null";
			КомандаСистемы(Команда);
		Иначе
			Команда = "ping 127.0.0.1 -n " + СокрЛП(КолСекунд + 1); // +1 нужен, т.к. в реальности происходит на один пинг меньше
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда, Истина, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = "Sleep:%1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

//Делает преобразование русской строки в английскую с помощью транслита
&НаКлиенте
Функция Транслит(Стр) Экспорт
	Рез = СокрЛП(Стр);
	Рез = СтрЗаменить(Рез, "а", "a");
	Рез = СтрЗаменить(Рез, "б", "b");
	Рез = СтрЗаменить(Рез, "в", "v");
	Рез = СтрЗаменить(Рез, "г", "g");
	Рез = СтрЗаменить(Рез, "д", "d");
	Рез = СтрЗаменить(Рез, "е", "e");
	Рез = СтрЗаменить(Рез, "ё", "e");
	Рез = СтрЗаменить(Рез, "ж", "zh");
	Рез = СтрЗаменить(Рез, "з", "z");
	Рез = СтрЗаменить(Рез, "и", "i");
	Рез = СтрЗаменить(Рез, "к", "k");
	Рез = СтрЗаменить(Рез, "л", "l");
	Рез = СтрЗаменить(Рез, "м", "m");
	Рез = СтрЗаменить(Рез, "н", "n");
	Рез = СтрЗаменить(Рез, "о", "o");
	Рез = СтрЗаменить(Рез, "п", "p");
	Рез = СтрЗаменить(Рез, "р", "r");
	Рез = СтрЗаменить(Рез, "с", "s");
	Рез = СтрЗаменить(Рез, "т", "t");
	Рез = СтрЗаменить(Рез, "у", "u");
	Рез = СтрЗаменить(Рез, "ф", "f");
	Рез = СтрЗаменить(Рез, "х", "h");
	Рез = СтрЗаменить(Рез, "ч", "ch");
	Рез = СтрЗаменить(Рез, "ш", "sh");
	Рез = СтрЗаменить(Рез, "щ", "sch");
	Рез = СтрЗаменить(Рез, "ъ", "");
	Рез = СтрЗаменить(Рез, "ь", "");
	Рез = СтрЗаменить(Рез, "э", "e");
	Рез = СтрЗаменить(Рез, "ю", "yu");
	Рез = СтрЗаменить(Рез, "й", "i");
	Рез = СтрЗаменить(Рез, "ц", "c");
	Рез = СтрЗаменить(Рез, "я", "ya");
	Рез = СтрЗаменить(Рез, "ы", "i");
	Рез = СтрЗаменить(Рез, "А", "A");
	Рез = СтрЗаменить(Рез, "Б", "B");
	Рез = СтрЗаменить(Рез, "В", "V");
	Рез = СтрЗаменить(Рез, "Г", "G");
	Рез = СтрЗаменить(Рез, "Д", "D");
	Рез = СтрЗаменить(Рез, "Е", "E");
	Рез = СтрЗаменить(Рез, "Ё", "E");
	Рез = СтрЗаменить(Рез, "Ж", "ZH");
	Рез = СтрЗаменить(Рез, "З", "Z");
	Рез = СтрЗаменить(Рез, "И", "I");
	Рез = СтрЗаменить(Рез, "К", "K");
	Рез = СтрЗаменить(Рез, "Л", "L");
	Рез = СтрЗаменить(Рез, "М", "M");
	Рез = СтрЗаменить(Рез, "Н", "N");
	Рез = СтрЗаменить(Рез, "О", "O");
	Рез = СтрЗаменить(Рез, "П", "P");
	Рез = СтрЗаменить(Рез, "Р", "R");
	Рез = СтрЗаменить(Рез, "С", "S");
	Рез = СтрЗаменить(Рез, "Т", "T");
	Рез = СтрЗаменить(Рез, "У", "U");
	Рез = СтрЗаменить(Рез, "Ф", "F");
	Рез = СтрЗаменить(Рез, "Х", "H");
	Рез = СтрЗаменить(Рез, "Ч", "CH");
	Рез = СтрЗаменить(Рез, "Ш", "SH");
	Рез = СтрЗаменить(Рез, "Щ", "SCH");
	Рез = СтрЗаменить(Рез, "Ъ", "");
	Рез = СтрЗаменить(Рез, "Ь", "");
	Рез = СтрЗаменить(Рез, "Ы", "I");
	Рез = СтрЗаменить(Рез, "Ц", "C");
	Рез = СтрЗаменить(Рез, "Э", "E");
	Рез = СтрЗаменить(Рез, "Ю", "YU");
	Рез = СтрЗаменить(Рез, "Я", "YA");
	Рез = СтрЗаменить(Рез, "Й", "I");
	Возврат(Рез);
КонецФункции

// Выполняет SikuliX-скрипт
//
// Параметры:
//  СтрокаКоманды		 - Строка 	 - путь к Sikuli-скрипту и аргументы
//  ЖдатьОкончания		 - Число	 - флаг ожидания окончания выполнения Sikuli-скрипта:
//									   -1	 - ожидать окончания выполнения скрипта;
//									   0	 - не ожидать окончания выполнения скрипта.
//  ЗапускЧерезСкрипт	 - Булево	 - флаг способа запуска Sikuli-скриптов:
//									   Ложь	 - устаревший способ запуска для Windows,
//											   используется по умолчанию для совместимости
//									   Истина	 - запуск через скрипт runsikulix
//
// Возвращаемое значение:
//   - Результат выполнения скрипта. 0 - если не было ошибок.
//
&НаКлиенте
Функция ВыполнитьSikuliСкрипт(СтрокаКоманды, ЖдатьОкончания = -1, ЗапускЧерезСкрипт = Истина) Экспорт

	Стр = ПолучитьСтрокуВызоваSikuli(ЗапускЧерезСкрипт) + " " + СтрокаКоманды;
	Отладка(Стр);
	Возврат ВыполнитьКомандуОСБезПоказаЧерногоОкна(Стр, ЖдатьОкончания); //TODO проверить без вывода UTF-8

КонецФункции

// Выполняет команду системы, при этом на экране не будет показано окно cmd
// Использует WshShell.
//
// Параметры:
//  СтрокаКоманды		 - Строка - выполняемая команда
//  ЖдатьОкончания		 - Булево, Число  - флаг ожидания окончания выполнения команды:
//		Если ЖдатьОкончания = Истина (или -1), тогда будет ожидания окончания работы приложения
//		Если ЖдатьОкончания = Ложь (или 0), тогда нет ожидания
//  ИспользоватьКодировкуТекстаUTF8	 - Булево - командный файл будет запущен с кодировкой консоли UTF8 через chcp 65001
//
// Возвращаемое значение:
//   - Результат выполнения скрипта. 0 - если не было ошибок.
//
&НаКлиенте
Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(Знач ТекстКоманды, Знач ЖдатьОкончания = Истина,
	Знач ИспользоватьКодировкуТекстаUTF8 = Истина) Экспорт

	УправлениеПриложениями = Плагин("УправлениеПриложениями");
	Возврат УправлениеПриложениями.ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды, ЖдатьОкончания,
		ИспользоватьКодировкуТекстаUTF8);

КонецФункции

// Выполняет запись строки в текстовый лог.
//
// Параметры:
//  Стр - Строка - нужная строка для записи в лог
//
// Запись в лог будет работать если выставлен флаг ДелатьЛогВыполненияСценариевВТекстовыйФайл
//
// Возможно задать параметр при запуске Vanessa.ADD через командную строку.
//
// Скрипты, которые входят в комплект Vanessa.ADD, позволяют читать этот файл на CI в реальном времени.
// Это позволяет видеть какой сценарий сейчас выполняется на CI.
//
// Параметры:
//   Сообщение - Строка - выводимое сообщение
//
&НаКлиенте
Процедура ВывестиВЛогФайл(Знач Сообщение) Экспорт
	Если Не Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		Возврат;
	КонецЕсли;

	ПлагинВыводВЛогФайл = Плагин("ВыводВЛогФайл");
	Попытка
		ПлагинВыводВЛогФайл.Вывести(Сообщение);
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		ЗаписатьЛогВЖРИнформация("ВыводВЛогФайл", ПодробноеПредставлениеОшибки(ИнфоОшибки));
	КонецПопытки;

КонецПроцедуры

// Устарело. Используйте ВывестиВЛогФайл
//
// Параметры:
//   Сообщение - Строка - выводимое сообщение
//
&НаКлиенте
Процедура ЗаписатьСтрокуВТекстовыйЛог(Знач Сообщение) Экспорт
	ВывестиВЛогФайл(Сообщение);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьВыводЛогаВФайл()
	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		ПутьФайлаЛогВыполненияСценариев = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ИмяФайлаЛогВыполненияСценариев);
		Если ФайлСуществуетКомандаСистемы(ПутьФайлаЛогВыполненияСценариев) Тогда
			УдалитьФайлыКомандаСистемы(ПутьФайлаЛогВыполненияСценариев);
		КонецЕсли;

		ПлагинВыводВЛогФайл = Плагин("ВыводВЛогФайл");
		ПлагинВыводВЛогФайл.ОткрытьФайл(ПутьФайлаЛогВыполненияСценариев);

	КонецЕсли;
КонецПроцедуры

// Позволяет в отладке посмотреть значение переменной
//
// Параметры:
//  Парам - Произвольный - нужная переменная
//  ПараметрВызватьИсключение - Булево - флаг того, что надо вызвать исключение
//
// Процедура полезна, когда нужно из внешней обработки посмотреть значение переменной, не перезапуская сеанс TestManager.
// Нужна для отладки кода внешних обработок.
&НаКлиенте
Процедура ПосмотретьЗначение(Парам, ПараметрВызватьИсключение = Истина) Экспорт
	Если ПараметрВызватьИсключение Тогда
		Попытка
			//Эта попытка/исключение нужна, чтобы можно было выставить флаг "Останавливаться по ошибке".
			//Тогда будет остановка на данном исключении, но сценарий продолжит свою работу.
			ВызватьИсключение "Исключение для просмотра значения.";
		Исключение
			Отладка("Вызов процедуры ""ПосмотретьЗначение"".");
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// { режим совместимости 8.3.5

// Аналог СтрРазделить() для старых версий платформы
// Описание параметров аналогично описанию параметров для СтрРазделить()
&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт

	Результат = Новый Массив;
	ДлинаРазделителя = СтрДлина(Разделитель);

	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + ДлинаРазделителя);
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;

	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрокБезКонтекста(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт

	Результат = Новый Массив;

	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;

	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

//Обертка для функции РазложитьСтрокуВМассивПодстрок()
//Нужна, т.к. не работет вызов Ванесса.РазложитьСтрокуВМассивПодстрок() из других обработок
&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрокКлиент(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	Возврат РазложитьСтрокуВМассивПодстрокБезКонтекста(Строка, Разделитель, ПропускатьПустыеСтроки);
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
//
&НаКлиенте
Функция СтрСоединить_(Массив, Разделитель = ",") Экспорт

	Результат = "";

	Для Индекс = 0 По Массив.ВГраница() Цикл
		Подстрока = Массив[Индекс];

		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;

		Если Индекс > 0 Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;

		Результат = Результат + Подстрока;
	КонецЦикла;

	Возврат Результат;
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
//
&НаСервереБезКонтекста
Функция СтрСоединить_Сервер(Массив, Разделитель = ",") Экспорт

	Результат = "";

	Для Индекс = 0 По Массив.ВГраница() Цикл
		Подстрока = Массив[Индекс];

		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;

		Если Индекс > 0 Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;

		Результат = Результат + Подстрока;
	КонецЦикла;

	Возврат Результат;
КонецФункции

// Замена функции СтрШаблон на конфигурациях с режимом совместимости < 8.3.6
// При внедрении в конфигурацию с режимом совместимости >= 8.3.6 данную функцию необходимо удалить
//
&НаКлиенте
Функция СтрШаблон_(Знач СтрокаШаблон, Знач Парам1 = Неопределено, Знач Парам2 = Неопределено,
		Знач Парам3 = Неопределено, Знач Парам4 = Неопределено) Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Парам1);
	МассивПараметров.Добавить(Парам2);
	МассивПараметров.Добавить(Парам3);
	МассивПараметров.Добавить(Парам4);

	Для Сч = 1 По МассивПараметров.Количество() Цикл
		ТекЗначение = МассивПараметров[Сч - 1];
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, "%" +Сч, Строка(ТекЗначение));
	КонецЦикла;
	Возврат СтрокаШаблон;
КонецФункции

// }

//{ подключение внешних файлов

// Позволяет программно подключить внешнюю обработку
// TODO не поддерживает чистую асинхронность в 8.3.13 - только если доступен прямой путь к файлу - УДАЛИТЬ??
&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(Знач ИмяФайла) Экспорт

	Если Объект.ИспользоватьПрямыеПутиФайлов Тогда

		ФайлОбработки = Новый Файл(ИмяФайла);
		ИмяОбработки = ФайлОбработки.ИмяБезРасширения;
		СоздатьФайлОбработки(ФайлОбработки.ПолноеИмя, ИмяОбработки);

		Возврат ИмяОбработки;

	КонецЕсли;

	Попытка

		ДополнительныеПараметры = Новый Структура;

		Если ЕстьПоддержкаНемодальныхФорм Тогда

			Оповещение = Асинк().смв_НовыйОписаниеОповещения("ОбработкаПослеПомещенияФайла", ЭтаФорма, ДополнительныеПараметры);
			АСинк().смв_ПоместитьФайл(Оповещение, , ИмяФайла, Ложь);

			Возврат ДополнительныеПараметры.ИмяОбработки;

		КонецЕсли;

		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ИмяФайла, , Ложь, УникальныйИдентификатор);
		Результат = Неопределено;
		ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ИмяФайла, АдресХранилища, ЕстьЗащитаОтОпасныхДействий,
															Объект.ИспользоватьПрямыеПутиФайлов);

		Возврат ИмяОбработки;

	Исключение

		ЗаписатьЛогВЖРИнформация("Загрузка",
			СтрШаблон_("Не удалось подключить внешнюю обработку на клиенте:
			|Имя файла %1
			|%2", ИмяФайла, ОписаниеОшибки()));

	КонецПопытки;

	Возврат Неопределено;

КонецФункции

//}

// Возвращает путь к парсеру фича файлов
&НаКлиенте
Функция ПолучитьПутьКFeatureReader() Экспорт
	ПутьКФайлу = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/featurereader/vbFeatureReader.epf";

	Возврат ПутьКФайлу;
КонецФункции

// Возвращает абсолютный путь файла из каталога проекта или каталога Ванесса-АДД по относительному пути
// ВАЖНО - при передачи пути, начинающегося на ".", будет получен путь каталога Ванесса-АДД
// например, при передаче "fixtures/Макет" возможно получить "C:\OneScript\lib\add\fixtures\Макет"
// также в пути возможно использовать переменные
//	$workspaceRoot - для вычисления пути внутри каталога проекта
//	$instrumentsRoot - для вычисления пути внутри каталога Ванесса-АДД, а не каталога проекта
//
// Параметры:
//   Путь - Строка - относительный путь
//
//  Возвращаемое значение:
//   Строка - абсолютный путь файла из каталога проекта
//
&НаКлиенте
Функция ПреобразоватьПутьСТочкамиКНормальномуПути(Знач ОригСтр = "") Экспорт

	Если ПустаяСтрока(ОригСтр) Тогда
		Возврат ОригСтр;
	КонецЕсли;

	Если Найти(ОригСтр, "$workspaceRoot") > 0 Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$workspaceRoot", ДополнитьСлешВПуть(Объект.КаталогПроекта));
	КонецЕсли;

	Если Найти(ОригСтр, "$instrumentsRoot") > 0 И НЕ ПустаяСтрока(Объект.КаталогИнструментов) Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$instrumentsRoot", ДополнитьСлешВПуть(Объект.КаталогИнструментов));
	КонецЕсли;

	ФайлПути = Новый Файл(ОригСтр);
	Если Лев(ОригСтр, 1) = "." Тогда
		//Для совместимости со старым кодом оставим пока КаталогИнструментов, правильней было-бы использовать КаталогПроекта
		ФайлПути = Новый Файл(ДополнитьСлешВПуть(Объект.КаталогИнструментов) + ОригСтр);
	КонецЕсли;

	Возврат ФайлПути.ПолноеИмя;

КонецФункции

// Возвращает абсолютный путь файла из каталога проекта по относительному пути внутри каталога проекта
// также в пути возможно использовать переменные
//	$workspaceRoot - для вычисления пути внутри каталога проекта
//	$instrumentsRoot - для вычисления пути внутри каталога Ванесса-АДД, а не каталога проекта
//
// Параметры:
//   Путь - Строка - относительный путь
//
//  Возвращаемое значение:
//   Строка - абсолютный путь файла из каталога проекта
//
&НаКлиенте
Функция ПолучитьАбсолютныйПутьФайлаИзКаталогаПроекта(Знач Путь) Экспорт

  Если Найти(Путь, "$workspaceRoot") > 0 Тогда
    Путь = СтрЗаменить(Путь, "$workspaceRoot", ДополнитьСлешВПуть(Объект.КаталогПроекта));
  ИначеЕсли Найти(Путь, "$instrumentsRoot") > 0 И НЕ ПустаяСтрока(Объект.КаталогИнструментов) Тогда
    Путь = СтрЗаменить(Путь, "$instrumentsRoot", ДополнитьСлешВПуть(Объект.КаталогИнструментов));
  Иначе
    Путь = ДополнитьСлешВПуть(Объект.КаталогПроекта) + Путь;
  КонецЕсли;

  ФайлПути = Новый Файл(Путь);
  Возврат ФайлПути.ПолноеИмя;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2) Экспорт
	Массив1 = РазложитьСтрокуВМассивПодстрокБезКонтекста(Версия1, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрокБезКонтекста(Версия2, ".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Мин(Массив1.Количество(), Массив2.Количество()) - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиенте
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданнаяКлиент(Версия1, Версия2) Экспорт

	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2);

КонецФункции

&НаКлиенте
Функция ПодходящийРежимСовместимостиПлатформыКлиент(Знач НеобходимаяВерсияПриложения) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если Не ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, НеобходимаяВерсияПриложения) Тогда
		Возврат Ложь;
	КонецЕсли;

	ВерсияРежимаСовместимости = ВерсияРежимаСовместимостиКлиент();

	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(ВерсияРежимаСовместимости, НеобходимаяВерсияПриложения);

КонецФункции

&НаКлиенте
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;

	Если (ТекИД_ШагаВМассиве >= 0) и (ТекИД_ШагаВМассиве <= (Шаги.Количество() - 1)) Тогда
		ТекШаг       = Шаги[ТекИД_ШагаВМассиве];
		ИДСтрокиШага = ТекШаг.СтрокаШага;
		СтрокаШага   = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);

		ИмяФичи = ПолучитьИмяФичиИзПолногоПути(СтрокаШага.ПолныйПуть);
		ИмяШага = СтрокаШага.ИмяШагаБезКлючевогоСлова;

		Макет = Неопределено;
		Попытка
			Обработка = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФичи);

			//Далее будет попытка получить макет из обработки, которая относистся к данному шагу (это либо обработка подчиненного сценария, либо обработка связанная с основной фичей).
			//Его может не быть, если это подчиненный сценарий, а хотели получить макет из основной фичи.
			//Если макет не был получен - значит далее будет попытка получить макет из обработки связанной с основной фичей, если такая обработка существует.
			Макет     = Обработка.ПолучитьМакетОбработки(ИмяМакета);
			Возврат Макет;
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			СообщениеОшибки = СтрШаблон_("Не удалось найти макет <%1> в фиче <%2>
			|%3", ИмяМакета, ИмяФичи, ПодробноеПредставлениеОшибки(ИнфоОшибки));
			ЗаписатьЛогВЖРИнформация("Макеты", СообщениеОшибки);
		КонецПопытки;
	КонецЕсли;

	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	Если СтрокаСценария.ФичаИмеетСвоюEPF Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
		ПутьФайлаСтрокиФичи = СтрокаФичи.ПолныйПуть;
		Если УниверсальноеПолноеИмяФайла(ПутьФайлаСтрокиФичи) <> УниверсальноеПолноеИмяФайла(ИмяФичи) Тогда

			Обработка  = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ПутьФайлаСтрокиФичи);

			Попытка
				Макет      = Обработка.ПолучитьМакетОбработки(ИмяМакета);
				Возврат Макет;
			Исключение
				ИнфоОшибки = ИнформацияОбОшибке();
				СообщениеОшибки = СтрШаблон_("Не удалось найти макет <%1> в файле шагов фичи <%2>
				|%3", ИмяМакета, ПутьФайлаСтрокиФичи, ПодробноеПредставлениеОшибки(ИнфоОшибки));
				ЗаписатьЛогВЖРИнформация("Макеты", СообщениеОшибки);
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;

	Попытка
		Макет = НайтиМакетВКаталогеПроекта(ИмяМакета);
		Возврат Макет;
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		СообщениеОшибки = СтрШаблон_("Не удалось найти макет <%1> в каталоге проекта <%2>
		|%3", ИмяМакета, Объект.КаталогПроекта, ПодробноеПредставлениеОшибки(ИнфоОшибки));
		ЗаписатьЛогВЖРИнформация("Макеты", СообщениеОшибки);
		Сообщить(СообщениеОшибки + Символы.ПС + ИнфоОшибки.Описание);
	КонецПопытки;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НайтиМакетВКаталогеПроекта(ИмяМакета) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		ТекстСообщения = "Не найден эталон макета <%1>. Реквизит ""Каталог проекта"" не заполнен.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяМакета);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Нашли = Ложь;

	ИмяМакетаДляПоиска = ИмяМакета;
	ИмяФайла           = Неопределено;
	Нашли              = НайтиМакетВКаталогеПроектаСлужебный(ИмяМакетаДляПоиска, ИмяФайла);

	Если Не Нашли Тогда
		ТекстСообщения = "Не найден файл макета <%1> в каталоге проекта <%2>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяМакета);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Объект.КаталогПроекта);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДвоичныеДанныеИлиПутьФайла = ПутьФайлаИлиДвоичныеДанныеДляСервера(ИмяФайла);

	Если ЭтоФайлДжейсон(ИмяФайла) Тогда

		ИскомыйМакет = ПолучитьТекстовыйДокументНаСервере(ДвоичныеДанныеИлиПутьФайла);

	Иначе

		ИскомыйМакет = ПолучитьТабличныйДокументНаСервере(ДвоичныеДанныеИлиПутьФайла);

	КонецЕсли;

	Возврат ИскомыйМакет;
КонецФункции

&НаСервере
Функция Объект() Экспорт
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция УстановленOneScript() Экспорт

	УправлениеПриложениями = Плагин("УправлениеПриложениями");
	Возврат УправлениеПриложениями.УстановленOneScript();

КонецФункции // УстановленOneScript()

&НаКлиенте
Процедура СоздатьШаблоныОбработок() Экспорт

	Если Не ЗначениеЗаполнено(Объект.ВерсияПлатформыДляГенерацииEPF) Тогда
		СделатьСообщение("Не указан каталог с нужной версией платформы 8.3.10 или выше.");
		Возврат;
	КонецЕсли;

	ИмяФайла = ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8.exe";
	Если ЭтоLinux Тогда
		ИмяФайла = ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8";
	КонецЕсли;

	Если Не ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		СтрокаСообщения = "Не найден файл <%1>";
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", ИмяФайла);
		СделатьСообщение(СтрокаСообщения);
		Возврат;
	КонецЕсли;

	МассивДействий = Новый Массив;
	ДобавитьМассивСостоянийФайлов(МассивДействий);
	ДобавитьСканированиеКаталогов(МассивДействий);
	КешПараметровДействий = ПолучитьКешФайловДляДействий(МассивДействий);

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекИдМассива", 0);
	ДопПараметры.Вставить("МассивДействий", МассивДействий);
	ДопПараметры.Вставить("КешПараметровДействий", КешПараметровДействий);
	ДопПараметры.Вставить("НадоЗагрузитьФичи", Ложь);
	ДопПараметры.Вставить("НадоГенерироватьEPF", Истина);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		АсинхронноПолучитьСостоянияОбъектовФайловойСистемы(ДопПараметры);
	Иначе
		ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
		СоздатьШаблоныОбработокПродолжение();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивPIDПроцессов(ИмяОбраза) Экспорт

	УправлениеПриложениями = Плагин("УправлениеПриложениями");
	Возврат УправлениеПриложениями.ПолучитьМассивPIDПроцессов(ИмяОбраза);

КонецФункции

&НаКлиенте
Процедура ЗавершитьСеансыTestClientПринудительно() Экспорт

	УправлениеПриложениями = Плагин("УправлениеПриложениями");
	УправлениеПриложениями.ЗавершитьСеансыTestClientПринудительно();

КонецПроцедуры

&НаКлиенте
// Получить массив PID процессов "1cv8.exe" и "1cv8c.exe"
//
// Параметры:
//   УчитыватьЗаголовокПриложения - Булево - учитываем только окно, у которых заголовок приложения
//		совпадает с заголовком текущего приложения
//
//  Возвращаемое значение:
//   Массив - массив PID процессов "1cv8.exe" и "1cv8c.exe"
//
Функция ПолучитьМассивPIDОкон1С(УчитыватьЗаголовокПриложения = Ложь) Экспорт

	УправлениеПриложениями = Плагин("УправлениеПриложениями");
	Возврат УправлениеПриложениями.ПолучитьМассивPIDОкон1С(УчитыватьЗаголовокПриложения);

КонецФункции

&НаКлиенте
Процедура СделатьОкноПроцессаАктивным(PID) Экспорт

	УправлениеПриложениями = Плагин("УправлениеПриложениями");
	УправлениеПриложениями.СделатьОкноПроцессаАктивным(PID);

КонецПроцедуры

&НаКлиенте
Процедура TASKKILL(ИмяПриложения) Экспорт

	УправлениеПриложениями = Плагин("УправлениеПриложениями");
	УправлениеПриложениями.TASKKILL(ИмяПриложения);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагВМассивТестов(МассивТестов, Снипет, ИмяПроцедуры, ПредставлениеТеста = Неопределено,
		ОписаниеШага = Неопределено, ТипШагаДляОписания = Неопределено, ТипШагаВДереве = Неопределено) Экспорт

	Структура = Новый Структура;

	Структура.Вставить("Снипет", Снипет);
	Структура.Вставить("ИмяПроцедуры", ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста", ПредставлениеТеста);
	Структура.Вставить("ОписаниеШага", ОписаниеШага);
	Структура.Вставить("ТипШага", ТипШагаДляОписания);
	Структура.Вставить("ТипШагаВДереве", ТипШагаВДереве);
	МассивТестов.Добавить(Структура);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиНаЭкранЗначениеСтруктуры(Значение) Экспорт
	Стр = "";
	Стр = Стр + "Количество значений = " + Значение.Количество() + Символы.ПС;
	Для Каждого Элем Из Значение Цикл
		Стр = Стр + "Ключ=" + Элем.Ключ + ", Значение=" + Элем.Значение + Символы.ПС;
	КонецЦикла;

	Предупреждение(Стр, 5);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКлиентовТестирования() Экспорт
	СохранитьНастройкиВХранилище("ДанныеКлиентовТестирования", ДанныеКлиентовТестирования);
	СохранитьНастройкиВХранилище("ДанныеАллюрМеток", Объект.ДанныеАллюрМеток);
КонецПроцедуры

//Преобразует строки вида "больше или равно" в ">="
//Это нужно для работы "Вычислить"
&НаКлиенте
Функция ПолучитьОператорПоТексту(Знач Стр) Экспорт
	Стр = СокрЛП(НРег(Стр));

	Если Стр = "больше" Тогда
		Стр = ">";
	ИначеЕсли Стр = "меньше" Тогда
		Стр = "<";
	ИначеЕсли Стр = "больше или равно" Тогда
		Стр = ">=";
	ИначеЕсли Стр = "меньше или равно" Тогда
		Стр = "<=";
	ИначеЕсли Стр = "равно" Тогда
		Стр = "=";
	ИначеЕсли Стр = "неравно" Тогда
		Стр = "<>";
	ИначеЕсли Стр = "не равно" Тогда
		Стр = "<>";
	КонецЕсли;

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ВычислитьPIDЭтогоСеансаСлужебный() Экспорт
	Попытка
		PIDЭтогоСеанса = "";

		oLocator = Новый COMObject("WbemScripting.SWbemLocator");
		oService = oLocator.ConnectServer(".", "root\CIMV2");

		oShell = Новый COMObject("WScript.Shell");
		oApp = oShell.Exec("rundll32.exe kernel32,Sleep");

		oChildProcess = oService.Get("Win32_Process.Handle=" + XMlСтрока(oApp.ProcessID));

		PIDЭтогоСеанса = XMlСтрока(oChildProcess.ParentProcessID);

		oChildProcess.Terminate();
	Исключение
		СделатьСообщение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

// метод используется только в служебном шаге "Когда я загружаю список фича файлов из указанных настроек и фильтров"
&НаКлиенте
Функция ПолучитьМассивФичаФайловИзКаталогаСогласноНастроек(КаталогСФичами) Экспорт
	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;
	НайтиФайлыКомандаСистемы(КаталогСФичами, СписокКаталогов, СписокФайлов, Истина);

	Массив = Новый Массив;

	Массив.Добавить(Новый Структура("Каталог,Фича,Уровень,Имя,ПолныйПуть,ДвоичныеДанные", Истина, Ложь, 1,
		КаталогСФичами, КаталогСФичами, Неопределено));

	РасширениеФич = ".feature";
	ДлинаСтрокиРасширенияФич = СтрДлина(РасширениеФич);
	УровеньФичВДереве = 2;
	Для Каждого ЭлементСпискаФайлов Из СписокФайлов Цикл
		ИмяФайлаИзСписка = ЭлементСпискаФайлов.Значение.ПолноеИмя;
		Если НРег(Прав(ИмяФайлаИзСписка, ДлинаСтрокиРасширенияФич)) <> РасширениеФич Тогда
			Продолжить;
		КонецЕсли;

		ДвоичныеДанные = ПутьФайлаИлиДвоичныеДанныеДляСервера(ИмяФайлаИзСписка);

		СтруктураИзСписка = Новый Структура("Каталог,Фича,Уровень", Ложь, Истина, УровеньФичВДереве);
		СтруктураИзСписка.Вставить("Имя", ЭлементСпискаФайлов.Значение.Имя);
		СтруктураИзСписка.Вставить("ПолныйПуть", ИмяФайлаИзСписка);
		СтруктураИзСписка.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		Массив.Добавить(СтруктураИзСписка);
	КонецЦикла;
	МассивРезультатОбходаКаталогов = Массив;

	ДвДанныеvbFeatureReader = ПутьФайлаИлиДвоичныеДанныеДляСервера(ПолучитьПутьКFeatureReader());

	МассивФичДляПослеНаложенияФильтров = Новый Массив;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("DebugLog", Ложь);
	СтруктураПараметров.Вставить("Брейкпоинты", Новый Массив);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", Неопределено);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Истина);
	СтруктураПараметров.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", Объект.КаталогФич);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов", Новый Массив);
	СтруктураПараметров.Вставить("МассивСообщений", Новый Массив);
	СтруктураПараметров.Вставить("ПутьКОбработке", Неопределено);
	СтруктураПараметров.Вставить("СписокТеговИсключение", Объект.СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ", Новый Массив);
	СтруктураПараметров.Вставить("ТолькоДляПолученияСпискаФич", Истина);
	СтруктураПараметров.Вставить("МассивФичДляПослеНаложенияФильтров", МассивФичДляПослеНаложенияФильтров);
	СтруктураПараметров.Вставить("ЭтоLinux", ЭтоLinux);

	СтруктураПараметров.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов",
		Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	СтруктураПараметров.Вставить("КоллекцияИменКонтекстовОбработок", КоллекцияИменКонтекстовОбработок);
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		СтруктураПараметров.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов",
			СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	КонецЕсли;

	ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров);

	Возврат СтруктураПараметров.МассивФичДляПослеНаложенияФильтров;
КонецФункции

&НаКлиенте
Функция ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(Знач Текст) Экспорт
	Текст = СтрЗаменить(Текст, "$$", "~Экранирование$$~");

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Текст, "~Экранирование$$~");
	ЭтоВыражение = Ложь;

	Если Лев(Текст, СтрДлина("~Экранирование$$~")) = "~Экранирование$$~" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;

	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;

		Если ЭтоВыражение Тогда
			Результат = Результат + "ОбъектКонтекстСохраняемый." + Стр;
		Иначе
			Результат = Результат + Стр;
		КонецЕсли;

		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;

	Текст = СтрЗаменить(Результат, "$", "~Экранирование$~");

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Текст, "~Экранирование$~");
	ЭтоВыражение = Ложь;

	Если Лев(Текст, СтрДлина("~Экранирование$~")) = "~Экранирование$~" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;

	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;

		Если ЭтоВыражение Тогда
			Результат = Результат + "ОбъектКонтекст." + Стр;
		Иначе
			Результат = Результат + Стр;
		КонецЕсли;

		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВычислитьВнутреннееВыражение(Знач Выражение) Экспорт
	Выражение           = ЗаменитьСлужебныеСимволыВВыраженииДляВычисления(Выражение);
	Контекст            = ОбъектКонтекст;
	КонтекстСохраняемый = ОбъектКонтекстСохраняемый;
	Ванесса				= ЭтаФорма;
	Возврат Вычислить(Выражение);
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуВычисливВнутренниеВыражения(Знач Текст) Экспорт
	Результат = "";

	Текст = СтрЗаменить(Текст, "Ванесса.", "ЭтаФорма.");
	Текст = СтрЗаменить(Текст, "Контекст.", "ОбъектКонтекст.");
	Текст = СтрЗаменить(Текст, "КонтекстСохраняемый.", "ОбъектКонтекстСохраняемый.");

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Текст, "$");
	ЭтоВыражение = Ложь;
	Если Лев(Текст, 1) = "$" Тогда
		ЭтоВыражение = Истина;
	КонецЕсли;

	Результат = "";
	Для Каждого Стр Из МассивСтрок Цикл
		Если ЭтоВыражение Тогда
			Результат = Результат + Вычислить(Стр);
		Иначе
			Результат = Результат + Стр;
		КонецЕсли;

		ЭтоВыражение = Не ЭтоВыражение;
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеДополнительногоПараметра(ИмяПараметра) Экспорт
	Значение = Неопределено;
	Объект.ДополнительныеПараметры.Свойство(ИмяПараметра, Значение);

	Возврат Значение;
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеДополнительногоПараметра(ИмяПараметра, Значение) Экспорт
	Объект.ДополнительныеПараметры.Вставить(ИмяПараметра, Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтрокуСтатуса(Стр) Экспорт
	Если НЕ Элементы.СтрокаСтатуса.Видимость Тогда
		Элементы.СтрокаСтатуса.Видимость = Истина;
	КонецЕсли;

	СтрокаСтатуса = Стр;
КонецПроцедуры

//позволяет сделать поиск в строке "ПроверяемаяСтрока" подстроки "Шаблон"
//при этом подстрока "Шаблон" может содержать символы *
//например СтрокаСоответствуетШаблону("Привет","*вет")
&НаКлиенте
Функция СтрокаСоответствуетШаблону(ПроверяемаяСтрока, Знач Шаблон) Экспорт

	РегулярныеВыражения = Плагин("РегулярныеВыражения");
	Нашли = РегулярныеВыражения.СтрокаСоответствуетШаблону(ПроверяемаяСтрока, Шаблон);
	Возврат Нашли;

КонецФункции

//Делает склейку параметров в одну строку, если они переданы.
&НаКлиенте
Процедура СоеденитьСтрокиЕслиЭтоВозможно(Стр, Стр2, Стр3, Стр4, Стр5, Стр6, Стр7) Экспорт
	Если Стр2 <> Неопределено Тогда
		Стр = Стр + Стр2;
	КонецЕсли;
	Если Стр3 <> Неопределено Тогда
		Стр = Стр + Стр3;
	КонецЕсли;
	Если Стр4 <> Неопределено Тогда
		Стр = Стр + Стр4;
	КонецЕсли;
	Если Стр5 <> Неопределено Тогда
		Стр = Стр + Стр5;
	КонецЕсли;
	Если Стр6 <> Неопределено Тогда
		Стр = Стр + Стр6;
	КонецЕсли;
	Если Стр7 <> Неопределено Тогда
		Стр = Стр + Стр7;
	КонецЕсли;
КонецПроцедуры

//позволяет указать значения таблиц или макетов, которые потом можно будет сравнить между собой
//также эти значения потом будут прикреплены к отчету Allure
//Если Тип = Неопределено, тогда считается, что переданы таблицы
&НаКлиенте
Процедура УстановитьЗначенияТаблицДляСравнения(Эталон, ТекущееЗначение, Тип = Неопределено) Экспорт
	Если Тип = Неопределено Тогда
		ГлобальныеЗначенияТаблиц.Вставить("ТаблицаЭталон", Эталон);
		ГлобальныеЗначенияТаблиц.Вставить("ТаблицаТекущееЗначение", ТекущееЗначение);
	Иначе
		ЗначениеЭталон = Новый Структура;
		ЗначениеЭталон.Вставить("Тип", Тип);
		ЗначениеЭталон.Вставить("Значение", Эталон);
		ГлобальныеЗначенияТаблиц.Вставить("ТаблицаЭталон", ЗначениеЭталон);

		ЗначениеТекущееЗначение = Новый Структура;
		ЗначениеТекущееЗначение.Вставить("Тип", Тип);
		ЗначениеТекущееЗначение.Вставить("Значение", ТекущееЗначение);
		ГлобальныеЗначенияТаблиц.Вставить("ТаблицаТекущееЗначение", ЗначениеТекущееЗначение);
	КонецЕсли;
КонецПроцедуры

//преобразует табличный документ в массив структур
//в первой строке макета должна быть строка с именами колонок
&НаКлиенте
Функция ПреобразоватьТабличныйДокументВМассивСтруктур(ТабДок) Экспорт
	Массив = Новый Массив;

	Если Ложь Тогда
		ТабДок = Новый ТабличныйДокумент;
	КонецЕсли;

	Если ТабДок.ВысотаТаблицы = 0 Тогда
		Возврат Массив;
	КонецЕсли;

	СтрокаТаблицы = Новый Структура;
	Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
		СтрокаТаблицы.Вставить("Кол" + XMlСтрока(Ррр), ТабДок.Область(1, Ррр, 1, Ррр).Текст);
	КонецЦикла;
	Массив.Добавить(СтрокаТаблицы);

	Для Ккк = 2 По ТабДок.ВысотаТаблицы Цикл
		СтрокаТаблицы = Новый Структура;
		Для Ррр = 1 По ТабДок.ШиринаТаблицы Цикл
			СтрокаТаблицы.Вставить("Кол" + XMlСтрока(Ррр), ТабДок.Область(Ккк, Ррр, Ккк, Ррр).Текст);
		КонецЦикла;
		Массив.Добавить(СтрокаТаблицы);
	КонецЦикла;

	Возврат Массив;
КонецФункции

//прикрепляет к строке сценария макет
&НаКлиенте
Процедура ПрикрепитьМакетКСценарию(Макет, Имя) Экспорт
	Если ВсеСценарииВыполнены() Тогда
		ВызватьИсключение "Не смог получить строку сценария.";
	КонецЕсли;

	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено, ИДСтрокиСценария, Истина);
	СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);

	Если СтрокаСценария = Неопределено Тогда
		ВызватьИсключение "Не смог получить строку сценария.";
	КонецЕсли;

	Если СтрокаСценария.ПроизвольныеЗначения = Неопределено Тогда
		СтрокаСценария.ПроизвольныеЗначения = Новый Структура;
	КонецЕсли;

	ПроизвольныеЗначения = СтрокаСценария.ПроизвольныеЗначения;
	Если Не ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
		ПроизвольныеЗначения.Вставить("ПрикрепленныеМакеты", Новый Массив);
	КонецЕсли;

	ПрикрепленныеМакеты = ПроизвольныеЗначения.ПрикрепленныеМакеты;

	ПрикрепленныеМакеты.Добавить(Новый Структура("Макет,Имя", Макет, Имя));
КонецПроцедуры

#КонецОбласти //ОбщегоНазначения

#Область РаботаСПеременнымиКонтекста

&НаКлиенте
Процедура СохранитьЗначениеВКонтекст(ИмяПеременной, Значение) Экспорт
	Если НЕ ОбъектКонтекст.Свойство("СохраняемыеЗначения") Тогда
		ОбъектКонтекст.Вставить("СохраняемыеЗначения", Новый Соответствие);
	КонецЕсли;

	ОбъектКонтекст.СохраняемыеЗначения.Вставить(ИмяПеременной, Значение);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗначениеВКонтекстСохраняемый(Знач ИмяПеременной, Значение) Экспорт
	Если НЕ ОбъектКонтекстСохраняемый.Свойство("СохраняемыеЗначения") Тогда
		ОбъектКонтекстСохраняемый.Вставить("СохраняемыеЗначения", Новый Соответствие);
	КонецЕсли;

	//уберём служебные символы
	ДлинаРазделителяГлобальныхПеременных = 2;
	Если Лев(ИмяПеременной, ДлинаРазделителяГлобальныхПеременных) = "$$"
			И Прав(ИмяПеременной, ДлинаРазделителяГлобальныхПеременных) = "$$" Тогда
		ИмяПеременной = Сред(ИмяПеременной, ДлинаРазделителяГлобальныхПеременных + 1,
			СтрДлина(ИмяПеременной) - ДлинаРазделителяГлобальныхПеременных * 2);
	КонецЕсли;

	Если Лев(ИмяПеременной, 1) = "$" И Прав(ИмяПеременной, 1) = "$" Тогда
		ИмяПеременной = Сред(ИмяПеременной, 2, СтрДлина(ИмяПеременной) - 2);
	КонецЕсли;

	ОбъектКонтекстСохраняемый.СохраняемыеЗначения.Вставить(ИмяПеременной, Значение);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеИзКонтекста(ИмяПеременной) Экспорт
	Возврат ПолучитьЗначениеИзКонтекстаВнутр(ОбъектКонтекст, ИмяПеременной);
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеИзКонтекстаСохраняемого(ИмяПеременной) Экспорт
	Возврат ПолучитьЗначениеИзКонтекстаВнутр(ОбъектКонтекстСохраняемый, ИмяПеременной);
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеИзКонтекстаВнутр(Контекст, ИмяПеременной)
	ТекущееЗначение = Неопределено;
	Попытка
		ЕстьПеременная = Контекст.Свойство(ИмяПеременной, ТекущееЗначение);
	Исключение
		ЕстьПеременная = Ложь;
	КонецПопытки;
	Если НЕ ЕстьПеременная Тогда
		ТекущееЗначение = ПолучитьСохраненноеЗначениеИзКонтекстаВнутр(Контекст, ИмяПеременной);
		ЕстьПеременная = ТекущееЗначение <> Неопределено;
	КонецЕсли;
	Если НЕ ЕстьПеременная Тогда
		ТекстСообщения = "Переменная <%1> не найдена.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяПеременной);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Возврат ТекущееЗначение;
КонецФункции

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекста(ИмяПеременной) Экспорт
	Возврат ПолучитьСохраненноеЗначениеИзКонтекстаВнутр(ОбъектКонтекст, ИмяПеременной);
КонецФункции

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого(ИмяПеременной) Экспорт
	Возврат ПолучитьСохраненноеЗначениеИзКонтекстаВнутр(ОбъектКонтекстСохраняемый, ИмяПеременной);
КонецФункции

&НаКлиенте
Функция ПолучитьСохраненноеЗначениеИзКонтекстаВнутр(Контекст, ИмяПеременной)
	Если НЕ Контекст.Свойство("СохраняемыеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Контекст.СохраняемыеЗначения[ИмяПеременной];
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПеременныеКонтекстаИзФайлаНастроек()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	ЗагрузчикНастроек = Плагин("ЗагрузчикПользовательскихНастроек");

	Попытка
		ЗагрузчикНастроек.ЗагрузитьНастройки(Объект.ПоставщикПользовательскихНастроек, Объект.АдресПользовательскихНастроек);
	Исключение
		СделатьСообщение(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

#КонецОбласти //РаботаСПеременнымиКонтекста

#Область РаботаСФайлами

&НаКлиенте
Процедура УдалитьФайлыКомандаСистемы(Знач ИмяФайла) Экспорт
	Отладка(СтрШаблон_("УдалитьФайлыКомандаСистемы - %1", ИмяФайла));
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("rm -Rf """ + ИмяФайла + """");
		Иначе
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("DEL /Q """ + ИмяФайла + """", Истина, Ложь);
		КонецЕсли;
	Иначе
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКаталогКомандаСистемы(Знач ИмяФайла) Экспорт
	Отладка(СтрШаблон_("УдалитьКаталогКомандаСистемы - %1", ИмяФайла));
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("rm -Rf """ + ИмяФайла + """");
		Иначе

			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("RD /S /Q """ + ИмяФайла + """", Истина, Ложь);
		КонецЕсли;

	Иначе
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьФайлКомандаСистемы(Знач Откуда, Знач Куда) Экспорт
	Отладка(СтрШаблон_("ПереместитьФайлКомандаСистемы - из %1 в %2 ", Откуда, Куда));
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда

		Если ЭтоLinux Тогда
			Откуда = СтрЗаменить(Откуда, "\", "/");
			Куда   = СтрЗаменить(Куда, "\", "/");
			КомандаСистемы("mv -f """ + Откуда + """ """ + Куда + """");
		Иначе

			Откуда = СтрЗаменить(Откуда, "/", "\");
			Куда   = СтрЗаменить(Куда, "/", "\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("MOVE /Y """ + Откуда + """ """ + Куда + """", Истина, Ложь);
		КонецЕсли;
	Иначе
		ПереместитьФайл(Откуда, Куда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВремяИзмененияФайлаКомандаСистемы(ИмяФайла) Экспорт
	Отладка(СтрШаблон_("ВремяИзмененияФайлаКомандаСистемы - %1", ИмяФайла));
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЭтоLinux Тогда
			Возврат ТекущаяДата();
			//ВызватьИсключение "TODO: Сделать для Linux.";
		КонецЕсли;

		Файл = Новый Файл(ИмяФайла);
		Путь = Файл.Путь;
		Если Прав(Путь, 1) = "\" или Прав(Путь, 1) = "/" Тогда
			Путь = Лев(Путь, СтрДлина(Путь) - 1);
		КонецЕсли;
		ТолькоИмяФайла = Файл.Имя;

		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		Команда = "forfiles /p """ + Путь + """ /m """ + ТолькоИмяФайла + """ /c ""cmd /c echo @fdate @ftime"" > """ + ИмяФайлаЛога + """";
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда, Истина, Истина); //TODO проверить быстрое использование ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда, Истина, Ложь);

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога, "UTF-8");
		ТекстЛога = СокрЛП(Текст.Прочитать());
		Текст.Закрыть();

		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);

		ТекстЛога = СтрЗаменить(ТекстЛога, " ", ":");
		ТекстЛога = СтрЗаменить(ТекстЛога, ".", ":");
		МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(ТекстЛога, ":");

		День    = Число(МассивЗначений[0]);
		Месяц   = Число(МассивЗначений[1]);
		Год     = Число(МассивЗначений[2]);
		Часы    = Число(МассивЗначений[3]);
		Минуты  = Число(МассивЗначений[4]);
		Секунды = Число(МассивЗначений[5]);

		Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);

	Иначе
		Файл = Новый Файл(ИмяФайла);
		Возврат Файл.ПолучитьВремяИзменения();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура НайтиФайлыКомандаСистемы(Путь, СписокКаталогов, СписокФайлов, ИскатьВПодкаталогах,
		Знач КаталогДляВременныхФайлов = "") Экспорт

	Отладка(СтрШаблон_("НайтиФайлыКомандаСистемы - %1, ИскатьВПодкаталогах %2", Путь, ИскатьВПодкаталогах));

	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Файлы = НайтиФайлы(Путь, "*", ИскатьВПодкаталогах);

		Для Каждого Файл Из Файлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				СписокКаталогов.Добавить(Файл, Файл.ПолноеИмя);
			Иначе
				СписокФайлов.Добавить(Файл, Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	Иначе

		//получение каталогов
		Если Не ЗначениеЗаполнено(КаталогДляВременныхФайлов) Тогда
			ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt"); // имя этого временного файла буду переиспользовать для ускорения
		Иначе
			ИмяФайлаЛога = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов);
		КонецЕсли;

		Если ЭтоLinux Тогда

			КомандаКаталоги = "find """ + Путь + """ " + ?(ИскатьВПодкаталогах, "", "-maxdepth 1") + "-type d -name '*'" + " > """ + ИмяФайлаЛога + """";
			КомандаСистемы(КомандаКаталоги);
		Иначе

			КомандаКаталоги = "DIR """ + Путь + """ /A:D /B " + ?(ИскатьВПодкаталогах, "/S", "") + " > """ + ИмяФайлаЛога + """";
			//последний параметр важен для правильного чтения русских имен файлов
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаКаталоги, Истина, Истина);

		КонецЕсли;

		МассивСтрокИзФайла = ЗагрузитьФайлВМассив(ИмяФайлаЛога);
		Для каждого Стр Из МассивСтрокИзФайла Цикл
			СписокКаталогов.Добавить(Новый Файл(Стр), Стр);
		КонецЦикла;

		//получение файлов

		Если ЭтоLinux Тогда

			КомандаКаталоги = "find """ + Путь + """ " + ?(ИскатьВПодкаталогах, "", "-maxdepth 1") + "-type f -name '*'" + " > """ + ИмяФайлаЛога + """";
			КомандаСистемы(КомандаКаталоги);
		Иначе

			КомандаФайлы = "DIR """ + Путь + """ /A:-D /B " + ?(ИскатьВПодкаталогах, "/S", "") + " > """ + ИмяФайлаЛога + """";

			//последний параметр важен для правильного чтения русских имен файлов
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаФайлы, Истина, Истина);
		КонецЕсли;

		МассивСтрокИзФайла = ЗагрузитьФайлВМассив(ИмяФайлаЛога);
		Для каждого Стр Из МассивСтрокИзФайла Цикл
			СписокФайлов.Добавить(Новый Файл(Стр), Стр);
		КонецЦикла;

		Если Не ЗначениеЗаполнено(КаталогДляВременныхФайлов) Тогда
			УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КопироватьКаталогКомандаСистемы(Знач Откуда, Знач Куда, Знач КаталогДляВременныхФайлов = "") Экспорт
	Отладка(СтрШаблон_("КопироватьКаталогКомандаСистемы - из %1 в %2 ", Откуда, Куда));

	Куда = СтрЗаменить(Куда, "\", "/");
	Если Прав(Куда, 1) = "/" Тогда
		Куда = Лев(Куда, СтрДлина(Куда) - 1);
	КонецЕсли;

	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;

	НайтиФайлыКомандаСистемы(Откуда, СписокКаталогов, СписокФайлов, Истина, КаталогДляВременныхФайлов);

	СписокКаталогов.СортироватьПоПредставлению();

	Позиция = СтрДлина(Откуда) + 1 + 1;

	Для Каждого Каталог Из СписокКаталогов Цикл
		ВтораяЧастьПути = СтрЗаменить(Сред(Каталог.Значение.ПолноеИмя, Позиция), "\", "/");
		НовыйКаталогИмя = Куда + "/" + ВтораяЧастьПути;

		СоздатьКаталогКомандаСистемы(НовыйКаталогИмя);
	КонецЦикла;

	Для Каждого ЭлементФайл Из СписокФайлов Цикл
		Файл            = ЭлементФайл.Значение;
		ВтораяЧастьПути = СтрЗаменить(Сред(Файл.ПолноеИмя, Позиция), "\", "/");
		НовоеИмяФайла   = Куда + "/" + ВтораяЧастьПути;

		КопироватьФайлКомандаСистемы(Файл.ПолноеИмя, НовоеИмяФайла);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлКомандаСистемы(Знач Откуда, Знач Куда) Экспорт
	Отладка(СтрШаблон_("КопироватьФайлКомандаСистемы - из %1 в %2 ", Откуда, Куда));

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Команда = "";
		Если ЭтоLinux Тогда
			Откуда = СтрЗаменить(Откуда, "\", "/");
			Куда   = СтрЗаменить(Куда, "\", "/");
			Команда = "cp -r """ + Откуда + """ """ + Куда + """";
		Иначе
			Откуда = СтрЗаменить(Откуда, "/", "\");
			Куда   = СтрЗаменить(Куда, "/", "\");
			Команда = "COPY """ + Откуда + """ """ + Куда + """";
		КонецЕсли;

		Попытка
			Если ЭтоLinux Тогда
				КомандаСистемы(Команда);
			Иначе
				ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда, Истина, Ложь);
			КонецЕсли;
		Исключение
			ТекстСообщения = "КопироватьФайлКомандаСистемы:%1 команда:%2";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Команда);
			Сообщить(ТекстСообщения);
		КонецПопытки;
	Иначе
		КопироватьФайл(Откуда, Куда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогКомандаСистемы(Знач ИмяФайла) Экспорт
	Отладка(СтрШаблон_("СоздатьКаталогКомандаСистемы - %1", ИмяФайла));

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
		Если НЕ ЭтоLinux Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("MKDIR """ + ИмяФайла + """", Истина, Ложь);
		Иначе
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
			КомандаСистемы("mkdir -p """ + ИмяФайла + """");
		КонецЕсли;
	Иначе
		СоздатьКаталог(ИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ФайлСуществуетКомандаСистемы(Знач ИмяФайла, Знач Пояснение = "ФайлСуществуетКомандаСистемы") Экспорт
	Отладка(СтрШаблон_(Пояснение + " - %1", ИмяФайла));
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда

		Если НЕ ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
			Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(
				"If Exist """ + ИмяФайла + """ (exit /b 10) Else (exit /b 20)",
				Истина, Ложь); //TODO проверить запуск
			УспешныйКодВозврата = 10;
			Возврат Статус = УспешныйКодВозврата;

		КонецЕсли;

		ИмяВременногоЛог = ПолучитьИмяВременногоФайла("log");

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("sh");
		ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла, "UTF-8", Символы.ПС, Истина, Символы.ПС);

		ЗТ.ЗаписатьСтроку("#!/bin/sh");

		Если Найти(ИмяФайла, " ") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, " ", "\ ");
		КонецЕсли;

		СтрокаКоманды = "sh -c 'test -f " + ИмяФайла + " && echo yes || echo no' > " + ИмяВременногоЛог + "";
		ЗТ.ЗаписатьСтроку(СтрокаКоманды);
		СтрокаКоманды = "sh -c 'test -d " + ИмяФайла + " && echo yes || echo no' >> " + ИмяВременногоЛог + "";
		ЗТ.ЗаписатьСтроку(СтрокаКоманды);
		ЗТ.Закрыть();

		КомандаСистемы("sh " + ИмяВременногоФайла);

		ФайлСуществует = Ложь;

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоЛог, "UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			Если Стр = "yes" Тогда
				ФайлСуществует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Текст.Закрыть();

		Возврат ФайлСуществует;
	КонецЕсли;

	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	Возврат ФайлПроверкаСуществования.Существует();
КонецФункции

&НаКлиенте
Процедура ОчиститьСодержимоеКаталога(Знач ИмяКаталога, ТипФайлов = "*.*") Экспорт
	Отладка(СтрШаблон_("ОчиститьСодержимоеКаталога - %1, тип файлов %2", ИмяКаталога, ТипФайлов));
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяКаталога, "ОчиститьСодержимоеКаталога") Тогда
		Возврат;
	КонецЕсли;

	ДлинаПутиКорняДиска = 3;
	Если СтрДлина(ИмяКаталога) <= ДлинаПутиКорняДиска Тогда
		Возврат;
	КонецЕсли;

	Если Найти(Прав(ИмяКаталога, 1), "\/") > 0 Тогда
		ИмяКаталога = Лев(ИмяКаталога, СтрДлина(ИмяКаталога) - 1);
	КонецЕсли;

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		УдалитьКаталогКомандаСистемы(ИмяКаталога);
		СоздатьКаталогКомандаСистемы(ИмяКаталога);
	Иначе
		МассивФайлов = НайтиФайлы(ИмяКаталога, ТипФайлов, Ложь);
		Для каждого Файл Из МассивФайлов Цикл

			Попытка
				УдалитьФайлыКомандаСистемы(Файл.ПолноеИмя);
			Исключение
				СтрокаСообщения = "Не смог удалить файл %1";
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", Файл.ПолноеИмя);
				СделатьСообщение(СтрокаСообщения);
			КонецПопытки;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечитьКаталогКомандаСистемы(Знач ПутьКаталога) Экспорт
	Отладка(СтрШаблон_("ОбеспечитьКаталог - %1", ПутьКаталога));

	Если ФайлСуществуетКомандаСистемы(ПутьКаталога, "ОчиститьСодержимоеКаталога") Тогда
		ОчиститьСодержимоеКаталога(ПутьКаталога);
	Иначе
		СоздатьКаталогКомандаСистемы(ПутьКаталога);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти //РаботаСФайлами

#Область ЗагрузкаФич

&НаКлиенте
Процедура ЗагрузитьФичи() Экспорт
	Если Не Объект.РежимСамотестирования Тогда
		СохранитьНастройкиВХранилище("КаталогФич", Объект.КаталогФич);
	КонецЕсли;

	ЗагрузитьПеременныеКонтекстаИзФайлаНастроек();

	ФлагСценарииЗагружены                                               = Ложь;
	Объект.ИдетВыполнениеСценариев                                      = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага                  = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением     = Ложь;
	Объект.РежимВыполненияОдногоШага                                    = Ложь;

	ОбновитьСтатусКнопкиВыполнитьСценарии();

	ДобавитьФичуВСписокНедавноЗагруженныхФич(Объект.КаталогФич);

	МассивДействий = Новый Массив;
	ДобавитьМассивСостоянийФайлов(МассивДействий);
	ДобавитьСканированиеКаталогов(МассивДействий);
	КешПараметровДействий = ПолучитьКешФайловДляДействий(МассивДействий);

	ПреобразоватьПутиБиблиотек();

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекИдМассива", 0);
	ДопПараметры.Вставить("МассивДействий", МассивДействий);
	ДопПараметры.Вставить("КешПараметровДействий", КешПараметровДействий);
	ДопПараметры.Вставить("НадоЗагрузитьФичи", Истина);
	ДопПараметры.Вставить("НадоГенерироватьEPF", Ложь);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		АсинхронноПолучитьСостоянияОбъектовФайловойСистемы(ДопПараметры);
	Иначе
		ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры);
		ЗагрузитьФичиПродолжение();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АвтоИнструкции

&НаКлиенте
Процедура ЭтотШагНеНадоМасштабироватьВВидео() Экспорт
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;

		Если ТекИД_ШагаВМассиве >= 0 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];

			ТекШаг.Вставить("МасштабироватьВВидео", Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстИнструкции(Стр) Экспорт
	Если ТекИД_СценарияВМассиве >= 0 Тогда
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;

		Если ТекИД_ШагаВМассиве >= 0 Тогда
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];

			ТекШаг.Вставить("ТекстИнструкция", Стр);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЭтоПрерывающйВидеоШаг(ТекШаг) Экспорт
	Поз = Найти(ТекШаг.Снипет, "(");
	Стр = НРег(Лев(ТекШаг.Снипет, Поз - 1));

	Если МассивСнипетовПрерывающихЗаписьСценария.Найти(Стр) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

//рисует рамку вокруг активного элемента формы
&НаКлиенте
Процедура ПодсветитьАктивноеОкно(Длительность, ЖдатьЗавершения = Истина) Экспорт
	Если Не Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм Тогда
		Возврат;
	КонецЕсли;

	ПутьКПриложению = Объект.КаталогИнструментов + "\tools\VideoTools\FrameShow.exe";
	Если Не ФайлСуществуетКомандаСистемы(ПутьКПриложению) Тогда
		Возврат;
	КонецЕсли;

	Путь = ПутьКПриложению + " -showframeofactivecontrol timeshowframe=" + СтрЗаменить(СтрЗаменить(Формат(Длительность, "ND=10; NGS=*"), Символы.НПП, ""), "*", "");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЖдатьЗавершения Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, Истина, Ложь);
		Иначе
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, Ложь, Ложь);
		КонецЕсли;
	Иначе
		ЗапуститьПриложение(Путь, , ЖдатьЗавершения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивныйЭлементФормы() Экспорт
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;

	ДвеСекунды = 2000;
	ПодсветитьАктивноеОкно(ДвеСекунды, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивныйЭлементФормыHTML() Экспорт
	Если Не Объект.СоздаватьИнструкциюHTML и Не Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;

	ДвадцатьСекунд = 20000;
	ПодсветитьАктивноеОкно(ДвадцатьСекунд, Ложь);

	ТриСекунды = 3;
	Sleep(ТриСекунды);
КонецПроцедуры

&НаКлиенте
Процедура УбратьПодсветкуАктвиногоЭлемента() Экспорт
	TASKKILL("FrameShow.exe");
КонецПроцедуры

//перемещает курсор у активному объекту
&НаКлиенте
Процедура СделатьДействияПриЗаписиИнструкции(ПарамСтр = "")Экспорт
	СделатьДействияПриЗаписиHTML(ПарамСтр);
	СделатьДействияПриЗаписиВидео(ПарамСтр);
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиВидео(ПарамСтр = "") Экспорт
	Если Объект.ИдетЗаписьВидео Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормы();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъекту();
		ИначеЕсли ПарамСтр = "толькоскриншот" Тогда
		Иначе
			ПереместитьКурсорМышиКАктивномуОбъекту();
			ПодсветитьАктивныйЭлементФормы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СделатьДействияПриЗаписиHTML(ПарамСтр = "") Экспорт

	Попытка
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		Если ТекШаг.ЭтоШагКонтекста Тогда
			Возврат;
		КонецЕсли;
	Исключение

	КонецПопытки;

	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормыHTML();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
		ИначеЕсли ПарамСтр = "толькоскриншот" Тогда
		Иначе
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
			ПодсветитьАктивныйЭлементФормыHTML();
		КонецЕсли;

		ДобавитьВЛогИнструкцииHTMLВыполненияШага();
		СкриншотСделанВСценарии = Истина;
		УбратьПодсветкуАктвиногоЭлемента();
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если ПарамСтр = "толькофрейм" Тогда
			ПодсветитьАктивныйЭлементФормыHTML();
		ИначеЕсли ПарамСтр = "толькомышь" Тогда
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
		ИначеЕсли ПарамСтр = "толькоскриншот" Тогда
		Иначе
			ПереместитьКурсорМышиКАктивномуОбъектуHTML();
			ПодсветитьАктивныйЭлементФормыHTML();
		КонецЕсли;

		ДобавитьВЛогИнструкцииMarkdownВыполненияШага();
		СкриншотСделанВСценарии = Истина;
		УбратьПодсветкуАктвиногоЭлемента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОкну(Скорость, ЖдатьЗавершения = Истина) Экспорт
	Если Не Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы Тогда
		Возврат;
	КонецЕсли;

	ПутьКПриложению = Объект.КаталогИнструментов + "\tools\VideoTools\MouseMove.exe";
	Если Не ФайлСуществуетКомандаСистемы(ПутьКПриложению) Тогда
		Возврат;
	КонецЕсли;

	Путь = ПутьКПриложению + " -movemousetoactivecontrol mousespeed=" + СтрЗаменить(Скорость, Символы.НПП, "");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЖдатьЗавершения Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, Истина, Ложь);
		Иначе
			ВыполнитьКомандуОСБезПоказаЧерногоОкна(Путь, Ложь, Ложь);
		КонецЕсли;
	Иначе
		ЗапуститьПриложение(Путь, , ЖдатьЗавершения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОбъекту() Экспорт
	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;

	ПолСекунды = 500;
	ПереместитьКурсорМышиКАктивномуОкну(ПолСекунды);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьКурсорМышиКАктивномуОбъектуHTML() Экспорт
	Если Не Объект.СоздаватьИнструкциюHTML И НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;

	ПятьдесятМиллисекунд = 50;
	ПереместитьКурсорМышиКАктивномуОкну(ПятьдесятМиллисекунд);
КонецПроцедуры

#КонецОбласти

#Область Ассерты
//портирован блок генерации данных из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
//взят релиз 3.0.0.3

&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр (" + Формат(_Истина, "БЛ=ложь; БИ=истина") + ") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр (" + Формат(_Ложь, "БЛ=ложь; БИ=истина") + ") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДату(_Дата, _Период, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Период.ДатаНачала или _Дата > _Период.ДатаОкончания Тогда
		представление = ПредставлениеПериода(_Период.ДатаНачала, _Период.ДатаОкончания, "ФП = Истина");
		СообщениеОшибки = "Переданный параметр (" + Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'") + ") не входит в период " + представление + ", а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоДатСТочностью2Секунды(_Дата, _Дата2, ДопСообщениеОшибки = "") Экспорт
	ДвеСекунды = 2;
	Если _Дата < _Дата2 - ДвеСекунды или _Дата > _Дата2 + ДвеСекунды Тогда
		СообщениеОшибки = "Переданная дата (" + Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'") + ") не равна дате (" + Формат(_Дата2, "ДФ='dd.MM.yyyy HH:mm:ss'") + ") с точностью до 2-х секунд, а хотели, чтобы они равнялись." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения (" + _1 + "; " + _2 + ") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения (" + _1 + "; " + _2 + ") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр (" + _Больше + ") меньше или равен второму (" + _Меньше + ") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр (" + _Больше + ") меньше второго (" + _Меньше + ") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		СообщениеОшибки = "Значение <" + проверяемоеЗначение1 + "> больше или равно, чем <" + проверяемоеЗначение2 + ">, а ожидалось меньше" +
		ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		СообщениеОшибки = "Значение <" + проверяемоеЗначение1 + "> больше, чем <" + проверяемоеЗначение2 + ">, а ожидалось меньше или равно" +
		ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;

	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = "Хотели, чтобы алгоритм """ + СтрокаАлгоритм + """ выполнился, а он упал с ошибкой """ + ПолученноеОписаниеОшибки + """." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;

	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ТекстСообщения = "Ожидали, что вторым параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяМетода);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТипПараметра);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПараметрыСтрока = ПараметрыСтрокой(Параметры);

	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";

	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = "Хотели, чтобы код """ + СтрокаВыполнения + """ выполнился, а он упал с ошибкой """ + ПолученноеОписаниеОшибки + """." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки;
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки("Хотели, чтобы алгоритм """ + СтрокаАлгоритм + """ упал с сообщением об ошибке """ + ОжидаемоеОписаниеОшибки + """, а он упал с сообщением """ + ПолученноеОписаниеОшибки + """." + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;

	ВызватьОшибкуПроверки("Хотели, чтобы алгоритм """ + СтрокаАлгоритм + """ упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки;

	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ТекстСообщения = "Ожидали, что третьим параметром будет передан массив параметров для метода <%1>, а получили другой объект с типом <%2>";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяМетода);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТипПараметра);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;

	ПараметрыСтрока = ПараметрыСтрокой(Параметры);

	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";

	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки("Хотели, чтобы код """ + СтрокаВыполнения + """ упал с сообщением об ошибке """ + ОжидаемоеОписаниеОшибки + """, а он упал с сообщением """ + ПолученноеОписаниеОшибки + """." + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;

	ВызватьОшибкуПроверки("Хотели, чтобы код """ + СтрокаВыполнения + """ упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));

КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ фЗаполнено Тогда
		ВызватьОшибкуПроверки("Значение (" + ПроверяемоеЗначение + ") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение (" + ПроверяемоеЗначение + ") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	Если фЗаполнено Тогда
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ТекстСообщения = "ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <%1>%2";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТипЗнч(ТипИлиИмяТипа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФорматДСО(ДопСообщениеОшибки));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ТипЗнч(значение) <> искомыйТип Тогда
		ВызватьОшибкуПроверки("Типом значения <" + значение + "> является <" + ТипЗнч(значение) + ">, а ожидался тип <" + ТипИлиИмяТипа + ">." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = "<" + строка + ">";
		КоличествоНеПереносимыхСимволов = 20;
		Если СтрДлина(строка) > КоличествоНеПереносимыхСимволов Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = "<" + подстрокаПоиска + ">";
		Если СтрДлина(подстрокаПоиска) > КоличествоНеПереносимыхСимволов Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		СообщениеОшибки = "Искали в " + ПредставлениеСтроки + " подстроку " + ПредставлениеПодСтроки + ", но не нашли." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

//Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
&НаКлиенте
Процедура ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = "") Экспорт
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Массив") или ТипКоллекции = Тип("ФиксированныйМассив") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип("Структура") или ТипКоллекции = Тип("Соответствие")
		или ТипКоллекции = Тип("ФиксированнаяСтруктура") или ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип("СписокЗначений") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		СообщениеОшибки = "Утверждение ""ПроверитьВхождениеВКоллекцию"" не умеет работать с типом коллекции <" + ТипКоллекции + ">." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;
	Если Не Нашли Тогда
		СообщениеОшибки = "Не нашли элемент <" + Элемент + "> в коллекции, а хотели, чтобы он был в коллекции." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2,
		УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь,
			УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "",
			ДопПараметры = Неопределено) Экспорт
	УтвержденияПроверкаТаблиц = Плагин("УтвержденияПроверкаТаблиц");
	УтвержденияПроверкаТаблиц.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(
		ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки,
		УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки, ДопПараметры);
КонецПроцедуры

// количествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ.
// Записи регистров сведений не считаются.
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения = Неопределено,
		ИмяКолонкиЗамещения = Неопределено) Экспорт
	Перем Сериализатор;
	Сериализатор = Плагин("СериализаторMXL");
	Данные 		= Сериализатор.СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
КонецФункции

#КонецОбласти

#Область Плагины
// Плагины
// портировано из xUnitFor1C 4.1.1.0

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагинов(Знач НайденныеФайлы, Знач ДополнительныеПараметры) Экспорт

	ПомещаемыеФайлы = Новый Массив;
	ИдентификаторыПлагинов = Новый Соответствие;

	Если Объект.ИспользоватьПрямыеПутиФайлов Тогда

		ПомещенныеФайлы = Новый Массив;

		Для каждого ФайлОбработки Из НайденныеФайлы Цикл

			ПолноеИмяФайла = ФайлОбработки.ПолноеИмя;
			ОписаниеПередаваемогоФайла = Новый Структура("Имя", ПолноеИмяФайла);
			ПомещенныеФайлы.Добавить(ОписаниеПередаваемогоФайла);

			ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
			ИдентификаторыПлагинов.Вставить(ПолноеИмяФайла, ИмяПлагина);

		КонецЦикла;

		ПодключитьНайденныеКлиентскиеПлагины(ПомещенныеФайлы, ИдентификаторыПлагинов, ДополнительныеПараметры);

	Иначе

		Для каждого ФайлОбработки Из НайденныеФайлы Цикл

			ПолноеИмяФайла = ФайлОбработки.ПолноеИмя;
			ПомещаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла);
			ПомещаемыеФайлы.Добавить(ПомещаемыйФайл);

			ИмяПлагина = ФайлОбработки.ИмяБезРасширения;
			ИдентификаторыПлагинов.Вставить(ПолноеИмяФайла, ИмяПлагина);

		КонецЦикла;

		ПараметрыЗавершения = Новый Структура;
		ПараметрыЗавершения.Вставить("ИдентификаторыПлагинов", ИдентификаторыПлагинов);
		ПараметрыЗавершения.Вставить("ОбработчикОповещения", ДополнительныеПараметры.ОбработчикОповещения);
		ОбработчикЗавершения = АСинк().смв_НовыйОписаниеОповещения("ОбработчикПоискаКлиентскихПлагиновЗавершение", ЭтаФорма, ПараметрыЗавершения);
		АСинк().смв_ПоместитьФайлы(ОбработчикЗавершения, ПомещаемыеФайлы);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПоискаКлиентскихПлагиновЗавершение(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт

	ПодключитьНайденныеКлиентскиеПлагины(ПомещенныеФайлы, ДополнительныеПараметры.ИдентификаторыПлагинов, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьНайденныеКлиентскиеПлагины(Знач ЗагруженныеФайлы, Знач ИдентификаторыПлагинов, ДополнительныеПараметры)
	Перем ЗагруженныйФайл, ИмяПлагина, ОписаниеПлагина, ОписанияПлагинов;
	Перем ОбъектПлагина, ОписанияПлагиновКлиент, ПодключенныеРанее, МассивФормПлагинов;

	ОписанияПлагиновКлиент = Новый Соответствие;
	ПодключенныеРанее = Новый Соответствие;

	Если Не Объект.ИспользоватьПрямыеПутиФайлов Тогда
		МассивПодключенныхПлагинов = Новый Массив();
		ПодключитьВнешниеОбработкиДляОтладки(Истина, МассивПодключенныхПлагинов);

		//Подключим на клиенте для отладки
		Для каждого ОбъектПлагина Из МассивПодключенныхПлагинов Цикл
			Попытка
				ОбъектПлагина.Инициализация(ЭтаФорма);
				ОписаниеПлагина = ОбъектПлагина.ОписаниеПлагина(ЭтаФорма, Объект.ТипыПлагинов);
				Если ОписаниеПлагина <> Неопределено Тогда
					ИмяПлагина = ОписаниеПлагина.Идентификатор;

					ПодключенныеРанее.Вставить(ОписаниеПлагина.Идентификатор, Истина);
					Объект.ПлагиныЗагружены = Истина;
					Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);
					КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, Истина);
					СделатьСообщение("Подключен плагин " + ИмяПлагина + " в режиме отладки");
				КонецЕсли;
			Исключение
				ИнфоОшибки = ИнформацияОбОшибке();
				Если ОбъектПлагина <> Неопределено Тогда
					СделатьСообщение("Ошибка подключения плагина " + ОбъектПлагина.Заголовок + ":
					|" + ИнфоОшибки.Описание);
				Иначе
					СделатьСообщение("Ошибка подключения неопределенного плагина:
					|" + ИнфоОшибки.Описание);
				КонецЕсли;
			КонецПопытки;

		КонецЦикла;
	КонецЕсли;

	// в режиме совместимости 8.3.13 и выше для объекта ОписаниеПереданногоФайла свойство ПолноеИмя вместо Имя
	ИспользоватьПолноеИмя = Ложь;
	Если ЗагруженныеФайлы.Количество() > 0 Тогда
		ИспользоватьПолноеИмя = ЕстьСвойство(ЗагруженныеФайлы[0], "ПолноеИмя");
	КонецЕсли;

	ОписанияПлагинов = ПодключитьПлагиныНаСервере(ЗагруженныеФайлы, ИспользоватьПолноеИмя, ПодключенныеРанее);

	Для Каждого ЗагруженныйФайл Из ЗагруженныеФайлы Цикл
		Объект.ПлагиныЗагружены = Истина;

		Если ИспользоватьПолноеИмя Тогда
			КлючФайла = ЗагруженныйФайл.ПолноеИмя;
		Иначе
			КлючФайла = ЗагруженныйФайл.Имя;
		КонецЕсли;
		ИмяПлагина = ИдентификаторыПлагинов[КлючФайла];

		ОписаниеПлагина = ОписанияПлагинов.Получить(КлючФайла);
		Если ОписаниеПлагина = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Объект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, ИмяПлагина);
		КэшФормПлагинов.Вставить(ОписаниеПлагина.Идентификатор, Истина);

	КонецЦикла;

	ЗагрузкаПлагиновЗавершение(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Функция Плагин(Знач Идентификатор) Экспорт

	ОбъектПлагин = Неопределено;
	ИдентификаторБезПрефиксовПодсистемы = Идентификатор;
	Если КэшФормПлагинов.Свойство(ИдентификаторБезПрефиксовПодсистемы) Тогда
		ОбъектПлагин = КэшФормПлагинов[ИдентификаторБезПрефиксовПодсистемы];
	КонецЕсли;

	Если ОбъектПлагин = Неопределено Тогда
		ТекстСообщения = "ru = 'Неизвестный идентификатор плагина: <%1>'";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Идентификатор);
		ВызватьИсключение НСтр(ТекстСообщения);
	ИначеЕсли ОбъектПлагин = Истина Тогда
		// загрузка клиентского плагина "По требованию"
		ИмяПлагина = Объект.Плагины[Идентификатор];
		Попытка
			ОбъектПлагин = ПолучитьФорму("ВнешняяОбработка." + ИмяПлагина + ".Форма", , ЭтаФорма);
			ОбъектПлагин.Инициализация(ЭтаФорма);
			КэшФормПлагинов.Вставить(ИдентификаторБезПрефиксовПодсистемы, ОбъектПлагин);
		Исключение
			// TODO добавить поведение при отсутствии управляемой формы у плагина
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;

	Возврат ОбъектПлагин;
КонецФункции

&НаКлиенте
Функция ПолучитьОписанияПлагиновПоТипу(Знач ТипПлагина) Экспорт
	Результат = ПолучитьОписанияПлагиновПоТипуНаСервере(ТипПлагина);

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаПлагиновЗавершение(Знач ДополнительныеПараметры) Экспорт
	АСинк().смв_ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикОповещения);
КонецПроцедуры

#КонецОбласти

#Область ДляАвтотестирования

//Позволяет получить доступ к переменной КонтекстСохраняемый тестируемой формы VB
&НаКлиенте
Функция ПолучитьКонтекстСохраняемый() Экспорт
	Возврат ОбъектКонтекстСохраняемый;
КонецФункции

&НаКлиенте
Процедура ПолучитьТекстШагаИзТекстаФичиЕслиОнТамЗадан(Текст, Шаг, Сценарий) Экспорт
	МассивТекстФичи = Сценарий.МассивТекстФичи;

	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.text]", Шаг.НомерСтрокиВФиче);
	Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОбработкаПараметровШага", Истина);
	ПараметрыОбработки.Вставить("ВычислитьВыражения", Истина);
	ПараметрыОбработки.Вставить("Шаг", Шаг);
	ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);

	Текст = СлужебнаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура СделатьСлужебноеОповещение()Экспорт
	ПодключитьОбработчикОжидания("ДляСлужебногоОповещения", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСлужебныеБазыЕслиИхНет() Экспорт
	ИмяФайла = Объект.КаталогИнструментов + "/tools/ServiceBases/v83ServiceBase836/1Cv8.1CD";
	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		ИмяВременногоBat = ПолучитьИмяВременногоФайла("bat");

		ЗТ = Новый ЗаписьТекста(ИмяВременногоBat, "UTF-8", , Истина);
		ЗТ.ЗаписатьСтроку("cd " + Объект.КаталогИнструментов);
		ЗТ.ЗаписатьСтроку("oscript """ + Объект.КаталогИнструментов + "\tools\onescript\build-service-conf.os""");
		ЗТ.Закрыть();

		Команда = ИмяВременногоBat;
		//TODO неверное получение статуса, т.к. ВыполнитьКомандуОСБезПоказаЧерногоОкна не возвращает код возврата
		Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда, Истина, Ложь);
		Если Статус <> 0 Тогда
			ВызватьИсключение "Не смог создать сервисные базы. Статус=" + Статус;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСеансСлужебнойБазы(Имябазы, ТипЗапуска, Ключи) Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ПутьК1С = "C:\Program Files (x86)\1cv8\" + ВерсияПриложения + "\bin\1cv8.exe";
	СтрокаЗапускаКонфигуратора = """" + ПутьК1С + """ " + ТипЗапуска + " /F""" + Объект.КаталогИнструментов + "\tools\ServiceBases\" + Имябазы + """ " + Ключи;
	//TODO неверное получение статуса, т.к. ВыполнитьКомандуОСБезПоказаЧерногоОкна не возвращает код возврата
	Статус = ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаЗапускаКонфигуратора, Ложь, Ложь); //не ждём окончания работы конфигуратора
	Если Статус <> 0 Тогда
		ВызватьИсключение "Не смог запустить конфигуратор. СтрокаЗапускаКонфигуратора=<" + СтрокаЗапускаКонфигуратора + ">";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПрочиеЭкспортные

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(ВыбранноеИмяФайла, АдресХранилища, ЕстьЗащитаОтОпасныхДействий,
														Объект.ИспользоватьПрямыеПутиФайлов);

	ДополнительныеПараметры.Вставить("ИмяОбработки", ИмяОбработки);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПолучитьВремяИзмененияФайла(ВерсияФайла, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("ВерсияФайла", ВерсияФайла);

	АсинхронноОбработатьСледующийФайл(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПроверкуЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт

	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("ЭтоКаталог", ЭтоКаталог);

	Отладка("ОбработчикНачатьПроверкуЭтоКаталог. " + СтруктураФайла.ИмяПараметра + ": " + СтруктураФайла.ИмяФайла + ". ЭтоКаталог=" + ЭтоКаталог);

	Если ЭтоКаталог Тогда

		АсинхронноОбработатьСледующийФайл(ДополнительныеПараметры);

	Иначе

		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ОбработчикНачатьПолучитьВремяИзмененияФайла", ЭтаФорма, ДополнительныеПараметры);

		АСинк().смв_Файл_ПолучитьВремяИзменения(Файл, ОписаниеОповещения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПроверкуСуществования(Существует, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	СтруктураФайла.Вставить("Существует", Существует);

	Отладка("ОбработчикНачатьПроверкуСуществования. " + СтруктураФайла.ИмяПараметра + ": " + СтруктураФайла.ИмяФайла + ". Существует=" + Существует);

	Если Существует Тогда

		Файл = Новый Файл(СтруктураФайла.ИмяФайла);
		ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ОбработчикНачатьПроверкуЭтоКаталог", ЭтаФорма, ДополнительныеПараметры);
		АСинк().смв_Файл_ЭтоКаталог(Файл, ОписаниеОповещения);

	Иначе

		АсинхронноОбработатьСледующийФайл(ДополнительныеПараметры);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПолучитьВремяИзмененияФайлаМассив(ВерсияФайла, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	НайденныеФайлы = СтруктураФайла.НайденныеФайлы;

	ИДФайлаДляОбработки = СтруктураФайла.ИДФайлаДляОбработки;
	НайденныеФайлы[ИДФайлаДляОбработки].Вставить("ВерсияФайла", ВерсияФайла);

	ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачатьПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];

	НайденныеФайлыМассив = Новый Массив;
	КоллекцияКаталоговРодителей = Новый Соответствие;
	Для Каждого Файл Из НайденныеФайлы Цикл
		НайденныеФайлыМассив.Добавить(Новый Структура("Файл", Файл));
		ПутьРодителя = Файл.Путь;
		МассивФайловВРодителе = КоллекцияКаталоговРодителей.Получить(ПутьРодителя);
		Если МассивФайловВРодителе = Неопределено Тогда
			МассивФайловВРодителе = Новый Массив;
		КонецЕсли;
		МассивФайловВРодителе.Добавить(Файл);
		КоллекцияКаталоговРодителей.Вставить(ПутьРодителя, МассивФайловВРодителе);
	КонецЦикла;
	СтруктураФайла.Вставить("НайденныеФайлы", НайденныеФайлыМассив);
	СтруктураФайла.Вставить("КоллекцияКаталоговРодителей", КоллекцияКаталоговРодителей);

	СтруктураФайла.Вставить("ИДФайлаДляОбработки", - 1);
	ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросНадоЛиЗагружатьФичи(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗагрузитьФичи();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаЗагрузкаФичи(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Объект.КаталогФич = ВыбранныеФайлы[0];

	СохранитьНастройкиВХранилище("КаталогФич", Объект.КаталогФич);

	//очистим кеш при смене фичи
	КешStepDefinition.Очистить();
	КешТаблицGherkin.Очистить();

	ЗагрузитьФичи();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытьКаталогФичи(КодВозврата, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнешнийСписокПроцедур(КоллекцияШагов, ПолноеИмя, ФормаОбработки) Экспорт

	СтрТаблицаКонтекстовОбработок = Новый Структура;
	СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", ПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("Обработка", ФормаОбработки);
	ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);

	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(ПолноеИмя);
	КоллекцияИменКонтекстовОбработок.Вставить(Нрег(УниверсальноеПолноеИмя),
		ТаблицаКонтекстовОбработок.Количество() - 1 );

	Для каждого Снипет из КоллекцияШагов Цикл
		ОписаниеШага = Новый Структура("ИмяПроцедуры, Обработка, ИмяФайла", Снипет.ИмяПроцедуры, ФормаОбработки,
			УниверсальноеПолноеИмя);
		ТаблицаОбработокДляОтладки.Вставить(СокрЛП(Снипет.ИмяПроцедуры), ОписаниеШага);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция МетаданныеИмя() Экспорт
	Возврат МетаданныеИмяСервер();
КонецФункции

// Вызывается только из внутренней фичи
//
&НаКлиенте
Процедура ПодготовитьСценарийКВыполнению() Экспорт
	Если ЭтоLinux Тогда
		Разделитель = "/";
	Иначе
		Разделитель = "\";
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.КаталогПроекта) Тогда
		КаталогВременнойФичи = Объект.КаталогПроекта + Разделитель + "features";
		//TODO переделать на одну команду проверки и создания каталога
		Если Не ФайлСуществуетКомандаСистемы(КаталогВременнойФичи) Тогда
			СоздатьКаталогКомандаСистемы(КаталогВременнойФичи);
		КонецЕсли;
	Иначе
		ВременныйФайл = Новый Файл(ПолучитьИмяВременногоФайла("feature"));
		КаталогВременнойФичи = ВременныйФайл.Путь;
	КонецЕсли;

	ИмяВременнойФичи = КаталогВременнойФичи + Разделитель + "vanessa-add-temp.feature";

	ЗТ = Новый ЗаписьТекста(ИмяВременнойФичи, КодировкаТекста.UTF8);
	Если Лев(Объект.СгенерированныйСценарий, 1) <> "#" Тогда
		//надо дописать заголовок сценария
		Если Объект.ЯзыкГенератораGherkin = "en" Тогда
			СтрокаЗаголовка = "#language: en
			|
			|@tree
			|
			|Functionality: <description features>
			|
			|As <Role>
			|I want <functional description>
			|To <business effect>
			|
			|Scenario: <description of the scenario>
			|
			|";
		Иначе
			СтрокаЗаголовка = "#language: ru
			|
			|@tree
			|
			|Функционал: <описание фичи>
			|
			|Как <Роль> я хочу
			|<описание функционала>
			|чтобы <бизнес-эфект>
			|
			|Сценарий: <описание сценария>
			|
			|";
		КонецЕсли;

		ЗТ.ЗаписатьСтроку(СтрокаЗаголовка);
	КонецЕсли;
	ЗТ.ЗаписатьСтроку(Объект.СгенерированныйСценарий);
	ЗТ.Закрыть();

	Объект.КаталогФич = ИмяВременнойФичи;
	ЗагрузитьФичи();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуСнятиеБрейкпоинта() Экспорт
	ТекущаяСтрокаДереваИдСтроки = Неопределено;
	Если Элементы.ДеревоТестов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаДереваИдСтроки = Элементы.ДеревоТестов.ТекущиеДанные.ИдСтроки;
	КонецЕсли;

	Если ТекущаяСтрокаДереваИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЭтуСтрокуМожноИсполнить(Элементы.ДеревоТестов.ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;

	Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт = Не Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт;
	Брейкпоинт                                     = Элементы.ДеревоТестов.ТекущиеДанные.Брейкпоинт;

	Если Брейкпоинт Тогда
		ДобавитьБрейкПоинт(Элементы.ДеревоТестов.ТекущиеДанные.ПолныйПуть);
	Иначе
		УдалитьБрейкПоинт(Элементы.ДеревоТестов.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПодключенияTestClient() Экспорт
	ВозниклаОшибкаПодключенияTestClient = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТаблицуGherkinИзМакета(Макет) Экспорт
	Если Ложь Тогда
		Макет = Новый ТабличныйДокумент;
	КонецЕсли;

	ТаблицаGherkin = Новый Массив;

	Для Ккк = 1 По Макет.ВысотаТаблицы Цикл
		СтрокаТаблицы = Новый Структура;
		Для Ррр = 1 По Макет.ШиринаТаблицы Цикл
			СтрокаТаблицы.Вставить("Кол" + XMlСтрока(Ррр), Макет.Область(Ккк, Ррр, Ккк, Ррр).Текст);
		КонецЦикла;

		ТаблицаGherkin.Добавить(СтрокаТаблицы);
	КонецЦикла;

	Возврат ТаблицаGherkin;
КонецФункции

#КонецОбласти

#Область ПереводТекста

&НаКлиенте
Функция ПеревестиТекст(Текст) Экспорт
	ДанныеПеревода = Новый Структура;
	ДанныеПеревода.Вставить("ЯзыкПеревода", Объект.ЯзыкГенератораGherkin);
	ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода", ПолучитьФайлыПеревода());
	ДанныеПеревода.Вставить("ТекстДляПеревода", Текст);
	ДанныеПеревода.Вставить("КешДанныеПеревода", КешДанныеПеревода);
	ДвДанныеvbFeatureReader = ПутьФайлаИлиДвоичныеДанныеДляСервера(ПолучитьПутьКFeatureReader());
	ДанныеПеревода.Вставить("ДвДанныеvbFeatureReader", ДвДанныеvbFeatureReader);
	ДанныеПеревода.Вставить("Перевод", Неопределено);

	СделатьПереводСгенерированногоТекстаGherkinСервер(ДанныеПеревода);
	Если ДанныеПеревода.Перевод <> Неопределено Тогда
		КешДанныеПеревода.Вставить("Язык", Объект.ЯзыкГенератораGherkin);
		КешДанныеПеревода.Вставить("ТаблицаПеревода", ДанныеПеревода.ТаблицаПеревода);

		Возврат ДанныеПеревода.Перевод;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции
#КонецОбласти

#КонецОбласти //ЭкспортныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ТекстСообщенийПользователю(МакетПереводСообщений)
	ЗначенияПереводов = Новый Соответствие;

	Для Ккк = 2 По МакетПереводСообщений.ВысотаТаблицы Цикл
		ЗначениеСтрокиПоиска = МакетПереводСообщений.Область(Ккк, 1, Ккк, 1).Текст;
		Если Не ЗначениеЗаполнено(ЗначениеСтрокиПоиска) Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеПеревода = МакетПереводСообщений.Область(Ккк, 2, Ккк, 2).Текст;

		ЗначенияПереводов.Вставить("$" + ЗначениеСтрокиПоиска + "$", ЗначениеПеревода)
	КонецЦикла;

	Возврат ЗначенияПереводов;
КонецФункции

// Функция - Получить строку вызова Sikuli
//
// Параметры:
//  ЗапускЧерезСкрипт	 - Булево	 - флаг способа запуска Sikuli-скриптов:
//									   Ложь	 - устаревший способ запуска для Windows,
//											   используется по умолчанию для совместимости
//									   Истина	 - запуск через скрипт runsikulix
// Возвращаемое значение:
//  Строка - строка для запуска Sikuli-скриптов
//
&НаКлиенте
Функция ПолучитьСтрокуВызоваSikuli(ЗапускЧерезСкрипт = Ложь)

	Если ЗапускЧерезСкрипт Тогда
		Если ЭтоLinux Тогда
			Возврат "runsikulix -r ";
		Иначе
			Возврат "call runsikulix -r ";
		КонецЕсли;
	Иначе
		ПутьККоманде = """" + Объект.ПутьКRunSikulix + """ -r ";
		Возврат "call " + ПутьККоманде;
	КонецЕсли;

КонецФункции

// далее переменная WshShell будет закеширована, чтобы не создавать ComObject каждый раз
&НаКлиенте
Функция ПолучитьWshShell()

	УправлениеПриложениями = Плагин("УправлениеПриложениями");
	Возврат УправлениеПриложениями.ПолучитьWshShell();

КонецФункции

&НаКлиенте
Функция СкопироватьСтруктуру(Оригинал)
	Результат = Новый Структура();
	Для каждого Элем Из Оригинал Цикл
		Результат.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРПередВыполнениемШагаСервер(ИмяШага)
	ЗаписьЖурналаРегистрации("VanessaADD.ПередВыполнениемШага", УровеньЖурналаРегистрации.Информация, , , ИмяШага);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРОшибка(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Стр);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРИнформация(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации("VanessaADD." + ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстИнформация(ИмяСобытия, Стр)
	ВывестиВЛогФайл(Символы.Таб + Символы.Таб + ИмяСобытия + ":" + Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстПредупреждение(ИмяСобытия, Стр)
	ВывестиВЛогФайл(Символы.Таб + "ПРЕДУПРЕЖДЕНИЕ:" + Символы.Таб + ИмяСобытия + ":" + Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВЖРПередВыполнениемШага(ИмяШага)
	ЗаписатьЛогВЖРПередВыполнениемШагаСервер(ИмяШага);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФормыИзПоследнегоАктивногоОкна()
	Если ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Если ОбъектКонтекст.Свойство("АктивноеОкно") Тогда
			Если ОбъектКонтекст.АктивноеОкно <> Неопределено Тогда
				Попытка
					АктивноеОкно = ОбъектКонтекст.АктивноеОкно;
					Если ЭтоЗаголовокОкнаМодальногоДиалога(АктивноеОкно.Заголовок) Тогда
						Если ОбъектКонтекст.Свойство("ПредыдущееАктивноеОкно") Тогда
							АктивноеОкно = ОбъектКонтекст.ПредыдущееАктивноеОкно;
						КонецЕсли;
					КонецЕсли;

					ТестируемаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));

					Возврат ТестируемаяФорма.ИмяФормы;
				Исключение

				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ЗаписатьЛогОшибки(СтрокаСценария, СтрокаШага, ТекстОшибки, ИнфоОбОшибке, ОписаниеОшибкиШага)
	Если Не Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ИмяКаталогаЛогОшибок) Тогда
		ВызватьИсключение "Не указано имя файла лога в параметре <ИмяКаталогаЛогОшибок>";
	КонецЕсли;

	ЭтоПример          = Ложь;
	ЭтоШагКонтекста    = Ложь;
	СтрокаРодителяШага = НайтиСтрокуСценарияЧерезРодителя(СтрокаШага, ЭтоПример, ЭтоШагКонтекста);

	ТекущаяУниверсальнаяДатаСтрока = СтрЗаменить(ТекущаяУниверсальнаяДатаВМиллисекундах(), Символы.НПП, "");
	ВтораяЧастьФайла = "Ошибка_" + ТекущаяУниверсальнаяДатаСтрока + ".json";
	УбратьВсеЗапрещенныеСимволыИзИмениФайла(ВтораяЧастьФайла);

	ИмяФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ВтораяЧастьФайла;

	ЗаписьJson = Вычислить("Новый ЗаписьJson()");
	ЗаписьJson.ОткрытьФайл(ИмяФайла);

	ЗаписьJSON.ЗаписатьНачалоОбъекта();

	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяСценария");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаСценария.Имя);

	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяШага");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.Имя);

	ЗаписьJSON.ЗаписатьИмяСвойства("НомерСтрокиВФиче");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.НомерСтрокиВФиче);

	ЗаписьJSON.ЗаписатьИмяСвойства("СтрокаДерева");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаШага.ИдСтроки);

	ЗаписьJSON.ЗаписатьИмяСвойства("ТекстОшибки");
	ЗаписьJSON.ЗаписатьЗначение(ТекстОшибки);

	ЗаписьJSON.ЗаписатьИмяСвойства("ОписаниеОшибкиШага");
	ЗаписьJSON.ЗаписатьЗначение(ОписаниеОшибкиШага);

	ЗаписьJSON.ЗаписатьИмяСвойства("ЭтоШагКонтекста");
	ЗаписьJSON.ЗаписатьЗначение(ЭтоШагКонтекста);

	ЗаписьJSON.ЗаписатьИмяСвойства("МассивФайлов");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Если ТипЗнч(СтрокаРодителяШага.ПроизвольныеЗначения) = Тип("Структура") Тогда
		Если СтрокаРодителяШага.ПроизвольныеЗначения.Свойство("ПрикрепленныеМакеты") Тогда
			ПрикрепленныеМакеты = СтрокаРодителяШага.ПроизвольныеЗначения.ПрикрепленныеМакеты;
			Для Каждого ДанныеФайла Из ПрикрепленныеМакеты Цикл
				ИмяМакета = ДанныеФайла.Имя + "_" + ТекущаяУниверсальнаяДатаСтрока;
				УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяМакета);

				ИмяПрикрепленногоФайла = ДополнитьСлешВПуть(Объект.ИмяКаталогаЛогОшибок) + ИмяМакета + ".mxl";
				ЗаписьJSON.ЗаписатьЗначение(ИмяПрикрепленногоФайла);

				Попытка
					ДанныеФайла.Макет.Записать(ИмяПрикрепленногоФайла);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ЗаписьJSON.ЗаписатьКонецМассива();

	ТекИмяФормы = "";
	Если ИнфоОбОшибке <> Неопределено Тогда
		ТекИмяФормы = ПолучитьИмяФормыИзПоследнегоАктивногоОкна();
		Если ТекИмяФормы = Неопределено Тогда
			ТекИмяФормы = "";
		КонецЕсли;
	КонецЕсли;
	ЗаписьJSON.ЗаписатьИмяСвойства("ФормаВКоторойВозниклоИсключение");
	ЗаписьJSON.ЗаписатьЗначение(ТекИмяФормы);

	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJson.Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРПередВыполнениемСценарияСервер(ИмяСценария)
	ЗаписьЖурналаРегистрации("VanessaADD.ПередВыполнениемСценария", УровеньЖурналаРегистрации.Информация, , , ИмяСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВЖРПередВыполнениемСценария(ИмяСценария)
	ЗаписатьЛогВЖРПередВыполнениемСценарияСервер(ИмяСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЛогВТекстПередВыполнениемСценария(ИмяСценария)
	ВывестиВЛогФайл(Символы.Таб + "Сценарий: " + ИмяСценария);
КонецПроцедуры

&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641", ".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Мин(Массив1.Количество(), Массив2.Количество()) - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаСервереБезКонтекста
Функция УзнатьЕстьЗащитаОтОпасныхДействий()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.9.2033", ".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Мин(Массив1.Количество(), Массив2.Количество()) - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиенте
Функция УзнатьРежимСовместимостиКлиент(ЗначениеПоУмолчанию) Экспорт
	Если Не ЗначениеЗаполнено(КешРежимСовместимости) Тогда
		КешРежимСовместимости = УзнатьРежимСовместимости(ЗначениеПоУмолчанию);
	КонецЕсли;

	Возврат КешРежимСовместимости;
КонецФункции

&НаКлиенте
Функция ВерсияРежимаСовместимостиКлиент(Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(КешВерсияРежимСовместимости) Тогда
		РежимСовместимостиВерсия = СтрЗаменить(УзнатьРежимСовместимостиКлиент(ЗначениеПоУмолчанию), "Версия", "");
		КешВерсияРежимСовместимости = СтрЗаменить(РежимСовместимостиВерсия, "_", ".");
	КонецЕсли;

	Возврат КешВерсияРежимСовместимости;
КонецФункции

&НаСервереБезКонтекста
Функция УзнатьРежимСовместимости(ЗначениеПоУмолчанию)
	Значение = ЗначениеПоУмолчанию;

	Попытка
		Значение = Строка(Вычислить("Метаданные.РежимСовместимости"));
	Исключение
		Возврат Значение;
	КонецПопытки;

	Возврат Значение;

КонецФункции

&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаАсинхронныхВызовов()
	СистемнаяИнформация = Новый СистемнаяИнформация;

	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.5.1383")
		И УстановленРежимПоддержкиАсинхронныхВызовов();

КонецФункции

&НаСервереБезКонтекста
Функция УстановленРежимПоддержкиАсинхронныхВызовов()
	Возврат Вычислить("Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент
		|<> Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.Использовать");
КонецФункции

&НаКлиенте
Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
	ИначеЕсли Объект.текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
	ИначеЕсли Объект.текЗначениеОперации = "" Тогда
	Иначе
		Стр = "Ошибка. Неизвестное значение параметра текЗначениеОперации = " + Объект.текЗначениеОперации;
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	ОчиститьСообщения();

	ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ОбработатьВыборФайлаЗагрузкаФичи", ЭтаФорма);
	АСинк().смв_ПоказатьДиалогВыбораКаталога(ОписаниеОповещения);

КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКОбработкеСервер()
	Если СокрЛП(Объект.КаталогИнструментов) <> "" Тогда
		Возврат Объект.КаталогИнструментов;
	КонецЕсли;

	Объект1 = РеквизитФормыВЗначение("Объект");
	ИспользуемоеИмяФайла = Объект1.ИспользуемоеИмяФайла;
	ПроверяемыйПрефикс = НРег(Лев(ИспользуемоеИмяФайла, 6));
	Если (ПроверяемыйПрефикс <> "e1cib/") И (ПроверяемыйПрефикс <> "e1cib\") Тогда
		Файл = Новый Файл(ИспользуемоеИмяФайла);
		КаталогИнструментовПуть = Файл.Путь;
		Если Прав(КаталогИнструментовПуть, 1) =  "\" Тогда
			КаталогИнструментовПуть = Лев(КаталогИнструментовПуть, СтрДлина(КаталогИнструментовПуть) - 1);
		ИначеЕсли Прав(КаталогИнструментовПуть, 1) =  "/" Тогда
			КаталогИнструментовПуть = Лев(КаталогИнструментовПуть, СтрДлина(КаталогИнструментовПуть) - 1);
		КонецЕсли;
		Возврат КаталогИнструментовПуть;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьПутьКОбработкеКлиент() Экспорт
	Если СокрЛП(Объект.КаталогИнструментов) <> "" Тогда
		Возврат Объект.КаталогИнструментов;
	КонецЕсли;

	Возврат ПолучитьПутьКОбработкеСервер();
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройкиКлиент() Экспорт
	Перем Настройки;

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	Настройки = Плагин("LoadSettings");

	ДвадцатьПятьСекунд = 25;
	Объект.ТаймаутЗапуска1С = ДвадцатьПятьСекунд;
	СтрЗапуска = СокрЛП(ПараметрЗапуска);
	Если СтрЗапуска <> "" Тогда
		СтруктураПараметров = Настройки.ПолучитьСтруктуруПараметров(СтрЗапуска);
		StartFeaturePlayer = Настройки.ПолучитьЗначение(СтруктураПараметров, "StartFeaturePlayer");
		Если StartFeaturePlayer = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки = Истина;
			//значит мы в режиме ЗапускВРежимеКоманднойСтроки
			Возврат;
		КонецЕсли;

		NoLoadConfig = Настройки.ПолучитьЗначение(СтруктураПараметров, "NoLoadConfig");
		Если NoLoadConfig = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки    = Истина;
			ЭтоЗапускВРежимеБезЗагрукиНастроек = Истина;
			//значит нам сообщили, что не надо загружать настройки
			Возврат;
		КонецЕсли;

		LibsOnly = Настройки.ПолучитьЗначение(СтруктураПараметров, "LibsOnly");
		Если LibsOnly = Истина Тогда
			ЭтоЗапускВРежимеКоманднойСтроки    = Истина;
			ЭтоЗапускВРежимеБезЗагрукиНастроек = Истина;
			Объект.DebugLog                    = Истина;
			//значит нам сообщили, что не надо загружать настройки, но надо добавить стандартные библиотеки

			Если СокрЛП(Объект.КаталогИнструментов) <> "" Тогда
				Объект.КаталогиБиблиотек.Добавить("$instrumentsRoot/features/libraries");
				Объект.СписокТеговИсключение.Добавить("IgnoreOnCIMainBuild");
			КонецЕсли;

			Возврат;
		КонецЕсли;
	КонецЕсли;

	КаталогИнструментовСохр = Объект.КаталогИнструментов;

	Настройки.ВосстановитьНастройки(ЭтаФорма);

	Объект.КаталогИнструментов = КаталогИнструментовСохр;

	ВосстановитьВсеНастройкиИзХранилища();
	ВостановитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи);
	Если ЗначениеЗаполнено(НедавноЗагруженныеФичи) Тогда
		СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьИДДляОбщегоСохраненияНастроек()
	Стр = "VanessaADDUF";
	Если Объект.РежимСамотестирования Тогда
		Стр = "VanessaADDUF_autotest";
	КонецЕсли;

	Возврат Стр;

КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки)
	Обработка = ВнешниеОбработки.Создать(ИмяОбработки, Ложь);
	Попытка
		ПараметрыОбработки = Обработка.ПараметрыОбработки();
	Исключение
		//значит параметры не указаны
		Возврат;
	КонецПопытки;

	IgnoreOn82 = Ложь;
	ПараметрыОбработки.Свойство("IgnoreOn82", IgnoreOn82);

	Если IgnoreOn82 Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ДлинаСтроки82 = 4; //8.2.
		Если Лев(СистемнаяИнформация.ВерсияПриложения, ДлинаСтроки82) = "8.2." Тогда
			ИмяОбработки = Неопределено;
		Иначе
			Попытка
				ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
				РежимыСовестимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
			Исключение
				Возврат;
			КонецПопытки;

			Если ТекущийРежимСовместимости = РежимыСовестимости.Версия8_1 Тогда
				ИмяОбработки = Неопределено;
			ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_13 Тогда
				ИмяОбработки = Неопределено;
			ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_16 Тогда
				ИмяОбработки = Неопределено;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработкуСервер(Знач ПутьФайла, Знач АдресХранилища, Знач ИспользуетсяЗащитаОтОпасныхДействий,
		Знач ИспользоватьПрямыеПутиФайлов)

	ФайлОбработки = Новый Файл(ПутьФайла);
	ИспользоватьПрямыеПутиФайлов = ИспользоватьПрямыеПутиФайлов И ФайлОбработки.Существует();
	Если ИспользоватьПрямыеПутиФайлов Тогда
		ИмяОбработки = ФайлОбработки.ИмяБезРасширения;
		СоздатьФайлОбработкиНаСервере(ФайлОбработки.ПолноеИмя, ИмяОбработки, ИспользоватьПрямыеПутиФайлов);

		Возврат ИмяОбработки;
	КонецЕсли;

	Если ИспользуетсяЗащитаОтОпасныхДействий Тогда
		ОписаниеЗащитыОтОпасныхДействий = Вычислить("Новый ОписаниеЗащитыОтОпасныхДействий");
		ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;

		ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий);
	Иначе
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	КонецЕсли;

	ПроверитьОбработкуНаВозможностьПодключения(ИмяОбработки);
	Возврат ИмяОбработки;
КонецФункции

&НаСервере
Процедура ДобавитьФайлШаговВКешИзвестныхШаговВызовОтКлиента(ИмяФайла, ВерсияФайла)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"); //TODO ?? обойтись без РеквизитФормыВЗначение
	Если ДобавитьФайлШаговВКешИзвестныхШагов(ИмяФайла, ВерсияФайла,
							ТзнТаблицаИзвестныхStepDefinition) Тогда

		ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьФайлШаговВКешИзвестныхШагов(ИмяФайла, ВерсияФайла,
		ТзнТаблицаИзвестныхStepDefinition)

	ID = "ПустойСнипет" + ИмяФайла;
	СтрокаДляПоиска = НРег(ID);
	СтрокаРеальнойПроцедуры = "";
	МассивПараметров = Новый Массив;
	ПредставлениеТеста = "";
	ОписаниеШага = "";
	ТипШага = "";
	ТипШагаВДереве = Неопределено;

	СтрТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Найти(СтрокаДляПоиска, "СтрокаДляПоиска");
	Если СтрТзнТаблицаИзвестныхStepDefinition = Неопределено Тогда
		ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID,
			СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста,
			ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID,
		СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, СтрокаДляПоиска, ПредставлениеТеста,
		ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве)

	СтрокаТаблицыИзвестныхШагов                         = ТзнТаблицаИзвестныхStepDefinition.Добавить();
	СтрокаТаблицыИзвестныхШагов.ID                      = ID;
	СтрокаТаблицыИзвестныхШагов.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;

	УниверсальноеПолноеИмя = ИмяФайла;

	Попытка
		Файл = Новый Файл(ИмяФайла);
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл);
	Исключение
	КонецПопытки;

	СтрокаТаблицыИзвестныхШагов.ИмяФайла                = УниверсальноеПолноеИмя;

	СтрокаТаблицыИзвестныхШагов.Параметры               = МассивПараметров;
	СтрокаТаблицыИзвестныхШагов.СтрокаДляПоиска         = СтрокаДляПоиска;
	СтрокаТаблицыИзвестныхШагов.ПредставлениеТеста      = ПредставлениеТеста;
	СтрокаТаблицыИзвестныхШагов.ВерсияФайла             = ВерсияФайла;
	СтрокаТаблицыИзвестныхШагов.ОписаниеШага            = ОписаниеШага;
	СтрокаТаблицыИзвестныхШагов.ТипШага                 = ТипШага;
	СтрокаТаблицыИзвестныхШагов.ТипШагаВДереве          = ТипШагаВДереве;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьПутиФайлов(Знач Путь1, Знач Путь2)

	Возврат УниверсальноеПолноеИмяФайла(Путь1, Истина) = УниверсальноеПолноеИмяФайла(Путь2, Истина);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СравнитьОбычныйПутьФайлаСУниверсальнымПутемДругогоФайла(Знач Путь1, Знач УниверсальныйПуть2)

	Возврат УниверсальноеПолноеИмяФайла(Путь1, Истина) = УниверсальныйПуть2;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСнипет(Знач Снипет, Знач ИмяФайла, ВерсияФайла, БылиОшибки, ТзнТаблицаИзвестныхStepDefinition,
	МассивВажныхСообщений)

	ИмяФайла                = УниверсальноеПолноеИмяФайла(ИмяФайла);
	ИмяФайлаНРег = НРег(ИмяФайла);

	СтрокаРеальнойПроцедуры = СокрЛП(Снипет.ИмяПроцедуры);
	ID                      = СокрЛП(Снипет.Снипет);

	//уберем слово "Экспорт"
	ДлинаЭкспорт = 7;
	Если НРег(Прав(СтрокаРеальнойПроцедуры, ДлинаЭкспорт)) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры, СтрДлина(СтрокаРеальнойПроцедуры) - ДлинаЭкспорт);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;

	ДлинаПроцедура = 9;
	Если НРег(Лев(СтрокаРеальнойПроцедуры, ДлинаПроцедура)) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры, ДлинаПроцедура + 1));
	КонецЕсли;

	ПозицияОткрывающейСкобки = Найти(ID, "(");
	СтрПараметры = Сред(ID, ПозицияОткрывающейСкобки + 1);
	СтрПараметры = Лев(СтрПараметры, СтрДлина(СтрПараметры) - 1);

	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Элем_НРег = НРег(Элем);
		Если Найти(Элем_НРег, "число") > 0 Тогда
			Тип = "Число";
		ИначеЕсли Найти(Элем_НРег, "дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип", Тип);
		МассивПараметров.Добавить(СтруктураПарам);
	КонецЦикла;

	ПромСтр = ТзнТаблицаИзвестныхStepDefinition.Найти(ID, "ID");
	Если ПромСтр <> Неопределено Тогда
		Если СравнитьОбычныйПутьФайлаСУниверсальнымПутемДругогоФайла(ПромСтр.ИмяФайла, ИмяФайлаНРег) Тогда
			//значит этот снипет из того же файла
			Возврат; //TODO возврат посередине процедуры не читабелен!
		КонецЕсли;
	КонецЕсли;
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		ТекстСообщения = "Ошибка в файле %1, снипет %2 уже был в %3";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайла);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ID);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ПромСтр.ИмяФайла);
		МассивВажныхСообщений.Добавить(ТекстСообщения);
		//Возврат; //TODO: почему закоментированно...
	КонецЕсли;

	Если Не Снипет.Свойство("ОписаниеШага") Тогда
		ОписаниеШага        = "";
	Иначе
		ОписаниеШага        = Снипет.ОписаниеШага;
	КонецЕсли;
	Если Не Снипет.Свойство("ТипШага") Тогда
		ТипШага             = "";
	Иначе
		ТипШага             = Снипет.ТипШага;
	КонецЕсли;

	ТипШагаВДереве = Неопределено;
	Если Снипет.Свойство("ТипШагаВДереве") Тогда
		ТипШагаВДереве = Снипет.ТипШагаВДереве;
	КонецЕсли;

	ДобавитьСнипетВТаблицуИзвестныхStepDefinitionССервера(ТзнТаблицаИзвестныхStepDefinition, ID,
		СтрокаРеальнойПроцедуры, ИмяФайла, МассивПараметров, НРег(Лев(ID, ПозицияОткрывающейСкобки - 1)),
		Снипет.ПредставлениеТеста, ВерсияФайла, ОписаниеШага, ТипШага, ТипШагаВДереве);

КонецПроцедуры

&НаСервере
Процедура УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуСервер(ИмяФайла)
	ТзнТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition;

	Отбор = Новый Структура;
	Отбор.Вставить("ИмяФайла", ИмяФайла);
	МассивСтрок = ТзнТаблицаИзвестныхStepDefinition.НайтиСтроки(Отбор);

	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		ТзнТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКонтекстовОбработокНеПодключаяОбработки(Файл)
	СтрТаблицаКонтекстовОбработок = Новый Структура;
	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", УниверсальноеПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("Обработка", Неопределено);

	ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
	КоллекцияИменКонтекстовОбработок.Вставить(Нрег(УниверсальноеПолноеИмя),
		ТаблицаКонтекстовОбработок.Количество() - 1);
КонецПроцедуры

&НаКлиенте
Функция ПодключитьКонтекстОбработкиКлиент(Знач Файл, Знач ВерсияФайла = Неопределено,
		Знач АдресВХранилище = Неопределено)

	Перем  ФормаОбработки, ИмяОбработки, УниверсальноеПолноеИмя, КоллекцияШагов;
	ФормаОбработки = Неопределено;
	Попытка
		ИмяОбработки = ПодключитьВнешнююОбработкуСервер(Файл.ПолноеИмя, АдресВХранилище, ЕстьЗащитаОтОпасныхДействий,
			Объект.ИспользоватьПрямыеПутиФайлов);

		ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
		Если ФормаОбработки = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Отладка("Не смог получить список шагов в обработке: " + Файл.ПолноеИмя);
		Отладка("ПодключитьКонтекстОбработкиКлиент:" + ОписаниеОшибки());

		Если ВерсияФайла = Неопределено Тогда
			Возврат Ложь; //значит просто не получилось подключить обработку
		Иначе
			//передали ВерсиюФайла, тогда добавим обработку в кеш, чтобы она не пыталась загрузиться в следующий раз.
		КонецЕсли;

	КонецПопытки;

	УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(Файл.ПолноеИмя);
	УниверсальноеПолноеИмяНРег = Нрег(УниверсальноеПолноеИмя);

	СтрТаблицаКонтекстовОбработок = Новый Структура;
	СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла", УниверсальноеПолноеИмя);
	СтрТаблицаКонтекстовОбработок.Вставить("Обработка", ФормаОбработки);

	ИД = КоллекцияИменКонтекстовОбработок.Получить(УниверсальноеПолноеИмяНРег);
	Если ИД = Неопределено Тогда
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		КоллекцияИменКонтекстовОбработок.Вставить(УниверсальноеПолноеИмяНРег,
			ТаблицаКонтекстовОбработок.Количество() - 1);
	Иначе
		ТаблицаКонтекстовОбработок[ИД] = СтрТаблицаКонтекстовОбработок;
	КонецЕсли;

	КоллекцияШагов = Новый Массив();
	//этот вызов нужен чтобы передать контекст vanessa-add внутрь обработки
	Если ФормаОбработки <> Неопределено Тогда
		Попытка
			КоллекцияШагов = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			ПодробноеПредставление = "Не смог загрузить снипеты из " + Файл.ПолноеИмя + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьЛогВЖРОшибка("VanessaADD.ПолучитьСписокТестов", ПодробноеПредставление);
			СделатьСообщение(ПодробноеПредставление, "Важное");

			Возврат Ложь;
		КонецПопытки;
	Иначе
		ДобавитьФайлШаговВКешИзвестныхШаговВызовОтКлиента(Файл.ПолноеИмя, ВерсияФайла);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ПодключитьШаги(Знач ОписанияФайловШагов)
	МассивВажныхСообщений = Новый Массив;

	ПодключитьШагиНаСервере(ОписанияФайловШагов, МассивВажныхСообщений);

	Если ЗначениеЗаполнено(МассивВажныхСообщений) Тогда
		Для каждого ТекстСообщения Из МассивВажныхСообщений Цикл
			ВывестиПредупреждение("Проблемные шаги", ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодключитьШагиНаСервере(Знач ОписанияФайловШагов, Знач МассивВажныхСообщений)
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"); //TODO ?? обойтись без РеквизитФормыВЗначение

	БылиОшибки = Ложь;
	Для каждого ОписаниеФайлаШага Из ОписанияФайловШагов Цикл
		КоллекцияШагов = ОписаниеФайлаШага.КоллекцияШагов;
		Если КоллекцияШагов.Количество() = 0 Тогда
			ДобавитьФайлШаговВКешИзвестныхШагов(ОписаниеФайлаШага.ПолноеИмя, ОписаниеФайлаШага.ВерсияФайла,
				ТзнТаблицаИзвестныхStepDefinition);
		Иначе

			Для каждого Снипет Из КоллекцияШагов Цикл
				ДобавитьСнипет(Снипет, ОписаниеФайлаШага.ПолноеИмя, ОписаниеФайлаШага.ВерсияФайла, БылиОшибки,
					ТзнТаблицаИзвестныхStepDefinition, МассивВажныхСообщений);
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");

КонецПроцедуры

// Функция - Подключить шаги из обработки клиент  TODO
//
// Параметры:
//  Файл			 - Файл	 -
//  ВерсияФайла		 - Строка	 -
//  АдресВХранилище	 - Строка	 -
//  ПолучатьШаги	 - Булево	 -
//
// Возвращаемое значение:
//   Неопределено, Структура - с ключами
//		* ПолноеИмя - строка -
//		* ВерсияФайла - строка -
//		* КоллекцияШагов - Массив -
//
&НаКлиенте
Функция ПодключитьШагиИзОбработкиКлиент(Знач Файл, Знач ВерсияФайла, Знач АдресВХранилище, Знач ПолучатьШаги)
	ПутьФайла = Файл.ПолноеИмя;
	УниверсальноеПолноеИмяНРег = УниверсальноеПолноеИмяФайла(ПутьФайла, Истина);

	ИД = ПолучитьКонтекстТестаПоУниверсальномуИмениФайла(ПутьФайла, УниверсальноеПолноеИмяНРег, ВерсияФайла,
		АдресВХранилище);
	Если ИД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ФормаОбработки = ПолучитьКонтекстТестаПоИДФайла(ИД, ПутьФайла, ВерсияФайла, АдресВХранилище);

	Если Не ПолучатьШаги Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка
		МассивШагов = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
	Исключение
		ТекстСообщения = "Не смог загрузить снипеты из %1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПутьФайла);
		Сообщить(ТекстСообщения);
		ТекстСообщения = "ПодключитьШагиИзОбработкиКлиент:%1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	ОписаниеФайла = СоздатьОписаниеФайла(ПутьФайла, УниверсальноеПолноеИмяНРег);
	ОписаниеФайла.Вставить("ВерсияФайла", ВерсияФайла);
	ОписаниеФайла.Вставить("КоллекцияШагов", МассивШагов);

	Возврат ОписаниеФайла;

КонецФункции

&НаКлиенте
Функция ПолучитьВсеСуществующиеШагиИзОбработок(Знач ПутьКаталогаФич, Знач КаталогиБиблиотек,
		Знач ДанныеПоВерсиямОбработок, Знач ДополнительныеПараметры, Знач ОписанияФайловШагов)

	КоллекцийПутейФайловКоторыеСовпалиСКеш = Новый Соответствие;

	ПолучитьУжеСуществующиеШагиИзОбработок(ПутьКаталогаФич, ДополнительныеПараметры,
		ДанныеПоВерсиямОбработок.КоллекцияВерсийФайловШагов, КоллекцийПутейФайловКоторыеСовпалиСКеш,
		ОписанияФайловШагов);

	Для каждого Элем Из КаталогиБиблиотек Цикл
		КаталогБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ПолучитьУжеСуществующиеШагиИзОбработок(КаталогБиблиотеки, ДополнительныеПараметры,
			ДанныеПоВерсиямОбработок.КоллекцияВерсийФайловШагов, КоллекцийПутейФайловКоторыеСовпалиСКеш,
			ОписанияФайловШагов);
	КонецЦикла;

	Возврат КоллекцийПутейФайловКоторыеСовпалиСКеш;
КонецФункции

&НаКлиенте
Процедура ПолучитьУжеСуществующиеШагиИзОбработок(Знач КаталогФич, Знач ДополнительныеПараметры,
		Знач КоллекцияВерсийФайловШагов, Знач КоллекцийПутейФайловКоторыеСовпалиСКеш,
		Знач ОписанияФайловШагов)

	Файл = Новый Файл(КаталогФич);

	// БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;

	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;

	Отладка(ПолучитьТекстСообщенияПользователю("$Ищу снипеты в каталоге$") + " " + КаталогПоиска);

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, КаталогФич, "НайденныеФайлы"); //это файлы по данной библиотеке
		Если МассивФайлов = Неопределено Тогда
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
		КонецЕсли;
	Иначе
		МассивФайлов = НайтиФайлы(КаталогПоиска, "*.epf", Истина);
	КонецЕсли;

	СчетчикФайлов  = 0;
	ВсегоФайлов = МассивФайлов.Количество();
	Для Каждого ОбъектФайл Из МассивФайлов Цикл

		Если Не ЕстьПоддержкаАсинхронныхВызовов Тогда
			Файл = ОбъектФайл;
		Иначе
			Файл = ОбъектФайл.Файл;
		КонецЕсли;

		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВерсияФайла = Файл.ПолучитьВремяИзменения();
		Иначе
			ВерсияФайла = ОбъектФайл.ВерсияФайла;
		КонецЕсли;

		ПолноеИмяФайла = Файл.ПолноеИмя;
		УниверсальноеПолноеИмя = УниверсальноеПолноеИмяФайла(ПолноеИмяФайла);

		Если КоллекцийПутейФайловКоторыеСовпалиСКеш.Получить(УниверсальноеПолноеИмя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПрежняяВерсия = КоллекцияВерсийФайловШагов.Получить(УниверсальноеПолноеИмя);
		Если ПрежняяВерсия <> Неопределено Тогда
			Если ПрежняяВерсия <> ВерсияФайла Тогда
				//в кеше уже есть нужные снипеты обработок
				УдалитьИзТаблицаИзвестныхStepDefinitionДанныеПоФайлуСервер(УниверсальноеПолноеИмя);

				УниверсальноеПолноеИмяНРег = Нрег(УниверсальноеПолноеИмя);
				ИДМассивИменКонтекстовОбработок = КоллекцияИменКонтекстовОбработок.Получить(УниверсальноеПолноеИмяНРег);
				Если ИДМассивИменКонтекстовОбработок <> Неопределено Тогда
					КоллекцияИменКонтекстовОбработок.Удалить(УниверсальноеПолноеИмяНРег);
					ТаблицаКонтекстовОбработок[ИДМассивИменКонтекстовОбработок].Обработка = Неопределено;
					ТаблицаКонтекстовОбработок.Удалить(ИДМассивИменКонтекстовОбработок);
				КонецЕсли;

				Отладка(ПолучитьТекстСообщенияПользователю("$Загрузил новую версию$") + ": " + ПолноеИмяФайла);
			Иначе
				Отладка(ПолучитьТекстСообщенияПользователю("$Загрузил снипеты из кеш$") + ": " + ПолноеИмяФайла);

				КоллекцийПутейФайловКоторыеСовпалиСКеш.Вставить(УниверсальноеПолноеИмя, Истина);

				ЗаполнитьТаблицуКонтекстовОбработокНеПодключаяОбработки(Файл);

				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ОписаниеФайла = СоздатьОписаниеФайла(ПолноеИмяФайла, УниверсальноеПолноеИмя);
		ОписаниеФайла.Вставить("ВерсияФайла", ВерсияФайла);

		ОписанияФайловШагов.Добавить(ОписаниеФайла);

		КоллекцийПутейФайловКоторыеСовпалиСКеш.Вставить(УниверсальноеПолноеИмя, Истина);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция СоздатьОписаниеФайла(Знач ПолноеИмяФайла, Знач УниверсальноеПолноеИмя)
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("ПолноеИмя", ПолноеИмяФайла);
	ОписаниеФайла.Вставить("УниверсальноеПолноеИмяФайлаШага", УниверсальноеПолноеИмя);
	ОписаниеФайла.Вставить("ВерсияФайла", "");
	ОписаниеФайла.Вставить("КоллекцияШагов", Новый Массив);
	ОписаниеФайла.Вставить("РезультатПрохожденияШага", Неопределено);
	Возврат ОписаниеФайла;
КонецФункции

&НаКлиенте
Процедура ОбходКаталогов(ПутьКаталога, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ТекРодитель, КолЭлементовДобавлено)

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ФайлПутьКаталога = Новый Файл(ПутьКаталога);
		Если НРег(ФайлПутьКаталога.Расширение) = ".feature" Тогда
			НайденныеФайлы = Новый Массив; //вернём одну фичу
			НайденныеФайлы.Добавить(ФайлПутьКаталога);
			ТекРодитель = НайденныеФайлы[0].Путь;
		Иначе
			Если ТекРодитель = Неопределено Тогда
				НайденныеФайлы = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискFeature", "НайденныеФайлы");
				Если НайденныеФайлы.Количество() > 0 Тогда
					Если ТипЗнч(НайденныеФайлы[0]) = Тип("Структура") Тогда
						ТекРодитель = НайденныеФайлы[0].Файл.Путь;
					Иначе
						ТекРодитель = НайденныеФайлы[0].Путь;
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;
			НайденныеФайлы = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискFeature", "КоллекцияКаталоговРодителей").Получить(ТекРодитель);
			Если НайденныеФайлы = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ФайлПутьКаталога = Новый Файл(ПутьКаталога);
		Если ФайлПутьКаталога.ЭтоКаталог() Тогда
			НайденныеФайлы = НайтиФайлы(ПутьКаталога, "*");
		Иначе
			НайденныеФайлы = Новый Массив; //вернём одну фичу
			НайденныеФайлы.Добавить(ФайлПутьКаталога);
		КонецЕсли;
	КонецЕсли;

	Для каждого ОбъектФайл из НайденныеФайлы цикл
		Ф = ОбъектФайл;
		Если ТипЗнч(ф) = Тип("Структура") Тогда
			Ф = ОбъектФайл.Файл; //т.к. для режима запрета синхронных вызовов там будет структура
		КонецЕсли;

		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Если ф.Путь <> ТекРодитель Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Не ЕстьПоддержкаАсинхронныхВызовов Тогда
			ЭтоКаталог = ф.ЭтоКаталог();
		Иначе
			ЭтоКаталог = Ложь;
			Если ф.Расширение = "" Тогда
				ЭтоКаталог = Истина;
			Иначе
				// TODO определение ЭтоКаталог для асинхронных действий не очень точно. https://xdd.silverbulleters.org/t/add-ne-zagruzhayutsya-fichi-esli-raspolagayutsya-v-kataloge-v-imeni-kotorogo-est-tochka/2156
				РасширениеНормализованное = НРег(ф.Расширение);
				Если РасширениеНормализованное <> ".feature" И РасширениеНормализованное <> ".epf" Тогда
					ЭтоКаталог = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ЭтоКаталог тогда //это каталог
			СтруткураФайла = Новый Структура;
			СтруткураФайла.Вставить("Уровень", Уровень);
			СтруткураФайла.Вставить("Каталог", Истина);
			СтруткураФайла.Вставить("Фича", Ложь);
			СтруткураФайла.Вставить("Имя", ф.Имя);
			СтруткураФайла.Вставить("ПолныйПуть", ф.ПолноеИмя);
			МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
			ТекИД = МассивРезультатОбходаКаталогов.Количество() - 1;

			ТекКолЭлементовДобавлено = 0;
			Уровень = Уровень + 1;
			ОбходКаталогов(ДополнитьСлешВПуть(ПутьКаталога) + ф.Имя, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ДополнитьСлешВПуть(ф.ПолноеИмя), ТекКолЭлементовДобавлено);
			Уровень = Уровень - 1;

			Если ТекКолЭлементовДобавлено = 0 Тогда
				МассивРезультатОбходаКаталогов.Удалить(ТекИД);
			КонецЕсли;
			КолЭлементовДобавлено = КолЭлементовДобавлено + ТекКолЭлементовДобавлено;

		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда

			ДвоичныеДанные = ПутьФайлаИлиДвоичныеДанныеДляСервера(ф.ПолноеИмя);

			СтруткураФайла = ПолучитьСтруктуруФайлаФичи(Уровень, ф.ИмяБезРасширения, ф.ПолноеИмя, ДвоичныеДанные);

			МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
			КолЭлементовДобавлено = КолЭлементовДобавлено + 1;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруФайлаФичи(Уровень, ИмяБезРасширения, ПолноеИмя, ДвоичныеДанные)
	СтруткураФайла = Новый Структура;
	СтруткураФайла.Вставить("Уровень", Уровень);
	СтруткураФайла.Вставить("Каталог", Ложь);
	СтруткураФайла.Вставить("Фича", Истина);
	СтруткураФайла.Вставить("Имя", ИмяБезРасширения);
	СтруткураФайла.Вставить("ПолныйПуть", ПолноеИмя);
	СтруткураФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);

	Возврат СтруткураФайла;
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьПустыеКаталогиИзДерева(Дерево)
	КолСтрок = Дерево.Строки.Количество();
	Для Ккк = 0 По КолСтрок - 1 Цикл
		Строка = Дерево.Строки[КолСтрок - 1 - Ккк];
		Если Строка.Тип = "Каталог" Тогда
			Если Строка.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Строка);
			Иначе
				УдалитьПустыеКаталогиИзДерева(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(ИсходныйМассив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ИмяСценария");
	Тзн.Колонки.Добавить("ИмяФайла");
	Тзн.Колонки.Добавить("ТаблицаШагов");
	Тзн.Колонки.Добавить("ПолноеИмя");
	Тзн.Колонки.Добавить("ДвоичныеДанные");
	Тзн.Колонки.Добавить("ЭтоСтруктураСценария");
	Тзн.Колонки.Добавить("Снипет");
	Для каждого Элем Из ИсходныйМассив Цикл
		СтрТзн = Тзн.Добавить();

		СтрТзн.ИмяСценария          = Элем.ИмяСценария;
		СтрТзн.ИмяФайла             = Элем.ИмяФайла;
		СтрТзн.ПолноеИмя            = Элем.ПолноеИмя;
		СтрТзн.ТаблицаШагов         = Элем.ТаблицаШагов;
		СтрТзн.ДвоичныеДанные       = Элем.ДвоичныеДанные;
		СтрТзн.ЭтоСтруктураСценария = Элем.ЭтоСтруктураСценария;
		СтрТзн.Снипет               = Элем.Снипет;
	КонецЦикла;

	Возврат Тзн;
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьПустыеКаталоги(МассивКаталоговДляПроверкиНаПустоту)
	Массив = Новый Массив;

	Для каждого ВеткаСтроки Из МассивКаталоговДляПроверкиНаПустоту Цикл
		Если ВеткаСтроки.Количество() = 0 Тогда
			ВеткаРодитель = ВеткаСтроки.Родитель.Родитель; //так определяется родитель на один уровень вверх, когда в переменной лежат строки дерева
			Если ВеткаРодитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если Массив.Найти(ВеткаРодитель) = Неопределено Тогда
				Массив.Добавить(ВеткаРодитель.Строки);
			КонецЕсли;

			ВеткаРодитель.Строки.Удалить(ВеткаСтроки.Родитель);
		КонецЕсли;
	КонецЦикла;

	Если Массив.Количество() > 0 Тогда
		УдалитьПустыеКаталоги(Массив);
	КонецЕсли;
КонецПроцедуры

&НаСервере
//Нельзя менять директиву на &НаСервереБезКонтекста, т.к. тогда перестанет присваиваться переменная ТекущийЗагружаемыйФичаФайл.
//Также надо понимать, что ЗаполнитьСтрокиДереваФичамиСервер вызывается из ЗаполнитьДеревоЗначенийПоМассивуСервер, которая вызывается &НаСервере
Процедура ЗаполнитьСтрокиДереваФичамиСервер(Дерево, FeatureReader, ТзнТаблицаИзвестныхStepDefinition,
		СтруктураПараметров)
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка Из Дерево.Строки Цикл
		Если Строка.Тип = "Фича" Тогда
			СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Ложь);

			ТекущийЗагружаемыйФичаФайл = Строка.ПолныйПуть;
			FeatureReader.ЗагрузитьФичу(Строка.ПолныйПуть, Строка.Строки, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);

			Если СтруктураПараметров.УдалитьСтрокуФичиИзДерева Тогда
				СтуктураРодительПотомок = Новый Структура;
				СтуктураРодительПотомок.Вставить("СтрокиГдеНаходитсяФича", Дерево.Строки);
				СтуктураРодительПотомок.Вставить("СтрокаФичи", Строка);
				МассивСтрокДляУдаления.Добавить(СтуктураРодительПотомок);
			КонецЕсли;

			Если СтруктураПараметров.Свойство("ДопДанныеФичи") Тогда
				ДопДанныеФичи = СтруктураПараметров["ДопДанныеФичи"];
				Строка["ДополнительныеДанные"] = ДопДанныеФичи;
			КонецЕсли;

		Иначе
			ЗаполнитьСтрокиДереваФичамиСервер(Строка, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;

	МассивКаталоговДляПроверкиНаПустоту = СтруктураПараметров.МассивКаталоговДляПроверкиНаПустоту;
	Для каждого Элем Из МассивСтрокДляУдаления Цикл
		Элем.СтрокиГдеНаходитсяФича.Удалить(Элем.СтрокаФичи);

		Если МассивКаталоговДляПроверкиНаПустоту.Найти(Элем.СтрокиГдеНаходитсяФича) = Неопределено Тогда
			МассивКаталоговДляПроверкиНаПустоту.Добавить(Элем.СтрокиГдеНаходитсяФича);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьОтметкуБрейкпоинтовРекурсивно(Дерево, Брейкпоинты)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда
			Если Брейкпоинты.Найти(СтрокаДерева.ПолныйПуть) <> Неопределено Тогда
				СтрокаДерева.Брейкпоинт = Истина;
			КонецЕсли;
		КонецЕсли;

		ПроставитьОтметкуБрейкпоинтовРекурсивно(СтрокаДерева, Брейкпоинты);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьОтметкуБрейкпоинтов(Дерево, СтруктураПараметров)
	ПроставитьОтметкуБрейкпоинтовРекурсивно(Дерево, СтруктураПараметров.Брейкпоинты);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьFeatureReader(ДвДанныеvbFeatureReader, ВременноеИмяФайла = Неопределено)
	ИмяВременногоEPF = ПутьФайлаПоДвоичнымДаннымСервер(ДвДанныеvbFeatureReader, "epf", ВременноеИмяФайла);
	FeatureReader = ВнешниеОбработки.Создать(ИмяВременногоEPF, Ложь);
	Возврат FeatureReader;
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(Дерево, КоличествоШагов)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда
			КоличествоШагов = КоличествоШагов + 1;
		КонецЕсли;

		ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(СтрокаДерева, КоличествоШагов);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоШаговИзДереваПоСтроке(Дерево)
	КоличествоШагов = 0;
	ПолучитьКоличествоШаговИзДереваПоСтрокеРекурсивно(Дерево, КоличествоШагов);
	Возврат КоличествоШагов;
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"); //TODO ?? обойтись без РеквизитФормыВЗначение
	ТзнТаблицаИзвестныхStepDefinition.Индексы.Добавить("СтрокаДляПоиска");

	ТзнКешStepDefinition = РеквизитФормыВЗначение("КешStepDefinition"); //TODO ?? обойтись без РеквизитФормыВЗначение
	ТзнКешStepDefinition.Индексы.Добавить("ИмяШагаБезКлючевогоСлова");
	СтруктураПараметров.Вставить("КешStepDefinition", ТзнКешStepDefinition);

	ТзнКешТаблицGherkin = РеквизитФормыВЗначение("КешТаблицGherkin"); //TODO ?? обойтись без РеквизитФормыВЗначение
	ТзнКешТаблицGherkin.Индексы.Добавить("Строка");
	СтруктураПараметров.Вставить("КешТаблицGherkin", ТзнКешТаблицGherkin);

	ТолькоДляПолученияСпискаФич = Ложь;
	СтруктураПараметров.Свойство("ТолькоДляПолученияСпискаФич", ТолькоДляПолученияСпискаФич);
	Если ТолькоДляПолученияСпискаФич = Истина Тогда
		Дерево = ОбъектСервер.ДеревоТестов.Скопировать();
	Иначе
		Дерево = ОбъектСервер.ДеревоТестов;
	КонецЕсли;
	Дерево.Строки.Очистить();
	ТекДерево  = Дерево;
	ТекУровень = 0;

	Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
		Если Элем.Уровень > ТекУровень Тогда
			ТекУровень = Элем.Уровень;
			НовСтр     = ТекДерево.Строки.Добавить();
			ТекДерево  = НовСтр;
		ИначеЕсли Элем.Уровень < ТекУровень Тогда
			Разн = ТекУровень - Элем.Уровень;
			Для Ккк = 1 По Разн Цикл
				НовСтр = НовСтр.Родитель;
			КонецЦикла;
			НовСтр     = НовСтр.Родитель.Строки.Добавить();
			ТекУровень = Элем.Уровень;
			ТекДерево  = НовСтр;
		Иначе
			НовСтр     = ТекДерево.Родитель.Строки.Добавить();
			ТекДерево  = НовСтр;
		КонецЕсли;

		Если Элем.Каталог Тогда
			НовСтр.Тип        = "Каталог";
			НовСтр.ПолныйПуть = Элем.ПолныйПуть;
			НовСтр.Имя        = Элем.Имя;
		ИначеЕсли Элем.Фича Тогда
			НовСтр.Тип         = "Фича";
			НовСтр.ТипКартинки = 1;
			НовСтр.ПолныйПуть  = Элем.ПолныйПуть;
			НовСтр.Имя         = Элем.Имя;
		КонецЕсли;

	КонецЦикла;

	УдалитьПустыеКаталогиИзДерева(Дерево);

	Дерево.Строки.Сортировать("ПолныйПуть", Истина);

	ВременноеИмяФайла = Неопределено;
	FeatureReader     = СоздатьFeatureReader(ДвДанныеvbFeatureReader, ВременноеИмяФайла);

	Если Не СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(
				СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
		СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариевСервер);
	КонецЕсли;

	МассивКаталоговДляПроверкиНаПустоту = Новый Массив;
	СтруктураПараметров.Вставить("МассивКаталоговДляПроверкиНаПустоту", МассивКаталоговДляПроверкиНаПустоту);

	ЗаполнитьСтрокиДереваФичамиСервер(Дерево, FeatureReader, ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);

	Для Каждого Элем Из СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ Цикл
		СтрокаТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариев.Найти(
				Элем.ИмяСценария, "ИмяСценария");
		Если СтрокаТаблицаУжеСуществующихСценариев <> Неопределено Тогда
			//обновим снипеты для сценариев, которые описаны в фича файлах как экспортные
			Элем.Снипет = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
		КонецЕсли;
	КонецЦикла;

	УдалитьПустыеКаталоги(МассивКаталоговДляПроверкиНаПустоту);
	СтруктураПараметров.МассивКаталоговДляПроверкиНаПустоту = Неопределено;
	СтруктураПараметров.ТаблицаУжеСуществующихСценариев = Неопределено;
	Если СтруктураПараметров.Свойство("КешФич") Тогда
		СтруктураПараметров.КешФич = Неопределено;
	КонецЕсли;

	Если СтруктураПараметров.Брейкпоинты.Количество() > 0 Тогда
		ПроставитьОтметкуБрейкпоинтов(Дерево, СтруктураПараметров);
	КонецЕсли;

	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;

	ЗаполнитьИДСтрокиДереваСервер(СтруктураПараметров, Дерево);

	Если ТолькоДляПолученияСпискаФич = Истина Тогда
		ТаблицаФич = Новый ТаблицаЗначений;
		ТаблицаФич.Колонки.Добавить("Фича");
		ТаблицаФич.Колонки.Добавить("КоличествоШагов");
		ТаблицаФич.Колонки.Добавить("МассивТегов");
		СтрокиСФичами = Дерево.Строки.НайтиСтроки(Новый Структура("Тип", "Фича"), Истина);
		Для Каждого СтрокаДерева Из СтрокиСФичами Цикл
			СтрокаТаблицаФич                 = ТаблицаФич.Добавить();
			СтрокаТаблицаФич.Фича            = СтрокаДерева.ПолныйПуть;
			СтрокаТаблицаФич.КоличествоШагов = ПолучитьКоличествоШаговИзДереваПоСтроке(СтрокаДерева);
			СтрокаТаблицаФич.МассивТегов     = СтрокаДерева.МассивТегов;
		КонецЦикла;

		Массив = Новый Массив;
		ТаблицаФич.Сортировать("КоличествоШагов убыв");
		Для Каждого СтрокаТаблицаФич Из ТаблицаФич Цикл
			Массив.Добавить(Новый Структура("Фича,МассивТегов", СтрокаТаблицаФич.Фича, СтрокаТаблицаФич.МассивТегов));
		КонецЦикла;
		СтруктураПараметров.МассивФичДляПослеНаложенияФильтров = Массив;
	Иначе
		ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition, "ТаблицаИзвестныхStepDefinition");
		ЗначениеВРеквизитФормы(ТзнКешStepDefinition, "КешStepDefinition");
		ЗначениеВРеквизитФормы(ТзнКешТаблицGherkin, "КешТаблицGherkin");
		ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");

		СохранитьНастройкиВХранилище("ТаблицаИзвестныхStepDefinition", ТаблицаИзвестныхStepDefinition);
		СохранитьНастройкиВХранилище("КешStepDefinition", КешStepDefinition);
		СохранитьНастройкиВХранилище("КешТаблицGherkin", КешТаблицGherkin);
	КонецЕсли;

	СтруктураПараметров.Вставить("КешStepDefinition", Неопределено);
	СтруктураПараметров.Вставить("КешТаблицGherkin", Неопределено);
	СтруктураПараметров.Вставить("ТаблицаОбластей", Неопределено);
	СтруктураПараметров.Вставить("ТаблицаПеревода", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДерево(Каталог, ДополнительныеПараметры, СтруктураПараметров)
	Файл = Новый Файл(Каталог);
	МассивРезультатОбходаКаталогов = Новый Массив;

	СтруткураФайла = Новый Структура;
	СтруткураФайла.Вставить("Каталог", Истина);
	СтруткураФайла.Вставить("Имя", Файл.Имя);
	СтруткураФайла.Вставить("ПолныйПуть", Каталог);
	СтруткураФайла.Вставить("Уровень", 1);

	МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);

	Уровень = 2;
	ТекРодитель = Неопределено;
	КолЭлементовДобавлено = 0;
	ОбходКаталогов(Каталог, МассивРезультатОбходаКаталогов, Уровень, ДополнительныеПараметры, ТекРодитель, КолЭлементовДобавлено);

	ДвДанныеvbFeatureReader = ПутьФайлаИлиДвоичныеДанныеДляСервера(ПолучитьПутьКFeatureReader());

	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов", МассивРезультатОбходаКаталогов);
	ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов, ДвДанныеvbFeatureReader, СтруктураПараметров);

	//Обновим снипеты в таблице известных сценариев.
	ИдСтроки = -1;
	Для Каждого СтрокаТаблицаУжеСуществующихСценариев Из СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ Цикл
		ИдСтроки = ИдСтроки + 1;
		ТаблицаУжеСуществующихСценариев[ИдСтроки].Снипет = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзХранилищаКеш()
	ВосстановитьНастройкиИзХранилища("ТаблицаИзвестныхStepDefinition", "ТаблицаИзвестныхStepDefinition");
	ВосстановитьНастройкиИзХранилища("КешStepDefinition", "КешStepDefinition");
	ВосстановитьНастройкиИзХранилища("КешТаблицGherkin", "КешТаблицGherkin");
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition()

	ДанныеПоВерсиямОбработок = Новый Структура;
	КоллекцияВерсийФайловШагов = Новый Соответствие;

	Для Каждого Стр Из ТаблицаИзвестныхStepDefinition Цикл
		КоллекцияВерсийФайловШагов.Вставить(Стр.ИмяФайла, Стр.ВерсияФайла);
		Стр.СтрокаОбрабатывалась = Ложь;
	КонецЦикла;

	ДанныеПоВерсиямОбработок.Вставить("КоллекцияВерсийФайловШагов", КоллекцияВерсийФайловШагов);

	Возврат ДанныеПоВерсиямОбработок;
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались(Знач КоллекцийПутейФайловКоторыеСовпалиСКеш)
	СтрокиТаблицы = Новый Массив;
	ЕщеНеОбработанныеСтроки = ТаблицаИзвестныхStepDefinition.НайтиСтроки(Новый Структура("СтрокаОбрабатывалась", Ложь));

	Для Каждого Стр Из ЕщеНеОбработанныеСтроки Цикл
		ИмяФайла = Стр.ИмяФайла;
		Если КоллекцийПутейФайловКоторыеСовпалиСКеш.Получить(УниверсальноеПолноеИмяФайла(ИмяФайла)) <> Неопределено Тогда
			Стр.СтрокаОбрабатывалась = Истина;
		Иначе
			СтрокиТаблицы.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Стр Из СтрокиТаблицы Цикл
		ТаблицаИзвестныхStepDefinition.Удалить(Стр);
	КонецЦикла;

	//ТаблицаИзвестныхStepDefinition.Сортировать("СтрокаДляПоиска");
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition()
	ТзнТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition;
	ТзнТаблицаИзвестныхStepDefinition = ТзнТаблицаИзвестныхStepDefinition.Выгрузить(, "ИмяФайла");
	ТзнТаблицаИзвестныхStepDefinition.Свернуть("ИмяФайла");
	Возврат ТзнТаблицаИзвестныхStepDefinition.ВыгрузитьКолонку("ИмяФайла");
КонецФункции

&НаСервере
Процедура УдалитьИз_ТаблицаИзвестныхStepDefinition_Файлы(МассивФайловДляОбработки)
	ТзнТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition;

	Для Каждого ИмяФайла Из МассивФайловДляОбработки Цикл
		МассивСтрок = ТзнТаблицаИзвестныхStepDefinition.НайтиСтроки(Новый Структура("ИмяФайла", ИмяФайла));
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТзнТаблицаИзвестныхStepDefinition.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеФайлаПоСобраннойРанееИнформации(ИмяФайла, МассивПутейБиблиотек, ДополнительныеПараметры)

	ДанныеФайла = Неопределено;
	УниверсальноеПолноеИмяФайла = УниверсальноеПолноеИмяФайла(ИмяФайла, Истина);

	Для Каждого ПутьКаталогаБиблиотеки Из МассивПутейБиблиотек Цикл
			ДанныеФайла = НайтиДанныеФайлаПоСобраннойРанееИнформации(ПутьКаталогаБиблиотеки, УниверсальноеПолноеИмяФайла,
			ДополнительныеПараметры);
		Если ДанныеФайла <> Неопределено Тогда
				Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ДанныеФайла = Неопределено Тогда
		ДанныеФайла = НайтиДанныеФайлаПоСобраннойРанееИнформации("ПоискEPF", УниверсальноеПолноеИмяФайла,
			ДополнительныеПараметры);
	КонецЕсли;

	Возврат ДанныеФайла;

КонецФункции

&НаКлиенте
Функция НайтиДанныеФайлаПоСобраннойРанееИнформации(Знач ГдеИщем, Знач УниверсальноеПолноеИмяФайла, Знач ДополнительныеПараметры)
	МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, ГдеИщем, "НайденныеФайлы");
	Если ЗначениеЗаполнено(МассивФайлов) Тогда
		Для Каждого ЭлементМассива Из МассивФайлов Цикл
			Если СравнитьОбычныйПутьФайлаСУниверсальнымПутемДругогоФайла(
					ЭлементМассива.Файл.ПолноеИмя, УниверсальноеПолноеИмяФайла) Тогда
				Возврат ЭлементМассива;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
// Процедура УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(ДанныеПоВерсиямОбработок,
Процедура УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(
		КоллекцияВерсийФайловШагов, ДополнительныеПараметры, МассивФайлов)

	МассивФайловДляОбработки = Новый Массив;

	КаталогИнструментовУниверсальный = УниверсальноеПолноеИмяФайла(объект.КаталогИнструментов);

	МассивПутейБиблиотек = Неопределено;

	Для Каждого ИмяФайла Из МассивФайлов Цикл
		ПропуститьФайлИзКаталогаШтатныхБиблиотек = Найти(ИмяФайла, КаталогИнструментовУниверсальный) <> 0;
		Если ПропуститьФайлИзКаталогаШтатныхБиблиотек Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			МассивФайловДляОбработки.Добавить(ИмяФайла);
		Иначе
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда

				Если МассивПутейБиблиотек = Неопределено Тогда
					МассивПутейБиблиотек = Новый Массив;
					Для Каждого ЭлементСписка Из Объект.КаталогиБиблиотек Цикл
						ПутьКаталогаБиблиотеки = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементСписка.Значение);
						УниверсальныйПутьКаталогаБиблиотеки = УниверсальноеПолноеИмяФайла(ПутьКаталогаБиблиотеки);
						ПропуститьФайлИзКаталогаШтатныхБиблиотек = Найти(УниверсальныйПутьКаталогаБиблиотеки, КаталогИнструментовУниверсальный) <> 0;
						Если ПропуститьФайлИзКаталогаШтатныхБиблиотек Тогда
							Продолжить;
						КонецЕсли;

						МассивПутейБиблиотек.Добавить(ПутьКаталогаБиблиотеки);
					КонецЦикла;
				КонецЕсли;

				ДанныеФайла = ПолучитьДанныеФайлаПоСобраннойРанееИнформации(ИмяФайла, МассивПутейБиблиотек,
					ДополнительныеПараметры);
				Если ДанныеФайла = Неопределено Тогда
					ТекВерсия = Неопределено;
				Иначе
					ТекВерсия   = ДанныеФайла.ВерсияФайла;
				КонецЕсли;

			Иначе
				ТекВерсия = ВремяИзмененияФайлаКомандаСистемы(ИмяФайла);
			КонецЕсли;

			ПрежняяВерсия = КоллекцияВерсийФайловШагов.Получить(ИмяФайла);
			Если ПрежняяВерсия <> Неопределено И ТекВерсия <> ПрежняяВерсия Тогда
				МассивФайловДляОбработки.Добавить(ИмяФайла);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Если МассивФайловДляОбработки.Количество() > 0 Тогда
		УдалитьИз_ТаблицаИзвестныхStepDefinition_Файлы(МассивФайловДляОбработки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаДоПостроенияДереваСервер(ДанныеПоВерсиямОбработок, МассивФайлов)
	ВосстановитьНастройкиИзХранилищаКеш();
	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();

	МассивФайлов = ПолучитьМассивФайловИзТаблицы_ТаблицаИзвестныхStepDefinition();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоФич(СтруктураПараметров)
	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	МассивСообщений         = СтруктураПараметров.МассивСообщений;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;

	СтруктураПараметров.ДополнительныеПараметры = Неопределено;

	ПутьКФичам = Новый Файл(КаталогФич);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "Существует") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ПутьКФичам.Существует() Тогда
			МассивСообщений.Добавить("Не найден путь " + КаталогФич);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ТаблицаКонтекстовОбработок = Новый Массив;
		ТаблицаИзвестныхStepDefinition.Очистить();
		КоллекцияИменКонтекстовОбработок.Очистить();
	КонецЕсли;

	Путь = ПутьКФичам.ПолноеИмя;
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Истина);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "ЭтоКаталог") Тогда
			Путь = ПутьКФичам.Путь;
			СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
		КонецЕсли;
	Иначе
		Если ПутьКФичам.ЭтоФайл() Тогда
			Путь = ПутьКФичам.Путь;
			СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
		КонецЕсли;
	КонецЕсли;

	ПодготовитьВыводЛогаВФайл();

	ВывестиВЛогФайл(Плагин("Информатор").ТехническаяИнформация());

	ДанныеПоВерсиямОбработок = Неопределено;
	МассивФайлов             = Неопределено;

	ОбработкаДоПостроенияДереваСервер(ДанныеПоВерсиямОбработок, МассивФайлов);

	УдалитьСтрокиИз_ТаблицаИзвестныхStepDefinition_ДляКоторыхНетФайловИСтрокиИзмененныхФайлов(
		ДанныеПоВерсиямОбработок.КоллекцияВерсийФайловШагов, ДополнительныеПараметры, МассивФайлов);

	ОписанияФайловШагов = Новый Массив;
	КоллекцийПутейФайловКоторыеСовпалиСКеш = ПолучитьВсеСуществующиеШагиИзОбработок(Путь, КаталогиБиблиотек,
		ДанныеПоВерсиямОбработок, ДополнительныеПараметры, ОписанияФайловШагов);

	Если ОписанияФайловШагов.Количество() = 0 Тогда

		ЗаполнитьДеревоФичПродолжение(ОписанияФайловШагов, КоллекцийПутейФайловКоторыеСовпалиСКеш,
			ДополнительныеПараметры, Путь, СтруктураПараметров, КаталогиБиблиотек, ПутьКФичам);

	Иначе

		ПередаваемыеФайлы = Неопределено;
		ОписаниеПередаваемыхФайлов = ПодготовитьФайлыКПередачеНаСервер(ОписанияФайловШагов, ПередаваемыеФайлы);

		ПараметрыПродолжения = Новый Структура;
		ПараметрыПродолжения.Вставить("ОписаниеПередаваемыхФайлов", ОписаниеПередаваемыхФайлов);
		ПараметрыПродолжения.Вставить("ОписанияФайловШагов", ОписанияФайловШагов);
		ПараметрыПродолжения.Вставить("КоллекцийПутейФайловКоторыеСовпалиСКеш", КоллекцийПутейФайловКоторыеСовпалиСКеш);
		ПараметрыПродолжения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		ПараметрыПродолжения.Вставить("Путь", Путь);
		ПараметрыПродолжения.Вставить("СтруктураПараметров", СтруктураПараметров);
		ПараметрыПродолжения.Вставить("КаталогиБиблиотек", КаталогиБиблиотек);
		ПараметрыПродолжения.Вставить("ПутьКФичам", ПутьКФичам);

		Если Объект.ИспользоватьПрямыеПутиФайлов Тогда

			ПереданныеФайлы = Новый Массив;
			Для Каждого ОписаниеФайла Из ОписанияФайловШагов Цикл
				ОписаниеПереданногоФайла = Новый Структура;
				ОписаниеПереданногоФайла.Вставить("Имя", ОписаниеФайла.ПолноеИмя);
				ОписаниеПереданногоФайла.Вставить("ПолноеИмя", ОписаниеФайла.ПолноеИмя);
				ОписаниеПереданногоФайла.Вставить("Хранение", Новый УникальныйИдентификатор);

				ПереданныеФайлы.Добавить(ОписаниеПереданногоФайла);
			КонецЦикла;

			ОбработчикПодключенияШаговИзПереданныхФайловШагов(ПереданныеФайлы, ПараметрыПродолжения);

		Иначе

			ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ОбработчикПодключенияШаговИзПереданныхФайловШагов", ЭтаФорма, ПараметрыПродолжения);
			АСинк().смв_ПоместитьФайлы(ОписаниеОповещения, ПередаваемыеФайлы);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПодготовитьФайлыКПередачеНаСервер(Знач ОписанияФайловШагов, ПередаваемыеФайлы)
	ОписаниеПередаваемыхФайлов = Новый Соответствие;
	ПередаваемыеФайлы = Новый Массив;
	Для Каждого ОписаниеФайла Из ОписанияФайловШагов Цикл
		ПередаваемыеФайлы.Добавить(Вычислить("Новый ОписаниеПередаваемогоФайла(ОписаниеФайла.ПолноеИмя)"));
		ОписаниеПередаваемыхФайлов.Вставить(ОписаниеФайла.ПолноеИмя, ОписаниеФайла);
	КонецЦикла;
	Возврат ОписаниеПередаваемыхФайлов;
КонецФункции

&НаКлиенте
Процедура ОбработчикПодключенияШаговИзПереданныхФайловШагов(Знач ПереданныеФайлы,
	Знач ПараметрыПродолженияЗагрузкиФич) Экспорт

	ПодключитьШагиИзПереданныхФайлов(ПереданныеФайлы, ПараметрыПродолженияЗагрузкиФич.ОписаниеПередаваемыхФайлов, Истина);

	ОписанияФайловШагов = ПараметрыПродолженияЗагрузкиФич.ОписанияФайловШагов;
	КоллекцийПутейФайловКоторыеСовпалиСКеш = ПараметрыПродолженияЗагрузкиФич.КоллекцийПутейФайловКоторыеСовпалиСКеш;
	ДополнительныеПараметры = ПараметрыПродолженияЗагрузкиФич.ДополнительныеПараметры;
	Путь = ПараметрыПродолженияЗагрузкиФич.Путь;
	СтруктураПараметров = ПараметрыПродолженияЗагрузкиФич.СтруктураПараметров;
	КаталогиБиблиотек = ПараметрыПродолженияЗагрузкиФич.КаталогиБиблиотек;
	ПутьКФичам = ПараметрыПродолженияЗагрузкиФич.ПутьКФичам;

	ЗаполнитьДеревоФичПродолжение(ОписанияФайловШагов, КоллекцийПутейФайловКоторыеСовпалиСКеш,
		ДополнительныеПараметры, Путь, СтруктураПараметров, КаталогиБиблиотек, ПутьКФичам);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьШагиИзПереданныхФайлов(Знач ПереданныеФайлы, Знач ОписаниеПередаваемыхФайлов, Знач ПолучатьШаги)

	ВсегоФайлов = ПереданныеФайлы.Количество();

	// в режиме совместимости 8.3.13 и выше для объекта ОписаниеПереданногоФайла свойство ПолноеИмя вместо Имя
	ИспользоватьПолноеИмя = Ложь;
	Если ВсегоФайлов > 0 Тогда
		ИспользоватьПолноеИмя = ЕстьСвойство(ПереданныеФайлы[0], "ПолноеИмя");
	КонецЕсли;

	ОписанияФайловШагов = Новый Массив;
	СчетчикФайлов = 0;
	Для Каждого ПереданныйФайл Из ПереданныеФайлы Цикл
		ИмяФайла = ?(ИспользоватьПолноеИмя, ПереданныйФайл.ПолноеИмя, ПереданныйФайл.Имя);
		ОписаниеФайла = ОписаниеПередаваемыхФайлов.Получить(ИмяФайла);

		Файл = Новый Файл(ОписаниеФайла.ПолноеИмя);
		БылиОшибки = Ложь;

		ПоказатьПрогрессПередачиФайлов(Файл, ВсегоФайлов, СчетчикФайлов);

		ОписаниеШагов = ПодключитьШагиИзОбработкиКлиент(Файл, ОписаниеФайла.ВерсияФайла,
				ПереданныйФайл.Хранение, ПолучатьШаги);

		Если ЗначениеЗаполнено(ОписаниеШагов) Тогда
			ОписанияФайловШагов.Добавить(ОписаниеШагов);
		КонецЕсли;
	КонецЦикла;

	ПодключитьШаги(ОписанияФайловШагов);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПрогрессПередачиФайлов(Знач Файл, Знач ВсегоФайлов, СчетчикФайлов)
	СчетчикФайлов = СчетчикФайлов + 1;
	ДелительДляПоказаСтатистики = 10;
	СтоПроцентов = 100;
	Если СчетчикФайлов % ДелительДляПоказаСтатистики = 0 Тогда
		Попытка
			ОтображаемоИмя = Файл.Путь;
		Исключение
			ОтображаемоИмя = Файл.Имя;
		КонецПопытки;
		Состояние(СтрШаблон_("Файл №%1 из %2", СчетчикФайлов, ВсегоФайлов),
			Окр(СчетчикФайлов * СтоПроцентов / ВсегоФайлов), ОтображаемоИмя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоФичПродолжение(ОписанияФайловШагов, КоллекцийПутейФайловКоторыеСовпалиСКеш,
	ДополнительныеПараметры, Путь, СтруктураПараметров, КаталогиБиблиотек, ПутьКФичам)

	//ПодключитьШаги(ОписанияФайловШагов);

	УдалитьСтрокиТаблицаИзвестныхStepDefinitionКоторыеНеОбрабатывались(КоллекцийПутейФайловКоторыеСовпалиСКеш);

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ТаблицаУжеСуществующихСценариев = Новый Массив();
	КонецЕсли;

	КоллекцияОбработанныхФайлов    = Новый Соответствие;
	ПолучитьУжеСуществующиеСценарииИзФич(Путь, ДополнительныеПараметры, КоллекцияОбработанныхФайлов);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСценарииИзФич(Элем.Значение, ДополнительныеПараметры, КоллекцияОбработанныхФайлов);
	КонецЦикла;

	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ", ТаблицаУжеСуществующихСценариев);
	СтруктураПараметров.Вставить("ЭтоLinux", ЭтоLinux);
	СтруктураПараметров.Вставить("ЯзыкГенератораGherkin", Объект.ЯзыкГенератораGherkin);
	СтруктураПараметров.Вставить("ДвоичныеДанныеФайлПеревода", ПолучитьФайлыПеревода());

	ТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ;

	ЗаполнитьДерево(ПутьКФичам.ПолноеИмя, ДополнительныеПараметры, СтруктураПараметров);

	ПослеЗагрузкиФич();
КонецПроцедуры

&НаКлиенте
Функция КоллекцияДляПоискаДублейФайлов(МассивФайлов)
	Коллекция = Новый Соответствие;

	Для каждого Элем Из МассивФайлов Цикл
		Если ТипЗнч(Элем) = Тип("Структура") Тогда
			Коллекция.Вставить(Элем.Файл.ПолноеИмя, "");
		Иначе
			Коллекция.Вставить(Элем.ПолноеИмя, "");
		КонецЕсли;
	КонецЦикла;

	Возврат Коллекция;
КонецФункции

&НаКлиенте
Процедура ПолучитьУжеСуществующиеСценарииИзФич(Знач КаталогФич, ДополнительныеПараметры,
		КоллекцияУжеОбработанныхФайлов)
	Перем ПутьФайла;
	Файл = Новый Файл(КаталогФич);

	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;

	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;

	Отладка(ПолучитьТекстСообщенияПользователю("$Ищу сценарии в каталоге$") + " " + КаталогПоиска);

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, КаталогФич, "НайденныеФайлы"); //это файлы по данной библиотеке
		Если МассивФайлов = Неопределено Тогда
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискFeature", "НайденныеФайлы");
		КонецЕсли;

		КоллекцияДляПоискаДублейФайлов = КоллекцияДляПоискаДублейФайлов(МассивФайлов);

		Ном = 0;
		Для каждого Библ Из Объект.КаталогиБиблиотек Цикл
			Ном = Ном + 1;

			МассивФайловБиблиотека = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "БиблиотекаФич" + Ном, "НайденныеФайлы");
			Для каждого Элем Из МассивФайловБиблиотека Цикл
				ПутьФайла = Элем.Файл.ПолноеИмя;
				Если КоллекцияДляПоискаДублейФайлов.Получить(ПутьФайла) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;

				МассивФайлов.Добавить(Элем);
				КоллекцияДляПоискаДублейФайлов.Вставить(ПутьФайла, "");

			КонецЦикла;
		КонецЦикла;

	Иначе
		МассивФайлов = НайтиФайлы(КаталогПоиска, "*.feature", Истина);
	КонецЕсли;

	Для Каждого ФайлОбъект Из МассивФайлов Цикл
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			Файл = ФайлОбъект;
		Иначе
			Файл = ФайлОбъект.Файл;
		КонецЕсли;

		Если НРег(Файл.Расширение) <> ".feature" Тогда
			Продолжить;
		КонецЕсли;

		ПолноеИмяФайла = Файл.ПолноеИмя;
		УниверсальноеИмяФайла = УниверсальноеПолноеИмяФайла(ПолноеИмяФайла);
		УниверсальноеИмяФайлаНРег = НРег(УниверсальноеИмяФайла);

		Если КоллекцияУжеОбработанныхФайлов.Получить(УниверсальноеИмяФайлаНРег) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		КоллекцияУжеОбработанныхФайлов.Вставить(УниверсальноеИмяФайлаНРег, 1);

		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВерсияФайла = Файл.ПолучитьВремяИзменения();

			ПрежняяВерсияФайла = КоллекцияВерсийFeatureИмяФайла.Получить(УниверсальноеИмяФайла);
			Если ПрежняяВерсияФайла = Неопределено Тогда
				КоллекцияВерсийFeatureИмяФайла.Вставить(УниверсальноеИмяФайла, ВерсияФайла);
			Иначе
				Если ПрежняяВерсияФайла = ВерсияФайла Тогда
					Продолжить;
				КонецЕсли;
				//файл изменился, теперь обновляем версию и удаляем старые снипеты
				КоллекцияВерсийFeatureИмяФайла.Вставить(УниверсальноеИмяФайла, ВерсияФайла);

					МассивИД = Новый Массив;
					Ном = -1;
					Для каждого Элем Из ТаблицаУжеСуществующихСценариев Цикл
						Ном = Ном + 1;
						Если СравнитьОбычныйПутьФайлаСУниверсальнымПутемДругогоФайла(Элем.ИмяФайла, УниверсальноеИмяФайлаНРег) Тогда
							МассивИД.Добавить(Ном);
						КонецЕсли;

					КонецЦикла;

					Для Ккк = 0 По МассивИД.Количество() - 1 Цикл
						ИД = МассивИД[МассивИД.Количество() - 1 - Ккк];
						ТаблицаУжеСуществующихСценариев.Удалить(ИД);
					КонецЦикла;

					Отладка("Загрузил новую версию: " + ПолноеИмяФайла);
			КонецЕсли;
		КонецЕсли;

		ТипШага  = "";
		Описание = "";
		Пример   = "";

		НашлиТегExportScenarios = Ложь;
		ДобавлятьШаги = Ложь;

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ПолноеИмяФайла, "UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			Стр = СокрЛП(Стр);
			Если Стр = "" Тогда
				Продолжить;
			КонецЕсли;

			ПервыйСимволСтроки = Лев(Стр, 1);

			Если ПервыйСимволСтроки = "@" Тогда
				СтрНРег = НРег(Стр);
				Если СтрНРег = "@exportscenarios" Тогда
					НашлиТегExportScenarios = Истина;
				ИначеЕсли Лев(СтрНРег, 9) = "@типшага:" Тогда
					ТипШага = Сред(Стр, 10);
				ИначеЕсли Лев(СтрНРег, 10) = "@описание:" Тогда
					Описание = Сред(Стр, 11);
				ИначеЕсли Лев(СтрНРег, 21) = "@примериспользования:" Тогда
					ПромСтр = Сред(Стр, 22);
					Если Пример = "" Тогда
						Пример = ПромСтр;
					Иначе
						Пример = Пример + Символы.ПС + ПромСтр;
					КонецЕсли;
				КонецЕсли;

				Продолжить;
			ИначеЕсли ПервыйСимволСтроки = "#" Тогда
				Продолжить;
			КонецЕсли;

			Если НашлиТегExportScenarios Тогда
				СтрНРег = НРег(Стр);
				Если Лев(СтрНРег, 9) = "сценарий:" Тогда
					ДобавлятьШаги = Истина;
					ИмяСценария = СокрЛП(Сред(Стр, 10));
					ТаблицаШагов = Новый Массив;

					ТаблицаУжеСуществующихСценариев.Добавить(
						ПолучитьСтруктуруДляСценария(ИмяСценария, УниверсальноеИмяФайла, ТаблицаШагов, ПолноеИмяФайла,
							Ложь, ТипШага, Описание, Пример));

					ТипШага  = "";
					Описание = "";
					Пример   = "";
					Продолжить;
				ИначеЕсли Лев(СтрНРег, 19) = "структура сценария:" Тогда
					ДобавлятьШаги = Истина;
					ИмяСценария = СокрЛП(Сред(Стр, 20));
					ТаблицаШагов = Новый Массив;
					ТаблицаУжеСуществующихСценариев.Добавить(
						ПолучитьСтруктуруДляСценария(ИмяСценария, УниверсальноеИмяФайла, ТаблицаШагов, ПолноеИмяФайла,
							Истина, ТипШага, Описание, Пример));

					ТипШага  = "";
					Описание = "";
					Пример   = "";
					Продолжить;
				КонецЕсли;

				Если ДобавлятьШаги Тогда
					ТаблицаШагов.Добавить(Стр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Текст.Закрыть();

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДляСценария(ИмяСценария, ИмяФайла, ТаблицаШагов, ПолноеИмя, ЭтоСтруктураСценария, ТипШага, Описание, Пример)
	Структура = Новый Структура;
	Структура.Вставить("ИмяСценария", ИмяСценария);
	Структура.Вставить("ИмяФайла", ИмяФайла);
	Структура.Вставить("ПолноеИмя", ПолноеИмя);
	Структура.Вставить("ТаблицаШагов", ТаблицаШагов);
	Структура.Вставить("ЭтоСтруктураСценария", ЭтоСтруктураСценария);

	Структура.Вставить("ДвоичныеДанные", ПутьФайлаИлиДвоичныеДанныеДляСервера(ИмяФайла));
	Структура.Вставить("Снипет", "");

	Структура.Вставить("ТипШага", СокрЛП(ТипШага));
	Структура.Вставить("ОписаниеШага", СокрЛП(Описание));
	Структура.Вставить("ПримерИспользования", СокрЛП(Пример));

	Возврат Структура;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеПоРанееСобраннойИнформации(Знач ДополнительныеПараметры, Знач ИмяПараметра, Знач ЗначениеПараметра)
	ОписаниеДействия = ДополнительныеПараметры.КешПараметровДействий.Получить(ИмяПараметра);
	Если ОписаниеДействия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ОписаниеДействия[ЗначениеПараметра];
КонецФункции

&НаКлиенте
Функция ПолучитьКешФайловДляДействий(МассивДействий)
	КешПараметровДействий = Новый Соответствие;
	Для Каждого Действие Из МассивДействий Цикл
		КешПараметровДействий.Вставить(Действие.ИмяПараметра, Действие); //TODO возможно, нужно сохранять только первую инициализацию
	КонецЦикла;
	Возврат КешПараметровДействий;
КонецФункции

&НаКлиенте
Функция ПроверитьСуществованиеКаталогаБиблиотек(ДополнительныеПараметры, ПутьКОбработке)
	Перем ПутьФайла;

	БылиОшибки = Ложь;
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Ном = 0;
		Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
			Ном = Ном + 1;
			Если НЕ ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогиБиблиотек" + Ном, "Существует") Тогда
				БылиОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
			ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
			ФайлПроверкаСуществования = Новый Файл(ПутьФайла);
			Если НЕ ФайлПроверкаСуществования.Существует() Тогда
				ТекстСообщения = "Не найден каталог библиотеки: %1";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Элем.Значение);
				Сообщить(ТекстСообщения);
				БылиОшибки = Истина;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат Не БылиОшибки;

КонецФункции

&НаСервере
Процедура ЗаполнитьИДСтрокиДереваСервер(СтруктураПараметров, Дерево)
	КоллекцияИменКонтекстовОбработок = СтруктураПараметров.КоллекцияИменКонтекстовОбработок;

	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"); //TODO ?? обойтись без РеквизитФормыВЗначение
	МассивСтрокДереваДанныеФормы = Новый Массив;
	ЗаполнитьИДСтрокиВДереве(Дерево, МассивСтрокДереваДанныеФормы, КоллекцияИменКонтекстовОбработок,
		ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, Путь, ИмяПараметра, ТипПараметра)

	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("ИмяФайла", Путь);
	СтруктураФайла.Вставить("ИмяПараметра", ИмяПараметра);
	СтруктураФайла.Вставить("ТипПараметра", ТипПараметра);

	Массив.Добавить(СтруктураФайла);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСканированиеКаталогов(Массив)
	Перем ПутьФайла; //, ПутьКОбработке;

	//TODO необходимо вынести в реквизит формы.
	// ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, "", "ПоискEPF", "СканированиеКаталогаПоискEPF");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, "", "ПоискFeature", "СканированиеКаталогаПоискFeature");
	Ном = 0;
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Ном = Ном + 1;
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, "", ПутьФайла, "СканированиеКаталогаПоискEPF");
		ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, "", "БиблиотекаФич" + Ном, "СканированиеКаталогаПоискFeature");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМассивСостоянийФайлов(Массив)
	Перем ПутьФайла; //, ПутьКОбработке;

	//TODO удалить? ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогИнструментов), "КаталогИнструментов", "РаботаСФайлом");
	//TODO удалить? ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогИнструментов)) + "lib/featurereader/vbFeatureReader.epf", "vbFeatureReader", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputAllure), "КаталогOutputAllure", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputjUnit), "КаталогOutputjUnit", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputCucumberJson), "КаталогOutputCucumberJson", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML), "КаталогOutputИнструкцияHTML", "РаботаСФайлом");
	ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогФич), "КаталогФич", "РаботаСФайлом");

	Ном = 0;
	Для каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Ном = Ном + 1;
		ПутьФайла = ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение);
		ДобавитьДействиеВМассивАсинхроныхСобытий(Массив, ПутьФайла, "КаталогиБиблиотек" + Ном, "РаботаСФайлом");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСинхроноСостоянияОбъектовФайловойСистемы(ДопПараметры)

КонецПроцедуры

&НаКлиенте
Процедура АсинхронноОбработатьСледующийФайл(ДополнительныеПараметры)
	ДополнительныеПараметры.ТекИдМассива = ДополнительныеПараметры.ТекИдМассива + 1;
	АсинхронноПолучитьСостоянияОбъектовФайловойСистемы(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюФайловАссинхронно(ДополнительныеПараметры)
	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;
	СтруктураФайла = МассивДействий[ТекИдМассива];
	НайденныеФайлы = СтруктураФайла.НайденныеФайлы;

	СтруктураФайла.ИДФайлаДляОбработки = СтруктураФайла.ИДФайлаДляОбработки + 1;

	Если СтруктураФайла.ИДФайлаДляОбработки > (НайденныеФайлы.Количество() - 1) Тогда

		АсинхронноОбработатьСледующийФайл(ДополнительныеПараметры);

	Иначе

		Файл = НайденныеФайлы[СтруктураФайла.ИДФайлаДляОбработки].Файл;
		Отладка("ПолучитьВерсиюФайловАссинхронно " + Файл.ПолноеИмя);

		ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ОбработчикНачатьПолучитьВремяИзмененияФайлаМассив", ЭтаФорма, ДополнительныеПараметры);
		Асинк().смв_Файл_ПолучитьВремяИзменения(Файл, ОписаниеОповещения);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АсинхронноПолучитьСостоянияОбъектовФайловойСистемы(ДополнительныеПараметры)

	ТекИдМассива   = ДополнительныеПараметры.ТекИдМассива;
	МассивДействий = ДополнительныеПараметры.МассивДействий;

	Если ТекИдМассива > (МассивДействий.Количество() - 1) Тогда

		Если ДополнительныеПараметры.НадоЗагрузитьФичи Тогда

			ЗагрузитьФичиПродолжение(ДополнительныеПараметры);

		КонецЕсли;

		Если ДополнительныеПараметры.НадоГенерироватьEPF Тогда

			СоздатьШаблоныОбработокПродолжение(ДополнительныеПараметры);

		КонецЕсли;

		Возврат;

	КонецЕсли;

	СтруктураФайла = МассивДействий[ТекИдМассива];

	Если СтруктураФайла.ТипПараметра = "РаботаСФайлом" Тогда

		Файл = Новый Файл(СтруктураФайла.ИмяФайла);

		ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ОбработчикНачатьПроверкуСуществования", ЭтаФорма, ДополнительныеПараметры);
		АСинк().смв_Файл_Существует(Файл, ОписаниеОповещения);

	ИначеЕсли	Найти(СтруктураФайла.ТипПараметра, "СканированиеКаталогаПоиск") > 0 Тогда

		Если НЕ ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "Существует") Тогда
			АсинхронноОбработатьСледующийФайл(ДополнительныеПараметры);
			Возврат;
		КонецЕсли;

		Если (СтруктураФайла.ИмяПараметра = "ПоискEPF") или (СтруктураФайла.ИмяПараметра = "ПоискFeature") или (Лев(СтруктураФайла.ИмяПараметра, 13) = "БиблиотекаФич") Тогда

			//значит мы ищем родные epf для фич
			ПутьКФичам = Новый Файл(Объект.КаталогФич);
			Путь = ПутьКФичам.ПолноеИмя;
			Если Не ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "КаталогФич", "ЭтоКаталог") Тогда //это файл
				Путь = ПутьКФичам.Путь;
			КонецЕсли;

			Если Лев(СтруктураФайла.ИмяПараметра, 13) = "БиблиотекаФич" Тогда

				Ном  = СтрЗаменить(СтруктураФайла.ИмяПараметра, "БиблиотекаФич", "");
				Ном  = СтрЗаменить(Ном, Символы.НПП, "");
				Ном  = Число(Ном);
				Путь = Объект.КаталогиБиблиотек[Ном - 1].Значение;

			КонецЕсли;

			Путь = ПреобразоватьПутьСТочкамиКНормальномуПути(Путь);

		Иначе

			Путь = СтруктураФайла.ИмяПараметра;

		КонецЕсли;


		ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ОбработчикНачатьПоискФайлов", Этаформа, ДополнительныеПараметры);

		Если СтруктураФайла.ТипПараметра = "СканированиеКаталогаПоискFeature" Тогда

			Маска = "*";

		Иначе

			Маска = "*." + НРег(СтрЗаменить(СтруктураФайла.ТипПараметра, "СканированиеКаталогаПоиск", ""));

		КонецЕсли;

		АСинк().смв_НайтиФайлы(ОписаниеОповещения, Путь, Маска, Истина);

	Иначе

		ТекстСообщения = "Неивестный ТипПараметра в АсинхронноПолучитьСостоянияОбъектовФайловойСистемы: %1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтруктураФайла.ТипПараметра);
		Сообщить(ТекстСообщения);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НайтиИДСтрокиСценарияПоИмени(Имя)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");

	Дерево = ОбъектСервер.ДеревоТестов;
	Строки = Дерево.Строки.НайтиСтроки(Новый Структура("Имя, Тип", Имя, "Сценарий"), Истина);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].ИдСтроки;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция ВычестьТеги(ПервыйСписок, ВычитаемыйСписок)
	Перем Результат;
	Результат = Новый СписокЗначений;

	Если ВычитаемыйСписок.Количество() = 0 Тогда
		Возврат ПервыйСписок;
	КонецЕсли;

	СоответствиеНрег = Новый Соответствие;
	Для каждого Элемент из ВычитаемыйСписок Цикл
		СоответствиеНрег.Вставить(Нрег(Элемент.Значение), Истина);
	КонецЦикла;

	Для каждого Элемент из ПервыйСписок Цикл
		Если НЕ ЗначениеЗаполнено(СоответствиеНрег.Получить(Нрег(Элемент.Значение))) Тогда
			Результат.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьФичиПродолжение(ДополнительныеПараметры = Неопределено)

	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;

	КаталогИнструментов = Объект.КаталогИнструментов;
	КаталогФич          = Объект.КаталогФич;
	DebugLog            = Объект.DebugLog;
	КаталогиБиблиотек   = Объект.КаталогиБиблиотек.Скопировать();
	ПутьКОбработке		= ПолучитьПутьКОбработкеКлиент();

	Для каждого ЭлементБиблиотеки Из КаталогиБиблиотек  Цикл
		ЭлементБиблиотеки.Значение = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементБиблиотеки.Значение);
	КонецЦикла;

	Если НЕ ПроверитьСуществованиеКаталогаБиблиотек(ДополнительныеПараметры, ПутьКОбработке) Тогда
		Возврат;
	КонецЕсли;

	ПарсерФич = "";
	СписокИсключения = ВычестьТеги( Объект.СписокТеговИсключение, Объект.СписокТеговОтбор);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов", КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", КаталогФич);
	СтруктураПараметров.Вставить("ПутьКОбработке", ПутьКОбработке);
	СтруктураПараметров.Вставить("ЭтоLinux", ЭтоLinux);

	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений", МассивСообщений);
	СтруктураПараметров.Вставить("DebugLog", DebugLog);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", КаталогиБиблиотек);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	СтруктураПараметров.Вставить("СписокТеговИсключение", СписокИсключения);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("Брейкпоинты", Брейкпоинты);
	СтруктураПараметров.Вставить("РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов",
		Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов);
	СтруктураПараметров.Вставить("КоллекцияИменКонтекстовОбработок", КоллекцияИменКонтекстовОбработок);
	СтруктураПараметров.Вставить("ЭтоЗагрузкаФич", Истина);

	ТекущийЗагружаемыйФичаФайл = Неопределено;
	Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		СтруктураПараметров.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов",
			СтрокаШагаСКоторогоНадоВыполнятьСценарий.ИдСтроки);
	КонецЕсли;

	Попытка
		ЗаполнитьДеревоФич(СтруктураПараметров);
	Исключение
		ФлагСценарииЗагружены = Истина;
		ТекстСообщения = "Ошибка при построении дерева из файла <%1>%2%3";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекущийЗагружаемыйФичаФайл);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Символы.ПС);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ОписаниеОшибки());
		СделатьСообщение(ТекстСообщения);
		ПоказатьПредупреждение(, ТекстСообщения, 5);
		Возврат;
	КонецПопытки;

	Для каждого Элем Из МассивСообщений Цикл
		Сообщить(Элем);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиФич()
	Если НЕ НадоВыполнитьСценарийСоСтрокиПереданнойИзвне и НадоПерейтиКСтрокеДерева = -1 Тогда
		ПодключитьОбработчикОжидания("РазвернутьДерево", 0.5, Истина);
	КонецЕсли;

	Если Объект.ПодключитьВнешниеОбработкиДляОтладки И Не Объект.ИспользоватьПрямыеПутиФайлов Тогда
		ПодключитьВнешниеОбработкиДляОтладки();
	КонецЕсли;

	Если Брейкпоинты.Количество() > 0 Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Истина;
	КонецЕсли;

	СделатьСообщение("$Фичи загружены$");
	Если Объект.НадоВыполнитьСценарииПослеЗагрузкиФич Тогда
		ВыполнитьСценарии();
	ИначеЕсли Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз Тогда
		Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Ложь;
		МассивИд = Неопределено;
		ДопПараметры = Неопределено;
		Если ЗначениеЗаполнено(ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки) Тогда
			ИдСтроки = НайтиИДСтрокиСценарияПоИмени(ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки);
			ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки = "";
			Если ИдСтроки <> Неопределено Тогда
				МассивИд = Новый Массив;
				МассивИд.Добавить(ИдСтроки);
			КонецЕсли;

			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ЭтоПример", СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример);
		КонецЕсли;

		ВыполнитьСценарии(МассивИд, ДопПараметры);
	КонецЕсли;

	ВывестиСтатистикуКлиент();

	ПодключитьОбработчикОжидания("ОбновитьФлагСценарииЗагружены", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФлагСценарииЗагружены()
	ФлагСценарииЗагружены = Истина;
	Если НадоПерейтиКСтрокеДерева <> -1 Тогда
		НужнаяСтрока = Неопределено;
		НайтиСтрокуДереваПоИдСтроки(НадоПерейтиКСтрокеДерева, Объект.ДеревоТестов.ПолучитьЭлементы(), НужнаяСтрока);
		Если НужнаяСтрока <> Неопределено Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		НадоПерейтиКСтрокеДерева = -1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьПутиБиблиотек()
	Для Каждого Элем Из Объект.КаталогиБиблиотек Цикл
		Если Прав(Элем.Значение, 1) = "\" ИЛИ Прав(Элем.Значение, 1) = "/" Тогда
			Элем.Значение = Лев(Элем.Значение, СтрДлина(Элем.Значение) - 1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВерсиюОбработкиКлиент() Экспорт
	Если Не ЗначениеЗаполнено(КешВерсияОбработки) Тогда
		КешВерсияОбработки = ПолучитьВерсиюОбработкиСервер(Ложь);
	КонецЕсли;

	Возврат КешВерсияОбработки;
КонецФункции

&НаКлиенте
Функция ПолучитьНаименованиеИВерсиюОбработкиКлиент() Экспорт
	Возврат ПолучитьВерсиюОбработкиСервер(Истина);
КонецФункции

&НаСервере
Функция ПолучитьВерсиюОбработкиСервер(ДобавлятьНазвание, ТолькоЦифры = Ложь)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьВерсиюОбработки(ДобавлятьНазвание, ТолькоЦифры);
КонецФункции

&НаСервере
Процедура ЗаполнитьКаталогИнструментовЕслиОнПустой()
	КаталогИнструментов = Объект.КаталогИнструментов;

	Если ПустаяСтрока(КаталогИнструментов)Тогда

		ИспользуемоеИмяФайла = ПолучитьПутьКОбработкеСервер();

		Если ЗначениеЗаполнено(ИспользуемоеИмяФайла) Тогда
			КаталогИнструментов = ИспользуемоеИмяФайла;
		Иначе
			//попытаемся восстановить из настроек. Это нужно, когда Vanessa-ADD вызвали программно, а затем сразу открыли интерактивно. В этом случае 1С подгружает версию из кеша от первой загрузки на сервере, и Объект().ИспользуемоеИмяФайла возвращает адрес в хранилище, а не имя исходного файла.
			Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек());

			Если ТипЗнч(Настройки) = Тип("Структура") Тогда
				Настройки.Свойство("КаталогИнструментов", КаталогИнструментов);
			КонецЕсли;
		КонецЕсли;

		Объект.КаталогИнструментов = КаталогИнструментов;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогПроектаЕслиОнПустой()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	КаталогПроекта = Объект.КаталогПроекта;
	Если ПустаяСтрока(КаталогПроекта) И Не Объект.РежимСамотестирования Тогда
		ЗагрузчикНастроек = Плагин("ЗагрузчикПользовательскихНастроек");
		Объект.КаталогПроекта = ЗагрузчикНастроек.КаталогРепозитория();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПутьКRunSikulixЕслиОнПустой()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	ПутьКRunSikulix = Объект.ПутьКRunSikulix;
	Если ПустаяСтрока(ПутьКRunSikulix) И Не Объект.РежимСамотестирования Тогда
		ЗагрузчикНастроек = Плагин("ЗагрузчикПользовательскихНастроек");
		Объект.ПутьКRunSikulix = ЗагрузчикНастроек.КаталогРепозитория() + "/tools/SikuliX/runsikulix.cmd";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщикаПользовательскихНастроекЕслиОнПустой()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	ПоставщикПользовательскихНастроек = Объект.ПоставщикПользовательскихНастроек;
	Если ПустаяСтрока(ПоставщикПользовательскихНастроек) Тогда
		ЗагрузчикНастроек = Плагин("ЗагрузчикПользовательскихНастроек");
		Объект.ПоставщикПользовательскихНастроек = ЗагрузчикНастроек.ИмяПоставщикаFILE();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтекстноеМеню()
	Элементы.ДеревоТестовКонтекстноеМенюВыполнятьСценарииСначала.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьСтруктуруИзJSONФайлаКлиент(VBParams) Экспорт

	Если Объект.ИспользоватьПрямыеПутиФайлов Тогда
		ПараметрыУФ            = Неопределено;
	Иначе
		ПараметрыУФ            = Новый Структура;
		VBParamsДвоичныеДанные = Новый ДвоичныеДанные(VBParams);
		ПараметрыУФ.Вставить("VBParamsДвоичныеДанные", VBParamsДвоичныеДанные);
	КонецЕсли;

	Рез = ПрочитатьСтруктуруИзJSONФайлаСервер(VBParams, ПараметрыУФ);

	Возврат Рез;

КонецФункции

&НаСервере
Функция ПрочитатьСтруктуруИзJSONФайлаСервер(VBParams, ПараметрыУФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");

	Рез = ОбъектСервер.ПрочитатьСтруктуруИзJSONФайла(VBParams, ПараметрыУФ);

	Рез.Вставить("ПриоритетНастроекПользователя", Ложь);
	Рез.Вставить("ТаймаутДляАсинхронныхШагов", 0);

	Возврат Рез;

КонецФункции

&НаКлиенте
Функция ПрочитатьСоответствиеИзJSONФайлаКлиент(VBParams) Экспорт

	Если Объект.ИспользоватьПрямыеПутиФайлов Тогда
		ПараметрыУФ            = VBParams;
	Иначе
		ПараметрыУФ            = Новый Структура;
		VBParamsДвоичныеДанные = Новый ДвоичныеДанные(VBParams);
		ПараметрыУФ.Вставить("VBParamsДвоичныеДанные", VBParamsДвоичныеДанные);
	КонецЕсли;

	Рез = ПрочитатьСоответствиеИзJSONФайлаСервер(ПараметрыУФ);

	Рез.Вставить("ПриоритетНастроекПользователя",
	Новый Структура("Р, А", "ПриоритетНастроекПользователя", "priorityofusersettings"));

	Рез.Вставить("ТаймаутДляАсинхронныхШагов",
	Новый Структура("Р, А", "ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps"));

	Возврат Рез;

КонецФункции

&НаСервере
Функция ПрочитатьСоответствиеИзJSONФайлаСервер(ПараметрыУФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");

	Рез = ОбъектСервер.ПрочитатьСоответствиеИзJSONФайла(ПараметрыУФ);

	Возврат Рез;

КонецФункции

&НаКлиенте
Процедура ПроверкаВнешнихКоманд()
	Если НЕ ФайлСуществуетКомандаСистемы(Объект.ИмяФайлаВнешнихКомандФреймворка) Тогда
		Возврат;
	КонецЕсли;

	ТекстКоманды                      = Неопределено;
	НомерСтрокиСценарияПереданныйИзвне = Неопределено;

	Файл = Новый Файл(Объект.ИмяФайлаВнешнихКомандФреймворка);
	Расширение = Нрег(Файл.Расширение);

	Если Расширение = ".json" Тогда
		ЧтениеJSON = Вычислить("Новый ЧтениеJSON");
		ЧтениеJSON.ОткрытьФайл(Объект.ИмяФайлаВнешнихКомандФреймворка);

		ДанныеКоманды = ПрочитатьJSON(ЧтениеJSON);
		ТекстКоманды = ДанныеКоманды.ТекстКоманды;
		Если ТекстКоманды = "ПерезагрузитьИВыполнитьСТекущегоШага" Тогда
			НомерСтрокиСценарияПереданныйИзвне = ДанныеКоманды.НомерСтрокиДляЗапускаСТекущегоШагаСценария;
		КонецЕсли;
		ИмяФайлаНастроек = ДанныеКоманды.ИмяФайлаНастроек;

		ЧтениеJSON.Закрыть();

		ФайлНастроек = Новый Файл(ИмяФайлаНастроек);
		Если ФайлНастроек.Существует() Тогда
			ЧтениеJSON = Вычислить("Новый ЧтениеJSON");
			ЧтениеJSON.ОткрытьФайл(ИмяФайлаНастроек);

			ДанныеНастроек = ПрочитатьJSON(ЧтениеJSON);
			Если ДанныеНастроек.Свойство("КлиентыТестирования") Тогда
				Для Каждого ПараметрыКлиентаТестирования Из ДанныеНастроек.КлиентыТестирования Цикл
					ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования);
				КонецЦикла;
			КонецЕсли;

			ЧтениеJSON.Закрыть();
		КонецЕсли;

	Иначе
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Объект.ИмяФайлаВнешнихКомандФреймворка, "UTF-8");

		ДанныеКоманды = Новый Массив;

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			ДанныеКоманды.Добавить(Стр);
		КонецЦикла;

		ТекстКоманды = ДанныеКоманды[0];
		Если ТекстКоманды = "ПерезагрузитьИВыполнитьСТекущегоШага" Тогда
			НомерСтрокиСценарияПереданныйИзвне = Число(ДанныеКоманды[1]);
		КонецЕсли;

		Текст.Закрыть();
	КонецЕсли;

	НадоПерейтиКСтрокеДерева = -1;

	УдалитьФайлыКомандаСистемы(Объект.ИмяФайлаВнешнихКомандФреймворка);

	Если ТекстКоманды = "ПерезагрузитьИВыполнить" Тогда
		ПерезагрузитьИВыполнить("");
	ИначеЕсли ТекстКоманды = "ПерезагрузитьИВыполнитьСТекущегоШага" Тогда
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
		ЗагрузитьФичи();
		ПодключитьОбработчикОжидания("ЗапуститьСценарийСоСтрокиПрисланнойИзвне", 0.1, Истина);
	ИначеЕсли ТекстКоманды = "Перезагрузить" И НЕ Объект.РежимСамотестирования Тогда
		ТекущиеДанныеДерева = Элементы.ДеревоТестов.ТекущиеДанные;
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			НадоПерейтиКСтрокеДерева = ТекущиеДанныеДерева.ИДСтроки;
		КонецЕсли;
		ЗагрузитьФичи();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеКлиентовТестирования(ПараметрыКлиентаТестирования)
	ИмяКлиентаТестирования = ПараметрыКлиентаТестирования.Имя;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
	Иначе
		СтрокаДанныеКлиентовТестирования     = ДанныеКлиентовТестирования.Добавить();
		СтрокаДанныеКлиентовТестирования.Имя = ИмяКлиентаТестирования;
	КонецЕсли;

	СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе          = ПараметрыКлиентаТестирования.ПутьКИнфобазе;
	СтрокаДанныеКлиентовТестирования.ДопПараметры           = ПараметрыКлиентаТестирования.ДопПараметры;
	СтрокаДанныеКлиентовТестирования.ТипКлиента             = ПараметрыКлиентаТестирования.ТипКлиента;
	СтрокаДанныеКлиентовТестирования.ИмяКомпьютера          = ПараметрыКлиентаТестирования.ИмяКомпьютера;
	Если ПараметрыКлиентаТестирования.Свойство("ПортЗапускаТестКлиента") Тогда
		СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента = ПараметрыКлиентаТестирования.ПортЗапускаТестКлиента;
	КонецЕсли;
	Если ПараметрыКлиентаТестирования.Свойство("Синоним") Тогда
		СтрокаДанныеКлиентовТестирования.Синоним = ПараметрыКлиентаТестирования.Синоним;
	КонецЕсли;

	АктивизироватьСтроку = Истина;
	Если ПараметрыКлиентаТестирования.Свойство("АктивизироватьСтроку") Тогда
		АктивизироватьСтроку = ПараметрыКлиентаТестирования.АктивизироватьСтроку;
	КонецЕсли;

	Если АктивизироватьСтроку Тогда
		Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрокаДанныеКлиентовТестирования.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеКоманднойСтроки()

	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	СтрЗапуска = СокрЛП(ПараметрЗапуска);
	//СтрЗапуска = "StartFeaturePlayer;VBParams=C:\Commons\rep\vanessa-add\tools\JSON\VBParams8310UF_FastCheck.json";
	Если СтрЗапуска = "" Тогда
		Возврат;
	КонецЕсли;

	Настройки = Плагин("LoadSettings");
	СтруктураДействий = Новый Структура("ВыполнитьСценарии, ВыполнитьСценарииСТекущегоШага, ЗавершитьРаботуСистемы, НомерСтрокиДляЗапускаСТекущегоШагаСценария, ЗагрузитьСценарии, ВыгрузитьPIDTestManager");
	Попытка
		Настройки.ЗагрузитьНастройкиВРежимеКоманднойСтроки(Объект, СтруктураДействий);
	Исключение
		ИнфОбОшибке = "Не удалось загрузить настройки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьЛогВЖРОшибка("VanessaADD.ЗагрузкаНастроек", ИнфОбОшибке);
		Сообщить(ИнфОбОшибке);
		ЗавершитьРаботуСистемы(Ложь);
	КонецПопытки;

	Если ЗначениеЗаполнено(Объект.ИмяФайлаВнешнихКомандФреймворка) Тогда
		ПодключитьОбработчикОжидания("ПроверкаВнешнихКоманд", 1);
	КонецЕсли;

	ЗнВыгрузитьPIDTestManager = СтруктураДействий["ВыгрузитьPIDTestManager"];
	Если ЗнВыгрузитьPIDTestManager = Истина Тогда
		ВычислитьPIDЭтогоСеанса(Неопределено);
		ИмяФайлаPIDTestManager = СтруктураДействий["ИмяФайлаPIDTestManager"];

		Если ЗначениеЗаполнено(ИмяФайлаPIDTestManager) Тогда
			ЗТ = Новый ЗаписьТекста(ИмяФайлаPIDTestManager, "UTF-8");
			ЗТ.ЗаписатьСтроку(PIDЭтогоСеанса);
			ЗТ.Закрыть();
		КонецЕсли;
	КонецЕсли;

	ВыполнитьСценарии = СтруктураДействий["ВыполнитьСценарии"];
	ВыполнитьСценарииСТекущегоШага = СтруктураДействий["ВыполнитьСценарииСТекущегоШага"];

	ЗнЗавершитьРаботуСистемы = СтруктураДействий["ЗавершитьРаботуСистемы"];
	Если ЗнЗавершитьРаботуСистемы = Истина Тогда
		Объект.НадоЗавершитьРаботуСистемыПослеВыполненияВсехСценариев = Истина;
	КонецЕсли;

	Если ВыполнитьСценарии = Истина Тогда

		Объект.НадоВыполнитьСценарииПослеЗагрузкиФич = Истина;
		ЗагрузитьФичи();
	ИначеЕсли ВыполнитьСценарииСТекущегоШага = Истина Тогда
		НадоВыполнитьСценарийСоСтрокиПереданнойИзвне = Истина;
		НомерСтрокиСценарияПереданныйИзвне           = Число(СтруктураДействий["НомерСтрокиДляЗапускаСТекущегоШагаСценария"]);
		ЗагрузитьФичи();
		ПодключитьОбработчикОжидания("ЗапуститьСценарийСоСтрокиПрисланнойИзвне", 0.1, Истина);
	Иначе
		ЗагрузитьСценарии = СтруктураДействий["ЗагрузитьСценарии"];
		Если ЗагрузитьСценарии = Истина Тогда
			ЗагрузитьФичи();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьКонстантаВКонфигурацииСервер(ИмяКонстанты)
	Зн = Метаданные.Константы.Найти(ИмяКонстанты);
	Если Зн = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКонстантыСервер(ИмяКонстанты)
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьФлагаПроверкаРаботыVanessaADDВРежимеTestClient()
	ЕстьКонстантаВКонфигурации = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaADD");
	Элементы.ПроверкаРаботыVanessaADDВРежимеTestClient.Видимость = ЕстьКонстантаВКонфигурации;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницыСлужебная()
	ЕстьКонстантаВКонфигурации = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaADD");
	Элементы.ГруппаСлужебная.Видимость = Объект.ПроверкаРаботыVanessaADDВРежимеTestClient И ЕстьКонстантаВКонфигурации;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКолонокДереваВСлужебномРежиме()
	ЕстьКонстантаВКонфигурации = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaADD");
	Элементы.ГруппаСлужебная.Видимость = Объект.ПроверкаРаботыVanessaADDВРежимеTestClient И ЕстьКонстантаВКонфигурации;
	ЭтаФорма.Элементы.ДеревоТестовСтатус.Видимость = Объект.ПроверкаРаботыVanessaADDВРежимеTestClient И ЕстьКонстантаВКонфигурации;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСлужебныхЭлементов()
	УстановитьВидимостьФлагаПроверкаРаботыVanessaADDВРежимеTestClient();
	УстановитьВидимостьСтраницыСлужебная();
	УстановитьВидимостьКолонокДереваВСлужебномРежиме();

	Попытка
		//при редактировании в конфигураторе старых версий платформы (8.3.6 и раньше) эти флаги слетают
		Элементы.ГруппаЗапускТестов.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаГенерацияEPF.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаКаталогиБиблиотек.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаДополнительно.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаНесколькоКлиентовТестирования.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаНастройки.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.ГруппаСлужебная.ВертикальнаяПрокруткаПриСжатии = Истина;
		Элементы.КаталогФич.АвтоМаксимальнаяШирина = Ложь;
	Исключение
	КонецПопытки;

	Элементы.ФлагСценарииВыполнены.Видимость = Объект.РежимСамотестирования;
	Элементы.ФлагСценарииЗагружены.Видимость = Объект.РежимСамотестирования;

	Если НЕ Объект.РежимСамотестирования Тогда
		Элементы.ЧастичноеВыполнениеСценариев.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаксимизироватьФорму()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	WshShell = ПолучитьWshShell();

	WSHShell.SendKeys("%");
	WSHShell.SendKeys("{LEFT}{LEFT}{ENTER}");
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормы()

	Если НЕ Объект.ВыполнениеСценарияИзОбработкиОповещения Тогда

		ЗаполнитьКаталогПроектаЕслиОнПустой();
		ЗаполнитьПутьКRunSikulixЕслиОнПустой();
		ЗаполнитьПоставщикаПользовательскихНастроекЕслиОнПустой();
		ЗапускВРежимеКоманднойСтроки();

		Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда

			Если СокрЛП(Объект.КаталогФич) <> "" Тогда

				Если Объект.ЗагрузкаФичПриОткрытии = "Загружать" Тогда

					ЗагрузитьФичи();

				ИначеЕсли Объект.ЗагрузкаФичПриОткрытии = "Загружать и выполнять" Тогда
					Объект.НадоВыполнитьСценарииПослеЗагрузкиФичОдинРаз = Истина;
					ЗагрузитьФичи();

				ИначеЕсли Объект.ЗагрузкаФичПриОткрытии = "Задавать вопрос" Тогда

					ОповещениеЗавершения = Асинк().смв_НовыйОписаниеОповещения("ПослеОтветаНаВопросНадоЛиЗагружатьФичи", ЭтаФорма);
					Асинк().смв_ПоказатьВопрос(ОповещениеЗавершения,
													"Загрузить фичи? <" + СокрЛП(Объект.КаталогФич) + ">",
													РежимДиалогаВопрос.ОКОтмена,
													0,
													КодВозвратаДиалога.ОК);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	НастройкаДоступностиВидимостиЭлементов();

	Если Не ЗначениеЗаполнено(Объект.КаталогИнструментов)
			И Не Объект.РежимСамотестирования Тогда

		Сообщение = "Не удалось заполнить каталог инструментов из-за неверных настроек.
		|Установите вручную каталог инструментов, вставив путь к Vanessa-ADD.
		|И перезапустите форму bddRunner
		|";
		СделатьСообщение(Сообщение);
		ВывестиВЛогФайл(Сообщение);

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьМаксВерсиюПлатформы(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Версия");
	Тзн.Колонки.Добавить("Параметр");

	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.Версия = Элем;

		Попытка
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(Элем, ".");
			СтрТзн.Параметр = Число(МассивСтрок[3] * 1000);
		Исключение
			СтрТзн.Параметр = 0;
		КонецПопытки;
	КонецЦикла;

	Тзн.Сортировать("Параметр");

	Возврат Тзн[Тзн.Количество() - 1].Версия;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия8310ИлиВыше    = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.10.1");
	Если Версия8310ИлиВыше Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = КаталогПрограммы();
		Возврат;
	КонецЕсли;

	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ВерсияПлатформыДляГенерацииEPF) Тогда
		Возврат;
	КонецЕсли;

	Массив = Новый Массив;

	Файлы = НайтиФайлы("C:\Program Files (x86)\1cv8", "*.exe", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.ИмяБезРасширения) <> "1cv8" Тогда
			Продолжить;
		КонецЕсли;

		Путь = Файл.Путь;
		ФайлВерсия = Новый Файл(Путь);
		Версия = ФайлВерсия.Путь;

		ФайлВерсия = Новый Файл(Версия);
		Версия = ФайлВерсия.Имя;

		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия, "8.3.10.1") Тогда
			Массив.Добавить(Версия);
		КонецЕсли;

	КонецЦикла;

	Файлы = НайтиФайлы("C:\Program Files\1cv8", "*.exe", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.ИмяБезРасширения) <> "1cv8" Тогда
			Продолжить;
		КонецЕсли;

		Путь = Файл.Путь;
		ФайлВерсия = Новый Файл(Путь);
		Версия = ФайлВерсия.Путь;

		ФайлВерсия = Новый Файл(Версия);
		Версия = ФайлВерсия.Имя;

		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия, "8.3.10.1") Тогда
			Массив.Добавить(Версия);
		КонецЕсли;

	КонецЦикла;

	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МаксВерсия = ОпределитьМаксВерсиюПлатформы(Массив);

	Файлы = НайтиФайлы("C:\Program Files (x86)\1cv8\" + МаксВерсия + "\bin", "*.exe", Истина);
	Файлы32 = НайтиФайлы("C:\Program Files\1cv8\" + МаксВерсия + "\bin", "*.exe", Истина);
	Если Файлы.Количество() > 0 Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = "C:\Program Files (x86)\1cv8\" + МаксВерсия + "\bin";
	ИначеЕсли Файлы32.Количество() > 0 Тогда
		Объект.ВерсияПлатформыДляГенерацииEPF = "C:\Program Files\1cv8\" + МаксВерсия + "\bin";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиКлиент();
	Если Объект.РежимСамотестирования Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " autotest";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Знач НенужноеЗначение, Знач ДополнительныеПараметры) Экспорт

	ДопПараметры = Новый Структура;
	СерверныеВызовыПриОткрытииФормы(ДопПараметры);
	ТекстСообщенийПользователю = ТекстСообщенийПользователю(ДопПараметры.МакетПереводСообщений);

	МассивСнипетовПрерывающихЗаписьСценария = ПолучитьМассивСнипетовПрерывающихЗаписьСценария();

	ВосстановитьНастройкиКлиент();

	ОбновитьВидимостьЭлементовПослеЗагрузкиНастроек();

	ЗаполнитьДанныеТекущейИнфобазы();

	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	Если Объект.ИнтервалВыполненияШага = 0 Тогда
		Объект.ИнтервалВыполненияШага = 0.1;
		Объект.ИнтервалВыполненияШагаЗаданныйПользователем = 0.1;
	КонецЕсли;

	КаталогФич          = Объект.КаталогФич;
	КаталогИнструментов = Объект.КаталогИнструментов;

	ОбновитьКнопкуЗагрузитьФичи();
	ОбновитьЗаголовокФормы();

	Объект.КаталогиБиблиотек.ТипЗначения     = Новый ОписаниеТипов("Строка");
	Объект.СписокТеговИсключение.ТипЗначения = Новый ОписаниеТипов("Строка");
	Объект.СписокТеговОтбор.ТипЗначения      = Новый ОписаниеТипов("Строка");

	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоТестов;

	ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно();

	ТаймайтЗагрузкиНастроек = ?(Объект.ПлагиныЗагружены, 0.1, 1); //TODO ?? уменьшить таймаут менее 5 секунд

	ПодключитьОбработчикОжидания("ПослеОткрытияФормы", ТаймайтЗагрузкиНастроек, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьБиблиотекуРаботыСВидео()

	Если МодульРаботыСВидео <> Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если ПустаяСтрока(Объект.КаталогИнструментов) Тогда

		Объект.КаталогИнструментов = ПолучитьПутьКОбработкеКлиент();

	КонецЕсли;

	ИмяФайла = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/video/работасвидео.epf";

	Если СокрЛП(Объект.КаталогИнструментов) = "" Тогда

		ЕстьКонстантаВКонфигурации = ЕстьКонстантаВКонфигурацииСервер("ПутьКVanessaADD");

		Если ЕстьКонстантаВКонфигурации Тогда

			ПутьКVanessaADD     = ПолучитьЗначениеКонстантыСервер("ПутьКVanessaADD");
			ФайлПутьКVanessaADD = Новый Файл(ПутьКVanessaADD);
			ИмяФайла                 = ДополнитьСлешВПуть(ФайлПутьКVanessaADD.Путь) + "lib/video/работасвидео.epf";

		КонецЕсли;

	КонецЕсли;

	Если НЕ ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда

		ТекстСообщения = "Файл %1 не существует.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайла);
		СделатьСообщение(ТекстСообщения);

		Возврат;

	КонецЕсли;

	ИмяОбработки       = ПодключитьВнешнююОбработкуКлиент(ИмяФайла); //TODO Обработать асинхронность
	МодульРаботыСВидео = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");

КонецПроцедуры

&НаКлиенте
Процедура Обрабочик_ПодключитьБиблиотекуРаботыСВидео(Знач НенужноеЗначение, Знач ДополнительныеПараметры) Экспорт
	ПодключитьБиблиотекуРаботыСВидео();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьОднуФичу()

	ОчиститьСообщения();

	ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("ОбработатьВыборФайлаЗагрузкаФичи", ЭтаФорма);
	АСинк().смв_ПоказатьДиалогОткрытие(ОписаниеОповещения,
										"Фича файл (*.feature)|*.feature",
										"Выберите feature файл",
										Объект.КаталогФич);

КонецПроцедуры

&НаКлиенте
Процедура СделатьПараметрКорректным(СтрокаПараметр)
	Если Найти(Прав(СтрокаПараметр, 1), "\/") > 0 Тогда
		СтрокаПараметр = Лев(СтрокаПараметр, СтрДлина(СтрокаПараметр) - 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СделатьПараметрыКорректными()
	СделатьПараметрКорректным(Объект.КаталогИнструментов);
	СделатьПараметрКорректным(Объект.КаталогOutputИнструкцияHTML);
	СделатьПараметрКорректным(Объект.КаталогOutputИнструкцияMarkdown);
	СделатьПараметрКорректным(Объект.КаталогOutputСкриншоты);
	СделатьПараметрКорректным(Объект.КаталогOutputИнструкцияВидео);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСценарий_SceanrioOutline(СтрокаДерева)
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = "Примеры" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ДалееВДеревеСтрокиУсловийИначе(СтрокаДерева, СтрокиРодителя)
	ИД = СтрокиРодителя.Индекс(СтрокаДерева);
	ДалееТолькоУсловия = Истина;

	Пока Истина Цикл
		ИД = ИД + 1;
		Если ИД > СтрокиРодителя.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;

		ТекСтрока = СтрокиРодителя[ИД];

		Если (ТекСтрока.ДопТип = "УсловиеИначеЕсли") или (ТекСтрока.ДопТип = "УсловиеИначе") Тогда
			Продолжить;
		КонецЕсли;

		ДалееТолькоУсловия = Ложь;
		Прервать;
	КонецЦикла;

	Возврат ДалееТолькоУсловия;
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага, СтрСтроки, Шаги)
	ЕстьЦиклВышеПоДереву = Ложь;
	ТекСтрокаДерева      = СтрСтроки;
	ТекСтрокиРодителя    = ТекСтрокаДерева.Родитель.Строки;
	ИдЦикла              = Неопределено;
	Пока Истина Цикл

		Если ТекСтрокиРодителя.Индекс(ТекСтрокаДерева) <> (ТекСтрокиРодителя.Количество() - 1)
			И НЕ ДалееВДеревеСтрокиУсловийИначе(ТекСтрокаДерева, ТекСтрокиРодителя)
			Тогда
			//это должна быть последняя строка в своём уровне
			Прервать;
		КонецЕсли;

		Если ТекСтрокаДерева.Родитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;

		Если ТекСтрокаДерева.Родитель.ДопТип = "Цикл" Тогда
			ЕстьЦиклВышеПоДереву = Истина;
			ИдСтрокиЦикла        = ТекСтрокаДерева.Родитель.ИдСтроки;
			Прервать;
		КонецЕсли;

		ТекСтрокаДерева   = ТекСтрокаДерева.Родитель;
		ТекСтрокиРодителя = ТекСтрокаДерева.Родитель.Строки;
	КонецЦикла;

	Если ЕстьЦиклВышеПоДереву Тогда
		СтруктураШага.Вставить("ИдЦикла", ИдСтрокиЦикла);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева)
	Если СтрокаДерева.Тип = "Область"  или СтрокаДерева.Тип = "ШагСценарий" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) и (СтрокаДерева.ДопТип <> "УсловиеИначе") Тогда
			Возврат СтрокаДерева;
		Иначе
			Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева.Строки[0]);
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаДерева;
КонецФункции

&НаСервере
Функция ОпределитьИдСледующейСтроки(СтрокаДерева, СтрокиРодителя)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИдСледующейСтроки = СтрокиРодителя.Индекс(СтрокаДерева) + 1;

	Если (СтрокиРодителя.Количество() - 1) >= ИдСледующейСтроки Тогда
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокиРодителя[ИдСледующейСтроки]);
	КонецЕсли;

	Если СтрокаДерева.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтрокаДерева.Родитель.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтрокаДерева.Родитель.ДопТип = "Цикл" Тогда
		Возврат СтрокаДерева.Родитель;
	КонецЕсли;

	Возврат ОпределитьИдСледующейСтроки(СтрокиРодителя.Родитель, СтрокиРодителя.Родитель.Родитель.Строки);
КонецФункции

&НаСервере
Функция НайтиСледующуюСтрокаКогдаУсловиеИстинно(СтрокаУсловия)
	РодительСтроки = СтрокаУсловия.Родитель;
	ИДСтрокиДерева = РодительСтроки.Строки.Индекс(СтрокаУсловия);

	Пока Истина Цикл
		ИДСтрокиДерева = ИДСтрокиДерева + 1;
		Если (РодительСтроки.Строки.Количество() - 1) >= ИДСтрокиДерева Тогда
			СледующаяСтрока = РодительСтроки.Строки[ИДСтрокиДерева];

			Если СледующаяСтрока.ДопТип = "УсловиеИначеЕсли" Тогда
				Продолжить;
			ИначеЕсли СледующаяСтрока.ДопТип = "УсловиеИначе" Тогда
				Продолжить;
			КонецЕсли;

			Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СледующаяСтрока);
		Иначе
			Если (РодительСтроки.ДопТип = "Условие") или (РодительСтроки.ДопТип = "УсловиеИначеЕсли") или (РодительСтроки.ДопТип = "УсловиеИначе")  или (РодительСтроки.Тип = "Область") Тогда
				Возврат НайтиСледующуюСтрокаКогдаУсловиеИстинно(РодительСтроки);
			КонецЕсли;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ДобавитьШагиДляВыполненияСценария(Шаги, ДеревоСтроки, СтрокаДерева, СтрокаСценария,
	ЭтоШагКонтекста, ДопПараметры)
	Для каждого СтрСтроки Из ДеревоСтроки Цикл
		Если СтрСтроки.Тип = "Шаг" Тогда
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста);

			Если ДопПараметры.ЕстьЦиклы Тогда
				ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага, СтрСтроки, Шаги);
			КонецЕсли;

			РодительСтроки = СтрСтроки.Родитель;
			ИДСтрокиДерева = РодительСтроки.Строки.Индекс(СтрСтроки);
			Если ИДСтрокиДерева = РодительСтроки.Строки.Количество() - 1 Тогда
				Если ДопПараметры.МассивУсловий.Количество() > 0 Тогда
					СтрокаУсловия = ДопПараметры.МассивУсловий[ДопПараметры.МассивУсловий.Количество() - 1];

					ДалееВУсловииНетСтрок = Истина;
					ИдСтроки = СтрСтроки.ИдСтроки;
					СтрокаСоСледующимИД = СтрокаУсловия.Строки.Найти(ИдСтроки + 1, "ИдСтроки", Истина);
					Если СтрокаСоСледующимИД <> Неопределено И СтрокаСоСледующимИД.СтрокаПараметровШагаВВидеТаблицы <> Истина Тогда
						ДалееВУсловииНетСтрок = Ложь;
					КонецЕсли;

					Если ДалееВУсловииНетСтрок Тогда
						СледующаяСтрокаКогдаУсловиеИстинно = НайтиСледующуюСтрокаКогдаУсловиеИстинно(СтрокаУсловия);
						Если СледующаяСтрокаКогдаУсловиеИстинно <> Неопределено Тогда
							СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрокаКогдаУсловиеИстинно.ИдСтроки);
						Иначе
							Если ДопПараметры.ЕстьЦиклы Тогда
								//значит это последний шаг в сценарии, но он внутри условия
								ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага, СтрСтроки, Шаги);
							Иначе
								СтруктураШага.Вставить("ИдСледующегоШага", -1);
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Шаги.Добавить(СтруктураШага);
		ИначеЕсли СтрСтроки.Тип = "ШагСценарий" Тогда
			Если СтрСтроки.ДопТип = "СтруктураСценария" Тогда //это вложенная структура сценария
				СтрокаПримеров = Неопределено;
				Для Каждого СтрокаДереваСтруктурыСценария Из СтрСтроки.Строки Цикл
					Если СтрокаДереваСтруктурыСценария.Тип = "Примеры" Тогда
						СтрокаПримеров = СтрокаДереваСтруктурыСценария;
					КонецЕсли;
				КонецЦикла;

				Если СтрокаПримеров = Неопределено Тогда
					ТекстСообщения = "Не найдена строка примеров во вложенной структуре сценария. <%1>";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаДерева.ПолныйПуть);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;

				НомерСтрокиПримера = 0;
				Для Каждого СтрокаПримера Из СтрокаПримеров.Строки Цикл
					НомерСтрокиПримера = НомерСтрокиПримера + 1;
					Если НомерСтрокиПримера = 1 Тогда
						Продолжить; //это служебная строка
					КонецЕсли;

					ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаПримера.Строки, СтрокаПримера, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры)
				КонецЦикла;
			Иначе
				ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры)
			КонецЕсли;
		ИначеЕсли СтрСтроки.Тип = "Область" Тогда
			Если (СтрСтроки.ДопТип = "Условие") или (СтрСтроки.ДопТип = "УсловиеИначеЕсли")  Тогда
				ДопПараметры.МассивУсловий.Добавить(СтрСтроки);
			КонецЕсли;

			Если (СтрСтроки.ДопТип = "Условие") или (СтрСтроки.ДопТип = "УсловиеИначеЕсли")  или (СтрСтроки.ДопТип = "Цикл")  Тогда
				СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаДерева, ЭтоШагКонтекста);

				СледующаяСтрока = ОпределитьИдСледующейСтроки(СтрСтроки, ДеревоСтроки);
				Если СледующаяСтрока = Неопределено Тогда
					СтруктураШага.Вставить("ИдСледующегоШага", Неопределено);
				Иначе
					СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрока.ИдСтроки);
				КонецЕсли;

				Если СтрСтроки.ДопТип = "Цикл" Тогда
					ДопПараметры.Вставить("ЕстьЦиклы", Истина);
				КонецЕсли;

				Если ДопПараметры.ЕстьЦиклы Тогда
					ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага, СтрСтроки, Шаги);
				КонецЕсли;

				Шаги.Добавить(СтруктураШага);
			КонецЕсли;

			ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтроки.Строки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста, ДопПараметры);

			Если (СтрСтроки.ДопТип = "Условие") или (СтрСтроки.ДопТип = "УсловиеИначеЕсли") Тогда
				ДопПараметры.МассивУсловий.Удалить(ДопПараметры.МассивУсловий.Количество() - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления)
	Для Ккк = 0 По МассивДляУдаления.Количество() - 1 Цикл
		ИД = МассивДляУдаления.Количество() - 1 - Ккк;
		Ном = МассивДляУдаления[ИД];
		Шаги.Удалить(Ном);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарийАутлайн(СтрокаДерева, МассивСценариевДляВыполнения, ТекПример, ДопПараметры)
	//получим сами именнованные параметры

	ИменаПараметров = Неопределено;
	СтрокаПримеров  = Неопределено;
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = "Примеры" Тогда
			ИменаПараметров = СтрСтроки.ИменованныеПараметры;
			СтрокаПримеров = СтрСтроки;
		КонецЕсли;
	КонецЦикла;

	Если ИменаПараметров = Неопределено Тогда
		СтрОшибки = "Не смог найти у сценария " + СтрокаДерева.Имя + " имена изменяемых параметров.";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;

	МассивИДСценариев = ДопПараметры.МассивИДСценариев;
	Ном = 0;
	Для каждого СтрСтрокаПримеров Из СтрокаПримеров.Строки Цикл
		Ном = Ном + 1;
		Если Ном = 1 Тогда
			//в первой строке лежат имена параметров
			Продолжить;
		КонецЕсли;

		Если ТекПример <> Неопределено Тогда
			Если СтрСтрокаПримеров <> ТекПример Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если МассивИДСценариев <> Неопределено Тогда
			Если МассивИДСценариев.Найти(СтрСтрокаПримеров.Родитель.Родитель.ИДСтроки) = Неопределено Тогда //проверка что идёт запуск всей структуры сценария
				Если МассивИДСценариев.Найти(СтрСтрокаПримеров.ИдСтроки) = Неопределено Тогда //проверка что надо запускать конкретный пример
					Если НЕ ДопПараметры.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
						Продолжить;
					Иначе
						Если НЕ ДопПараметры.НашелСценарий Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		СтруктураПараметровСценария = Новый Структура;
		СтруктураПараметровСценария.Вставить("Имя", СтрокаДерева.Имя + " (Пример №" + (Ном - 1) + ")");
		СтруктураПараметровСценария.Вставить("СтрокаДерева", СтрСтрокаПримеров.ИДСтроки);
		СтруктураПараметровСценария.Вставить("ИмяФичи", ДопПараметры.ИмяФичи);
		СтруктураПараметровСценария.Вставить("ПолныйПутьКФиче", ДопПараметры.ПолныйПутьКФиче);
		СтруктураПараметровСценария.Вставить("НомерСтрокиВФиче", Неопределено);
		СтруктураПараметровСценария.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага",
		ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага);

		Шаги = Новый Массив;

		Если СтрокаДерева.Родитель.Строки[0].ДопТип = "Контекст" Тогда //значит надо добавить шаги контекста к нашим шагам
			ДопПараметры.Вставить("ЕстьЦиклы", Ложь);
			ДопПараметры.Вставить("МассивУсловий", Новый Массив);
			ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Родитель.Строки[0].Строки, СтрокаДерева, СтрСтрокаПримеров,
			Истина, ДопПараметры);
		КонецЕсли;

		ДопПараметры.Вставить("ЕстьЦиклы", Ложь);
		ДопПараметры.Вставить("МассивУсловий", Новый Массив);
		ДобавитьШагиДляВыполненияСценария(Шаги, СтрСтрокаПримеров.Строки, СтрокаДерева, СтрСтроки.Родитель,
		Ложь, ДопПараметры);

		Если ДопПараметры.РежимВыполненияОдногоШага Тогда
			МассивДляУдаления = Новый Массив;
			Ном = -1;
			Для каждого Шаг Из Шаги Цикл
				Ном = Ном + 1;
				Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
					Продолжить;
				КонецЕсли;

				МассивДляУдаления.Добавить(Ном);
			КонецЦикла;

			УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
		КонецЕсли;

		ДопПараметры.Вставить("НашелСценарий", Истина);

		СтруктураПараметровСценария.Вставить("Шаги", Шаги);
		МассивСценариевДляВыполнения.Добавить(СтруктураПараметровСценария);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруШага(СтрСтроки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя", СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров", СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета", СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры", СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет", СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария", СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария", СтрокаСценария.ИДСтроки);
	СтруктураШага.Вставить("СтрокаШага", СтрСтроки.ИДСтроки);
	СтруктураШага.Вставить("НомерСтрокиВФиче", СтрСтроки.НомерСтрокиВФиче);
	СтруктураШага.Вставить("ИдСтроки", СтрСтроки.ИдСтроки);
	СтруктураШага.Вставить("ШагСчитаетсяУпавшим", Ложь);
	СтруктураШага.Вставить("ОписаниеОшибки", "");
	СтруктураШага.Вставить("ЭтоШагКонтекста", ЭтоШагКонтекста);
	СтруктураШага.Вставить("ШагСПараметрамиВТаблице", СтрСтроки.ШагСПараметрамиВТаблице);
	СтруктураШага.Вставить("ДопТип", СтрСтроки.ДопТип);
	СтруктураШага.Вставить("ПараметрыТаблицы", Неопределено);
	СтруктураШага.Вставить("МасштабироватьВВидео", Истина);
	СтруктураШага.Вставить("ТекстИнструкция", "");
	СтруктураШага.Вставить("ИдСледующегоШага", Неопределено);
	СтруктураШага.Вставить("ИдЦикла", Неопределено);

	Если СтрСтроки.ШагСПараметрамиВТаблице = Истина Тогда
		ПараметрыТаблицы = Новый Массив;
		Для каждого ПодчиненнаяСтрока Из СтрСтроки.Строки Цикл
			ПараметрыТаблицы.Добавить(ПодчиненнаяСтрока.Имя);
		КонецЦикла;
		СтруктураШага.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
	КонецЕсли;

	Возврат СтруктураШага;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруШагаКлиент(СтрСтроки, СтрокаДерева, СтрокаСценария, ЭтоШагКонтекста)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя", СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров", СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета", СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры", СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет", СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария", СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария", СтрокаСценария.ИДСтроки);
	СтруктураШага.Вставить("НомерСтрокиВФиче", СтрСтроки.НомерСтрокиВФиче);
	СтруктураШага.Вставить("ИдСтроки", СтрСтроки.ИдСтроки);
	СтруктураШага.Вставить("СтрокаШага", СтрСтроки.ИДСтроки);
	СтруктураШага.Вставить("ШагСчитаетсяУпавшим", Ложь);
	СтруктураШага.Вставить("ОписаниеОшибки", "");
	СтруктураШага.Вставить("ЭтоШагКонтекста", ЭтоШагКонтекста);
	СтруктураШага.Вставить("ШагСПараметрамиВТаблице", СтрСтроки.ШагСПараметрамиВТаблице);
	СтруктураШага.Вставить("ДопТип", СтрСтроки.ДопТип);
	СтруктураШага.Вставить("ПараметрыТаблицы", Неопределено);
	СтруктураШага.Вставить("МасштабироватьВВидео", Истина);
	СтруктураШага.Вставить("ТекстИнструкция", "");
	СтруктураШага.Вставить("ИдСледующегоШага", Неопределено);
	СтруктураШага.Вставить("ИдЦикла", Неопределено);

	Если СтрСтроки.ШагСПараметрамиВТаблице = Истина Тогда
		ПараметрыТаблицы = Новый Массив;
		Для каждого ПодчиненнаяСтрока Из СтрСтроки.ПолучитьЭлементы() Цикл
			ПараметрыТаблицы.Добавить(ПодчиненнаяСтрока.Имя);
		КонецЦикла;
		СтруктураШага.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
	КонецЕсли;

	Возврат СтруктураШага;
КонецФункции

&НаСервере
Процедура ДобавитьОбычныйСценарий(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры)
	Если СтрокаДерева.ДопТип = "Контекст" Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя", СтрокаДерева.Имя);
	СтруктураПараметров.Вставить("СтрокаДерева", СтрокаДерева.ИдСтроки);
	СтруктураПараметров.Вставить("ИмяФичи", ДопПараметры.ИмяФичи);
	СтруктураПараметров.Вставить("ПолныйПутьКФиче", ДопПараметры.ПолныйПутьКФиче);
	СтруктураПараметров.Вставить("НомерСтрокиВФиче", СтрокаДерева.НомерСтрокиВФиче);
	СтруктураПараметров.Вставить("ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага",
	ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага);

	Шаги = Новый Массив;

	Если СтрокаДерева.Родитель.Строки[0].ДопТип = "Контекст" Тогда //значит надо добавить шаги контекста к нашим шагам
		ДопПараметры.Вставить("ЕстьЦиклы", Ложь);
		ДопПараметры.Вставить("МассивУсловий", Новый Массив);
		ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Родитель.Строки[0].Строки, СтрокаДерева, СтрокаДерева,
		Истина, ДопПараметры);
	КонецЕсли;

	ДопПараметры.Вставить("ЕстьЦиклы", Ложь);
	ДопПараметры.Вставить("МассивУсловий", Новый Массив);
	ДобавитьШагиДляВыполненияСценария(Шаги, СтрокаДерева.Строки, СтрокаДерева, СтрокаДерева, Ложь, ДопПараметры);

	Если ДопПараметры.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
		МассивДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого Шаг Из Шаги Цикл
			Ном = Ном + 1;
			Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов Тогда
				Прервать;
			КонецЕсли;

			МассивДляУдаления.Добавить(Ном);
		КонецЦикла;

		УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
	КонецЕсли;

	Если ДопПараметры.РежимВыполненияОдногоШага Тогда
		МассивДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого Шаг Из Шаги Цикл
			Ном = Ном + 1;
			Если Шаг.СтрокаШага = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
				Продолжить;
			КонецЕсли;

			МассивДляУдаления.Добавить(Ном);
		КонецЦикла;

		УдалитьШагиИзМассиваШаговПоСписку(Шаги, МассивДляУдаления);
	КонецЕсли;

	СтруктураПараметров.Вставить("Шаги", Шаги);

	МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);

КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарийВМассивСценариевДляВыполнения(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры)

	ЭтоСценариоАутлайн = ЭтоСценарий_SceanrioOutline(СтрокаДерева);
	Если ЭтоСценариоАутлайн Тогда
		ДобавитьСценарийАутлайн(СтрокаДерева, МассивСценариевДляВыполнения, Неопределено, ДопПараметры);
		Возврат;
	КонецЕсли;

	ДобавитьОбычныйСценарий(СтрокаДерева, МассивСценариевДляВыполнения, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры)
	Если ТипЗнч(ДеревоСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоСтроки.Тип = "Фича" Тогда
			ДопПараметры.Вставить("ИмяФичи", ДеревоСтроки.Имя);
			ДопПараметры.Вставить("ПолныйПутьКФиче", ДеревоСтроки.ПолныйПуть);
		КонецЕсли;

		Если ДеревоСтроки.Тип = "Сценарий" Тогда
			ДобавитьСценарийВМассивСценариевДляВыполнения(ДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
		ИначеЕсли ДеревоСтроки.Тип = "Пример" Тогда
			ДобавитьСценарийАутлайн(ДеревоСтроки.Родитель.Родитель, МассивСценариевДляВыполнения, ДеревоСтроки, ДопПараметры)
		КонецЕсли;
	Иначе
		Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
			Если СтрДеревоСтроки.Тип = "Фича" Тогда
				ДопПараметры.Вставить("ИмяФичи", СтрДеревоСтроки.Имя);
				ДопПараметры.Вставить("ПолныйПутьКФиче", СтрДеревоСтроки.ПолныйПуть);
			КонецЕсли;

			МассивИДСценариев = ДопПараметры.МассивИДСценариев;
			Если СтрДеревоСтроки.Тип = "Сценарий" Тогда
				Если МассивИДСценариев <> Неопределено Тогда
					Если МассивИДСценариев.Найти(СтрДеревоСтроки.ИдСтроки) <> Неопределено Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения,
							ДопПараметры);
						ДопПараметры.Вставить("НашелСценарий", Истина);
					ИначеЕсли ДопПараметры.ДобавитьСценарииПослеНайденного и ДопПараметры.НашелСценарий Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения,
							ДопПараметры);
					ИначеЕсли ДопПараметры.ЭтоПример и (СтрДеревоСтроки.ДопТип = "СтруктураСценария") Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения,
							ДопПараметры);
					КонецЕсли;
				Иначе
					ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки, МассивСценариевДляВыполнения, ДопПараметры);
				КонецЕсли;
			Иначе
				ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(СтрДеревоСтроки.Строки,
					МассивСценариевДляВыполнения, ДопПараметры);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьИДРекурсивно(ДеревоСтроки, ИД, МассивСтрокДереваДанныеФормы, КоллекцияИменКонтекстовОбработок,
		ТзнТаблицаИзвестныхStepDefinition, ДопПараметры, ЕстьСвояEPFУФичи = Неопределено)

	Для каждого СтрокаДерева Из ДеревоСтроки Цикл

		СтрокаДерева.Статус     = "";
		Если СтрокаДерева.Тип = "Шаг" Тогда
			Если СтрокаДерева.ТипКартинки <> 3 Тогда
				СтрокаДерева.ТипКартинки = 3;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.ДопТип = "Цикл" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = "Условие" Тогда
			СтрокаДерева.ТипКартинки = 3;
		ИначеЕсли СтрокаДерева.ДопТип = "УсловиеИначеЕсли" Тогда
			СтрокаДерева.ТипКартинки = 3;
		КонецЕсли;

		Если СтрокаДерева.Тип = "Фича" Тогда
			ФайлФичи = Новый Файл(СтрокаДерева.ПолныйПуть);
			ПутьФайлаEPF  = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(ФайлФичи.Путь, ФайлФичи.ИмяБезРасширения,
				ДопПараметры.ЭтоLinux);

			ПутьФайлаEPF = УниверсальноеПолноеИмяФайла(ПутьФайлаEPF, Истина);

			ЕстьСвояEPFУФичи = КоллекцияИменКонтекстовОбработок.Получить(ПутьФайлаEPF) <> Неопределено;
		КонецЕсли;
		СтрокаДерева.ФичаИмеетСвоюEPF = ЕстьСвояEPFУФичи;

		СтрокаДерева.ИДСтроки = ИД;
		Если ДопПараметры.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов Тогда
			Если СтрокаДерева.ИДСтроки = ДопПараметры.ИдСтрокиШагаСКоторогоВыполнятьСценарийССохранениемКонтекстов Тогда
				СтрокаДерева.ВыполнятьСценарийСЭтогоШага = Истина;
			КонецЕсли;
		КонецЕсли;
		МассивСтрокДереваДанныеФормы.Добавить(); //просто добавим пустой элемент, заполнение его данными будет в процедуре клиента
		ИД = ИД + 1;
		ПроставитьИДРекурсивно(СтрокаДерева.Строки, ИД, МассивСтрокДереваДанныеФормы, КоллекцияИменКонтекстовОбработок,
			ТзнТаблицаИзвестныхStepDefinition, ДопПараметры, ЕстьСвояEPFУФичи);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьИДСтрокиВДереве(Дерево, МассивСтрокДереваДанныеФормы, КоллекцияИменКонтекстовОбработок,
	ТзнТаблицаИзвестныхStepDefinition, ДопПараметры)
	Ид = 0;
	ПроставитьИДРекурсивно(Дерево.Строки, ИД, МассивСтрокДереваДанныеФормы, КоллекцияИменКонтекстовОбработок,
		ТзнТаблицаИзвестныхStepDefinition, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения, МассивСтрокДереваДанныеФормы,
	ТекИДСценария, КоллекцияИменКонтекстовОбработок, ДопПараметры)
	ДеревоФорма = Объект.ДеревоТестов;

	ОбъектСервер = РеквизитФормыВЗначение("Объект");

	Если Не Объект.РежимВыполненияОдногоШага Тогда
		ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"); //TODO ?? обойтись без РеквизитФормыВЗначение
		ЗаполнитьИДСтрокиВДереве(ОбъектСервер.ДеревоТестов, МассивСтрокДереваДанныеФормы,
			КоллекцияИменКонтекстовОбработок, ТзнТаблицаИзвестныхStepDefinition, ДопПараметры);
	КонецЕсли;

	ТекСценарий = Неопределено;
	Если ТекСценарий = Неопределено Тогда
		ТекСценарий = ОбъектСервер.ДеревоТестов.Строки;
	КонецЕсли;

	ДопПараметры.Вставить("МассивИДСценариев", ТекИДСценария);
	ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ТекСценарий, МассивСценариевДляВыполнения, ДопПараметры);

	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатусСценария(ИД)

	ИДСтрокиСценария = МассивСценариевДляВыполнения[ИД].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

	УстановитьСтатусВсейИерархииПредков(РезультатПрохожденияТестовШагов, ИДСтрокиСценария);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВсейИерархииПредков(КоллекцияСтрок, ИДВерхегоРодителя)
	Если Не ЗначениеЗаполнено(КоллекцияСтрок) Тогда
		Возврат;
	КонецЕсли;

	Родители = Новый Массив;
	СоответствиеРодителейДляПоиска = Новый Соответствие;
	Для Каждого ОчереднаяСтрока Из КоллекцияСтрок Цикл
		Родитель = МассивСтрокДереваДанныеФормы[ОчереднаяСтрока.ИДСтроки].ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Прервать;
		КонецЕсли;
		УстановитьХудшийСтатусВыполненияСтроки(Родитель, ОчереднаяСтрока.Статус);

		ИДСтрокиРодителя = Родитель.ИДСтроки;

		Если ИДСтрокиРодителя = ИДВерхегоРодителя Тогда
			Продолжить;
		КонецЕсли;

		Если СоответствиеРодителейДляПоиска.Получить(ИДСтрокиРодителя) = Неопределено Тогда
			Родители.Добавить(Родитель);
			СоответствиеРодителейДляПоиска.Вставить(ИДСтрокиРодителя, Родитель);
		КонецЕсли;
	КонецЦикла;
	УстановитьСтатусВсейИерархииПредков(Родители, ИДВерхегоРодителя);
КонецПроцедуры

&НаКлиенте
Функция УстановитьХудшийСтатусВыполненияСтроки(Знач СтрокаДерева, Знач НовыйСтатус)
	СтрокаДерева.Статус = ВыбратьХудшийСтатусВыполненияСтроки(СтрокаДерева.Статус, НовыйСтатус);
	Возврат СтрокаДерева.Статус;
КонецФункции

&НаКлиенте
Функция ВыбратьХудшийСтатусВыполненияСтроки(Знач Статус1, Знач Статус2)
	Значение1 = СтатусыВыполненияСтрок.Получить(Статус1);
	Значение2 = СтатусыВыполненияСтрок.Получить(Статус2);
	Возврат ПриоритетыСтатусовВыполненияСтрок.Получить(Макс(Значение1, Значение2));
КонецФункции

&НаКлиенте
Функция ПреобразоватьКДатеСтроку(Знач Стр)
	НачСтр = Стр;
	Год   = 0;
	Месяц = 0;
	День  = 0;

	Поз  = Найти(Стр, ".");
	День = Число(Лев(Стр, Поз - 1));
	Стр = Сред(Стр, Поз + 1);

	Поз   = Найти(Стр, ".");
	Месяц = Число(Лев(Стр, Поз - 1));
	Стр   = Сред(Стр, Поз + 1);

	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 Тогда
		Если Год < 100 Тогда
			Год = Год + 2000;
		КонецЕсли;
	КонецЕсли;

	Зн = Дата(Год, Месяц, День);

	Зн = Формат(Зн, "ДФ=yyyyMMdd; ДП=00010101");
	Зн = "'" + Зн + "'";

	Возврат Зн;
КонецФункции

&НаКлиенте
Процедура ВызватьМетод(Обработка, Знач ИмяПроцедуры, МассивАргументов)
	Поз = Найти(ИмяПроцедуры, "(");
	Если Поз > 0 Тогда
		ИмяПроцедуры = Лев(ИмяПроцедуры, Поз - 1);
	КонецЕсли;

	Команда = "Обработка." + ИмяПроцедуры + "(";

	АргументТаблица = Новый Массив;

	Если МассивАргументов <> Неопределено Тогда
		Для Ккк = 0 По МассивАргументов.Количество() - 1 Цикл
			Элем = МассивАргументов[Ккк];
			Если ТипЗнч(Элем) = Тип("Массив") Тогда
				АргументТаблица.Добавить(Элем);
				Команда = Команда + "АргументТаблица[" + (АргументТаблица.Количество() - 1) + "]";
			Иначе
				Команда = Команда + Элем;
			КонецЕсли;

			Если Ккк < МассивАргументов.Количество() - 1 Тогда
				Команда = Команда + ",";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Команда = Команда + ")";

	Отладка("Выполняю: " + Команда);
	Если НЕ ПризнакРучногоВыполненияШага Тогда
		Выполнить(Команда);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВывестиВСообщениеТекстОшибки(ТекстОшибки)
	Стр = "";
	Стр = Стр + "        ОписаниеОшибки:"   + Символы.ПС;
	Стр = Стр + "                ИмяМодуля: "      + ТекстОшибки.ИмяМодуля + Символы.ПС;
	Стр = Стр + "                ИсходнаяСтрока: " + СокрЛП(ТекстОшибки.ИсходнаяСтрока) + Символы.ПС;
	Стр = Стр + "                НомерСтроки: "    + ТекстОшибки.НомерСтроки + Символы.ПС;
	Стр = Стр + "                Описание: "       + ТекстОшибки.Описание;
	Если ТекстОшибки.Причина <> Неопределено Тогда
		Стр = Стр + Символы.ПС;
		Если ЗначениеЗаполнено(ТекстОшибки.Причина.ИмяМодуля) Тогда
			Стр = Стр + "                ПричинаОшибки:" + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки.Причина.ИмяМодуля) Тогда
			Стр = Стр + "                        ИмяМодуля: "      + ТекстОшибки.Причина.ИмяМодуля + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки.Причина.ИсходнаяСтрока) Тогда
			Стр = Стр + "                        ИсходнаяСтрока: " + СокрЛП(ТекстОшибки.Причина.ИсходнаяСтрока) + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки.Причина.НомерСтроки) Тогда
			Стр = Стр + "                        НомерСтроки: "    + ТекстОшибки.Причина.НомерСтроки + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки.Причина.Описание) Тогда
			Стр = Стр + "                        Описание: "       + ТекстОшибки.Причина.Описание;
		КонецЕсли;
	КонецЕсли;

	Возврат Стр;
КонецФункции

&НаКлиенте
Функция ПолучитьТекстПредупреждения() Экспорт
	ОкноПредупреждения = Неопределено;
	Попытка
		ОкнаПредупреждения = ОбъектКонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		Для Каждого ТекущееОкно Из ОкнаПредупреждения Цикл
			Если ЭтоЗаголовокОкнаМодальногоДиалога(ТекущееОкно.Заголовок) Тогда
				ОкноПредупреждения = ТекущееОкно;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Если ОкноПредупреждения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Текст = "";

	ПоляПредупреждения = ОкноПредупреждения.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	Для Каждого ПолеПредупреждения Из ПоляПредупреждения Цикл
		Если ЗначениеЗаполнено(Текст) Тогда
			Текст = Текст + Символы.ПС;
		КонецЕсли;

		Текст = Текст + ПолеПредупреждения.ТекстЗаголовка;
	КонецЦикла;

	Возврат Текст;
КонецФункции

&НаКлиенте
Функция СформироватьОписаниеОшибки(Знач Стр, ИмяФайла, ИмяПроцедуры, ИнфоОбОшибке,
		ПолныйПутьФичи, ИмяСценария, НомерСтрокиВФиче)

	СисИнфо            = Новый СистемнаяИнформация;
	ВерсияПриложения   = СисИнфо.ВерсияПриложения;
	РежимСовместимости = УзнатьРежимСовместимостиКлиент(ПолучитьТекстСообщенияПользователю("$Не использовать$"));
	ТекстИДРаннера     = "";
	Если ЗначениеЗаполнено(Объект.ИДРаннера) Тогда
		ТекстИДРаннера = ", ИДРаннера=" +Объект.ИДРаннера;
	КонецЕсли;

	ТекстОшибкиTestClient = "";
	Попытка
		ИнфоОбОшибке = Неопределено;
		ИнфоОбОшибке = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьТекущуюИнформациюОбОшибке();
		Если ИнфоОбОшибке <> Неопределено Тогда
			ТекстОшибкиTestClient = ВывестиВСообщениеТекстОшибки(ИнфоОбОшибке);
		КонецЕсли;
	Исключение
	КонецПопытки;

	Стр = Стр + Символы.ПС
	+ Символы.ПС              + ПолучитьТекстСообщенияПользователю("$Технические данные$") + ":"
	+ Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("- Сценарий") + ": " + ИмяСценария
	+ Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("- Фича") + ": " + ПолныйПутьФичи
	+ Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("- Номер строки в фиче") + ": " + НомерСтрокиВФиче
	+ Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("- Файл шагов") + ": " + ИмяФайла
	+ Символы.ПС + "        " + ПолучитьТекстСообщенияПользователю("- Метод реализации шага") + ": " + ИмяПроцедуры
	;

	Если ЗначениеЗаполнено(ТекстОшибкиTestClient) Тогда
		Стр = Стр + Символы.ПС + ТекстОшибкиTestClient;
	Иначе
		ТекстПредупреждения = ПолучитьТекстПредупреждения();
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			Стр = Стр + Символы.ПС + "Текст модального окна:" + Символы.ПС
			+ "    " + ТекстПредупреждения;
		КонецЕсли;
	КонецЕсли;

	Возврат Стр;
КонецФункции

&НаКлиенте
Функция ПолучитьРезультатПрохожденияТестовСценария(ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено  Тогда
		Сообщить("Неизвестная ошибка в ПолучитьРезультатПрохожденияТестовСценария.");
		Возврат Неопределено;
	КонецЕсли;

	Возврат МассивРезультатПрохожденияТестовСценария[ИД];
КонецФункции

&НаКлиенте
Процедура ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка = Ложь, ОписаниеОшибки = Неопределено, СлужебныеДанныеСценария = Неопределено)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;
	ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередОкончаниемСценария", , БылаОшибка, ОписаниеОшибки, СлужебныеДанныеСценария);
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеПолученияРезультатаПрохожденияТестовСценария(Результат)

	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве);

		ОтчетАллюр(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеИнструментаДляСозданияСкриншотов()
	Если НЕ Объект.СоздаватьИнструкциюHTML и НЕ Объект.ДелатьСкриншотПриВозникновенииОшибки и НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат Истина;
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюHTML Тогда
		Если СокрЛП(Объект.КаталогOutputИнструкцияHTML) = "" Тогда
			Сообщить("КаталогOutputИнструкцияHTML не задан.");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Если СокрЛП(Объект.КаталогOutputИнструкцияMarkdown) = "" Тогда
			Сообщить("КаталогOutputИнструкцияMarkdown не задан.");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Если СокрЛП(Объект.КаталогOutputСкриншоты) = "" Тогда
			Сообщить("КаталогOutputСкриншоты не задан.");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ЭтоLinux Тогда
		Возврат Истина;
	Иначе
		ВременныйФайл = ПолучитьИмяВременногоФайла("png");
		СделатьСкриншот(ВременныйФайл);
		Если НЕ ФайлСуществуетКомандаСистемы(ВременныйФайл, "ПроверитьНаличиеИнструментаДляСозданияСкриншотов") Тогда
			Сообщить("НЕ найден инструмент по созданию скриншотов.");
			Возврат Ложь;
		КонецЕсли;

		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СделатьСкриншот(ИмяФайла)
	Команда = Объект.КомандаСделатьСкриншот + " """ + ИмяФайла + """";
	Попытка
		Если ЭтоLinux Тогда
			КомандаСистемы(Команда);
		Иначе
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда, Истина, Ложь);
			Иначе
				ЗапуститьПриложение(Команда, , Истина);
			КонецЕсли;
		КонецЕсли;
		Отладка("Команда создания скриншота=" + Команда);
	Исключение
		ТекстСообщения = "Ошибка создания скриншота:%1 команда:%2";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Команда);
		Сообщить(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Функция СоздатьИмяФайлаДляСкриншота(Каталог)
	Возврат ДополнитьСлешВПуть(Каталог) + "ScreenShot_" + ПолучитьОтметкуВремениДляИмениФайла() + ".png";
КонецФункции

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLВыполненияШага(СтруткураШага = Неопределено)
	Перем КаталогOutputИнструкцияHTML;

	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;

	КаталогOutputИнструкцияHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML);
	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
		Шаги                           = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		СтруткураШага                  = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;

	ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншота(КаталогOutputИнструкцияHTML);
	СделатьСкриншот(ИмяФайлаСкриншота);

	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);
	ТД.ЗаписатьСтроку("НачалоШага");
	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + "\n" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;

	ТД.ЗаписатьСтроку("ИмяШага=" + СтрокаШага);
	ТД.ЗаписатьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	ТД.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownВыполненияШага(СтруткураШага = Неопределено)

	Если СкриншотСделанВСценарии Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;

	Если СтруткураШага = Неопределено Тогда
		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;
		Шаги                           = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		СтруткураШага                  = Шаги[ТекИД_ШагаВМассиве];
	КонецЕсли;

	ИмяФайлаСкриншота = СоздатьИмяФайлаДляСкриншота(Объект.КаталогOutputИнструкцияMarkdown);
	СделатьСкриншот(ИмяФайлаСкриншота);

	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);

	ТД.ЗаписатьСтроку("НачалоШага");

	СтрокаШага = СтруткураШага.Имя;
	Если СтруткураШага.ШагСПараметрамиВТаблице = Истина Тогда
		Для каждого СтрПараметрыТаблицы Из СтруткураШага.ПараметрыТаблицы Цикл
			СтрокаШага = СтрокаШага + "\n" + СтрПараметрыТаблицы;
		КонецЦикла;
	КонецЕсли;

	ТД.ЗаписатьСтроку("ИмяШага=" + СтрокаШага);
	ТД.ЗаписатьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеДляПередачиВМетод(Знач Значение, Знач Тип)
	Если Тип = "Строка" Тогда
		РезЗначение = ВычислитьПеременныеКонтекстаВнутриСтроки(Значение);
		РезЗначение = СобратьСтрокуДляПередачиВКод(РезЗначение);
		Возврат """" + СтрЗаменить(РезЗначение, """", """""") + """";
	ИначеЕсли Тип = "Число" Тогда
		Если СтрДлина(Значение) > 1
			И Лев(Значение, 1) = "0" И Найти(Значение, ".") = 0 И Найти(Значение, ",") = 0 Тогда // TODO заменить в парсере фич - строки 0001 должны определяться как тип "Строка", а не как тип "Число"

				Возврат """" + Значение + """";
		КонецЕсли;
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат ПреобразоватьКДатеСтроку(Значение);
	КонецЕсли;

	ТекстСообщения = "Неизвестный Тип: %1 в ПолучитьЗначениеДляПередачиВМетод";
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Тип);
	ВызватьИсключение ТекстСообщения;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДляПередачиВМетодСервер(Знач Значение, Знач Тип)
	Если Тип = "Строка" Тогда
		РезЗначение = СобратьСтрокуДляПередачиВКодСервер(Значение);
		Возврат """" + СтрЗаменить(РезЗначение, """", """""") + """";
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат ПреобразоватьКДатеСтрокуСервер(Значение);
	Иначе
		ТекстСообщения = "Неизвестный Тип: %1 в ПолучитьЗначениеДляПередачиВМетод";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Тип);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция СобратьСтрокуДляПередачиВКод(Знач Строка)
	Если СтрЧислоСтрок(Строка) = 1 Тогда
		Возврат Строка;
	КонецЕсли;

	МассивСтрок = Новый Массив;
	Для Сч = 1 По СтрЧислоСтрок(Строка) Цикл
		МассивСтрок.Добавить(СтрПолучитьСтроку(Строка, Сч));
	КонецЦикла;
	Рез  = СтрСоединить_(МассивСтрок, Символы.ПС + "|");
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция СобратьСтрокуДляПередачиВКодСервер(Знач Строка)
	Если СтрЧислоСтрок(Строка) = 1 Тогда
		Возврат Строка;
	КонецЕсли;

	МассивСтрок = Новый Массив;
	Для Сч = 1 По СтрЧислоСтрок(Строка) Цикл
		МассивСтрок.Добавить(СтрПолучитьСтроку(Строка, Сч));
	КонецЦикла;
	Рез  = СтрСоединить_Сервер(МассивСтрок, Символы.ПС + "|");
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьКДатеСтрокуСервер(Знач Стр)
	НачСтр = Стр;
	Год   = 0;
	Месяц = 0;
	День  = 0;

	Поз  = Найти(Стр, ".");
	День = Число(Лев(Стр, Поз - 1));
	Стр = Сред(Стр, Поз + 1);

	Поз   = Найти(Стр, ".");
	Месяц = Число(Лев(Стр, Поз - 1));
	Стр   = Сред(Стр, Поз + 1);

	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 Тогда
		Если Год < 100 Тогда
			Год = Год + 2000;
		КонецЕсли;
	КонецЕсли;

	Зн = Дата(Год, Месяц, День);

	Зн = Формат(Зн, "ДФ=yyyyMMdd; ДП=00010101");
	Зн = "'" + Зн + "'";

	Возврат Зн;
КонецФункции

&НаКлиенте
Процедура ЗапомнитьСостоянияКонтекстовДоВыполненияШага(Контекст, КонтекстСохраняемый, ИдСтроки)
	СостоянияКонтекстовДоВыполненияШага = Новый Структура;
	СостоянияКонтекстовДоВыполненияШага.Вставить("Контекст", СкопироватьСтруктуру(Контекст));
	СостоянияКонтекстовДоВыполненияШага.Вставить("КонтекстСохраняемый", СкопироватьСтруктуру(КонтекстСохраняемый));
	СостоянияКонтекстовДоВыполненияШага.Вставить("ИдСтроки", ИдСтроки);

	Ном = -1;
	Для каждого Элем Из МассивСостоянияКонтекстовДоВыполненияШага Цикл
		Ном = Ном + 1;
		Если Элем.ИдСтроки = ИдСтроки Тогда
			МассивСостоянияКонтекстовДоВыполненияШага.Удалить(Ном);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	МассивСостоянияКонтекстовДоВыполненияШага.Добавить(СостоянияКонтекстовДоВыполненияШага);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостоянияКонтекстовПоИдСтроки(ИдСтроки)
	Для каждого Элем Из МассивСостоянияКонтекстовДоВыполненияШага Цикл
		Если Элем.ИдСтроки = ИдСтроки Тогда
			Возврат Элем;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьИдСледующегоШага(ТекШаг)
	ИдСледующегоШага = Неопределено;
	Если ТекШаг.ДопТип = "Условие" или ТекШаг.ДопТип = "УсловиеИначеЕсли" Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдСледующегоШага, Истина);
		КонецЕсли;
	ИначеЕсли ТекШаг.ДопТип = "Цикл" Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдСледующегоШага, Истина);
			Если ТекШаг.ИдСледующегоШага = Неопределено Тогда
				ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдЦикла, Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекШаг.ИдЦикла <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдЦикла, Истина);
	ИначеЕсли ТекШаг.ИдСледующегоШага = -1 Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", Неопределено, Истина);
	ИначеЕсли ТекШаг.ИдСледующегоШага <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки", ТекШаг.ИдСледующегоШага, Истина);
	КонецЕсли;

	Возврат ИдСледующегоШага;
КонецФункции

&НаКлиенте
Процедура ПоказатьКолонкуСНомеромСтрокиДерева()
	Если Не Элементы.ДеревоТестовИДСтроки.Видимость Тогда
		ПоказатьСкрытьИДСтроки("Показать");
	КонецЕсли;
КонецПроцедуры

//TODO в методе ВыполнитьШаг() много Возвратов раскидано по коду :( понимать код сложно
&НаКлиенте
Процедура ВыполнитьШаг()
	Если ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий Тогда
		Возврат;
	КонецЕсли;

	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;

	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;

	ТекШаг = Шаги[ТекИД_ШагаВМассиве];

	Если Объект.ВыводитьВЛогВыполнениеШагов Тогда
		ЗаписатьЛогВТекстИнформация("- Шаг", " " + ТекШаг.Имя);
	КонецЕсли;

	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
	СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);

	Если СтрокаШага.Брейкпоинт и Не Объект.РежимВыполненияОдногоШага Тогда
		СделатьСообщение("Тестирование приостановлено на точке останова внутри сценария.");
		ПрекратитьВыполнениеВсехСценариев = Истина;
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;

	Если ПрекратитьВыполнениеДанногоСценария Тогда
		ПрекратитьВыполнениеДанногоСценария = Ложь;
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;

	РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);

	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить("Имя", СтрокаШага.Имя);
	РезультатПрохожденияШага.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
	РезультатПрохожденияШага.Вставить("ИДСтроки", ИДСтрокиШага);
	РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", ТекШаг.ЭтоШагКонтекста);

	РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);

	АдресСнипета = ТекШаг.АдресСнипета;
	Если СокрЛП(АдресСнипета) = "" Тогда
		ОстановитьЗаписьВидеоОдногоШага();

		Если ПризнакРучногоВыполненияШага Тогда

			СтрокаШага.Статус = "Success";
			СтрокаШага.ТипКартинки = 4;
			ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
			РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());

			ПерейтиКВыполнениюСледующегоШага(, , ИдСледующегоШага);
			Возврат;
		КонецЕсли;

		СтрокаШага.Статус = "Pending";
		СтрокаШага.ТипКартинки = 6;
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		ТекстСообщения = "Пустой адрес снипета у шага: %1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекШаг.Имя);
		ОписаниеОшибки = ТекстСообщения;

		ВывестиВЛогФайл("Pending: " + ОписаниеОшибки);

		Если Объект.ПриравниватьPendingКFailed Тогда
			СтатусЗапускаСценариев = Ложь;
			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ТекстСообщения = "Шаг сценария не реализован.";
				ЗаписатьЛогОшибки(СтрокаСценария, СтрокаШага, ТекстСообщения, Неопределено, ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;

		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);

		СделатьСообщение(ОписаниеОшибки);

		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);
		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;
			СтрокаСценария.Статус  = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);

			ВывестиВЛогФайл("Failed: " + ОписаниеОшибки);

			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли;

		ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;

		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибки(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе
			ДействияПослеПолученияРезультатаПрохожденияТестовСценария(РезультатПрохожденияТестовСценария);

			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;

		Возврат;
	КонецЕсли;

	УниверсальноеПолноеИмяФайлаШага = УниверсальноеПолноеИмяФайла(АдресСнипета, Истина);

	ИД = ПолучитьКонтекстТестаПоУниверсальномуИмениФайла(АдресСнипета, УниверсальноеПолноеИмяФайлаШага);

	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	Если ОбработкаТеста = Неопределено Тогда
		ФайлШагов = Новый Файл(АдресСнипета);
		Если Объект.ИспользоватьПрямыеПутиФайлов Тогда
			ПодключитьКонтекстОбработкиКлиент(ФайлШагов);
			ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
			Если ОбработкаТеста = Неопределено Тогда
				ТекстСообщения = "Не смог подключить обработку <%1>";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", АдресСнипета);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		Иначе
			АсинхронноПодключитьКонтекстОбработки(ФайлШагов, УниверсальноеПолноеИмяФайлаШага, РезультатПрохожденияШага);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ВыполнитьШагЗавершение(ОбработкаТеста, РезультатПрохожденияШага);
КонецПроцедуры

&НаКлиенте
Процедура АсинхронноПодключитьКонтекстОбработки(Знач ФайлШагов, Знач УниверсальноеПолноеИмяФайлаШага,
		Знач РезультатПрохожденияШага) Экспорт

	ИмяФайла = ФайлШагов.ПолноеИмя;

	ОписаниеФайла = СоздатьОписаниеФайла(ИмяФайла, УниверсальноеПолноеИмяФайлаШага);
	ОписаниеФайла.Вставить("РезультатПрохожденияШага", РезультатПрохожденияШага);

	ПередаваемыеФайлы = Новый Массив;
	ПередаваемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));

	ОписаниеЗавершения = АСинк().смв_НовыйОписаниеОповещения("ОбработчикАсинхронноПодключитьКонтекстОбработкиПриВыполненииШага", ЭтаФорма, ОписаниеФайла);
	АСинк().смв_ПоместитьФайлы(ОписаниеЗавершения, ПередаваемыеФайлы);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАсинхронноПодключитьКонтекстОбработкиПриВыполненииШага(Знач ПомещенныеФайлы,
		Знач ОписаниеФайла) Экспорт

	ИмяФайла = ОписаниеФайла.ПолноеИмя;
	УниверсальноеПолноеИмяФайлаШага = ОписаниеФайла.УниверсальноеПолноеИмяФайлаШага;
	РезультатПрохожденияШага = ОписаниеФайла.РезультатПрохожденияШага;

	ОписаниеПередаваемыхФайлов = Новый Соответствие;
	ОписаниеПередаваемыхФайлов.Вставить(ИмяФайла, ОписаниеФайла);

	ПодключитьШагиИзПереданныхФайлов(ПомещенныеФайлы, ОписаниеПередаваемыхФайлов, Ложь);

	ИД = ПолучитьКонтекстТестаПоУниверсальномуИмениФайла(ИмяФайла, УниверсальноеПолноеИмяФайлаШага);
	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	УспешноПодключили = ОбработкаТеста <> Неопределено;

	Если Не УспешноПодключили Тогда
		ТекстСообщения = "Не смог подключить обработку <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайла);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ВыполнитьШагЗавершение(ОбработкаТеста, РезультатПрохожденияШага);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШагЗавершение(ОбработкаТеста, Знач РезультатПрохожденияШага)
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];

	КонтекстОтладки = ТаблицаОбработокДляОтладки.Получить(ТекШаг.СтрокаРеальнойПроцедуры);
	Если КонтекстОтладки <> Неопределено Тогда
		ОбработкаТеста = КонтекстОтладки.Обработка;
	КонецЕсли;

	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;

	ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
	СписокАргументов = ТекШаг.ЗначенияПараметров;

	МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);

	ИДСтрокиШага = ТекШаг.СтрокаШага;
	СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);

	Если СтрокаШага.ШагСПараметрамиВТаблице = Истина Тогда
		ПарамТаблица = Новый Массив;
		МассивПараметров.Добавить(ПарамТаблица);

		ПодчиненныеСтроки = СтрокаШага.ПолучитьЭлементы();
		Для каждого СтрокиТаблицы Из ПодчиненныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокиТаблицы.Тип) Тогда
				//значит это уже не строка таблицы
				Прервать;
			КонецЕсли;

			СтруктураПарамТаблица = Новый Структура;

			Если (СтрокиТаблицы.СтрокаПараметровШагаВВидеТаблицы <> Истина) или (НЕ ЗначениеЗаполнено(СтрокиТаблицы.Имя)) Тогда
				ПарамТаблица = Новый Массив;
				МассивПараметров.Добавить(ПарамТаблица);
				Продолжить;
			КонецЕсли;

			НомерКолонки = 0;
			Для каждого Колонка Из СтрокиТаблицы.ПараметрыТаблицы Цикл
				НомерКолонки       = НомерКолонки + 1;
				СтруктураПараметра = Колонка.Значение;
				Значение           = ПолучитьЗначениеДляПередачиВМетод(СтруктураПараметра.Значение, СтруктураПараметра.Тип);
				Значение           = Вычислить(Значение);

				СтруктураПарамТаблица.Вставить("Кол" + XMlСтрока(НомерКолонки), Значение);
			КонецЦикла;

			ПарамТаблица.Добавить(СтруктураПарамТаблица);
		КонецЦикла;

		Если ПарамТаблица.Количество() = 0 Тогда
			//значит эта таблица пустая, её передавать не надо
			МассивПараметров.Удалить(МассивПараметров.Количество() - 1);
		КонецЕсли;
	КонецЕсли;

	СтрОшибка       = Неопределено;
	ШагВыполнен     = Ложь;
	ШагНеРеализован = Ложь;

	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

	Попытка

		Если Объект.РежимВыполненияСценарияСВыбранногоШагаССохранениемКонтекстов = Истина Тогда
			СохраненнаяСтруктура = ПолучитьСостоянияКонтекстовПоИдСтроки(СтрокаШага.ИдСтроки);
			Если СтрокаШага.ВыполнятьСценарийСЭтогоШага = Истина Тогда
				Если СохраненнаяСтруктура <> Неопределено Тогда
					ОбъектКонтекст            = СкопироватьСтруктуру(СохраненнаяСтруктура.Контекст);
					ОбъектКонтекстСохраняемый = СкопироватьСтруктуру(СохраненнаяСтруктура.КонтекстСохраняемый);
				Иначе
					ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
				КонецЕсли;
			Иначе
				//значит в этот раз запустить с этого шага не получится, надо запомнить контекст для последующих запусков
				ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
			КонецЕсли;
		ИначеЕсли Объект.СохранятьКонтекстыПередВыполнениемШагов Тогда
			ЗапомнитьСостоянияКонтекстовДоВыполненияШага(ОбъектКонтекст, ОбъектКонтекстСохраняемый, СтрокаШага.ИдСтроки);
		КонецЕсли;

		ОбработкаТеста.Контекст            = ОбъектКонтекст;
		ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;

		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ЗаписатьЛогВЖРПередВыполнениемШага(ТекШаг.Имя);
		КонецЕсли;

		СкриншотСделанВСценарии = Ложь;

		//вызов процедуры шага
		ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов + 1;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		ВсёЕщёИдётВыполнениеШагов = ВсёЕщёИдётВыполнениеШагов - 1;

		ОбъектКонтекст            = ОбработкаТеста.Контекст;
		ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;

		ШагВыполнен = Истина;

		Если НЕ ТекШаг.ЭтоШагКонтекста Тогда
			ДобавитьВЛогИнструкцииHTMLВыполненияШага(ТекШаг);
			ДобавитьВЛогИнструкцииMarkdownВыполненияШага(ТекШаг);
		КонецЕсли;

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

		Отладка("ОписаниеОшибки()=" + КраткийТекстОшибки);

		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);

		Если Найти(КраткийТекстОшибки, "}: Не реализовано.") > 0 Тогда //тогда это Pending
			ТекстСообщения = "Шаг (%1) не реализован.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекШаг.Имя);

			ОписаниеОшибкиШага = ТекстСообщения;
			СделатьСообщение(ОписаниеОшибкиШага);
			СтрОшибка = "Не реализовано.";
			ШагНеРеализован = Истина;

			ВывестиВЛогФайл("Pending: " + ТекстСообщения);

			ОстановитьЗаписьВидеоОдногоШага();

			Если Объект.ПриравниватьPendingКFailed Тогда
				Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
					ТекстСообщения = "Шаг сценария не реализован.";
					ЗаписатьЛогОшибки(СтрокаСценария, СтрокаШага, ТекстСообщения, Неопределено, ОписаниеОшибкиШага);
				КонецЕсли;
			КонецЕсли;
		Иначе
			//значит возникла ошибка
			ОписаниеОшибкиШага = ПолучитьТекстСообщенияПользователю("$Шаг$") + " (" + ТекШаг.Имя + ") " + ПолучитьТекстСообщенияПользователю("$не выполнен$") + ".";
			СделатьСообщение(ОписаниеОшибкиШага);

			ПолныйПутьФичи = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаСценария);
			ИмяСценария = СтрокаСценария.Имя;
			НомерСтрокиВФиче = XMlСтрока(ТекШаг.НомерСтрокиВФиче);
			ИнфоОбОшибке = Неопределено;

			СтрОшибка = СформироватьОписаниеОшибки(ПодробныйТекстОшибки, ТекШаг.АдресСнипета, ИмяПроцедуры, ИнфоОбОшибке,
				ПолныйПутьФичи, ИмяСценария, НомерСтрокиВФиче);

			СделатьСообщение(СтрОшибка);

			ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(Неопределено, ИДСтрокиСценария, Истина);
			СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ТекШаг.СтрокаШага);

			ЭтоПример          = Ложь;
			ЭтоШагКонтекста    = Ложь;
			СтрокаРодителяШага = НайтиСтрокуСценарияЧерезРодителя(СтрокаШага, ЭтоПример, ЭтоШагКонтекста);

			Если ЭтоШагКонтекста Тогда
				ВозниклаОшибкаВШагеКонтекста = Истина;
			КонецЕсли;

			СтрокаСценария.ТекстОшибки = СтрОшибка;
			СтрокаШага.ТекстОшибки     = СтрОшибка;
			Если ГлобальныеЗначенияТаблиц.Свойство("ТаблицаЭталон") Тогда
				Если СтрокаШага.ПроизвольныеЗначения = Неопределено Тогда
					СтрокаШага.ПроизвольныеЗначения = Новый Структура;
				КонецЕсли;
				СтрокаШага.ПроизвольныеЗначения.Вставить("ТаблицаЭталон", ГлобальныеЗначенияТаблиц.ТаблицаЭталон);
				СтрокаШага.ПроизвольныеЗначения.Вставить("ТаблицаТекущееЗначение", ГлобальныеЗначенияТаблиц.ТаблицаТекущееЗначение);
			КонецЕсли;

			Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
				ТекстСообщения = "Шаг (%1) не выполнен. Номер строки в фиче %2";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекШаг.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", XMlСтрока(ТекШаг.НомерСтрокиВФиче));
				ВывестиВЛогФайл(ТекстСообщения);
				ВывестиВЛогФайл("Failed: " + СтрОшибка);
			КонецЕсли;

			ОстановитьЗаписьВидеоОдногоШага();

			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ЗаписатьЛогОшибки(СтрокаСценария, СтрокаШага, СтрОшибка, ИнфоОбОшибке, ОписаниеОшибкиШага);
			КонецЕсли;

			Если Объект.ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки Тогда
				ПоказатьКолонкуСНомеромСтрокиДерева();
			КонецЕсли;
		КонецЕсли;

	КонецПопытки;

	ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);

	РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтрокаШага.ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - РезультатПрохожденияШага.ВремяНачала) / 1000;
	Если ШагВыполнен Тогда
		Если Не Объект.ОстановитьВыполнениеШагов Тогда
			СтрокаШага.Статус = "Success";
			СтрокаШага.ТипКартинки = 4;
			РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		КонецЕсли;

		ПерейтиКВыполнениюСледующегоШага(, , ИдСледующегоШага);
	Иначе

		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария);

		СтрокаШага = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);

		Если ШагНеРеализован Тогда
			СтрокаШага.Статус = "Pending";
			СтрокаШага.ТипКартинки = 6;
			Если Объект.ПриравниватьPendingКFailed Тогда
				СтатусЗапускаСценариев = Ложь;
			КонецЕсли;
		Иначе
			СтатусЗапускаСценариев = Ложь;
			СтрокаШага.Статус      = "Failed";
			СтрокаШага.ТипКартинки = 5;
			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли;
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки", СтрОшибка);
		РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
		РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);

		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", СтрОшибка);
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);

		СтрокаСценария.Статус         = СтрокаШага.Статус;
		СтрокаСценария.ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - РезультатПрохожденияТестовСценария.ВремяНачала) / 1000;

		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ПризнакРучногоВыполненияШага = Ложь;
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);

		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;
			СтрокаСценария.Статус  = "Failed";

			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);

			ВывестиВЛогФайл("Ошибка в процедуре ПередОкончаниемСценария().");
			ВывестиВЛогФайл("Описание ошибки: " + ОписаниеОшибки);

			ПроверитьФлагОстановкаПриВозникновенииОшибки();
		КонецЕсли;

		ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги, ТекИД_ШагаВМассиве, РезультатПрохожденияТестовШагов);
		ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;

		ОстановитьЗаписьВидеоОдногоШага();
		ПризнакРучногоВыполненияШага = Ложь;

		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());

		Если СтрокаСценария.Статус = "Failed" и Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибки(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе
			ДействияПослеПолученияРезультатаПрохожденияТестовСценария(РезультатПрохожденияТестовСценария);
			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки)
	Если ТекИД_ШагаВМассиве = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВсеСценарииВыполнены() Тогда
		Возврат;
	КонецЕсли;

	Если ТекИД_ШагаВМассиве >= 0 Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		ТекШаг.Вставить("ШагСчитаетсяУпавшим", Истина);
		ТекШаг.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

//работа с видео - начало

&НаКлиенте
Функция ЗагрузитьФайлВМассив(Знач ИмяФайла, РезМассив = Неопределено)
	Если РезМассив <> Неопределено Тогда
		Массив = РезМассив;
	Иначе
		Массив = Новый Массив;
	КонецЕсли;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Массив.Добавить(Стр);
	КонецЦикла;

	Текст.Закрыть();

	Возврат Массив;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыЗаписиВидео()
	ПараметрыВидео = Новый Структура;
	ПараметрыВидео.Вставить("КаталогOutputИнструкцияВидео", Объект.КаталогOutputИнструкцияВидео);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", Объект.ЗаписьВидеоКомандаНачатьЗаписьВидео);
	ПараметрыВидео.Вставить("ЗаписьВидеоФайлКурсораМышки", Объект.ЗаписьВидеоФайлКурсораМышки);
	ПараметрыВидео.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", Объект.ЗаписьВидеоКаталогДляВременныхФайлов);
	ПараметрыВидео.Вставить("ЗаписьВидеоФайлВодянойЗнак", Объект.ЗаписьВидеоФайлВодянойЗнак);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаFfmpeg", Объект.ЗаписьВидеоКомандаFfmpeg);
	ПараметрыВидео.Вставить("ЗаписьВидеоКомандаConvert", Объект.ЗаписьВидеоКомандаConvert);
	ПараметрыВидео.Вставить("ЗаписьВидеоКаталогМузыки", Объект.ЗаписьВидеоКаталогМузыки);
	ПараметрыВидео.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Объект.ЗаписьВидеоДелатьНаложениеTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоПутьКДвижкуTTS", Объект.ЗаписьВидеоПутьКДвижкуTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоИмяTTS", Объект.ЗаписьВидеоИмяTTS);
	ПараметрыВидео.Вставить("ЗаписьВидеоСловарьЗамен", Объект.ЗаписьВидеоСловарьЗамен);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭкранШирина", Объект.ЗаписьВидеоЭкранШирина);
	ПараметрыВидео.Вставить("ЗаписьВидеоЭкранВысота", Объект.ЗаписьВидеоЭкранВысота);
	ПараметрыВидео.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Объект.ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм);
	ПараметрыВидео.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Объект.ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы);

	ПараметрыВидео.Вставить("ЗаписьВидеоКоличествоКадров", Объект.ЗаписьВидеоКоличествоКадров);
	ПараметрыВидео.Вставить("DebugLog", Объект.DebugLog);
	ПараметрыВидео.Вставить("Ванесса", ЭтаФорма);
	ПараметрыВидео.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	ПараметрыВидео.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);

	ПараметрыВидео.Вставить("ЭтоИнициализация", Ложь);

	//уменьшим разрешение экрана, если оно указано больше чем реальное
	ИнформацияЭкранаКлиента = Вычислить("ПолучитьИнформациюЭкрановКлиента()[0]");
	Ширина = ИнформацияЭкранаКлиента.Ширина;
	Высота = ИнформацияЭкранаКлиента.Высота;
	Если (Ширина % 2) = 1 Тогда //нечетное
		Ширина = Ширина - 1;
	КонецЕсли;
	Если (Высота % 2) = 1 Тогда //нечетное
		Высота = Высота - 1;
	КонецЕсли;

	Если Ширина < Объект.ЗаписьВидеоЭкранШирина Тогда
		ПараметрыВидео.Вставить("ЗаписьВидеоЭкранШирина", Ширина);
	КонецЕсли;
	Если Высота < Объект.ЗаписьВидеоЭкранВысота Тогда
		ПараметрыВидео.Вставить("ЗаписьВидеоЭкранВысота", Высота);
	КонецЕсли;

	Возврат ПараметрыВидео;
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗаписьВидео()
	Если НЕ Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("МассивСценариевДляВыполнения", МассивСценариевДляВыполнения);
	ПараметрыВидео.Вставить("МассивСтрокДереваДанныеФормы", МассивСтрокДереваДанныеФормы);

	Если СтатусЗапускаСценариев Тогда //если были упавшие шаги, то делать видео не надо
		ПодключитьБиблиотекуРаботыСВидео();
		МодульРаботыСВидео.ЗавершитьЗаписьВидео(ПараметрыВидео);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОстановитьЗаписьВидеоОдногоШага()
	Если Не Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;

	Если Не Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.ОстановитьЗаписьВидеоОдногоШага(ПараметрыВидео);
	Объект.ИдетЗаписьВидео = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьВидеоОдногоШага(ТекИД_СценарияВМассиве, ТекИД_ШагаВМассиве, ТекШаг)
	Если Не Объект.СоздаватьИнструкциюВидео Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ИдетЗаписьВидео Тогда
		Возврат;
	КонецЕсли;

	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;

	Если ТекШаг.Свойство("ИгнорироватьШагВАвтоинструкции") Тогда
		Если ТекШаг.ИгнорироватьШагВАвтоинструкции Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("ТекИД_СценарияВМассиве", ТекИД_СценарияВМассиве);
	ПараметрыВидео.Вставить("ТекИД_ШагаВМассиве", ТекИД_ШагаВМассиве);
	ПараметрыВидео.Вставить("ТекШаг", ТекШаг);

	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.НачатьЗаписьВидеоОдногоШага(ПараметрыВидео);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодготовкуКЗаписиВидео()

	//проверим разрешение экрана

	ПараметрыВидео = ПолучитьПараметрыЗаписиВидео();
	ПараметрыВидео.Вставить("ЭтоИнициализация", Истина);
	ПодключитьБиблиотекуРаботыСВидео();
	МодульРаботыСВидео.Инициализация(ПараметрыВидео);

	ПараметрыВидео.Вставить("МассивСценариевДляВыполнения", МассивСценариевДляВыполнения);

КонецПроцедуры

//работа с видео - окончание

&НаКлиенте
Функция ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(ЭлементДерева)
	ТекРодитель          = ЭлементДерева.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЭлементыРодителя     = ТекРодитель.ПолучитьЭлементы();
	ИдВКоллекцииРодителя = ЭлементыРодителя.Индекс(ЭлементДерева);

	Если ЭлементыРодителя.Количество() - 1 >= (ИдВКоллекцииРодителя + 1) Тогда
		//значит это следующая строка
		Возврат ЭлементыРодителя[ИдВКоллекцииРодителя + 1].ПолучитьИдентификатор();
	КонецЕсли;

	Возврат ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(ТекРодитель);

КонецФункции

&НаКлиенте
Процедура ОпределитьСледующуюСтрокуДереваДляВыполнения(ЭлементыДерево)
	Если Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "Условие"
		Или Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "УсловиеИначеЕсли"
		Или  Элементы.ДеревоТестов.ТекущиеДанные.ДопТип = "Цикл"	 Тогда
		Если НЕ Объект.РезультатУсловия Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ОпределитьВозможнуюСледующуюСтрокуДереваПоЭлементуДерева(Элементы.ДеревоТестов.ТекущиеДанные);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТекРодитель = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьРодителя();
	Если ТекРодитель.ДопТип = "Цикл" Тогда
		ЭлементыРодителя = ТекРодитель.ПолучитьЭлементы();
		ЭлементыСтроки   = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьЭлементы();
		Если ЭлементыРодителя.Индекс(Элементы.ДеревоТестов.ТекущиеДанные) = ЭлементыРодителя.Количество() - 1
			И    ЭлементыСтроки.Количество() = 0
			Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ТекРодитель.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Пока Истина Цикл
		ТекНомерСтроки                      = Элементы.ДеревоТестов.ТекущаяСтрока;
		Элементы.ДеревоТестов.ТекущаяСтрока = Элементы.ДеревоТестов.ТекущаяСтрока + 1;
		Если Элементы.ДеревоТестов.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = ТекНомерСтроки;
			Прервать;
		КонецЕсли;
		Если Элементы.ДеревоТестов.ТекущиеДанные.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда
			Продолжить;
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "Область" Тогда
			Если НЕ ЗначениеЗаполнено(Элементы.ДеревоТестов.ТекущиеДанные.ДопТип) Тогда
				Продолжить;
			КонецЕсли;

		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "ШагСценарий" Тогда
			Продолжить;
		ИначеЕсли Элементы.ДеревоТестов.ТекущиеДанные.Тип = "Сценарий" Тогда
			Продолжить;
		КонецЕсли;

		РазвернутьСтрокуДерева(Элементы.ДеревоТестов.ТекущиеДанные);

		Прервать;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СделатьСообщениеВсеСценарииОбработаны()
	Если СтатусЗапускаСценариев Тогда
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("$Выполнение сценариев закончено. Ошибок не было.$"));
	Иначе
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("$Выполнение сценариев закончено. БЫЛИ ОШИБКИ.$"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВыполненияСценариевОбработчикОжидания()
	ФлагСценарииВыполнены = Истина;
	Если ЗначениеЗаполнено(ФайлФлагВыполненияСценариев) Тогда
		ЗТ = Новый ЗаписьТекста(ФайлФлагВыполненияСценариев, "UTF-8", , Истина);
		ЗТ.ЗаписатьСтроку("");
		ЗТ.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВыполненияСценариев()
	ПодключитьОбработчикОжидания("УстановитьФлагиВыполненияСценариевОбработчикОжидания", 0.1, Истина);
	Если Объект.РежимСамотестирования Тогда
		ПодключитьОбработчикОжидания("РазвернутьДерево", 0.2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоСценария()

	ОстановитьЗаписьВидеоОдногоШага();
	ПризнакРучногоВыполненияШага = Ложь;

	Если ПрекратитьВыполнениеВсехСценариев Тогда
		СделатьСообщениеВсеСценарииОбработаны();
		Объект.ИдетВыполнениеСценариев = Ложь;
		ОбновитьСтатусКнопкиВыполнитьСценарии();
		УстановитьФлагиВыполненияСценариев();
		Возврат;
	КонецЕсли;

	Если Объект.РежимВыполненияОдногоШага И ТекИД_СценарияВМассиве >= 0 Тогда
			Объект.ИдетВыполнениеСценариев = Ложь;
			ОбновитьСтатусКнопкиВыполнитьСценарии();
			ОпределитьСледующуюСтрокуДереваДляВыполнения(Элементы.ДеревоТестов);
			УстановитьФлагиВыполненияСценариев();
			Возврат;
		КонецЕсли;

	Отладка("ТекИД_СценарияВМассиве до " + ТекИД_СценарияВМассиве);

	ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;

	Отладка("ТекИД_СценарияВМассиве после " + ТекИД_СценарияВМассиве);
	Отладка("ВсеСценарииВыполнены() " + ВсеСценарииВыполнены());
	Отладка("МассивСценариевДляВыполнения.Количество() " + (МассивСценариевДляВыполнения.Количество() - 1));
	Отладка("ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество() - 1 " +
		(ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество() - 1));

	ПодключитьОбработчикОжидания("АсинхронноВыполнитьСценарий", Объект.ИнтервалВыполненияШага, Истина);
	// АсинхронноВыполнитьСценарий();
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьСледующуюСтрокуДерева()
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	Если (Шаги.Количество() - 1) >= ТекИД_ШагаВМассиве Тогда
		Если Объект.РежимВыполненияОдногоШага Тогда
			СтрокаШага = НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиШага);
			Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
		Иначе
			СтрокаШага = МассивСтрокДереваДанныеФормы[Шаги[ТекИД_ШагаВМассиве].СтрокаШага];
			Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоШага(ВыполнитьШагЧерезТаймер = Неопределено, НадоОбновитьСтатусШага = Ложь,
		ИдСледующегоШага = Неопределено)

	Если Объект.ОстановитьВыполнениеШагов Или ТекИД_СценарияВМассиве = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПрекратитьВыполнениеВсехСценариев Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;

	Если (ТекИД_СценарияВМассиве <> Неопределено) И (ТекИД_СценарияВМассиве >= 0)
			И (ТекИД_ШагаВМассиве >= 0) И Не ВсеСценарииВыполнены() Тогда

		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];

		Если ТекШаг.ШагСчитаетсяУпавшим Тогда
			СтатусЗапускаСценариев = Ложь;

			ИДСтрокиШага                       = ТекШаг.СтрокаШага;
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

			СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
			СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);

			СтрокаШага.Статус      = "Failed";
			СтрокаШага.ТипКартинки = 5;
			СтрокаСценария.ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - РезультатПрохожденияТестовСценария.ВремяНачала) / 1000;
			СтрокаСценария.Статус  = СтрокаШага.Статус;
			АдресСнипета           = ТекШаг.АдресСнипета;
			ИмяПроцедуры           = ТекШаг.СтрокаРеальнойПроцедуры;

			ТекстСообщения = "Шаг (%1) не выполнен.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекШаг.Имя);
			СделатьСообщение(ТекстСообщения);

			Если ЗначениеЗаполнено(ТекШаг.ОписаниеОшибки) Тогда
				ОписаниеОшибки = ТекШаг.ОписаниеОшибки;
			Иначе
				ОписаниеОшибки = ОписаниеОшибки();
			КонецЕсли;

			ПолныйПутьФичи = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаСценария);
			ИмяСценария = СтрокаСценария.Имя;
			НомерСтрокиВФиче = XMlСтрока(ТекШаг.НомерСтрокиВФиче);
			ИнфоОбОшибке = Неопределено;

			ОписаниеОшибки = СформироватьОписаниеОшибки(ОписаниеОшибки, АдресСнипета, ИмяПроцедуры, ИнфоОбОшибке,
				ПолныйПутьФичи, ИмяСценария, НомерСтрокиВФиче);

			СтрокаСценария.ТекстОшибки = ОписаниеОшибки;
			СтрокаШага.ТекстОшибки     = ОписаниеОшибки;

			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];

			РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
			РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияШага.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);

			СделатьСообщение(ОписаниеОшибки);

			ОписаниеОшибкиШага = ПолучитьТекстСообщенияПользователю("$Шаг$") + " (" + ТекШаг.Имя + ") " + ПолучитьТекстСообщенияПользователю("$не выполнен$") + ".";
			Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
				ЗаписатьЛогОшибки(СтрокаСценария, СтрокаШага, ОписаниеОшибки, ИнфоОбОшибке, ОписаниеОшибкиШага);
			КонецЕсли;

			ВывестиВЛогФайл("Failed: " + ОписаниеОшибки);

			БылаОшибка     = Ложь;
			ОписаниеОшибки = "";
			ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);

			СтрокаСценария.Статус = "Failed";
			СтрокаСценария.ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - РезультатПрохожденияТестовСценария.ВремяНачала) / 1000;
			Если БылаОшибка Тогда
				РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			КонецЕсли;
			ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;

			ОстановитьЗаписьВидеоОдногоШага();

			ПроверитьФлагОстановкаПриВозникновенииОшибки();

			Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
				СделатьСкриншотВозникновенияОшибки(СтрокаШага, СтрокаСценария, РезультатПрохожденияТестовСценария);
			Иначе
				ДействияПослеПолученияРезультатаПрохожденияТестовСценария(РезультатПрохожденияТестовСценария);

				ПерейтиКВыполнениюСледующегоСценария();
			КонецЕсли;

			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если НадоОбновитьСтатусШага Тогда
		Если ТекИД_ШагаВМассиве >= 0 Тогда

			Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];

			ИДСтрокиШага                       = ТекШаг.СтрокаШага;
			ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

			СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);
			СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);

			СтрокаШага.Статус = "Success";
			СтрокаШага.ТипКартинки = 4;
			СтрокаСценария.ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - РезультатПрохожденияТестовСценария.ВремяНачала) / 1000;

			РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);

			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество() - 1];
			РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияШага.Вставить("Статус", СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);

			СтрокаШага.ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - РезультатПрохожденияШага.ВремяНачала) / 1000;
		КонецЕсли;
	КонецЕсли;

	Если ТекИД_ШагаВМассиве = -1 Тогда
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	ИначеЕсли 	ТекИД_ШагаВМассиве = ТекИД_ВыполненногоШагаВМассиве Тогда // это надо т.к. в определенных случаях таймер, подключающий следующий шаг может не сработать
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	КонецЕсли;

	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;

	Если ИдСледующегоШага <> Неопределено Тогда
		Если ИдСледующегоШага.ИД <> Неопределено Тогда
			//значит явно указано с какого шага надо продолжить
			Если ИдСледующегоШага.ИскатьПоИдСтроки Тогда
				НашлиШаг = Ложь;
				Для Ккк = ТекИД_ШагаВМассиве - 1 По Шаги.Количество() - 1 Цикл

					Если ИдСледующегоШага.ИД = Шаги[Ккк].СтрокаШага Тогда
						//нашли нужный ИД
						ТекИД_ШагаВМассиве = Ккк;
						НашлиШаг           = Истина;
						Прервать;
					КонецЕсли;

					Если ИдСледующегоШага.ИД < Шаги[Ккк].СтрокаШага Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;

				Если Не НашлиШаг Тогда
					Пока Истина Цикл
						ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве - 1;
						Если ТекИД_ШагаВМассиве < 0 Тогда
							Прервать;
						КонецЕсли;

						Если ИдСледующегоШага.ИД = Шаги[ТекИД_ШагаВМассиве].СтрокаШага Тогда
							//нашли нужный ИД
							НашлиШаг           = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				Если Не НашлиШаг Тогда
					ВызватьИсключение "Не смог определить следующий шаг для выполнения.";
				КонецЕсли;

			Иначе
				ТекИД_ШагаВМассиве = ИдСледующегоШага.ИД;
			КонецЕсли;
		Иначе
			//это значит, что далее некуда переходить
			//поэтому ставим ТекИД_ШагаВМассиве таким, чтобы сработало правило, что выполнены все шаги
			ТекИД_ШагаВМассиве = Шаги.Количество();
		КонецЕсли;
	КонецЕсли;

	Если (Шаги.Количество() - 1) < ТекИД_ШагаВМассиве Тогда
		//значит все шаги выполнены, запускаем следующий сценарий

		ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария   = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);

		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария, БылаОшибка, ОписаниеОшибки);

		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);
		ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;
		СтрокаСценария.ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - РезультатПрохожденияТестовСценария.ВремяНачала) / 1000;

		Если БылаОшибка Тогда
			СтатусЗапускаСценариев = Ложь;
			СтрокаСценария.Статус  = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);

			ВывестиВЛогФайл("Failed: " + ОписаниеОшибки);
		КонецЕсли;

		ОстановитьЗаписьВидеоОдногоШага();

		Если СтрокаСценария.Статус = "Failed" и Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибки("ПередОкончаниемСценария", СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе
			ДействияПослеПолученияРезультатаПрохожденияТестовСценария(РезультатПрохожденияТестовСценария);

			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Если ТекИД_ШагаВМассиве >= 0 Тогда
		//логируем выполненный шаг
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];

		Если НЕ ТекШаг.ЭтоШагКонтекста Тогда
			//тут надо сделать запись одного шага, плюс записать для каждого шага файл параметров: ИД, строка субтитров, файлTTS если есть

			НадоОстановитьЗаписьЭтогоШагаИНачатьСледуюущий = Истина;
			Если ТекШаг.Свойство("ВнутриГруппыКотораяРаботаетКакОдинШаг") Тогда
				Если ТекШаг.ВнутриГруппыКотораяРаботаетКакОдинШаг Тогда
					НадоОстановитьЗаписьЭтогоШагаИНачатьСледуюущий = Ложь;

					Если ТекШаг.ПервыйВГруппеШагов Тогда
						НадоОстановитьЗаписьЭтогоШагаИНачатьСледуюущий = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если НадоОстановитьЗаписьЭтогоШагаИНачатьСледуюущий Тогда
				ОстановитьЗаписьВидеоОдногоШага();
				НачатьЗаписьВидеоОдногоШага(ТекИД_СценарияВМассиве, ТекИД_ШагаВМассиве, ТекШаг);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ВыполнятьШагиАссинхронно Тогда
		АктивизироватьСледующуюСтрокуДерева();
	КонецЕсли;

	ИнтервалДляВыполненияШага = Объект.ИнтервалВыполненияШага;
	Если Объект.ИдетЗаписьВидео Тогда
		Если ЭтоПрерывающйВидеоШаг(ТекШаг) Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;

		Если ТекШаг.ЭтоШагКонтекста Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;

		Если МассивTTS <> Неопределено Тогда
			ИнтервалДляВыполненияШага = 0.1;
		КонецЕсли;

	КонецЕсли;

	Если ВыполнитьШагЧерезТаймер = Истина Тогда
		//вызвываем шаг через таймер, чтобы дать всем формам прорисоваться
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина);
	ИначеЕсли НЕ Объект.ВыполнятьШагиАссинхронно И СчетчикШаговБезТаймера >= МаксСчетчикШаговБезТаймера Тогда
		СчетчикШаговБезТаймера = 1;
		//вызвываем шаг через таймер, чтобы дать всем формам прорисоваться
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина);
	ИначеЕсли НЕ Объект.ВыполнятьШагиАссинхронно Тогда
		СчетчикШаговБезТаймера = СчетчикШаговБезТаймера + 1;
		ВыполнитьШаг(); //просто вызываем следующий шаг
	Иначе
		//вызываем шаг через таймер, чтобы дать всем формам прорисоваться
		ПодключитьОбработчикОжидания("ВыполнитьШаг", ИнтервалДляВыполненияШага, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетАллюр(РезультатПрохожденияТестовСценария)

	СтруктураОФ = Новый Структура;

	ИДСтроки = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;

	СтруктураОФ.Вставить("РезультатПрохожденияТестовСценария", РезультатПрохожденияТестовСценария);
	СтруктураОФ.Вставить("ИДСтрокиДерева", ИДСтроки);
	СтруктураОФ.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);

	СформироватьОтчетАллюрСервер(СтруктураОФ);

	ПутьКаталогаРодителяОтчетовАллюр = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputAllure);
	ПутьКаталогаРодителяОтчетовАллюрСоСлешем = ДополнитьСлешВПуть(ПутьКаталогаРодителяОтчетовАллюр);

	Если Объект.ДелатьСкриншотПриВозникновенииОшибки
			И РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") Тогда

		КаталогOutputСкриншотыСоСлешем = ДополнитьСлешВПуть(Объект.КаталогOutputСкриншоты);
		Для Каждого СтруктураСкриншот Из РезультатПрохожденияТестовСценария.МассивСкриншотов Цикл
			ПутьКФайлу = ПутьКаталогаРодителяОтчетовАллюрСоСлешем + СтруктураСкриншот.ИмяФайла;
			КопироватьФайлКомандаСистемы(КаталогOutputСкриншотыСоСлешем + СтруктураСкриншот.ИмяФайла, ПутьКФайлу); //TODO пожиратель времени
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОФ.Свойство("МассивXMLОтчетаAllure") Тогда
		МассивXMLОтчетаAllure = СтруктураОФ.МассивXMLОтчетаAllure;
		Для каждого Элем Из МассивXMLОтчетаAllure Цикл
			ИмяФайлаXML           = ПутьКаталогаРодителяОтчетовАллюрСоСлешем + Элем.РеальноеИмяФайла;
			ФайлXMLДвоичныеДанные = Элем.ФайлXMLДвоичныеДанные;
			ФайлXMLДвоичныеДанные.Записать(ИмяФайлаXML);

			ТекстСообщения = "Файл отчета Allure-report (%1) записан.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайлаXML);
			Отладка(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги, ТекИД, РезультатПрохожденияТестовШагов)
	Ид = ТекИД;
	Пока Истина Цикл
		Ид = Ид + 1;
		Если Шаги.Количество() < (Ид + 1) Тогда
			Прервать;
		КонецЕсли;

		ТекШаг = Шаги[Ид];

		РезультатПрохожденияШага = Новый Структура;
		РезультатПрохожденияШага.Вставить("Имя", ТекШаг.Имя);
		РезультатПрохожденияШага.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки", "Пропущен");
		РезультатПрохожденияШага.Вставить("Статус", "Skipped");
		РезультатПрохожденияШага.Вставить("ИДСтроки", ТекШаг.СтрокаШага);
		РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", ТекШаг.ЭтоШагКонтекста);

		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);

	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева)
	Если СтрокаДерева.Тип = "Фича" Тогда
		Возврат СтрокаДерева.ПолныйПуть;
	КонецЕсли;

	Возврат ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева.ПолучитьРодителя());
КонецФункции

&НаКлиенте
Функция ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета)
	ИД = КоллекцияИменКонтекстовОбработок.Получить(УниверсальноеПолноеИмяФайла(АдресСнипета, Истина)); //TODO оптимизировать
	Если ИД = Неопределено Тогда
		//Скорее всего это обработка не содержащая в себе тесты.
		Возврат Неопределено;
	Иначе
		ОбработкаТеста = ПолучитьКонтекстТестаПоИДФайла(ИД, АдресСнипета);
	КонецЕсли;

	Возврат ОбработкаТеста;
КонецФункции

&НаКлиенте
// ПолучитьКонтекстТестаПоИДФайла
//
// Параметры:
//   ИД - Число - индекс обработки теста в таблице ТаблицаКонтекстовОбработок
//   ИмяФайла - Строка - исходный путь файла шагов
//   ВерсияФайла - Строка - версия файла. Необязательно
//   АдресВХранилище - Строка - адрес хранения на сервере. Необязательно
//
//  Возвращаемое значение:
//   Произвольный - упр.форма обработки теста
//
Функция ПолучитьКонтекстТестаПоИДФайла(Знач ИД, Знач ИмяФайла, Знач ВерсияФайла = Неопределено,
		Знач АдресВХранилище = Неопределено)

	ФормаОбработки = Неопределено;
	Если ИД <> Неопределено Тогда
		ФормаОбработки = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;
	Если ФормаОбработки = Неопределено Тогда
	 	Файл = Новый Файл(ИмяФайла);
		Если ПодключитьКонтекстОбработкиКлиент(Файл, ВерсияФайла, АдресВХранилище) Тогда
			ИД = ТаблицаКонтекстовОбработок.Количество() - 1;
			ФормаОбработки = ТаблицаКонтекстовОбработок[ИД].Обработка;
		КонецЕсли;
	КонецЕсли;

	Возврат ФормаОбработки;
КонецФункции

&НаКлиенте
// ПолучитьКонтекстТестаПоУниверсальномуИмениФайла
//
// Параметры:
//   ИмяФайла - Строка - исходный путь файла шагов
//   УниверсальноеПолноеИмяФайлаШага - Строка - универсальный путь файла шагов
//   ВерсияФайла - Строка - версия файла. Необязательно
//   АдресВХранилище - Строка - адрес хранения на сервере. Необязательно
//
//  Возвращаемое значение:
//   Число - индекс обработки теста в таблице ТаблицаКонтекстовОбработок
//
Функция ПолучитьКонтекстТестаПоУниверсальномуИмениФайла(Знач ИмяФайла, Знач УниверсальноеПолноеИмяФайлаШага,
		Знач ВерсияФайла = Неопределено, Знач АдресВХранилище = Неопределено)

	ИД = КоллекцияИменКонтекстовОбработок.Получить(УниверсальноеПолноеИмяФайлаШага);
	Если ИД = Неопределено Тогда
		Файл = Новый Файл(ИмяФайла);
		Если НЕ ПодключитьКонтекстОбработкиКлиент(Файл, ВерсияФайла, АдресВХранилище) Тогда
			Возврат Неопределено;
		КонецЕсли;

		ИД = КоллекцияИменКонтекстовОбработок.Получить(УниверсальноеПолноеИмяФайлаШага);
	КонецЕсли;

	Возврат ИД;
КонецФункции

&НаКлиенте
Процедура ВызватьМетодСценарияЕслиОнЕсть(СтрокаДереваСценария, ИмяПроцедуры, МассивПараметров = Неопределено,
	БылаОшибка = Ложь, ОписаниеОшибки = Неопределено, СлужебныеДанныеСценария = Неопределено)

	ИмяФичаФайла = Неопределено;
	Если СлужебныеДанныеСценария <> Неопределено Тогда
		СлужебныеДанныеСценария.Свойство("ИмяФичаФайла", ИмяФичаФайла);
	КонецЕсли;

	Если ИмяФичаФайла = Неопределено Тогда
		ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДереваСценария);
		Если ИмяФичаФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если СлужебныеДанныеСценария <> Неопределено Тогда
		СлужебныеДанныеСценария.Вставить("ИмяФичаФайла", ИмяФичаФайла);
	КонецЕсли;

	Файл         = Новый Файл(ИмяФичаФайла);
	КаталогФичи  = Файл.Путь;
	АдресСнипета = УниверсальноеПолноеИмяФайлаШаговФичи(ДополнитьСлешВПуть(КаталогФичи), Файл.ИмяБезРасширения, ЭтоLinux);
	АдресСнипета = УниверсальноеПолноеИмяФайла(АдресСнипета);
	АдресСнипетаНРег = НРег(АдресСнипета);

	ИДМассивИменКонтекстовОбработок = КоллекцияИменКонтекстовОбработок.Получить(АдресСнипетаНРег);
	Если ИДМассивИменКонтекстовОбработок = Неопределено Тогда //значит у фичи нет своей epf
		АдресСнипета_Устаревший = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(ДополнитьСлешВПуть(КаталогФичи),
			Файл.ИмяБезРасширения, ЭтоLinux);
		АдресСнипета_Устаревший = УниверсальноеПолноеИмяФайла(АдресСнипета_Устаревший);
		АдресСнипета_Устаревший_НРег = НРег(АдресСнипета_Устаревший);

		ИДМассивИменКонтекстовОбработок = КоллекцияИменКонтекстовОбработок.Получить(АдресСнипета_Устаревший_НРег);
		Если ИДМассивИменКонтекстовОбработок = Неопределено Тогда //значит у фичи нет своей epf
			Возврат;
		КонецЕсли;

		АдресСнипета = АдресСнипета_Устаревший;
	КонецЕсли;

	ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
	Если ОбработкаТеста = Неопределено Тогда
		//это возможно, если у фичи вообще нет своей обработки и она использует только шаги из других фич
		Возврат;
	КонецЕсли;

	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;

	Попытка
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ОписаниеОшибки, ИмяПроцедуры) Тогда
			ТекстСообщения = "Ошибка в %1. %2";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяПроцедуры);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки);
			Сообщить(ТекстСообщения);
			БылаОшибка     = Истина;
		КонецЕсли;
	КонецПопытки;

	ОбъектКонтекст            = ОбработкаТеста.Контекст;
	ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтметкуВремениДляИмениФайла()
	ТекДат     = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	ТекМилиСек = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Стр = ТекДат + "_" + ТекМилиСек;

	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, ",", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, Символы.НПП, "");

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииHTML()
	Перем КаталогOutputИнструкцияHTML;

	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;

	КаталогOutputИнструкцияHTML = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML);

	Если НЕ ФайлСуществуетКомандаСистемы(КаталогOutputИнструкцияHTML) Тогда
		Стр = "Файл КаталогOutputИнструкцияHTML: " + КаталогOutputИнструкцияHTML + " не существует.";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;

	Если Найти(Прав(КаталогOutputИнструкцияHTML, 1), "\/") > 0 Тогда
		КаталогOutputИнструкцияHTML = Сред(КаталогOutputИнструкцияHTML, СтрДлина(КаталогOutputИнструкцияHTML) - 1);
	КонецЕсли;

	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТекущаяФичаИнструкцииHTML <> МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи Тогда
		Если ТекущаяФичаИнструкцииHTML <> "" Тогда
			СоздатьФайлHTMLИнструкции();
		КонецЕсли;
		ТекущаяФичаИнструкцииHTML = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи;
	Иначе
		Возврат;
	КонецЕсли;

	ИмяФайлаЛогаИнструкцииHTML = СтрЗаменить(ДополнитьСлешВПуть(КаталогOutputИнструкцияHTML) + "InstrHTML_" + ТекущаяФичаИнструкцииHTML + "_" +  ПолучитьОтметкуВремениДляИмениФайла() + "_log.txt", Символы.НПП, "");

	ТД = Новый ТекстовыйДокумент;
	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);
	Для каждого Стр Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ТД.ЗаписатьСтроку("--окончание заголовка--");
	ТД.Закрыть();

КонецПроцедуры

&НаКлиенте
Функция ПрочитатьЗаголовокФичи(ИмяФайла)
	Массив = Новый Массив;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;

		Стр = СокрЛП(Стр);

		Если Лев(Стр, 1) = "@" Тогда
			Продолжить;
		КонецЕсли;
		Если Лев(Стр, 1) = "#" Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(НРег(Стр), "сценарий:") > 0 Тогда
			Прервать;
		КонецЕсли;
		Если Найти(НРег(Стр), "контекст:") > 0 Тогда
			Прервать;
		КонецЕсли;
		Если Найти(НРег(Стр), "scenario:") > 0 Тогда
			Прервать;
		КонецЕсли;
		Если Найти(НРег(Стр), "background:") > 0 Тогда
			Прервать;
		КонецЕсли;

		Массив.Добавить(Стр);

	КонецЦикла;

	Текст.Закрыть();

	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииMarkdown()
	Перем КаталогOutputИнструкцияMarkdown;

	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;

	КаталогOutputИнструкцияMarkdown = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияMarkdown);

	Если НЕ ФайлСуществуетКомандаСистемы(КаталогOutputИнструкцияMarkdown) Тогда
		Стр = "Файл КаталогOutputИнструкцияMarkdown: " + КаталогOutputИнструкцияMarkdown + " не существует.";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;

	Если Найти(Прав(КаталогOutputИнструкцияMarkdown, 1), "\/") > 0 Тогда
		КаталогOutputИнструкцияMarkdown = Сред(КаталогOutputИнструкцияMarkdown, СтрДлина(КаталогOutputИнструкцияMarkdown) - 1);
	КонецЕсли;

	Если МассивСценариевДляВыполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТекущаяФичаИнструкцииMarkdown <> МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи Тогда
		Если ТекущаяФичаИнструкцииMarkdown <> "" Тогда
			СоздатьФайлMarkdownИнструкции();
		КонецЕсли;
		ТекущаяФичаИнструкцииMarkdown = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИмяФичи;
	Иначе
		Возврат;
	КонецЕсли;

	ИмяФайлаЛогаИнструкцииMarkdown = СтрЗаменить(ДополнитьСлешВПуть(КаталогOutputИнструкцияMarkdown) + "InstrMarkdown_" + ТекущаяФичаИнструкцииMarkdown + "_" + ПолучитьОтметкуВремениДляИмениФайла() + "_log.txt", Символы.НПП, "");

	ЗаголовокФичи = ПрочитатьЗаголовокФичи(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ПолныйПутьКФиче);
	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);
	Для каждого Стр Из ЗаголовокФичи Цикл
		ТД.ЗаписатьСтроку(Стр);
	КонецЦикла;
	ТД.ЗаписатьСтроку("--окончание заголовка--");
	ТД.Закрыть();

КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетАллюрСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТзнДанныеАллюрМеток = ОбъектСервер.ДанныеАллюрМеток; //РеквизитФормыВЗначение("ДанныеАллюрМеток");
	СтруктураОФ.вставить("ДанныеАллюрМеток", ОбъектСервер.ДанныеАллюрМеток.Скопировать());

	Дерево = ОбъектСервер.ДеревоТестов;

	ОбъектСервер.СформироватьОтчетАллюр(СтруктураОФ);

	СтруктураОФ.Удалить("ДанныеАллюрМеток");


КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетjUnitСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СформироватьОтчетjUnit(СтруктураОФ);
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетCucumberJsonСервер(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СформироватьОтчетCucumberJson(СтруктураОФ);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСтатусВыполненияСценариевВФайл(Статус, ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);

	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Если Файл.ЭтоКаталог() Тогда
				СделатьСообщение("Не могу выгрузить статус сценариев, т.к. был передан каталог, а не файл.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ФайлКаталог = Новый Файл(Файл.Путь);
	Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталог.ПолноеИмя) Тогда
		ТекстСообщения = "Не могу выгрузить статус сценариев, т.к. каталог %1 не существует.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ФайлКаталог.ПолноеИмя);
		СделатьСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ЗТ = Новый ЗаписьТекста(ПутьКФайлу, "UTF-8", , Ложь);
	Если Статус Тогда
		Стр = "0";
	Иначе
		Если ВозниклаОшибкаВШагеКонтекста или ВозниклаОшибкаПодключенияTestClient Тогда
			Стр = "2";
		Иначе
			Стр = "1";
		КонецЕсли;
	КонецЕсли;

	ЗТ.Записать(Стр);

	ЗТ.Закрыть();

	ТекстСообщения = "Записал файл статуса билда: %1";
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПутьКФайлу);
	СделатьСообщение(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФичиИзПолногоПути(Знач Стр)
	Длина = СтрДлина(Стр);
	Поз   = Длина + 1;

	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр, Длина - Ккк + 1, 1);
		Если Символ = ":" Тогда
			Поз = Длина - Ккк + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	НовСтр = Лев(Стр, Поз - 1);

	Возврат СокрЛП(НовСтр);
КонецФункции

&НаКлиенте
Функция ДобавитьНулей(Парам, КоличествоСимволов)
	Стр = СтрЗаменить(Строка(Парам), Символы.НПП, "");

	Пока СтрДлина(Стр) < КоличествоСимволов Цикл
		Стр = "0" + Стр;
	КонецЦикла;

	Возврат Стр;
КонецФункции

&НаКлиенте
Функция НайтиМакетВКаталогеПроектаСлужебный(ИмяМакета, ИмяФайла)

	Нашли = Ложь;

	СостояниеVanessaADD = ПолучитьСостояниеVanessaADD();
	ИдСценария          = СостояниеVanessaADD.ТекущийСценарий.ИдСценария;

	КаталогСценария = ДобавитьНулей(ИдСценария + 1, 4);
	ДопКаталог      = "";

	// Какой-то старый варинат поиска макета видимо

	Если ФайлСуществуетКомандаСистемы(Объект.КаталогПроекта + "\Файлы\" + КаталогСценария) Тогда

		ДопКаталог = КаталогСценария;

	КонецЕсли;

	ИмяФайла = Объект.КаталогПроекта + "\Файлы\" + ?(ДопКаталог = "", "", ДопКаталог + "\") + ИмяМакета;
	Если НЕ (ЭтоФайлМоксель(ИмяФайла)
			ИЛИ ЭтоФайлДжейсон(ИмяФайла)) Тогда

		ИмяФайла = ИмяФайла + ".mxl";

	КонецЕсли;

	Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда

		Нашли = Истина;

	КонецЕсли;

	// Поиск макета в каталоге проекта

	Если Не Нашли Тогда

		ИмяФайла = Объект.КаталогПроекта + "\" + ИмяМакета;

			Если НЕ (ЭтоФайлМоксель(ИмяФайла)
					ИЛИ ЭтоФайлДжейсон(ИмяФайла)) Тогда

				ИмяФайла = ИмяФайла + ".mxl";

			КонецЕсли;

		Если ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда

			Нашли = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Нашли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФайлМоксель(ИмяФайла)

	ДлинаРасширенияМоксель = 4; // .mxl
	Возврат НРег(Прав(ИмяФайла, ДлинаРасширенияМоксель)) = ".mxl";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФайлДжейсон(ИмяФайла)

	ДлинаРасширенияДжейсон = 5; // .json
	Возврат НРег(Прав(ИмяФайла, ДлинаРасширенияДжейсон)) = ".json";

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументНаСервере(ДвоичныеДанныеИлиПутьФичи, РасширениеФайла = "mxl")
	ИмяВременногоФайла = Неопределено;
	ПутьФайла = ПутьФайлаПоДвоичнымДаннымСервер(ДвоичныеДанныеИлиПутьФичи
                                                    , РасширениеФайла
                                                    , ИмяВременногоФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ПутьФайла);
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
	Возврат ТабличныйДокумент;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстовыйДокументНаСервере(ДвоичныеДанныеИлиПутьФичи, РасширениеФайла = "json")
	ИмяВременногоФайла = Неопределено;
	ПутьФайла = ПутьФайлаПоДвоичнымДаннымСервер(ДвоичныеДанныеИлиПутьФичи
                                                    , РасширениеФайла
                                                    , ИмяВременногоФайла);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьФайла, "UTF-8");
	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
	Возврат ТекстовыйДокумент;
КонецФункции

&НаКлиенте
Функция ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФайлаФичи)
	ФайлФичи  = Новый Файл(ИмяФайлаФичи);

	ФайлEPF   = УниверсальноеПолноеИмяФайлаШаговФичи(ФайлФичи.Путь, ФайлФичи.ИмяБезРасширения, ЭтоLinux);
	ФайлEPF   = УниверсальноеПолноеИмяФайла(ФайлEPF);
	ИД        = КоллекцияИменКонтекстовОбработок.Получить(Нрег(ФайлEPF));

	Если ИД = Неопределено Тогда
		ФайлEPF   = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(ФайлФичи.Путь, ФайлФичи.ИмяБезРасширения, ЭтоLinux);
		ФайлEPF   = УниверсальноеПолноеИмяФайла(ФайлEPF);
		ИД        = КоллекцияИменКонтекстовОбработок.Получить(Нрег(ФайлEPF));
	КонецЕсли;

	Если ИД = Неопределено и ЗначениеЗаполнено(Объект.КаталогВнешнихОбработокEDT) Тогда
		ФайлEPF   = УниверсальноеПолноеИмяФайлаШаговФичи_КаталогВнешнихОбработокEDT(Объект.КаталогВнешнихОбработокEDT, ФайлФичи.ИмяБезРасширения, ЭтоLinux);
		ФайлEPF   = УниверсальноеПолноеИмяФайла(ФайлEPF);
		ИД        = КоллекцияИменКонтекстовОбработок.Получить(Нрег(ФайлEPF));
	КонецЕсли;

	Обработка = ПолучитьКонтекстТестаПоИДФайла(ИД, ФайлEPF);
	Возврат Обработка;
КонецФункции

&НаКлиенте
Процедура ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИД, ОбновитьБезПроверки = Ложь)
	Если ОбновитьБезПроверки или СтрокаСценария.ПолучитьРодителя() = Неопределено Тогда
		//значит надо обновить кеш строк дерева
		МассивСтрокДереваДанныеФормы.Очистить();
		Если Не Объект.РежимВыполненияОдногоШага Тогда
			ЗапомнитьСтрокиДереваДанныеФормы();
			СтрокаСценария = МассивСтрокДереваДанныеФормы[ИД];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуДереваПоДаннымПоиска(ДанныеПоиска)
	ТекИдМассива   = -1;
	ЭлементыДерева = Объект.ДеревоТестов.ПолучитьЭлементы();
	НужныйЭлемент  = Неопределено;
	Пока Истина Цикл
		ТекИдМассива   = ТекИдМассива + 1;

		Если ТекИдМассива > (ДанныеПоиска.Количество() - 1) Тогда
			Прервать;
		КонецЕсли;

		НужныйИдСтроки = ДанныеПоиска[ТекИдМассива];

		Нашли = Ложь;
		Для Каждого Элем Из ЭлементыДерева Цикл
			Если Элем.ИдСтроки = НужныйИдСтроки Тогда
				НужныйЭлемент  = Элем;
				ЭлементыДерева = Элем.ПолучитьЭлементы();
				Нашли          = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Не Нашли Тогда
			ВызватьИсключение "Не найден элемент дерева по данным поиска";
		КонецЕсли;
	КонецЦикла;

	Возврат НужныйЭлемент;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуСценарияИзДанныхФормы(ИД)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиСценария);
	КонецЕсли;

	Возврат МассивСтрокДереваДанныеФормы[ИД];
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуШагаИзДанныхФормы(ИД)
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат НайтиСтрокуДереваПоДаннымПоиска(СтруктураПоискаСтрокДерева.ДанныеПоискаСтрокиШага);
	КонецЕсли;

	Возврат МассивСтрокДереваДанныеФормы[ИД];
КонецФункции

&НаКлиенте
Процедура АсинхронноВыполнитьСценарий()
	Объект.ИнтервалВыполненияШага = Объект.ИнтервалВыполненияШагаЗаданныйПользователем;
	Если  (ОбъектКонтекст = Неопределено) Тогда
		ОбъектКонтекст          = Новый Структура;
	ИначеЕсли НЕ Объект.РежимВыполненияОдногоШага И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШага И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
		ОбъектКонтекст          = Новый Структура;
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаЗапускТестов;

	Если ТекИД_СценарияВМассиве > 0 Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве - 1);
	КонецЕсли;

	ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Ложь;
	Если НЕ Объект.РежимВыполненияОдногоШага Тогда
		ЗафиксированнаяФормаTestClient = Неопределено;
	КонецЕсли;
	ГлобальныеЗначенияТаблиц = Новый Структура;

	ОчиститьКешАктивнойТаблицыTestClient();
	ЗафиксироватьФормуTestClient(Неопределено);

	Если ВсеСценарииВыполнены() Тогда
		//значит все сценарии выполнены
		Объект.ИдетВыполнениеСценариев = Ложь;
		ОбновитьСтатусКнопкиВыполнитьСценарии();

		ПутьКОбработке = ПолучитьПутьКОбработкеКлиент();
		СоздатьФайлHTMLИнструкции();
		СоздатьФайлMarkdownИнструкции();
		ЗавершитьЗаписьВидео();

		Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
			ВывестиСтатистикуКлиент();
		КонецЕсли;

		СделатьСообщениеВсеСценарииОбработаны();

		Если Объект.ДелатьОтчетВФорматеАллюр Тогда
			ТекстСообщения = "Файлы отчетов Allure-report записаны в каталог %1";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Объект.КаталогOutputAllure);
			СделатьСообщение(ТекстСообщения);
			ВывестиВЛогФайл(ТекстСообщения);

			Если Объект.ОтображатьОтчетAllureВБраузере   Тогда
				СоздатьОткрытьОтчетAllureНачало();
			КонецЕсли;
		КонецЕсли;

		Если Объект.ДелатьОтчетВФорматеjUnit Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
			СтруктураОФ.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);
			СтруктураОФ.Вставить("ЭтоОФ", Ложь);

			СформироватьОтчетjUnitСервер(СтруктураОФ);

			Если Объект.ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ИмяСборки             = Объект.ИмяТекущейСборки;
				УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
				ИмяФайлаXML           = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputjUnit)) + ИмяСборки + "-junit.xml";
			Иначе
				ИмяФайлаXML           = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputjUnit)) + "junit.xml";
			КонецЕсли;

			СтруктураОФ.xml.Записать(ИмяФайлаXML);
			ТекстСообщения = "Файл отчета jUnit-report (%1) записан.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайлаXML);
			СделатьСообщение(ТекстСообщения);
			ВывестиВЛогФайл(ТекстСообщения);
		КонецЕсли;

		Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);
			СтруктураОФ.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);
			СтруктураОФ.Вставить("ЭтоОФ", Ложь);

			СформироватьОтчетCucumberJsonСервер(СтруктураОФ);

			Если Объект.ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ИмяСборки             = Объект.ИмяТекущейСборки;
				УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
				ИмяФайлаJson           = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputCucumberJson)) + ИмяСборки + "-CucumberJson.json";
			Иначе
				ИмяФайлаJson           = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputCucumberJson)) + "CucumberJson.json";
			КонецЕсли;

			СтруктураОФ.json.Записать(ИмяФайлаJson);
			ТекстСообщения = "Файл отчета CucumberJson-report (%1) записан.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайлаJson);
			СделатьСообщение(ТекстСообщения);
			ВывестиВЛогФайл(ТекстСообщения);
		КонецЕсли;

		Если Объект.ДелатьОтчетВоВнутреннемФормате Тогда
			//Сформируем отчет для показа пользователю.
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить("МассивРезультатПрохожденияТестовСценария", МассивРезультатПрохожденияТестовСценария);
			СтруктураОФ.Вставить("МассивИДСтрокиДерева", МассивИДСтрокиДерева);

			Если НЕ Объект.ЗапускИзКоманднойСтроки Тогда
				ТабличныйДокумент = СформироватьОтчетВоВнутреннемФормате(СтруктураОФ);
				ТабличныйДокумент.Показать();
			КонецЕсли;

		КонецЕсли;

		Если Объект.ВыгружатьСтатусВыполненияСценариевВФайл Тогда
			ВыгрузитьСтатусВыполненияСценариевВФайл(СтатусЗапускаСценариев, ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев));
		КонецЕсли;

		Если Объект.ЗакрытьTestClientПослеЗапускаСценариев Тогда
			// закроем все TestClient которые были запущены
			Для каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
				Попытка
					Шаг("И я закрываю TestClient """ + СтрокаДанныеКлиентовТестирования.Имя + """");
				Исключение
					//если не получилось закрыть TestClient, это ещё не означает, что есть ошибка
					//возможно он был закрыт штатно в сценарии
					СделатьСообщение(ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;

		Если Объект.НадоЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;

		УстановитьФлагиВыполненияСценариев();

		Возврат; //TODO упростить метод АсинхронноВыполнитьСценарий, т.к. Возврат посередине длинного метода очень нечитабелен!
	КонецЕсли;

	ПодготовитьСозданиеИнструкцииHTML();
	ПодготовитьСозданиеИнструкцииMarkdown();

	ИДСтроки = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;

	РезультатПрохожденияТестовСценария = Новый Структура;
	РезультатПрохожденияТестовСценария.Вставить("ИДСтроки", ИДСтроки);
	РезультатПрохожденияТестовСценария.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовШагов = Новый Массив;
	РезультатПрохожденияТестовСценария.Вставить("РезультатПрохожденияТестовШагов", РезультатПрохожденияТестовШагов);

	ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария, ИДСтроки);

	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;

	СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);

	ОбновитьКешДанныхФормыЕслиЭтоНеобходимо(СтрокаСценария, ИДСтрокиСценария);

	Если Не Объект.РежимВыполненияОдногоШага Тогда
		Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаСценария.ПолучитьИдентификатор();
	КонецЕсли;

	РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);

	ОбработкаСвязаннаяСИсполняемойФичей = Неопределено;
	Если СтрокаСценария.ФичаИмеетСвоюEPF Тогда
		СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);
		ОбработкаСвязаннаяСИсполняемойФичей = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(СтрокаФичи.ПолныйПуть);
	КонецЕсли;

	Если НЕ Объект.РежимВыполненияОдногоШага Тогда
		Сообщить(" ");
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("$Работаю по сценарию$") + ": " + МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;

	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;

	ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаСценария);
	Если Не ЗначениеЗаполнено(ТекущийИсполняемыйФичаФайл)
			Или НЕ СравнитьОбычныйПутьФайлаСУниверсальнымПутемДругогоФайла(ИмяФичаФайла, ТекущийИсполняемыйФичаФайл) Тогда

		ТекущийИсполняемыйФичаФайл = УниверсальноеПолноеИмяФайла(ИмяФичаФайла, Истина);
		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ВывестиВЛогФайл("Фича: " + ИмяФичаФайла);
			Если МассивСценариевДляВыполнения.Количество() > 0 Тогда
				Процент = Цел(ТекИД_СценарияВМассиве / МассивСценариевДляВыполнения.Количество() * 100);
				ВывестиВЛогФайл(Формат(Процент, "ЧЦ=3; ЧДЦ=0; ЧН=") + "% ");
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		ЗаписатьЛогВТекстПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;

	ДобавитьВЛогИнструкцииHTMLНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	ДобавитьВЛогИнструкцииMarkdownНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);

	ТекИД_ШагаВМассиве             = -1;
	ТекИД_ВыполненногоШагаВМассиве = -1;
	ВсёЕщёИдётВыполнениеШагов      = Ложь;

	Если ТекИД_СценарияВМассиве = 0 Тогда
		Если Объект.РежимВыполненияДанногоСценарияСТекущегоШага или Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением Тогда
			Ном = -1;
			Для Каждого Шаг Из МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги Цикл
				Ном = Ном + 1;
				Если Шаг.СтрокаШага = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].ИдСтрокиШагаСКоторогоВыполнятьСценарийСДанногоШага Тогда
					ТекИД_ШагаВМассиве = Ном;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			//тогда надо начать не с первого шага, а с нужного
		КонецЕсли;
	КонецЕсли;

	БылаОшибка = Ложь;
	ОписаниеОшибки = "";
	Если  НЕ Объект.РежимВыполненияОдногоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШага
		И НЕ Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением
		Тогда
		//если надо выполнить ПередНачаломСценария и при этом сделать отладку по шагам - надо поставить брейкпоинт на первом шаге сценарияя
		СлужебныеДанныеСценария = Новый Структура;
		ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередНачаломСценария", , БылаОшибка, ОписаниеОшибки, СлужебныеДанныеСценария);
	КонецЕсли;
	Если БылаОшибка Тогда
		СтатусЗапускаСценариев = Ложь;

		ИДСтрокиСценария      = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария        = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		СтрокаСценария.Статус = "Failed";

		ДействияПослеЗавершенияСценария(СтрокаСценария, , , СлужебныеДанныеСценария);
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Истина;

		Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
			ВывестиВЛогФайл("");
			ВывестиВЛогФайл("Ошибка в процедуре ПередНачаломСценария().");
			ВывестиВЛогФайл("Failed: " + ОписаниеОшибки);
		КонецЕсли;

		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче", СтрокаСценария.НомерСтрокиВФиче);

		ОстановитьЗаписьВидеоОдногоШага();

		Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
			СделатьСкриншотВозникновенияОшибки("ПередНачаломСценария", СтрокаСценария, РезультатПрохожденияТестовСценария);
		Иначе
			ДействияПослеПолученияРезультатаПрохожденияТестовСценария(РезультатПрохожденияТестовСценария);

			ПерейтиКВыполнениюСледующегоСценария();
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ПерейтиКВыполнениюСледующегоШага();
КонецПроцедуры

&НаКлиенте
Функция ВсеСценарииВыполнены()
	Возврат ТекИД_СценарияВМассиве > МассивСценариевДляВыполнения.Количество() - 1;
КонецФункции

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;

	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8, , Истина);

	ТД.ЗаписатьСтроку("НачалоСценария");
	ТД.ЗаписатьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииMarkdownНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;

	ТД = Новый ЗаписьТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8, , Истина);

	ТД.ЗаписатьСтроку("НачалоСценария");
	ТД.ЗаписатьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ЗаписатьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	ТД.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария, ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено Тогда
		МассивИДСтрокиДерева.Добавить(ИДСтроки);
		МассивРезультатПрохожденияТестовСценария.Добавить(РезультатПрохожденияТестовСценария);
	Иначе
		МассивРезультатПрохожденияТестовСценария[ИД] = РезультатПрохожденияТестовСценария;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы)
	Для каждого ЭлементДерева Из ДеревоФормы Цикл
		ИДСтроки = ЭлементДерева.ИДСтроки;
		Пока МассивСтрокДереваДанныеФормы.Количество() - 1 < ИДСтроки Цикл
			МассивСтрокДереваДанныеФормы.Добавить();
		КонецЦикла;
		МассивСтрокДереваДанныеФормы[ИДСтроки] = ЭлементДерева;

		ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормы()
	Если Объект.РежимВыполненияОдногоШага Тогда
		//поиск строки дерева будет происходить по специальной таблице, которая была создана заранее
		Возврат;
	КонецЕсли;

	ДеревоФормы = Объект.ДеревоТестов.ПолучитьЭлементы();
	ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы);
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдСценарияПоСтрокеШагаКлиент(СтрокаДерева, ЭтоПример, ЭтоКонтекст)
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекРодитель = СтрокаДерева;

	Пока Истина Цикл
		Если ТекРодитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		Если ТекРодитель.ДопТип = "Контекст" Тогда
			ЭтоКонтекст = Истина;
			Прервать;
		КонецЕсли;

		Если ТекРодитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;

		Если ТекРодитель.Тип = "Пример" Тогда
			ЭтоПример = Истина;
			Прервать;
		КонецЕсли;

		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;

	Возврат ТекРодитель.ИДСтроки;
КонецФункции

&НаКлиенте
Процедура ПолучитьМассивСценариевДаннойФичи(Дерево, Массив)
	Для Каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Тип = "Сценарий" Тогда
			Массив.Добавить(СтрокаДерева.ИДСтроки);
		КонецЕсли;

		ПолучитьМассивСценариевДаннойФичи(СтрокаДерева, Массив);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФичу()
	Объект.РежимВыполненияДанногоСценарияСТекущегоШага              = Ложь;
	Объект.РежимВыполненияДанногоСценарияСТекущегоШагаСПродолжением = Ложь;
	Объект.РежимВыполненияОдногоШага                                = Ложь;

	СтрокаФичи = Элементы.ДеревоТестов.ТекущиеДанные;
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаФичи);
	Если СтрокаФичи = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Массив     = Новый Массив;
	ПолучитьМассивСценариевДаннойФичи(СтрокаФичи, Массив);

	ВыполнитьСценарии(Массив);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусКнопкиВыполнитьСценарии()
	Если Объект.ИдетВыполнениеСценариев Тогда
		Элементы.кнВыполнитьСценарии.Заголовок = "STOP";
	Иначе
		Элементы.кнВыполнитьСценарии.Заголовок = НСтр("ru = 'Выполнить сценарии'; en = 'Run scenario'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СоздатьДанныеДляПоискаСтрокиШага(СтрокаДерева)
	Массив = Новый Массив;

	ТекРодитель = СтрокаДерева;
	Пока ТекРодитель <> Неопределено Цикл
		Массив.Вставить(0, ТекРодитель.ИдСтроки);
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;

	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура СоздатьСтруктуруПоискаДляСтрокиДерева(СтрокаДерева)
	СтруктураПоискаСтрокДерева = Новый Структура;
	СтруктураПоискаСтрокДерева.Вставить("ДанныеПоискаСтрокиШага", СоздатьДанныеДляПоискаСтрокиШага(СтрокаДерева));

	ЭтоПример       = Ложь;
	ЭтоШагКонтекста = Ложь;
	СтрокаСценария = НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева, ЭтоПример, ЭтоШагКонтекста);
	СтруктураПоискаСтрокДерева.Вставить("ДанныеПоискаСтрокиСценария", СоздатьДанныеДляПоискаСтрокиШага(СтрокаСценария));

	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаСценария);

	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("Имя", СтрокаСценария.Имя);
	ДанныеСценария.Вставить("СтрокаДерева", СтрокаСценария.ИдСтроки);
	ДанныеСценария.Вставить("ИмяФичи", СтрокаФичи.Имя);
	ДанныеСценария.Вставить("ПолныйПутьКФиче", СтрокаФичи.ПолныйПуть);

	Шаги = Новый Массив;
	СтруктураШага = ПолучитьСтруктуруШагаКлиент(СтрокаДерева, СтрокаСценария, СтрокаСценария, ЭтоШагКонтекста);
	Шаги.Добавить(СтруктураШага);
	ДанныеСценария.Вставить("Шаги", Шаги);

	СтруктураПоискаСтрокДерева.Вставить("ДанныеСценария", ДанныеСценария);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивСценариевДляВыполненияКлиент(МассивСценариевДляВыполнения)
	СтруктураСценария = Новый Структура;
	СтруктураСценария.Вставить("Имя", СтруктураПоискаСтрокДерева.ДанныеСценария.Имя);
	СтруктураСценария.Вставить("СтрокаДерева", СтруктураПоискаСтрокДерева.ДанныеСценария.СтрокаДерева);
	СтруктураСценария.Вставить("ИмяФичи", СтруктураПоискаСтрокДерева.ДанныеСценария.ИмяФичи);
	СтруктураСценария.Вставить("ПолныйПутьКФиче", СтруктураПоискаСтрокДерева.ДанныеСценария.ПолныйПутьКФиче);
	СтруктураСценария.Вставить("Шаги", СтруктураПоискаСтрокДерева.ДанныеСценария.Шаги);

	МассивСценариевДляВыполнения.Добавить(СтруктураСценария);
КонецПроцедуры

&НаКлиенте
Функция ЭтуСтрокуМожноИсполнить(СтрокаДерева)
	Если СтрокаДерева.Тип = "Шаг" Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтрокаДерева.Тип = "Область" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ЭтуСтрокуМожноИсполнитьИлиВНейЕстьПодчиненныеИсполняемыеСтроки(СтрокаДерева)
	Если СтрокаДерева.Тип = "Сценарий" Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтрокаДерева.Тип = "Шаг" Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтрокаДерева.Тип = "Область" Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтрокаДерева.Тип = "ШагСценарий" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ОпределитьИдИсполняемойСтрокиДерева(СтрокаДерева, НужнаяСтрока)
	ТекСтрока = СтрокаДерева;

	Если ЭтуСтрокуМожноИсполнить(ТекСтрока) Тогда
		Возврат ТекСтрока.ИдСтроки;
	КонецЕсли;

	Пока Истина Цикл
		ЭлементыДерева = ТекСтрока.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;

		ТекСтрока = ЭлементыДерева[0];
		Если ЭтуСтрокуМожноИсполнить(ТекСтрока) Тогда
			НужнаяСтрока = ТекСтрока;
			Возврат ТекСтрока.ИдСтроки;
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаКлиенте
Функция НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, СтрокаПоиска, НомерСтрокиВФиче, Нашли = Ложь)
	Если НомерСтрокиВФиче = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекИдМассива = НомерСтрокиВФиче - 1 - 1;
	Пока Истина Цикл
		Если ТекИдМассива < 0 Тогда
			Прервать;
		КонецЕсли;

		Стр = СокрЛП(МассивТекстФичи[ТекИдМассива]);

		Если Стр = "" Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;

		Если Лев(Стр, 1) <> "#" Тогда
			Прервать;
		КонецЕсли;

		Стр = Сред(Стр, 2);

		Если НРег(Лев(Стр, СтрДлина(СтрокаПоиска))) <> НРег(СтрокаПоиска) Тогда
			ТекИдМассива = ТекИдМассива - 1;
			Продолжить;
		КонецЕсли;

		//значит нашли нужную строку
		Стр = СокрЛП(Сред(Стр, СтрДлина(СтрокаПоиска) + 1));
		Нашли = Истина;

		Возврат Стр;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока)
	Стр = "";

	НашлиСтрокуДляВычисления = Ложь;
	СтрокаВыражения          = "";

	Для Ккк = 1 По СтрДлина(СлужебнаяСтрока) Цикл
		Символ = Сред(СлужебнаяСтрока, Ккк, 1);
		Если Символ = "[" Тогда
			НашлиСтрокуДляВычисления = Истина;
			Продолжить;
		КонецЕсли;

		Если Символ = "]" Тогда
			НашлиСтрокуДляВычисления = Ложь;
			РезультатВыражения = Вычислить(СтрокаВыражения);
			Стр = Стр + РезультатВыражения;
			СтрокаВыражения = "";
			Продолжить;
		КонецЕсли;

		Если НашлиСтрокуДляВычисления Тогда
			СтрокаВыражения = СтрокаВыражения + Символ;
		Иначе
			Стр = Стр + Символ;
		КонецЕсли;
	КонецЦикла;

	СлужебнаяСтрока = Стр;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(СтрокаДереваГруппа, Параметры, ДопПараметры)
	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();
	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = "Шаг" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить("ВнутриГруппыКотораяРаботаетКакОдинШаг", Истина);
					Шаг.Вставить("ПервыйВГруппеШагов", Ложь);
					Шаг.Вставить("ПоследнийВГруппеШагов", Ложь);

					Если НЕ ДопПараметры.НашлиПервыйШаг Тогда
						Шаг.Вставить("ПервыйВГруппеШагов", Истина);
						Шаг.Вставить("ТекстИнструкция", ДопПараметры.ТекстШагаГруппы);
						Шаг.Вставить("МасштабироватьВВидео", ДопПараметры.МасштабироватьВВидео);
						ДопПараметры.НашлиПервыйШаг = Истина;
					КонецЕсли;

					ДопПараметры.ВременныйШаг = Шаг;

					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ДопПараметры.Уровень = ДопПараметры.Уровень + 1;
		ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(ЭлементГруппы, Параметры, ДопПараметры);
		ДопПараметры.Уровень = ДопПараметры.Уровень - 1;
	КонецЦикла;

	Если ДопПараметры.Уровень = 0 Тогда
		ДопПараметры.ВременныйШаг.Вставить("ПоследнийВГруппеШагов", Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(СтрокаДереваГруппа, Параметры, ДопПараметры)
	ЭлементыГруппы = СтрокаДереваГруппа.ПолучитьЭлементы();
	Для Каждого ЭлементГруппы Из ЭлементыГруппы Цикл
		Если ЭлементГруппы.Тип = "Шаг" Тогда
			Для Каждого Шаг Из Параметры.Сценарий.Шаги Цикл
				Если ЭлементГруппы.ИдСтроки = Шаг.СтрокаШага Тогда
					Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(ЭлементГруппы, Параметры, ДопПараметры);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, Параметры)
	ПредставлениеКвадратнаяСкобкаЛевая  = "__&КвадратнаяСкобкаЛевая__";
	ПредставлениеКвадратнаяСкобкаПравая = "__&КвадратнаяСкобкаПравая__";
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, "\[", ПредставлениеКвадратнаяСкобкаЛевая);
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, "\]", ПредставлениеКвадратнаяСкобкаПравая);

	Если Параметры.Свойство("ОбработкаПараметровШага") Тогда
		Если Параметры.ОбработкаПараметровШага Тогда
			Для Ккк = 1 По Параметры.Шаг.ЗначенияПараметров.Количество() Цикл
				СтрокаЗамены = "%" + XMlСтрока(Ккк);
				СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, СтрокаЗамены, Параметры.Шаг.ЗначенияПараметров[Ккк - 1].Значение.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Параметры.Свойство("ВычислитьВыражения") Тогда
		Если Параметры.ВычислитьВыражения Тогда
			ВычислитьПараметрыВнутриСтроки(СлужебнаяСтрока);
		КонецЕсли;
	КонецЕсли;

	Если Параметры.Свойство("ОбработатьГруппыШаговКакОдинШаг") Тогда
		Если Параметры.ОбработатьГруппыШаговКакОдинШаг Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Уровень", 0);
			ДопПараметры.Вставить("НашлиПервыйШаг", Ложь);
			ДопПараметры.Вставить("ПоследнийШаг", Ложь);
			ДопПараметры.Вставить("ВременныйШаг", Неопределено);
			ДопПараметры.Вставить("ТекстШагаГруппы", СлужебнаяСтрока);
			ДопПараметры.Вставить("МасштабироватьВВидео", Параметры.МасштабироватьВВидео);
			ПроставитьШагамСвойстваГруппировкиПриЗаписиРекурсивно(Параметры.СтрокаДереваГруппа, Параметры, ДопПараметры);
		КонецЕсли;
	КонецЕсли;

	Если Параметры.Свойство("ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции") Тогда
		Если Параметры.ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Уровень", 0);
			ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(Параметры.СтрокаДереваГруппа, Параметры, ДопПараметры);
		КонецЕсли;
	КонецЕсли;

	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, ПредставлениеКвадратнаяСкобкаЛевая, "[");
	СлужебнаяСтрока = СтрЗаменить(СлужебнаяСтрока, ПредставлениеКвадратнаяСкобкаПравая, "]");
КонецПроцедуры

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивТекстФичи, Шаг, Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];

	РодительШага = СтрокаШага.ПолучитьРодителя();
	Если (РодительШага.Тип <> "Область") и (РодительШага.Тип <> "ШагСценарий") Тогда //только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;

	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = 0 Тогда
		//значит этот шаг первый в группе

		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.groupsteps]", РодительШага.НомерСтрокиВФиче, Нашли);
		Если НЕ Нашли Тогда
			Возврат;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СлужебнаяСтрока) Тогда
			//Значит не указан новый текст группы. Оставим прежний.
			СлужебнаяСтрока = РодительШага.Имя;
		КонецЕсли;

		НашлиДирективуНеМасштабироватьШаг = Ложь;
		НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.donotscale]", РодительШага.НомерСтрокиВФиче, НашлиДирективуНеМасштабироватьШаг);

		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ВычислитьВыражения", Истина);
		ПараметрыОбработки.Вставить("ОбработатьГруппыШаговКакОдинШаг", Истина);
		ПараметрыОбработки.Вставить("Шаг", Шаг);
		ПараметрыОбработки.Вставить("Сценарий", Сценарий);
		ПараметрыОбработки.Вставить("СтрокаДереваГруппа", РодительШага);
		ПараметрыОбработки.Вставить("МасштабироватьВВидео", Не НашлиДирективуНеМасштабироватьШаг);
		ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НайтиГруппыШаговКоторыеНадоИгнорировать(МассивТекстФичи, Шаг, Сценарий)
	ИДСтрокиШага = Шаг.СтрокаШага;
	СтрокаШага   = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];

	РодительШага = СтрокаШага.ПолучитьРодителя();
	Если (РодительШага.Тип <> "Область") и (РодительШага.Тип <> "ШагСценарий") Тогда //только эти шаги идут как видеовставки
		Возврат;
	КонецЕсли;

	ЭлементыРодителя = РодительШага.ПолучитьЭлементы();
	Индекс           = ЭлементыРодителя.Индекс(СтрокаШага);
	Если Индекс = 0 Тогда
		//значит этот шаг первый в группе

		Нашли = Ложь;
		СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignorestep]", РодительШага.НомерСтрокиВФиче, Нашли);
		Если НЕ Нашли Тогда
			Возврат;
		КонецЕсли;

		Если Не Сценарий.Свойство("ГруппыКоторыеНадоИгнорировать") Тогда
			Сценарий.Вставить("ГруппыКоторыеНадоИгнорировать", Новый Массив);
		КонецЕсли;

		Сценарий.ГруппыКоторыеНадоИгнорировать.Добавить(РодительШага.ИдСтроки);

		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ПроставитьПодчиненнымШагамИгнорироватьШагВАвтоинструкции", Истина);
		ПараметрыОбработки.Вставить("Шаг", Шаг);
		ПараметрыОбработки.Вставить("Сценарий", Сценарий);
		ПараметрыОбработки.Вставить("СтрокаДереваГруппа", РодительШага);
		ОбработатьУправляющуюСтрокуИнструкции(СлужебнаяСтрока, ПараметрыОбработки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНеНадоМасштабировать(МассивТекстФичи, Шаг, Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.donotscale]", Шаг.НомерСтрокиВФиче, Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;

	Шаг.Вставить("МасштабироватьВВидео", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НайтиШагиКоторыеНадоИгнорировать(МассивТекстФичи, Шаг, Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignorestep]", Шаг.НомерСтрокиВФиче, Нашли);
	Если Не Нашли Тогда
		Возврат;
	КонецЕсли;

	Шаг.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСценарийНадоИгнорировать(МассивТекстФичи, Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignorescenario]", Сценарий.НомерСтрокиВФиче, Нашли);
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;

	Сценарий.Вставить("ИгнорироватьШагВАвтоинструкции", Истина);

	ПараметрыУстановки = Новый Структура;
	ПараметрыУстановки.Вставить("Сценарий", Сценарий);

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Уровень", 0);
	ПроставитьШагамСвойстваИгнорироватьШагВАвтоинструкцииРекурсивно(МассивСтрокДереваДанныеФормы[Сценарий.СтрокаДерева], ПараметрыУстановки, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивТекстФичи, Сценарий)
	Нашли = Ложь;
	СлужебнаяСтрока = НайтиСлужебнуюСтрокуВФичеДляЭтогоШага(МассивТекстФичи, "[autodoc.ignore.scenarioslide]", Сценарий.НомерСтрокиВФиче, Нашли);
	Если НЕ Нашли Тогда
		Возврат;
	КонецЕсли;

	Сценарий.Вставить("ИгнорироватьСлайдСценарияВАвтоинструкции", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИзФичиПараметрыСборкиВидео()
	Если Объект.РежимВыполненияОдногоШага Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Сценарий Из МассивСценариевДляВыполнения Цикл
		МассивФичи = ЗагрузитьФайлВМассив(Сценарий.ПолныйПутьКФиче);

		НайтиПризнакЧтоСценарийНадоИгнорировать(МассивФичи, Сценарий);
		НайтиПризнакЧтоСлайдСценарияНадоИгнорировать(МассивФичи, Сценарий);

		Шаги       = Сценарий.Шаги;
		Для Каждого Шаг Из Шаги Цикл
			Если Шаг.ЭтоШагКонтекста Тогда
				Продолжить;
			КонецЕсли;

			НайтиГруппыШаговКоторыеНадоОбрабатыватьКакОдинШаг(МассивФичи, Шаг, Сценарий);
			НайтиГруппыШаговКоторыеНадоИгнорировать(МассивФичи, Шаг, Сценарий);
			НайтиШагиКоторыеНеНадоМасштабировать(МассивФичи, Шаг, Сценарий);
			НайтиШагиКоторыеНадоИгнорировать(МассивФичи, Шаг, Сценарий);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УбратьВсеЗапрещенныеСимволыИзИмениФайла(Стр)
	Стр = СтрЗаменить(Стр, "<", "");
	Стр = СтрЗаменить(Стр, ">", "");
	Стр = СтрЗаменить(Стр, """", "");
	Стр = СтрЗаменить(Стр, "|", "");
	Стр = СтрЗаменить(Стр, "*", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, "?", "");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлHTMLИнструкции()
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;

	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи            = ПолучитьЗаголовокФичииИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииHTML, СтрокаОкончанияЗаголовка);

	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииHTML, КодировкаТекста.UTF8);

	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;

	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл

		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;

		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			ТекСтруктура.Вставить("МассивШагов", МассивШагов);
			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;

		Поз = Найти(Стр, "=");
		Если Поз = 0 Тогда
			ТекстСообщения = "Странный параметр в логе инструкции HTML: %1";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Стр);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);

		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();

	КонецЦикла;
	ТД.Закрыть();

	КаталогОбъектов = ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML);

	ИмяФайлаДляЗаписи = ДополнитьСлешВПуть(ПреобразоватьПутьСТочкамиКНормальномуПути(Объект.КаталогOutputИнструкцияHTML)) + "Instr_" + ТекущаяФичаИнструкцииHTML + ".HTML";

	Страница = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, КодировкаТекста.UTF8);
	Страница.ЗаписатьСтроку("<html>");
	Страница.ЗаписатьСтроку("<body>");
	Страница.ЗаписатьСтроку("<h3><p  style=""font-size:40px"">");
	Для каждого Стр Из ЗаголовокФичи Цикл
		Страница.ЗаписатьСтроку("<br>" + Стр);
	КонецЦикла;
	Страница.ЗаписатьСтроку("</p></h3>");

	ИДСкриншота  = 0;
	Для каждого Сценарий Из МассивСценариев Цикл
		Страница.ЗаписатьСтроку("<h1><p align=""center"" style=""font-size:35px"">" + Сценарий.ИмяСценария + "</p></h1>");
		ИмяФичи = Сценарий.ИмяФичи;
		УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");
		ИмяСценария = СтрЗаменить(Сценарий.ИмяСценария, " ", "_");
		УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);

		КаталогФичи = ДополнитьСлешВПуть(КаталогОбъектов) + ИмяФичи;
		ФайлКаталогФичи = Новый Файл(КаталогФичи);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталогФичи.ПолноеИмя) Тогда
			СоздатьКаталогКомандаСистемы(КаталогФичи);
		КонецЕсли;

		МассивШагов = Сценарий.МассивШагов;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			ИДСкриншота = ИДСкриншота + 1;
			НомШага = НомШага + 1;
			Страница.ЗаписатьСтроку("");

			СтрокаШага = СтрЗаменить(Шаг.ИмяШага, "\n", Символы.ПС);
			МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(СтрокаШага, Символы.ПС);
			Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
				Стр = МассивСтрок[Ккк];
				Если Ккк = 0 Тогда
					Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px""><b>" + ПолучитьФорматированныйНомер(НомШага, 3) + "</b>. " + Стр + "</p>");
				Иначе
					ЕстьВертЧерта = Ложь;
					Если Найти(Стр, "|") > 0 Тогда
						ЕстьВертЧерта = Истина;
					КонецЕсли;

					Если ЕстьВертЧерта Тогда
						Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px""><pre><font size=""5"" face=""Lucida Console"">" + Стр + "</font></pre></p>");
					Иначе
						Страница.ЗаписатьСтроку("<p align=""left"" style=""font-size:30px"">" + Стр + "</p>");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ФайлСкриншота = Новый Файл(Шаг.Скриншот);
			НовоеИмяФайлаСкриншота = СтрЗаменить(ИмяФичи + "_" + ИДСкриншота + "_" + Лев(ИмяСценария, 30) + "_" + ПолучитьФорматированныйНомер(НомШага, 3) + ФайлСкриншота.Расширение, " ", "_");
			ИмяФайлаСкриншотаВКаталогеФичи = ФайлСкриншота.Путь + СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			ФайлСкриншота = Неопределено;

			ПроцедураПереместитьФайл(Шаг.Скриншот, ИмяФайлаСкриншотаВКаталогеФичи);

			СтрСкриншотаДляHTML = СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			Страница.ЗаписатьСтроку("<img src=" + СтрЗаменить(СтрСкриншотаДляHTML, "\", "/") + ">");
		КонецЦикла;
	КонецЦикла;

	Страница.ЗаписатьСтроку("</body>");
	Страница.ЗаписатьСтроку("/<html>");

	ТекстСообщения = "Записываю %1";
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайлаДляЗаписи);
	Сообщить(ТекстСообщения);
	Страница.Закрыть();

	УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииHTML);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаголовокФичииИзЛогаИнструкции(ИмяФайла, СтрокаОкончанияЗаголовка)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");

	ЗаголовокФичи = Новый Массив;
	Ном = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Ном = Ном + 1;

		Если Стр = "--окончание заголовка--" Тогда
			СтрокаОкончанияЗаголовка = Ном;
			Прервать;
		КонецЕсли;

		ЗаголовокФичи.Добавить(Стр);
	КонецЦикла;

	Текст.Закрыть();

	Возврат ЗаголовокФичи;
КонецФункции

&НаКлиенте
Процедура СоздатьФайлMarkdownИнструкции()
	Если НЕ Объект.СоздаватьИнструкциюMarkdown Тогда
		Возврат;
	КонецЕсли;

	СтрокаОкончанияЗаголовка = 0;
	ЗаголовокФичи            = ПолучитьЗаголовокФичииИзЛогаИнструкции(ИмяФайлаЛогаИнструкцииMarkdown, СтрокаОкончанияЗаголовка);

	ТД = Новый ЧтениеТекста(ИмяФайлаЛогаИнструкцииMarkdown, КодировкаТекста.UTF8);

	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	Ном = 0;
	Стр = ТД.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		Ном = Ном + 1;
		Если Ном <= СтрокаОкончанияЗаголовка Тогда
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;

		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;

			ТекСтруктура.Вставить("МассивШагов", МассивШагов);

			МассивСценариев.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;

			МассивШагов.Добавить(ТекСтруктура);
			Стр = ТД.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;

		Поз = Найти(Стр, "=");
		Если Поз = 0 Тогда
			ТекстСообщения = "Странный параметр в логе инструкции Markdown: %1";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Стр);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ИмяПараметра      = Лев(Стр, Поз - 1);
		ЗначениеПараметра = Сред(Стр, Поз + 1);

		ТекСтруктура.Вставить(ИмяПараметра, ЗначениеПараметра);
		Стр = ТД.ПрочитатьСтроку();

	КонецЦикла;
	ТД.Закрыть();

	КаталогОбъектов = Объект.КаталогOutputИнструкцияMarkdown;

	ИмяФайлаДляЗаписи = Объект.КаталогOutputИнструкцияMarkdown + "/" + ТекущаяФичаИнструкцииMarkdown + ".MD";
	ЗТ = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, "Windows-1251", , Ложь);
	ЗТ.Закрыть(); //убираю BOM, специально для ATOM

	Страница = Новый ЗаписьТекста(ИмяФайлаДляЗаписи, "UTF-8", , Истина);
	//записываю заголовок
	Для каждого Стр Из ЗаголовокФичи Цикл
		Стр = СокрЛП(Стр);
		Если Найти(Стр, "Функционал:") > 0 Тогда
			Стр = СтрЗаменить(Стр, "Функционал:", "**Функционал:**");
		ИначеЕсли НРег(Лев(Стр, 3)) = "как" Тогда
			Стр =  "> **Как**" + Сред(Стр, 4);

		ИначеЕсли НРег(Лев(Стр, 4)) = "хочу" Тогда
			Стр =  "> **Хочу**" + Сред(Стр, 5);
		ИначеЕсли НРег(Лев(Стр, 6)) = "я хочу" Тогда
			Стр =  "> **Я хочу**" + Сред(Стр, 7);
		ИначеЕсли НРег(Лев(Стр, 5)) = "чтобы" Тогда
			Стр =  "> **Чтобы**" + Сред(Стр, 6);
		Иначе
			Стр = " > " + Стр;
		КонецЕсли;

		Страница.ЗаписатьСтроку(Стр);
		Страница.ЗаписатьСтроку("");
	КонецЦикла;

	ИДСкриншота  = 0;
	ИДСценария   = 0;
	Для каждого Сценарий Из МассивСценариев Цикл
		ИДСценария = ИДСценария + 1;
		Если ИДСценария > 1 Тогда
			Страница.ЗаписатьСтроку("");
		КонецЕсли;
		Страница.ЗаписатьСтроку("");
		Страница.ЗаписатьСтроку("**Сценарий:** " + Сценарий.ИмяСценария);

		ИмяФичи = Сценарий.ИмяФичи;
		УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяФичи);
		ИмяФичи = СтрЗаменить(ИмяФичи, " ", "_");

		ИмяСценария = Сценарий.ИмяСценария;
		УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСценария);
		ИмяСценария = СтрЗаменить(ИмяСценария, " ", "_");

		КаталогФичи = ДополнитьСлешВПуть(КаталогОбъектов) + ИмяФичи;

		ФайлКаталогФичи = Новый Файл(КаталогФичи);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлКаталогФичи.ПолноеИмя) Тогда
			СоздатьКаталогКомандаСистемы(КаталогФичи);
		КонецЕсли;

		МассивШагов = Сценарий.МассивШагов;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			ИДСкриншота = ИДСкриншота + 1;
			НомШага = НомШага + 1;
			Страница.ЗаписатьСтроку("");

			СтрокаШага = СтрЗаменить(Шаг.ИмяШага, "\n", Символы.ПС);
			МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(СтрокаШага, Символы.ПС);
			Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
				Стр = МассивСтрок[Ккк];
				Если Ккк = 0 Тогда
					Страница.ЗаписатьСтроку("	" + ПолучитьФорматированныйНомер(НомШага, 3) + ". " + Стр);
				Иначе
					ЕстьВертЧерта = Ложь;
					Если Найти(Стр, "|") > 0 Тогда
						ЕстьВертЧерта = Истина;
					КонецЕсли;

					Если ЕстьВертЧерта Тогда
						Страница.ЗаписатьСтроку("	" + Стр);
					Иначе
						Страница.ЗаписатьСтроку("	" + Стр);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ФайлСкриншота = Новый Файл(Шаг.Скриншот);
			НовоеИмяФайлаСкриншота = СтрЗаменить(ИмяФичи + "_" + ИДСкриншота + "_" + Лев(ИмяСценария, 30) + "_" + ПолучитьФорматированныйНомер(НомШага, 3) + ФайлСкриншота.Расширение, " ", "_");
			ИмяФайлаСкриншотаВКаталогеФичи = ФайлСкриншота.Путь + СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			ФайлСкриншота = Неопределено;

			ПроцедураПереместитьФайл(Шаг.Скриншот, ИмяФайлаСкриншотаВКаталогеФичи);

			СтрСкриншотаДляMarkdown = СтрЗаменить(ДополнитьСлешВПуть(ИмяФичи) + НовоеИмяФайлаСкриншота, " ", "_");
			Страница.ЗаписатьСтроку("![](" + СтрЗаменить(СтрСкриншотаДляMarkdown, "\", "/") + ")");
		КонецЦикла;
	КонецЦикла;

	ТекстСообщения = "Записываю %1";
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайлаДляЗаписи);
	Сообщить(ТекстСообщения);
	Страница.Закрыть();

	УдалитьФайлыКомандаСистемы(ИмяФайлаЛогаИнструкцииMarkdown);

КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПереместитьФайл(Знач Стр1, Знач Стр2)
	ПереместитьФайлКомандаСистемы(Стр1, Стр2);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФорматированныйНомер(НомШага, КолСимволов)
	Стр = Строка(НомШага);
	Стр = СтрЗаменить(Стр, Символы.НПП, "");

	Пока СтрДлина(Стр) < КолСимволов Цикл
		Стр = "0" + Стр;
	КонецЦикла;

	Возврат Стр;
КонецФункции

#Область АссертыСлужебное
//портирован блок ассертов из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
//взят релиз 3.0.0.3
//{ МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions).

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;

	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

&НаКлиенте
Процедура ВызватьОшибкуПроверки(СообщениеОшибки)

	Префикс = "[" + СтатусыРезультатаТестирования.ОшибкаПроверки + "]";
	ТекстСообщения = Префикс + " " + СообщениеОшибки;
	ВызватьИсключение ТекстСообщения;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСтрокой(Параметры, ИмяПеременной = "Параметры")

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Массив") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл
				ПараметрыСтрока = ПараметрыСтрока + ", " + ИмяПеременной + "[" + Формат(Индекс, "ЧН=0; ЧГ=0") + "]";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыСтрока;

КонецФункции

// Только для внутреннего использования
&НаСервере
Процедура ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки = "")
	Объект().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьКоличествоПередаваемыхТаблиц(СтрокаДерева)
	Если СтрокаДерева.ШагСПараметрамиВТаблице <> Истина Тогда
		Возврат 0;
	КонецЕсли;

	Количество = 1;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.Имя) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат Количество;
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Процедура ДобавитьШагиВМассив(ДеревоСтроки, Шаги)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = "Примеры" Тогда
			//эти сценарии уже учтены
			Продолжить;
		КонецЕсли;

		Если СтрДеревоСтроки.Тип = "Шаг" Тогда
			СтруктураШага = Новый Структура;
			СтруктураШага.Вставить("Имя", СтрДеревоСтроки.Имя);
			СтруктураШага.Вставить("ИмяШагаБезКлючевогоСлова", СтрДеревоСтроки.ИмяШагаБезКлючевогоСлова);
			СтруктураШага.Вставить("АдресСнипета", СтрДеревоСтроки.АдресСнипета);
			СтруктураШага.Вставить("ШагСПараметрамиВТаблице", СтрДеревоСтроки.ШагСПараметрамиВТаблице);
			СтруктураШага.Вставить("КоличествоПередаваемыхТаблиц", ОпределитьКоличествоПередаваемыхТаблиц(СтрДеревоСтроки));
			Шаги.Добавить(СтруктураШага);
		КонецЕсли;
		ДобавитьШагиВМассив(СтрДеревоСтроки.Строки, Шаги);
	КонецЦикла
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьИменаФайловФичИзДереваВМассив(ДеревоСтроки, МассивФич, МассивШагов)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = "Фича" Тогда
			МассивФич.Добавить(СтрДеревоСтроки.ПолныйПуть);
			Шаги = Новый Массив;
			ДобавитьШагиВМассив(СтрДеревоСтроки.Строки, Шаги);
			МассивШагов.Добавить(Шаги);
		КонецЕсли;
		ДобавитьИменаФайловФичИзДереваВМассив(СтрДеревоСтроки.Строки, МассивФич, МассивШагов);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров, МассивФич, МассивШагов)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево = ОбъектСервер.ДеревоТестов;

	ДобавитьИменаФайловФичИзДереваВМассив(Дерево.Строки, МассивФич, МассивШагов);

	СтруктураПараметров.Вставить("КонтекстVanessaADD", ОбъектСервер);

	СтруктураПараметров.КонтекстVanessaADD = "";
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуОС(Стр)
	КомандаСистемы(Стр);
КонецПроцедуры

&НаКлиенте
Функция РаспаковатьEPF(СтруктураОписанияEpf, КаталогДляВременныхФайлов)

	ИмяФайла = СтруктураОписанияEpf.ИмяФайлаEPF;

	Попытка

		ВременныйКаталогБазы = СтруктураОписанияEpf.КаталогБазы1С;
		Если Не ЗначениеЗаполнено(ВременныйКаталогБазы) Тогда
			ВременныйКаталогБазы = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов);
			ДопСообщениеОшибки = "Файл EPF не создан. Не смог создать каталог временной базы.";
			Если Не СоздатьБазу1С(ВременныйКаталогБазы, КаталогДляВременныхФайлов, ДопСообщениеОшибки) Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтруктураОписанияEpf.КаталогБазы1С = ВременныйКаталогБазы;
		КонецЕсли;

		ПутьКИсходникам = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов);
		Отладка("Создаю каталог для выгрузки исходников файла шагов " + ПутьКИсходникам);
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам);

		СтрокаЗапуска1С = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8"" DESIGNER /F """
			+ ВременныйКаталогБазы + """ /DumpExternalDataProcessorOrReportToFiles  """ + ПутьКИсходникам
			+ """ """ + ИмяФайла + """";

		ОписаниеЗапуска = Запустить1С(СтрокаЗапуска1С, КаталогДляВременныхФайлов);

		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;

		НайтиФайлыКомандаСистемы(ПутьКИсходникам, СписокКаталогов, СписокФайлов, Ложь, КаталогДляВременныхФайлов);
		Если СписокФайлов.Количество() <> 1 Тогда
			ТекстСообщения = "В каталоге <%1> должен был быть один файл xml.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПутьКИсходникам);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ФайлXML = СписокФайлов[0].Значение;
		СтруктураОписанияEpf.Вставить("РеальноеИмяОбработки", ФайлXML.ИмяБезРасширения);

		СтруктураОписанияEpf.КаталогИсходников = ПутьКИсходникам;

		СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + "/" + ФайлXML.ИмяБезРасширения +
			"/Forms/Форма/Ext/Form/Module.bsl";

		Возврат СтруктураОписанияEpf.ВременноеИмяМодуля;

	Исключение
		ТекстСообщения = "Не смог распаковать %1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайла);
		СделатьСообщение(ТекстСообщения);
		СделатьСообщение(ОписаниеОшибки());
	КонецПопытки;

	Возврат Неопределено;
КонецФункции

// Создает базу 1С
//
// Параметры:
//   КаталогБазы - Строка - путь к каталогу, где нужно создать базу
//   КаталогДляВременныхФайлов - Строка - Каталог для создания временных файлов - для оптимизации их удаления
//   ДопСообщениеОшибки - Строка - Сообщение, которое нужно показать в случае ошибки. Необязательно
//
//  Возвращаемое значение:
//   Булево - Успешно или нет
//
&НаКлиенте
Функция СоздатьБазу1С(Знач КаталогБазы, Знач КаталогДляВременныхФайлов, Знач ДопСообщениеОшибки = "")
	ВременныйКаталогБазы = КаталогБазы; // TODO избавиться от временной переменной ВременныйКаталогБазы

	Отладка("Создаю каталог для базы 1С " + КаталогБазы);
	СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);

	СтрокаЗапуска1С = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8"" CREATEINFOBASE File="""
	+ ВременныйКаталогБазы +  """";

	ОписаниеЗапуска = Запустить1С(СтрокаЗапуска1С, КаталогДляВременныхФайлов);
	ИмяФайлаЛога = ОписаниеЗапуска.ИмяФайлаЛога;
	ИмяФайлаOUT = ОписаниеЗапуска.ИмяФайлаOUT;

	Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + "/1Cv8.1CD") Тогда
		Если ЗначениеЗаполнено(ДопСообщениеОшибки) Тогда
			СделатьСообщение(ДопСообщениеОшибки);
		КонецЕсли;
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT);

		ТекстСообщения = "Проверьте работу команды <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаЗапуска1С);
		СделатьСообщение(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Выполняет запуск 1С (Конфигуратор, Предприятие) и возвращает структурус путями к файлам логов (ключ ИмяФайлаOUT и ИмяФайлаЛога)
// ВНИМАНИЕ: файлы логов нужно удалять самостоятельно.
//
// Параметры:
//   СтрокаЗапуска1С - Строка - строка запуска 1С
//
//  Возвращаемое значение:
//   Структура - структура с путями к файлам логов (ключ ИмяФайлаOUT и ИмяФайлаЛога)
//
&НаКлиенте
Функция Запустить1С(Знач СтрокаЗапуска1С, Знач КаталогДляВременныхФайлов)
	Рез = Новый Структура;

	ИмяФайлаЛога = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов, "txt");
	ИмяФайлаOUT = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов, "txt");

	Рез.Вставить("ИмяФайлаЛога", ИмяФайлаЛога);
	Рез.Вставить("ИмяФайлаOUT", ИмяФайлаOUT);

	КомандаСистемы = СтрокаЗапуска1С + " /out " + ИмяФайлаOUT + " > " + ИмяФайлаЛога;

	Отладка(КомандаСистемы);
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы, Истина, Ложь); //TODO код возврата получить, хотя бы от Конфигуратора??

	Возврат Рез;
КонецФункции

&НаКлиенте
Функция СоздатьПустуюСтруктуруEpf()
	Стр = Новый Структура;
	Стр.Вставить("ИмяФичи", "");
	Стр.Вставить("ИмяФайлаEpf", "");
	Стр.Вставить("ВременноеИмяМодуля", "");
	Стр.Вставить("ТелоМодуля", ""); //таблица значений
	Стр.Вставить("КаталогИсходников", "");
	Стр.Вставить("ФайлEpfПересоздавался", Ложь);
	Стр.Вставить("РеальноеИмяОбработки", Неопределено);
	Стр.Вставить("КаталогБазы1С", "");

	Возврат Стр;
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ПутьФайлаИлиДвоичныеДанные, ШагСтрокДляМодуля)

	ПутьКФайлу = ПутьФайлаПоДвоичнымДаннымСервер(ПутьФайлаИлиДвоичныеДанные, "txt");
	ПромФайл = Новый Файл(ПутьКФайлу);
	Если Не ПромФайл.Существует() Тогда
		СтрОшибки = "Файл """ + ПутьКФайлу + """ не существует.";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;

	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");

	НомСтр = 0;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу, "UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		НомСтр = НомСтр + ШагСтрокДляМодуля;

		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;

	Текст.Закрыть();

	Возврат ЗначениеВСтрокуВнутр(Тзн);
КонецФункции

&НаКлиенте
Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	ПутьФайлаИлиДвоичныеДанные = ПутьФайлаИлиДвоичныеДанныеДляСервера(ПутьКФайлу);
	Возврат ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ПутьФайлаИлиДвоичныеДанные, ШагСтрокДляМодуля);
КонецФункции

&НаКлиенте
Функция НайтиФайлВМассивеФайлов(МассивФайлов, ИмяФайла)
	УниверсальноеИмяФайла = УниверсальноеПолноеИмяФайла(ИмяФайла, Истина);
	Для каждого Элем Из МассивФайлов Цикл

		Если ТипЗнч(Элем) = Тип("Структура") Тогда
			Файл = Элем.Файл;
		Иначе
			Файл = Элем;
		КонецЕсли;

		Если СравнитьОбычныйПутьФайлаСУниверсальнымПутемДругогоФайла(Файл.ПолноеИмя, УниверсальноеИмяФайла) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи, ИмяТекущейФичи, ДополнительныеПараметры,
	КаталогДляВременныхФайлов, КаталогБазы1С)

	КаталогИнструментов = Объект.КаталогИнструментов;
	ГенерироватьУФ      = Объект.ГенерироватьУФ;

	СтруктураОписанияEpf = СоздатьПустуюСтруктуруEpf();
	СтруктураОписанияEpf.ИмяФичи = ИмяТекущейФичи;
	СтруктураОписанияEpf.КаталогБазы1С = КаталогБазы1С;

	СтруктураОписанияEpf.ИмяФайлаEpf        = УниверсальноеПолноеИмяФайлаШаговФичи(
		ДополнитьСлешВПуть(ОтносительныйКаталогФичи), ИмяТекущейФичи, ЭтоLinux);

	ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		ФайлСуществует = ФайлEpf.Существует();
		Если Не ФайлСуществует Тогда
			ИмяФайлаEpf_Устаревший = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(
				ДополнитьСлешВПуть(ОтносительныйКаталогФичи), ИмяТекущейФичи, ЭтоLinux);
			ФайлEpf = Новый Файл(ИмяФайлаEpf_Устаревший);
			Если ФайлEpf.Существует() Тогда
				ПереместитьФайлКомандаСистемы(ИмяФайлаEpf_Устаревший, СтруктураОписанияEpf.ИмяФайлаEpf);
			КонецЕсли;
		КонецЕсли;
	Иначе
		МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
		ФайлСуществует = НайтиФайлВМассивеФайлов(МассивФайлов, СтруктураОписанияEpf.ИмяФайлаEpf);
		Если Не ФайлСуществует Тогда
			ИмяФайлаEpf_Устаревший = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(
				ДополнитьСлешВПуть(ОтносительныйКаталогФичи), ИмяТекущейФичи, ЭтоLinux);

			ФайлСуществует = НайтиФайлВМассивеФайлов(МассивФайлов, ИмяФайлаEpf_Устаревший);
			Если ФайлСуществует Тогда
				ПереместитьФайлКомандаСистемы(ИмяФайлаEpf_Устаревший, СтруктураОписанияEpf.ИмяФайлаEpf);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ФайлСуществует Тогда //т.е. если мы не первый раз работаем с данной фичей
		Если НЕ Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда

			РаспаковатьEPF(СтруктураОписанияEpf, КаталогДляВременныхФайлов);
			СтруктураОписанияEpf.ФайлEpfПересоздавался = Истина;

			КаталогБазы1С = СтруктураОписанияEpf.КаталогБазы1С;
		КонецЕсли;
	КонецЕсли;

	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ВременныйКаталогИсходников = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов);
		СоздатьКаталогКомандаСистемы(ВременныйКаталогИсходников);
		СтруктураОписанияEpf.КаталогИсходников = ВременныйКаталогИсходников;

		ПутьКШаблону = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/TemplateEpf";
		Если ГенерироватьУФ Тогда
			ПутьКШаблону = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "lib/TemplateEpfUF";
		КонецЕсли;
		ФайлШаблон = Новый Файл(ПутьКШаблону);
		ПутьКШаблону = ФайлШаблон.ПолноеИмя;
		КопироватьКаталогКомандаСистемы(ПутьКШаблону, ВременныйКаталогИсходников);
	КонецЕсли;

	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников)
		+ "Обработка/Ext/ObjectModule.bsl";
		Если ГенерироватьУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников)
			+ "Обработка/Forms/Форма/Ext/Form/Module.bsl";
		КонецЕсли;

		Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		СтруктураОписанияEpf.ВременноеИмяМодуля = Файл.ПолноеИмя;
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, "UTF-8", , Ложь);
		ЗТ.Закрыть();
	КонецЕсли;

	СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);

	Возврат СтруктураОписанияEpf;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПутьВременногоФайла(Знач КаталогДляВременныхФайлов, Знач Расширение = "")
	НовоеИмя = ПолучитьИмяВременногоФайла(Расширение);
	Файл = Новый Файл(НовоеИмя);
	НовоеИмя = КаталогДляВременныхФайлов + "/" + Файл.Имя;
	Возврат НовоеИмя;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТелоМодуляВМассивСервер(Стр)
	ТелоМодуля = ЗначениеИзСтрокиВнутр(Стр);
	ТелоМодуля.Сортировать("НомСтр");
	Массив = ТелоМодуля.ВыгрузитьКолонку("Стр");

	Возврат Массив;
КонецФункции

// TODO Дубль кода в методах "УбратьСпецсимволыИзИмениОбработки" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
&НаКлиентеНаСервереБезКонтекста
Функция УбратьСпецсимволыИзИмениОбработки(Знач Стр)
	Стр = СтрЗаменить(Стр, " ", "_");
	Стр = СтрЗаменить(Стр, "`", "");
	Стр = СтрЗаменить(Стр, "~", "");
	Стр = СтрЗаменить(Стр, "'", "");
	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, ",", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, ";", "");
	Стр = СтрЗаменить(Стр, "-", "_");
	Стр = СтрЗаменить(Стр, "+", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, "=", "");
	Стр = СтрЗаменить(Стр, "!", "");
	Стр = СтрЗаменить(Стр, "@", "");
	Стр = СтрЗаменить(Стр, "#", "");
	Стр = СтрЗаменить(Стр, "$", "");
	Стр = СтрЗаменить(Стр, "%", "");
	Стр = СтрЗаменить(Стр, "^", "");
	Стр = СтрЗаменить(Стр, "&", "");
	Стр = СтрЗаменить(Стр, "*", "");
	Стр = СтрЗаменить(Стр, "(", "");
	Стр = СтрЗаменить(Стр, ")", "");
	Стр = СтрЗаменить(Стр, "№", "");
	Стр = СтрЗаменить(Стр, "?", "");
	Стр = СтрЗаменить(Стр, "<", "");
	Стр = СтрЗаменить(Стр, ">", "");

	ЛевСимвол = Лев(Стр, 1);
	Если ЛевСимвол = "0"
		Или ЛевСимвол = "1"
		Или ЛевСимвол = "2"
		Или ЛевСимвол = "3"
		Или ЛевСимвол = "4"
		Или ЛевСимвол = "5"
		Или ЛевСимвол = "6"
		Или ЛевСимвол = "7"
		Или ЛевСимвол = "8"
		Или ЛевСимвол = "9"
		Тогда
		Стр = "_" + Стр;
	КонецЕсли;

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки)

	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + "/" + ИмяОбработки + ".xml"));
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + "/" + ИмяОбработки +  "/Forms/Форма/Ext/Form.xml"));

	Для Каждого Файл Из МассивФайлов Цикл
		Если НЕ ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;

		Замены = Новый Соответствие;
		Замены.Вставить("<Name>Обработка</Name>", "<Name>" + ИмяОбработки + "</Name>");
		Замены.Вставить("<v8:content>Обработка</v8:content>", "<v8:content>" + ИмяОбработки + "</v8:content>");
		Замены.Вставить("ExternalDataProcessor.Обработка.", "ExternalDataProcessor." + ИмяОбработки + ".");
		Замены.Вставить("ExternalDataProcessorObject.Обработка", "ExternalDataProcessorObject." + ИмяОбработки);

		// оптимизация замены в файле
		МассивСтрок = ЗагрузитьФайлВМассив(Файл.ПолноеИмя);
		ЗТ = Новый ЗаписьТекста(Файл.ПолноеИмя, "UTF-8");
		Для каждого Стр Из МассивСтрок Цикл
			ДлинаСтрокиДо = СтрДлина(Стр);
			ЗаменаВыполнена = Ложь;
			Для каждого Замена Из Замены Цикл
				Стр = СтрЗаменить(Стр, Замена.Ключ, Замена.Значение);
				Если СтрДлина(Стр) <> ДлинаСтрокиДо Тогда
					ЗаменаВыполнена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗаменаВыполнена Тогда
				Замены.Удалить(Замена.Ключ);
			КонецЕсли;

			ЗТ.ЗаписатьСтроку(Стр);
		КонецЦикла;
		ЗТ.Закрыть();

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Если СокрЛП(Путь) = "" Тогда
		ВызватьИсключение "Передан пустой путь в процедуру ""СоздатьКаталогЕслиЕгоНет"".";
	КонецЕсли;
	Отладка("Создаю каталог - метод СоздатьКаталогЕслиЕгоНет - " + Путь);

	СоздатьКаталогКомандаСистемы(Путь);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекстФайлаЛога(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");

	Сообщить(Текст.Прочитать());

	Текст.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлыОбработок(СтруктураОписанияEpf, КаталогДляВременныхФайлов)

	ГенерироватьУФ = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	ТекстМодуля = "";

	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;

	ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);

	Отладка("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);

	ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, "UTF-8", , Ложь);
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		ЗТ.ЗаписатьСтроку(СтрТелоМодуля);
	КонецЦикла;
	ЗТ.Закрыть();
	Отладка("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);

	ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;

	ИмяВременногоEPF = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов, "epf");

	ИмяОбработки = УбратьСпецсимволыИзИмениОбработки(СтруктураОписанияEpf.ИмяФичи);
	Если ЗначениеЗаполнено(СтруктураОписанияEpf.РеальноеИмяОбработки) Тогда
		ИмяОбработки = СтруктураОписанияEpf.РеальноеИмяОбработки;
	КонецЕсли;

	КорневойФайлОбработки = ПутьКИсходникам + "/" + ИмяОбработки + ".xml";

	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам + "/" + ИмяОбработки);
		КопироватьКаталогКомандаСистемы(ПутьКИсходникам + "/Обработка", ПутьКИсходникам + "/" + ИмяОбработки, КаталогДляВременныхФайлов);
		ПереместитьФайлКомандаСистемы(ПутьКИсходникам + "/Обработка.xml", КорневойФайлОбработки);

		ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки);
	КонецЕсли;

	ВременныйКаталогБазы = СтруктураОписанияEpf.КаталогБазы1С;
	Если Не ЗначениеЗаполнено(ВременныйКаталогБазы) Тогда
		ВременныйКаталогБазы = ПолучитьПутьВременногоФайла(КаталогДляВременныхФайлов);
		ДопСообщениеОшибки = "Файл EPF не создан. Не смог создать каталог временной базы.";
		Если Не СоздатьБазу1С(ВременныйКаталогБазы, КаталогДляВременныхФайлов, ДопСообщениеОшибки) Тогда
			Возврат; //TODO переделать СоздатьФайлыОбработок в функцию для выдачи состояния выполнения ??
		КонецЕсли;
		СтруктураОписанияEpf.КаталогБазы1С = ВременныйКаталогБазы;
	КонецЕсли;

	Если ЭтоLinux Тогда
		СтрокаЗапуска1С = "" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8 DESIGNER /F"""
			+ ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ + КорневойФайлОбработки
			+ """ """ + ИмяВременногоEPF + """";
	Иначе
		СтрокаЗапуска1С = """" + ДополнитьСлешВПуть(Объект.ВерсияПлатформыДляГенерацииEPF) + "1cv8"" DESIGNER /F """
			+ ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ + КорневойФайлОбработки
			+ """ """ + ИмяВременногоEPF + """";
	КонецЕсли;

	ОписаниеЗапуска = Запустить1С(СтрокаЗапуска1С, КаталогДляВременныхФайлов);

	ИмяФайлаЛога = ОписаниеЗапуска.ИмяФайлаЛога;
	ИмяФайлаOUT = ОписаниеЗапуска.ИмяФайлаOUT;

	Если ФайлСуществуетКомандаСистемы(ИмяВременногоEPF) Тогда
		ФайлИмяФайлаEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлИмяФайлаEpf.Путь) Тогда
			СоздатьКаталогКомандаСистемы(ФайлИмяФайлаEpf.Путь);
		КонецЕсли;
		ПереместитьФайлКомандаСистемы(ИмяВременногоEPF, СтруктураОписанияEpf.ИмяФайлаEpf);
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			ТекстСообщения = "Пересоздан %1";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтруктураОписанияEpf.ИмяФайлаEpf);
			СделатьСообщение(ТекстСообщения);
		Иначе
			ТекстСообщения = "Создан %1";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтруктураОписанияEpf.ИмяФайлаEpf);
			СделатьСообщение(ТекстСообщения);
		КонецЕсли;
	Иначе
		СделатьСообщение("Файл EPF не создан.");
		ТекстСообщения = "Проверьте работу команды <%1>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаЗапуска1С);
		СделатьСообщение(ТекстСообщения);
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpf(СтруктураПараметров) //TODO проверить на асинхронность и работу на клиент-сервере

	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaADD = СтруктураПараметров.КонтекстVanessaADD;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;

	ДополнительныеПараметры = Неопределено;
	Если СтруктураПараметров.Свойство("ДополнительныеПараметры") Тогда
		ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	КонецЕсли;

	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур       = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;

	ДанныеПоВерсиямОбработок = ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition();

	ОписанияФайловШагов = Новый Массив;
	ПолучитьВсеСуществующиеШагиИзОбработок(КаталогФич, КаталогиБиблиотек,
		ДанныеПоВерсиямОбработок, ДополнительныеПараметры, ОписанияФайловШагов);

	ПодключитьШаги(ОписанияФайловШагов);

	МассивФич   = СтруктураПараметров.МассивФич;
	МассивШагов = СтруктураПараметров.МассивШагов;

	КаталогДляВременныхФайлов = ПолучитьИмяВременногоФайла();
	СоздатьКаталогКомандаСистемы(КаталогДляВременныхФайлов);

	КаталогБазы1С = "";
	Ном = 0;
	Для каждого ИмяФайлаФичи Из МассивФич Цикл
		Ном = Ном + 1;
		Шаги = МассивШагов.Получить(Ном - 1);

		ФайлФичи       = Новый Файл(ИмяФайлаФичи);
		ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
		ТекстСообщения = "Работаю по фиче: %1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяФайлаФичи);
		СделатьСообщение(ТекстСообщения);

		МассивДляСозданияEpf = Новый Массив;
		ОтносительныйКаталогФичи = ФайлФичи.Путь;
		Если Найти(Прав(ОтносительныйКаталогФичи, 1), "\/") > 0 Тогда
			ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи, СтрДлина(ОтносительныйКаталогФичи) - 1);
		КонецЕсли;

		Отладка("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
		СтруктураОписанияEpf = СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи, ФайлФичи.ИмяБезРасширения,
			ДополнительныеПараметры, КаталогДляВременныхФайлов, КаталогБазы1С);

		СоздатьТекстМодуляНаСервере(Шаги, СтруктураОписанияEpf, ДвДанныеvbFeatureReader,
			ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур, ШагСтрокДляМодуля, ГенерироватьУФ,
			Объект.СоздаватьОбластиПриГенерацииКода);

		Если Объект.ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
			ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf);
		Иначе
			СоздатьФайлыОбработок(СтруктураОписанияEpf, КаталогДляВременныхФайлов);
		КонецЕсли;

	КонецЦикла;

	УдалитьКаталогКомандаСистемы(КаталогДляВременныхФайлов);
	СделатьСообщение("Создание epf по фичам закончено.");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьТекстМодуляНаСервере(Шаги, СтруктураОписанияEpf, ДвДанныеvbFeatureReader,
	ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур, ШагСтрокДляМодуля, ГенерироватьУФ,
	СоздаватьОбластиПриГенерацииКода)

	FeatureReader = СоздатьFeatureReader(ДвДанныеvbFeatureReader);

	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		FeatureReader.ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля, ШагСтрокДляМодуля,
			ГенерироватьУФ, Истина, СоздаватьОбластиПриГенерацииКода);
	КонецЕсли;

	Снипеты = FeatureReader.СнипетыПолучитьСнипетыПоШагам(Шаги);

	FeatureReader.ЗаполнитьПроцедуруПолучитьСписокТестов(СтруктураОписанияEpf.ТелоМодуля, Снипеты, Истина,
		ИмяФайлаФичи, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);

	Для каждого ЭлемСнипет Из Снипеты Цикл
		FeatureReader.ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, ЭлемСнипет.StepDefinition,
		ЭлемСнипет.Шаг, ШагСтрокДляМодуля, ЭлемСнипет.АдресСнипета,
		СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур, ГенерироватьУФ, Истина);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстМодуляИзСтруктураОписанияEpfСервер(ТекстМодуляВнутр)
	Стр = "";

	Тзн = ЗначениеИзСтрокиВнутр(ТекстМодуляВнутр);

	Для каждого СтрТзн Из Тзн Цикл
		Стр = Стр + СтрТзн.Стр + Символы.ПС;
	КонецЦикла;

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf)
	Стр = ПолучитьТекстМодуляИзСтруктураОписанияEpfСервер(СтруктураОписанияEpf.ТелоМодуля);
	ТекстовыйДокумент = новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(Стр);
	ТекстовыйДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьEPFПоМассивуФич(СтруктураПараметров)
	СделатьСообщение("Запускаю генерацию epf.");
	СделатьGenerateEpf(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокПродолжение(ДополнительныеПараметры = Неопределено)
	Если Не Объект.РежимСамотестирования Тогда
		ОчиститьСообщения();
	КонецЕсли;
	СделатьПараметрыКорректными();

	ДвДанныеvbFeatureReader = ПутьФайлаИлиДвоичныеДанныеДляСервера(ПолучитьПутьКFeatureReader());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", Объект.КаталогФич);
	СтруктураПараметров.Вставить("DebugLog", Объект.DebugLog);
	СтруктураПараметров.Вставить("ГенерироватьУФ", Объект.ГенерироватьУФ);
	СтруктураПараметров.Вставить("СоздаватьОбластиПриГенерацииКода", Объект.СоздаватьОбластиПриГенерацииКода);
	СтруктураПараметров.Вставить("ШагСтрокДляМодуля", ШагСтрокДляМодуля);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", Объект.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);

	МассивФич   = Новый Массив;
	МассивШагов = Новый Массив;
	ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров, МассивФич, МассивШагов);

	СтруктураПараметров.Вставить("МассивФич", МассивФич);
	СтруктураПараметров.Вставить("МассивШагов", МассивШагов);
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader", ДвДанныеvbFeatureReader);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	СоздатьEPFПоМассивуФич(СтруктураПараметров);
	ЭтаФорма.Активизировать();

КонецПроцедуры

// Функция ДополнитьСлешВПуть
//
// Параметры:
// ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	разделитель = "\";

	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	Если ЭтоLinux Тогда
		разделитель = "/";
		Каталог = СтрЗаменить(Каталог, "\", "/");
	КонецЕсли;

	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

&НаКлиенте
Функция НайтиСтрокуСценарияЧерезРодителя(СтрокаДерева, ЭтоПример, ЭтоШагКонтекста)
	ТекСтрокаДерева = СтрокаДерева;

	Пока Истина Цикл
		Если ТекСтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		Если (ТекСтрокаДерева.Тип = "Сценарий") Тогда
			Если ТекСтрокаДерева.ДопТип = "Контекст" Тогда
				ЭтоШагКонтекста = Истина;
			КонецЕсли;
			Возврат ТекСтрокаДерева;
		КонецЕсли;
		Если (ТекСтрокаДерева.Тип = "Пример") Тогда
			ЭтоПример = Истина;
			Возврат ТекСтрокаДерева;
		КонецЕсли;

		ТекСтрокаДерева = ТекСтрокаДерева.ПолучитьРодителя();
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция НайтиСтрокуФичиЧерезРодителя(Стр)
	СтрокаДерева = Стр;
	Пока Истина Цикл
		Если СтрокаДерева.Тип = "Фича" Тогда
			Возврат СтрокаДерева;
		КонецЕсли;

		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ИмяФайлаФичиИзПолногоПути(ПолныйПуть)
	Поз = Найти(НРег(ПолныйПуть), ".feature");

	Если Поз > 0 Тогда
		Возврат СокрЛП(Лев(ПолныйПуть, Поз + СтрДлина(".feature") - 1));
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ЭтаФормаTestClientУжеОбрабатывалась(ИмяТекущейФормыTestClient)
	Для каждого Элем Из МассивСостояниеФормTestClient Цикл
		Если Элем.ИмяФормы = ИмяТекущейФормыTestClient Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

//{работа с TestClient

&НаСервереБезКонтекста
Функция СтрокиОжидаемойТаблицыСодержатсяВТаблицеTestclientСервер(ОжидаемаяТаблица, ТаблицаTestClient, СтрокаОшибки)
	Таблица1 = Новый ТаблицаЗначений;
	Таблица2 = Новый ТаблицаЗначений;
	Для Каждого Элем Из ОжидаемаяТаблица[0] Цикл
		Таблица1.Колонки.Добавить(Элем.Ключ, , Элем.Значение);
		Таблица2.Колонки.Добавить(Элем.Ключ, , Элем.Значение);
	КонецЦикла;

	//Проверим, что в таблице2 есть все нужные колонки

	Для Каждого Колонка Из Таблица2.Колонки Цикл
		Попытка
			Значение = ТаблицаTestClient[0][Колонка.Заголовок];
		Исключение
			ТекстСообщения = "В таблице не найдена колонка <%1>";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Колонка.Заголовок);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;

	//проверим вхождение строк

	НомОжидаемаяТаблица = 0;

	Для Каждого СтрокаОжидаемаяТаблица Из ОжидаемаяТаблица Цикл
		НашлиСтроку = Ложь;

		НомОжидаемаяТаблица = НомОжидаемаяТаблица + 1;
		Если НомОжидаемаяТаблица = 1 Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаТаблицаTestClient Из ТаблицаTestClient Цикл
			ВсеКолонкиСовпали = Истина;
			Для Каждого Колонка Из Таблица1.Колонки Цикл
				ЗначениеОжидаемаяТаблица  = СтрокаОжидаемаяТаблица[Колонка.Имя];
				ЗначениеТаблицаTestClient = СтрокаТаблицаTestClient[Колонка.Заголовок];

				Если ЗначениеОжидаемаяТаблица <> ЗначениеТаблицаTestClient Тогда
					ВсеКолонкиСовпали = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ВсеКолонкиСовпали Тогда
				НашлиСтроку = Истина;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если Не НашлиСтроку Тогда
			ЗначениеСтроки = "|";
			Для Каждого Колонка Из Таблица1.Колонки Цикл
				ЗначениеСтроки = " " + ЗначениеСтроки + СтрокаОжидаемаяТаблица[Колонка.Имя] + " |"
			КонецЦикла;

			СтрокаОшибки = "Строка <" + ЗначениеСтроки + "> не найдена";
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ОчиститьМассивИД(МассивИд, МассивЭлементов)
	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзМассиваПоляТаблицTestClient(ТекущаяФорма, МассивЭлементов)
	МассивИд = Новый Массив;

	ТаблицыФормы = НайтиТаблицыФормыTestClient(ТекущаяФорма);
	Для Каждого ТаблицаФормы Из ТаблицыФормы Цикл
		Ид = -1;
		Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
			Ид = Ид + 1;
			ЭлементТаблицы = ТаблицаФормы.НайтиОбъект(, , ПроверяемыйЭлемент.Имя);
			Если ЭлементТаблицы <> Неопределено Тогда
				МассивИд.Добавить(Ид);
			КонецЕсли;
		КонецЦикла;

		ОчиститьМассивИД(МассивИд, МассивЭлементов);
		МассивИд = Новый Массив;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОставитьВМассивеТолькоПоляНадписей(МассивЭлементов)
	МассивИд = Новый Массив;

	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид <> ВидПоляФормы.ПолеНадписи И ПроверяемыйЭлемент.Вид <> ВидДекорацииФормы.Надпись Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;
	КонецЦикла;

	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьГруппыФормыИзМассива(МассивЭлементов)
	МассивИд = Новый Массив;

	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ТипЗнч(ПроверяемыйЭлемент) = Тип("ТестируемаяГруппаФормы") Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;
	КонецЦикла;

	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзМассиваПоляВКоторыеНеВозможенВводTestClient(МассивЭлементов)
	МассивИд = Новый Массив;

	Ид = -1;
	Для Каждого ПроверяемыйЭлемент Из МассивЭлементов Цикл
		Ид = Ид + 1;
		Если ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
			МассивИд.Добавить(Ид);
		ИначеЕсли ПроверяемыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			МассивИд.Добавить(Ид);
		КонецЕсли;
	КонецЦикла;

	Если МассивИд.Количество() > 0 Тогда
		Для Ккк = 0 По МассивИд.Количество() - 1 Цикл
			МассивЭлементов.Удалить(МассивИд[МассивИд.Количество() - Ккк - 1]);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиРеквизитВМассивеФорм(МассивФорм, ПолеРеквизит, ИмяРеквизита, ИскатьПоИмени, ТипПоля, ДопПараметры)
	Для каждого ТекущаяФорма Из МассивФорм Цикл

		Если ИскатьПоИмени = Неопределено Тогда
			ОпределитьРежимПоискаЭлементаНаФорме(ИмяРеквизита, ИскатьПоИмени);
		КонецЕсли;

		Попытка
			Если ИскатьПоИмени Тогда
				МассивЭлементов        = ТекущаяФорма.НайтиОбъекты(ТипПоля, , ИмяРеквизита);
			Иначе
				МассивЭлементов        = ТекущаяФорма.НайтиОбъекты(ТипПоля, ИмяРеквизита);
			КонецЕсли;
		Исключение
			//некоторые служебные формы могут вызвать исключение на поиск объектов
			Продолжить;
		КонецПопытки;

		Если МассивЭлементов = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если МассивЭлементов.Количество() > 1 Тогда
			Если ТипЗнч(МассивЭлементов) = Тип("ФиксированныйМассив") Тогда
				МассивЭлементов = Новый Массив(МассивЭлементов); //преобразуем фиксированный массив в обычный
			КонецЕсли;

			Если ДопПараметры <> Неопределено Тогда
				ИскатьТолькоПоляВКоторыеВозможенВвод = Ложь;
				ДопПараметры.Свойство("ИскатьТолькоПоляВКоторыеВозможенВвод", ИскатьТолькоПоляВКоторыеВозможенВвод);
				Если ИскатьТолькоПоляВКоторыеВозможенВвод = Истина Тогда
					УдалитьИзМассиваПоляВКоторыеНеВозможенВводTestClient(МассивЭлементов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если МассивЭлементов.Количество() > 1 Тогда
			Если ТипЗнч(МассивЭлементов) = Тип("ФиксированныйМассив") Тогда
				МассивЭлементов = Новый Массив(МассивЭлементов); //преобразуем фиксированный массив в обычный
			КонецЕсли;

			Если ДопПараметры <> Неопределено Тогда
				ИскатьТолькоПоляНадписей = Ложь;
				ДопПараметры.Свойство("ИскатьТолькоПоляНадписей", ИскатьТолькоПоляНадписей);
				Если ИскатьТолькоПоляНадписей = Истина Тогда
					ОставитьВМассивеТолькоПоляНадписей(МассивЭлементов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если МассивЭлементов.Количество() > 1 Тогда
			Если ТипЗнч(МассивЭлементов) = Тип("ФиксированныйМассив") Тогда
				МассивЭлементов = Новый Массив(МассивЭлементов); //преобразуем фиксированный массив в обычный
			КонецЕсли;

			Если ДопПараметры <> Неопределено Тогда
				ИсключитьГруппы = Ложь;
				ДопПараметры.Свойство("ИсключитьГруппы", ИсключитьГруппы);
				Если ИсключитьГруппы = Истина Тогда
					ИсключитьГруппыФормыИзМассива(МассивЭлементов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если МассивЭлементов.Количество() > 1 Тогда
			УдалитьИзМассиваПоляТаблицTestClient(ТекущаяФорма, МассивЭлементов);
		КонецЕсли;

		Если МассивЭлементов.Количество() > 1  Тогда
			ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита);
			ТекстСообщения = "Найдено более одного поля формы с заголовком <%1>. Рекомендуется искать элемент по имени.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяРеквизита);
			Сообщить(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ПолеРеквизит = МассивЭлементов[0];

		Возврат;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзКонтекста()
	Если ОбъектКонтекст.Свойство("АктивноеОкно") Тогда
		Возврат ОбъектКонтекст.АктивноеОкно;
	КонецЕсли;

	Возврат ПолучитьАктивноеОкноИзТестовоеПриложение();
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваОбъекта(ЭлементФормы, МассивЗаголовковПолей, МассивЗаголовковКнопок, ИмяРодителя)
	Рез = Новый Структура;
	Рез.Вставить("Имя", ЭлементФормы.Имя);
	Рез.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
	Рез.Вставить("ИмяРодителя", ИмяРодителя);

	Если ТипЗнч(ЭлементФормы) = Тип("ТестируемоеПолеФормы") Тогда
		МассивЗаголовковПолей.Добавить(ЭлементФормы.ТекстЗаголовка);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяКнопкаФормы") Тогда
		МассивЗаголовковКнопок.Добавить(ЭлементФормы.ТекстЗаголовка);
	КонецЕсли;

	Возврат Рез;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементыФормыИерархически(Элементформы, МассивЗаголовковПолей, МассивЗаголовковКнопок)
	Рез = Новый Массив;

	НайденныеОбъекты = Элементформы.ПолучитьПодчиненныеОбъекты();
	Для каждого Элем Из НайденныеОбъекты Цикл

		Если ТипЗнч(Элементформы) = Тип("ТестируемаяФорма") Тогда
			СвойстваОбъекта = ПолучитьСвойстваОбъекта(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок, Элементформы.ИмяФормы);
		Иначе
			СвойстваОбъекта = ПолучитьСвойстваОбъекта(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок, Элементформы.Имя);
		КонецЕсли;

		Рез.Добавить(СвойстваОбъекта);

		ПодчиненныеОбъекты = ПолучитьЭлементыФормыИерархически(Элем, МассивЗаголовковПолей, МассивЗаголовковКнопок);
		СвойстваОбъекта.Вставить("ПодчиненныеОбъекты", ПодчиненныеОбъекты);

	КонецЦикла;

	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьСостояниеФормыTestclient(ТекущаяФорма)
	СостояниеФормы = Новый Структура;
	СостояниеФормы.Вставить("ИмяФормы", ТекущаяФорма.ИмяФормы);
	СостояниеФормы.Вставить("ТекстЗаголовка", ТекущаяФорма.ТекстЗаголовка);
	МассивЗаголовковПолей = Новый Массив;
	СостояниеФормы.Вставить("МассивЗаголовковПолей", МассивЗаголовковПолей);

	МассивЗаголовковКнопок = Новый Массив;
	СостояниеФормы.Вставить("МассивЗаголовковКнопок", МассивЗаголовковКнопок);

	МассивСостояниеФормTestClient.Добавить(СостояниеФормы);
	Попытка

		МассивОбъектов = ПолучитьЭлементыФормыИерархически(ТекущаяФорма, МассивЗаголовковПолей, МассивЗаголовковКнопок);

	Исключение
		ТекстСообщения = "ДобавитьСостояниеФормыTestclient:%1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
	КонецПопытки;

	СостояниеФормы.Вставить("МассивОбъектов", МассивОбъектов);
	Отладка("Запомнил имена реквизитов формы: " + ТекущаяФорма.ИмяФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостояниеТекущейФормыTestClient()
	ОкноПриложения = ПолучитьАктивноеОкноИзТестовоеПриложение();
	МассивФорм     = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"));
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		ИмяТекущейФормыTestClient = ТекущаяФорма.ИмяФормы;

		Если ЭтаФормаTestClientУжеОбрабатывалась(ИмяТекущейФормыTestClient) Тогда
			Возврат;
		КонецЕсли;

		ДобавитьСостояниеФормыTestclient(ТекущаяФорма);
	КонецЦикла;

КонецПроцедуры

//}работа с TestClient

&НаКлиенте
Процедура ОпросЭлементовФормTestClient()
	Если ИдетОпросЭлементовФормTestClient Тогда
		Возврат;
	КонецЕсли;

	ИдетОпросЭлементовФормTestClient = Истина;
	Попытка
		ЗаполнитьСостояниеТекущейФормыTestClient();
	Исключение
		Отладка("" + ОписаниеОшибки());
	КонецПопытки;

	ИдетОпросЭлементовФормTestClient = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюЗаписиДействийПользователя(МоментЗаписи)

	Если МоментЗаписи = "НачатьЗапись" Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Видимость        = Ложь;
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина;

	ИначеЕсли МоментЗаписи = "ПриостановитьЗапись" Тогда
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Ложь;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Истина;

	ИначеЕсли МоментЗаписи = "ПродолжитьЗапись" Тогда
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Истина;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Ложь;

	ИначеЕсли МоментЗаписи = "ЗавершитьЗапись" Тогда
		Элементы.кнНачатьЗаписьДействийПользователя.Видимость        = Истина;
		Элементы.кнПриостановитьЗаписьДействийПользователя.Видимость = Ложь;
		Элементы.кнПродолжитьЗаписьДействийПользователя.Видимость    = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКод1СИзUILogToScriptСервер(ДвоичныеДанныеИлиПутьФичи, Стр)
	ИмяВременногоEPF = ПутьФайлаПоДвоичнымДаннымСервер(ДвоичныеДанныеИлиПутьФичи, "epf");

	Обработка                           = ВнешниеОбработки.Создать(ИмяВременногоEPF);
	Обработка.ObjectSearch              = 2;
	Обработка.SplitScriptIntoProcedures = Истина;
	Обработка.MainProcedureName         = "ВыполнитьДействия";

	Возврат Обработка.Convert(Стр);

КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйКодUILogToScript(Стр)
	Стр = СтрЗаменить(Стр, "ТестовоеПриложение.НайтиОбъект", "КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект");
	Стр = СтрЗаменить(Стр, "ТестовоеПриложение.ПолучитьПодчиненныеОбъекты()", "КонтекстСохраняемый.ТестовоеПриложение.ПолучитьПодчиненныеОбъекты()");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПервоеКлючевоеСлово(СчетчикДействий, ТипДействия = Неопределено)
	СчетчикДействий = СчетчикДействий + 1;
	Если (СчетчикДействий > 1) и (ТипДействия = "ОткрытиеОкна") Тогда
		Возврат "	Тогда";
	КонецЕсли;

	Если СчетчикДействий = 1 Тогда
		Возврат "	Когда";
	Иначе
		Возврат "	И";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ДобавитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, Имя);
	ИдВМассиве                 = ИдВМассиве + 1;
	МассивОбъектов[ИдВМассиве] = Имя;
	МассивСвойств [ИдВМассиве] = Новый Соответствие;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве)
	МассивОбъектов[ИдВМассиве] = Неопределено;
	МассивСвойств [ИдВМассиве] = Неопределено;
	ИдВМассиве                 = ИдВМассиве - 1;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПараметрыВСтрокеПримера(Знач Стр)
	Массив = Новый Массив;

	Стр = СтрЗаменить(Стр, "\|", "~ЭкранированиеВертикальнойЧерты~");

	Стр = СокрЛП(Стр);
	Если Лев(Стр, 1) <> "|" Тогда
		Возврат Массив;
	КонецЕсли;

	Если Прав(Стр, 1) <> "|" Тогда
		Возврат Массив;
	КонецЕсли;

	Стр = Сред(Стр, 2);
	Стр = Сред(Стр, 1, СтрДлина(Стр) - 1);
	//убрали символы |

	Массив = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");

	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		Массив[Ккк] = СокрЛП(Массив[Ккк]);
		Массив[Ккк] = СтрЗаменить(Массив[Ккк], "~ЭкранированиеВертикальнойЧерты~", "\|");
	КонецЦикла;

	Спс = Новый СписокЗначений;
	Для каждого Элем Из Массив Цикл
		Спс.Добавить(Элем);
	КонецЦикла;

	Возврат  Спс;
КонецФункции

&НаКлиенте
Процедура УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(Текст, Стр1, Стр2)
	СтрокаТекста = Текст.ПолучитьСтроку(Текст.КоличествоСтрок());

	Если Найти(СтрокаТекста, Стр1) = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Найти(СтрокаТекста, Стр2) = 0 Тогда
		Возврат;
	КонецЕсли;

	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивДублирующихсяЗаголовоковСервер(МассивЗаголовковПолей)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Заголовок");

	Для Н = 1 По МассивЗаголовковПолей.Количество() Цикл
		Тзн.Добавить();
	КонецЦикла;

	Тзн.ЗагрузитьКолонку(МассивЗаголовковПолей, "Заголовок");

	Тзн.Колонки.Добавить("Кол");

	Для каждого СтрТзн Из Тзн Цикл
		СтрТзн.Кол = 1;
	КонецЦикла;

	Тзн.Свернуть("Заголовок", "Кол");

	Рез = Новый Массив;
	Для каждого СтрТзн Из Тзн Цикл
		Если СтрТзн.Кол > 1 Тогда
			Рез.Добавить(СтрТзн.Заголовок);
		КонецЕсли;
	КонецЦикла;

	Возврат Рез;
КонецФункции

&НаКлиенте
Функция ПреобразоватьМассивСостояниеФормTestClient(МассивСостояниеФорм)

	Массив = Новый Массив;

	Если МассивСостояниеФорм = Неопределено Тогда
		Возврат Массив;
	КонецЕсли;

	Для каждого СостояниеФормы Из МассивСостояниеФорм Цикл
		Рез = Новый Структура;
		Рез.Вставить("ИмяФормы", СостояниеФормы.ИмяФормы);
		Рез.Вставить("ТекстЗаголовка", СостояниеФормы.ТекстЗаголовка);

		МассивЗаголовковПолей = СостояниеФормы.МассивЗаголовковПолей;
		МассивДублирующихсяЗаголовоковПолей = ПолучитьМассивДублирующихсяЗаголовоковСервер(МассивЗаголовковПолей);
		Рез.Вставить("МассивДублирующихсяЗаголовоковПолей", МассивДублирующихсяЗаголовоковПолей);

		МассивЗаголовковКнопок = СостояниеФормы.МассивЗаголовковКнопок;
		МассивДублирующихсяЗаголовоковКнопок = ПолучитьМассивДублирующихсяЗаголовоковСервер(МассивЗаголовковКнопок);
		Рез.Вставить("МассивДублирующихсяЗаголовоковКнопок", МассивДублирующихсяЗаголовоковКнопок);

		Массив.Добавить(Рез);

	КонецЦикла;

	Возврат Массив;
КонецФункции

&НаКлиенте
Функция СтрокиРавныСУчётомЗвёздочек(Знач Стр1, Знач Стр2)
	//основная строка первая
	Массив1 = РазложитьСтрокуВМассивПодстрокКлиент(Стр1, " ");
	Массив2 = РазложитьСтрокуВМассивПодстрокКлиент(Стр2, " ");

	Если Массив1.Количество() = (Массив2.Количество() + 1) Тогда
		Если Массив1[Массив1.Количество() - 1] = "*" Тогда //значит тут последний символ *
			Массив1.Удалить(Массив1.Количество() - 1);
		КонецЕсли;
	КонецЕсли;

	Если Массив1.Количество() + 1  = Массив2.Количество() Тогда
		Если Массив1[Массив1.Количество() - 1] = "*" Тогда //значит тут последний символ *
			Массив1.Удалить(Массив1.Количество() - 1);
		КонецЕсли;
		Массив2.Удалить(Массив2.Количество() - 1);
		Массив2.Удалить(Массив2.Количество() - 1);
	КонецЕсли;

	Если Массив1.Количество() <> Массив2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Ккк = 0 По Массив1.Количество() - 1 Цикл
		С1 = Массив1[Ккк];
		С2 = Массив2[Ккк];
		Если С1 = С2 Тогда
			Продолжить;
		КонецЕсли;

		Если С1 = "*" Тогда
			Продолжить;
		КонецЕсли;

		Возврат Ложь;

	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФормаЗаголовок, ЗаголовокПоля, ТипОбъекта)
	Для каждого СтруктураФормы Из МассивСтруктурФорм Цикл
		Если СтрокиРавныСУчётомЗвёздочек(ТекущаяФормаЗаголовок, СтруктураФормы.ТекстЗаголовка) Тогда
			Если ТипОбъекта = "ПолеФормы" Тогда
				Если СтруктураФормы.МассивДублирующихсяЗаголовоковПолей.Найти(ЗаголовокПоля) <> Неопределено Тогда
					Отладка("Поле """ + ЗаголовокПоля + """ имеет дубли с таким же заголовком. Поиск будет происходить по имени.");
					Возврат Истина;
				КонецЕсли;
			ИначеЕсли ТипОбъекта = "Кнопка" Тогда
				Если СтруктураФормы.МассивДублирующихсяЗаголовоковКнопок.Найти(ЗаголовокПоля) <> Неопределено Тогда
					Отладка("Кнопка """ + ЗаголовокПоля + """ имеет дубли с таким же заголовком. Поиск будет происходить по имени.");
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ЗаменитьСимволПереводаСтрокВXML(ХМЛСтрокаДействийПользователя)

	Массив = Новый Массив;

	Для Счетчик = 1 По СтрЧислоСтрок(ХМЛСтрокаДействийПользователя) Цикл
		Стр = СтрПолучитьСтроку(ХМЛСтрокаДействийПользователя, Счетчик);
		Стр = СтрЗаменить(Стр, "|", "\|");

		КоличествоДобавленных = Массив.Количество();
		Если КоличествоДобавленных > 1 И Лев(СокрЛП(Стр), 1) <> "<" Тогда
			//тогда нашли перенос строки
			ИдПоследнегоЭлемента = КоличествоДобавленных - 1;
			//TODO ускорить конкатенацию строк ??
			Массив[ИдПоследнегоЭлемента] = Массив[ИдПоследнегоЭлемента] + "\n" + Стр;
			Продолжить;
		КонецЕсли;

		Массив.Добавить(Стр);
	КонецЦикла;

	Результат = СтрСоединить_(Массив, Символы.ПС);
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПреобразоватьСтрокуКДатеИзДанныхXML(Стр)
	Стр = СтрЗаменить(Стр, "-", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, "T", "");

	Попытка
		Дат = Дата(Стр);
	Исключение
		Возврат Стр;
	КонецПопытки;

	Возврат Формат(Дат, "ДФ=dd.MM.yyyy");
КонецФункции

// Разобрать результат записи действий пользователя (хмл-формат) и получить текст фичи
//
// Параметры:
//   Результат - Строка - многострочная строка - результат записи действий пользователя (хмл-формат)
//
&НаКлиенте
Процедура ПолучитьТекстФичиИзДействийПользователя(Результат)

	ТекстРезультат = Новый ТекстовыйДокумент;
	ТекстРезультат.ДобавитьСтроку("");

	ХМЛСтрока = ЗаменитьСимволПереводаСтрокВXML(Результат);

	XML = Новый ЧтениеXML;
	XML.УстановитьСтроку(ХМЛСтрока);

	МассивОбъектов = Новый Массив(100);
	МассивСвойств  = Новый Массив(МассивОбъектов.Количество());
	ИдВМассиве     = -1;

	СчетчикДействий      = 0;
	ТаблицаСвойствСтроки = Неопределено;
	НашлиПанельРазделов  = Ложь; //надо для обхода бага, когда в логе действий пользователя нет нажатия на панель разделов

	ФлагРедактированияТекстаМакета = Ложь;

	ТекущееОкно  = "";
	ТекущаяФорма = "";
	ТекущаяТЧ    = "";
	ДанныеНажатияНаЭлементФормы = Неопределено;
	ЭтоСлужебнаяФорма1С_ВыборТипа = Ложь;
	ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа = Ложь;

	МассивСтруктурФорм = ПреобразоватьМассивСостояниеФормTestClient(МассивСостояниеФормTestClient);

	ЗначениеСтрокиinputText = "";
	Пока XML.Прочитать() Цикл

		ИмяУзла = XML.Имя;
		Если XML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ДобавитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве, ИмяУзла);
			Если (ИмяУзла = "gotoRow") или (ИмяУзла = "expand") или (ИмяУзла = "collapse") Тогда
				ТаблицаСвойствСтроки = Новый Массив();
			ИначеЕсли ИмяУзла = "Field" Тогда
				СвойствоСтроки = Новый Соответствие;
			КонецЕсли;
			Пока XML.ПрочитатьАтрибут() Цикл
				МассивСвойств[ИдВМассиве].Вставить(XML.Имя, XML.Значение);

				Если ИмяУзла = "Field" Тогда
					СвойствоСтроки.Вставить(XML.Имя, XML.Значение);
				КонецЕсли;
			КонецЦикла;

			Если ИмяУзла = "Form" Тогда
				ТекущаяФорма = МассивСвойств[ИдВМассиве]["title"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ТекущееОкно  = МассивСвойств[ИдВМассиве]["caption"];

				Если ТекущееОкно = "Выбор типа данных" Тогда
					ЭтоСлужебнаяФорма1С_ВыборТипа = Истина;
					ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа = Истина;
				Иначе
					ЭтоСлужебнаяФорма1С_ВыборТипа = Ложь;
					ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа = Ложь;
				КонецЕсли;
				ДанныеНажатияНаЭлементФормы = Неопределено;
			ИначеЕсли ИмяУзла = "FormTable" Тогда
				ТекущаяТЧ = МассивСвойств[ИдВМассиве]["name"];
				ДанныеНажатияНаЭлементФормы = Неопределено;
			КонецЕсли;

			Если ИмяУзла = "click" Тогда
				ДанныеНажатияНаЭлементФормы = Неопределено;
				Если МассивОбъектов[ИдВМассиве - 1] = "CommandInterfaceButton" Тогда
					Если НРег(МассивСвойств[1]["isMain"]) = "true" Тогда
						Если МассивСвойств[ИдВМассиве - 2]["title"] = "Панель разделов" Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " В панели разделов я выбираю '"
								+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
							НашлиПанельРазделов = Истина;
						ИначеЕсли МассивСвойств[ИдВМассиве - 2]["title"] = "Панель открытых" Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " В панели открытых я выбираю '" +
								ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
						ИначеЕсли (МассивСвойств[ИдВМассиве - 2]["title"] = "Меню функций")
								Или (МассивСвойств[ИдВМассиве - 3]["title"] = "Меню функций") Тогда
							Если Не НашлиПанельРазделов Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
									+ " в xml не найдено значение клика в панели разделов. Проверьте xml, который был получен с TestClient.");
							КонецЕсли;

							ЗаменилиПредыдущуюСтроку = Ложь;
							Если ТекстРезультат.КоличествоСтрок() > 1 Тогда
								ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
								Поз = Найти(НРег(ПредыдущаяСтрока), НРег("В панели разделов я выбираю"));
								Если Поз > 0 Тогда
									ЗаменилиПредыдущуюСтроку = Истина;

									ИмяПанелиРазделов = СокрЛП(Сред(ПредыдущаяСтрока, Поз + СтрДлина("В панели разделов я выбираю")));

									ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());

									ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В командном интерфейсе я выбираю " + ИмяПанелиРазделов +  " '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
								КонецЕсли;
							КонецЕсли;

							Если НЕ ЗаменилиПредыдущуюСтроку Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В панели функций я выбираю '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
							КонецЕсли;

							НашлиПанельРазделов = Ложь;
						Иначе
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " Я нажимаю кнопку командного интерфейса '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
						КонецЕсли;
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " В текущем окне я нажимаю кнопку командного интерфейса '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
					КонецЕсли;

				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormButton" Тогда

					ЭтоКонтекстаноеМеню = Ложь;
					ИдПоискаМеню = 2;
					Пока Истина Цикл
						Если МассивОбъектов[ИдВМассиве - ИдПоискаМеню] <> "FormGroup" Тогда
							Прервать;
						КонецЕсли;

						Если Найти(Нрег(МассивСвойств[ИдВМассиве - ИдПоискаМеню]["name"]), "контекстноеменю") > 0 Тогда
							ЭтоКонтекстаноеМеню = Истина;
							Прервать;
						КонецЕсли;

						ИдПоискаМеню = ИдПоискаМеню + 1;

						Если ИдПоискаМеню = ИдВМассиве Тогда
							Прервать;
						КонецЕсли;

					КонецЦикла;

					Если ЭтоКонтекстаноеМеню  Тогда
						ЗаголовокОбъекта = МассивСвойств[ИдВМассиве - ИдПоискаМеню - 1]["title"];
						ИмяОбъекта = """" + ЗаголовокОбъекта + """";
						Если (СокрЛП(ЗаголовокОбъекта) = "") или (ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ЗаголовокОбъекта, "ПолеФормы")) Тогда
							ИмяОбъекта = "с именем """ + МассивСвойств[ИдВМассиве - ИдПоискаМеню - 1]["name"] + """";
						КонецЕсли;

						Если ЗначениеЗаполнено(ТекущаяТЧ) Тогда
							ИмяОбъекта = "с именем """ + ТекущаяТЧ + """";
						КонецЕсли;

						ЗаголовокКнопки = МассивСвойств[ИдВМассиве - 1]["title"];
						ИмяКнопки       = """" + ЗаголовокКнопки + """";
						Если (СокрЛП(ЗаголовокКнопки) = "") или (ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ЗаголовокКнопки, "Кнопка")) Тогда
							ИмяКнопки = "с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'";
						КонецЕсли;

						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю пункт контекстного меню " + ИмяКнопки + " на элементе формы " + ИмяОбъекта);
						//И я выбираю пункт контекстного меню "ПунктМеню" на элементе формы с именем "ЭлементФормы"
					Иначе
						ДобавитьКомментарийПодсказкуПоВыборуМетаданныхИзФормыВыбораТипа(
							ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа, СчетчикДействий, ТекстРезультат,
							ЭтоСлужебнаяФорма1С_ВыборТипа);

						ЗаголовокОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						ИмяОбъекта = "'" + ЗаголовокОбъекта + "'";
						Если (СокрЛП(ЗаголовокОбъекта) = "")
								Или (ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма,
									ЗаголовокОбъекта, "Кнопка")) Тогда
							ИмяОбъекта = "с именем '"
								+ ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'";
						КонецЕсли;

						ДобавитьОбычнуюСтроку = Истина;
						Если ТекущаяТЧ = "" Тогда
							ДобавитьОбычнуюСтроку = Истина;
						Иначе
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ТекущаяТЧ + """ я нажимаю на кнопку " + ИмяОбъекта);
							ДобавитьОбычнуюСтроку = Ложь;
						КонецЕсли;

						Если ДобавитьОбычнуюСтроку Тогда
							ДанныеНажатияНаЭлементФормы = Новый Структура;
							ДанныеНажатияНаЭлементФормы.Вставить("ТекущееОкно", ТекущееОкно);
							ДанныеНажатияНаЭлементФормы.Вставить("ИмяКнопки", ЗаголовокОбъекта);
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " я нажимаю на кнопку " + ИмяОбъекта);

							Если ЗаголовокОбъекта = "Провести и закрыть"
								Или  ЗаголовокОбъекта = "Записать и закрыть"
								Или  ЗаголовокОбъекта = "Post and close"
								Или  ЗаголовокОбъекта = "Save and close"
								Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я жду закрытия окна '" + ТекущееОкно + "' в течение 20 секунд");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

				ИначеЕсли (МассивОбъектов[ИдВМассиве - 1] = "FormField") или (МассивОбъектов[ИдВМассиве - 1] = "FormDecoration") Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) <> "" и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы")) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на гиперссылку """ + ИмяОбъекта + """");
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на гиперссылку с именем """ + ИмяОбъекта + """");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "gotoDate" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " у поля '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' я перехожу к дате " + ПреобразоватьСтрокуКДатеИзДанныхXML(МассивСвойств[ИдВМассиве]["date"]));
			ИначеЕсли ИмяУзла = "selectAllRows" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я выделяю все строки");
			ИначеЕсли ИмяУзла = "gotoFirstRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к первой строке");
			ИначеЕсли ИмяУзла = "gotoLastRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к последней строке");
			ИначеЕсли ИмяУзла = "deleteRow" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я удаляю строку");
			ИначеЕсли ИмяУзла = "close" Тогда
				НадоДобавитьДействие = Истина;
				Если ДанныеНажатияНаЭлементФормы <> Неопределено Тогда
					Если ДанныеНажатияНаЭлементФормы.ТекущееОкно = ТекущееОкно Тогда
						Если ДанныеНажатияНаЭлементФормы.ИмяКнопки = "Провести и закрыть" Тогда
							НадоДобавитьДействие = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НадоДобавитьДействие Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " Я закрываю окно '" + МассивСвойств[ИдВМассиве - 1]["caption"] + "'");
				КонецЕсли;
			ИначеЕсли ИмяУзла = "choose" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ДобавитьКомментарийПодсказкуПоВыборуМетаданныхИзФормыВыбораТипа(
						ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа, СчетчикДействий, ТекстРезультат,
						ЭтоСлужебнаяФорма1С_ВыборТипа);

					Если ЭтоСлужебнаяФорма1С_ВыборТипа Тогда
						ДобавляемаяСтрока = " В форме ""Выбор типа данных"" в ТЧ """ + ТекущаяТЧ + " я выбираю текущую строку";
					Иначе
						ДобавляемаяСтрока = " в таблице """ + ТекущаяТЧ + """ я выбираю текущую строку";
					КонецЕсли;
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + ДобавляемаяСтрока);
				КонецЕсли;
			ИначеЕсли ИмяУзла = "startChoosing" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) = "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю кнопку выбора у реквизита с именем """ + ИмяОбъекта + """");
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю кнопку выбора у реквизита """ + ИмяОбъекта + """");
					КонецЕсли;
				Иначе
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если (СокрЛП(ИмяОбъекта) <> "") и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы")) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку выбора у поля """ + ИмяОбъекта + """");
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку выбора у поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "clear" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];

				Если ТекущаяТЧ <> "" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) = "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю кнопку очистить у поля с именем """ + ИмяОбъекта + """");
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я нажимаю кнопку очистить у поля """ + ИмяОбъекта + """");
					КонецЕсли;
				Иначе
					Если (СокрЛП(ИмяОбъекта) <> "") и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы")) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку очистить у поля """ + ИмяОбъекта + """");
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю кнопку очистить у поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "endEditRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					Если МассивСвойств[ИдВМассиве]["cancel"] = "false" Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я завершаю редактирование строки");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "addRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я добавляю новую строку");
				КонецЕсли;
			ИначеЕсли ИмяУзла = "open" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) <> "" и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы")) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку открытия поля """ + ИмяОбъекта + """");
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку открытия поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "create" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) <> "" и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы")) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку создать поля """ + ИмяОбъекта + """");
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я нажимаю на кнопку создать поля с именем """ + ИмяОбъекта + """");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "openDropList" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) <> "" и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы")) Тогда
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "executeChoiceFromChoiceList" Тогда
				ЗначениеВыбораИзСписка = МассивСвойств[ИдВМассиве]["presentation"];
				ТипВыбораЗначенияИзСписка = "точное значение";

				ВПредыдущейСтрокеСценарияЕстьВВодПоСтроке = Ложь;
				ПредыдущаяСтрока = "";
				Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
					ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
				КонецЕсли;

				Если Найти(ПредыдущаяСтрока, "я ввожу текст") > 0 Тогда
					ВПредыдущейСтрокеСценарияЕстьВВодПоСтроке = Истина;
					ЗначениеВыбораИзСписка = ЗначениеСтрокиinputText;
					ТипВыбораЗначенияИзСписка = "по строке";
					Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
						ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли;
				ИначеЕсли Найти(ПредыдущаяСтрока, "я нажимаю кнопку выбора") > 0 Тогда
					//для выпадающего списка шаг выбора сам выберет нужное значение
					Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
						ТекстРезультат.УдалитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли
				КонецЕсли;

				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ТекстРезультат.ДобавитьСтроку("	# Возможны проблемы при использовании точного выбора, т.к. подобный ""быстрый выбор"" актуален только для текущей базы и вашего пользователя.");
					ТекстРезультат.ДобавитьСтроку("	# подробнее в FAQ - Можно ли использовать быстрый выбор из списков 1С в полях ссылочных реквизитов");

					Если ТекущаяТЧ <> "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						ЕстьДубли  = ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы");
						Если СокрЛП(ИмяОбъекта) = "" или ЕстьДубли Тогда
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ТекущаяТЧ + """ из выпадающего списка с именем """ + ИмяОбъекта
								+ """ я выбираю " + ТипВыбораЗначенияИзСписка + " '" + ЗначениеВыбораИзСписка + "'");
						Иначе
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ТекущаяТЧ + """ из выпадающего списка """ + ИмяОбъекта
								+ """ я выбираю " + ТипВыбораЗначенияИзСписка + " '" + ЗначениеВыбораИзСписка + "'");
						КонецЕсли;
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если СокрЛП(ИмяОбъекта) <> "" И
							Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы") Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
									+ " из выпадающего списка """ + ИмяОбъекта + """ я выбираю "
									+ ТипВыбораЗначенияИзСписка + " '" + ЗначениеВыбораИзСписка + "'");
						Иначе
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " из выпадающего списка с именем """ + ИмяОбъекта + """ я выбираю "
								+ ТипВыбораЗначенияИзСписка + " '" + ЗначениеВыбораИзСписка + "'");
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
						+ " из выпадающего списка я выбираю '" + ЗначениеВыбораИзСписка + "'");
				КонецЕсли;

			ИначеЕсли ИмяУзла = "increaseValue" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Если ТекущаяТЧ <> "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если СокрЛП(ИмяОбъекта) = "" Тогда
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ТекущаяТЧ + """ в поле с именем """ + ИмяОбъекта
								+ """ я увеличиваю значение");
						Иначе
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ТекущаяТЧ + """ в поле """ + ИмяОбъекта
								+ """ я увеличиваю значение");
						КонецЕсли;
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если СокрЛП(ИмяОбъекта) <> "" И
							Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы") Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
									+ " в поле """ + ИмяОбъекта + """ я увеличиваю значение");
						Иначе
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в поле с именем """ + ИмяОбъекта + """ я увеличиваю значение");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли ИмяУзла = "decreaseValue" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Если ТекущаяТЧ <> "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если СокрЛП(ИмяОбъекта) = "" Тогда
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ТекущаяТЧ + """ в поле с именем """ + ИмяОбъекта
								+ """ я уменьшаю значение");
						Иначе
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ТекущаяТЧ + """ в поле """ + ИмяОбъекта + """ я уменьшаю значение");
						КонецЕсли;
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
						Если СокрЛП(ИмяОбъекта) <> "" И
							Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы") Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
									+ " в поле """ + ИмяОбъекта + """ я уменьшаю значение");
						Иначе
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в поле с именем """ + ИмяОбъекта + """ я уменьшаю значение");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли ИмяУзла = "executeChoiceFromDropList" Тогда
				ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
				ЕстьДубли  = ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы");

				Если ТекущаяТЧ <> "" Тогда
					Если СокрЛП(ИмяОбъекта) = "" или ЕстьДубли Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я выбираю значение реквизита с именем """ + ИмяОбъекта + """ из формы списка");
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я выбираю значение реквизита """ + ИмяОбъекта + """ из формы списка");
					КонецЕсли;
				Иначе
					Если СокрЛП(ИмяОбъекта) <> "" и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы")) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю значение реквизита """ + ИмяОбъекта + """ из формы списка");
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю значение реквизита с именем """ + ИмяОбъекта + """ из формы списка");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "activate" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					ИмяГруппы   = МассивСвойств[ИдВМассиве - 1]["name"];

					Если ИмяГруппы <> "ГруппаСтраницы" Тогда
						//это стандартное название для "Тестируемая группа формы", Вид = "Страницы"
						Если СокрЛП(ИмяОбъекта) = "" Тогда
							ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я перехожу к закладке с именем """ + ИмяОбъекта + """");
						Иначе
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я перехожу к закладке """ + ИмяОбъекта + """");
						КонецЕсли;
					КонецЕсли;

				ИначеЕсли МассивОбъектов[ИдВМассиве - 1] = "FormField" и ЗначениеЗаполнено(ТекущаяТЧ) Тогда
					//активировали колонку ТЧ
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) <> "" и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы")) Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я активизирую поле """ + ИмяОбъекта + """");
					Иначе
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я активизирую поле с именем """ + ИмяОбъекта + """");
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли ИмяУзла = "expand" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) = "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);

						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я разворачиваю группу с именем """ + ИмяОбъекта + """");
					Иначе

						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);

						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я разворачиваю группу """ + ИмяОбъекта + """");
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли ИмяУзла = "collapse" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormGroup" Тогда
					ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["title"];
					Если СокрЛП(ИмяОбъекта) = "" Тогда
						ИмяОбъекта = МассивСвойств[ИдВМассиве - 1]["name"];
						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);

						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я сворачиваю группу с именем """ + ИмяОбъекта + """");
					Иначе

						УдалитьПредыдущуюСтрокуЕслиЕстьСовпадения(ТекстРезультат, " я перехожу к закладке", ИмяОбъекта);

						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я сворачиваю группу """ + ИмяОбъекта + """");
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли ИмяУзла = "goOneLevelDown" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на один уровень вниз");
				КонецЕсли;
			ИначеЕсли ИмяУзла = "gotoPreviousRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					switchSelection = Ложь;
					Если МассивСвойств[ИдВМассиве]["switchSelection"] = "true" Тогда
						switchSelection = Истина;
					КонецЕсли;

					Если switchSelection Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на одну строку вверх с выделением");
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на одну строку вверх");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "gotoNextRow" Тогда
				Если ТекущаяТЧ <> "" Тогда
					switchSelection = Ложь;
					Если МассивСвойств[ИдВМассиве]["switchSelection"] = "true" Тогда
						switchSelection = Истина;
					КонецЕсли;

					Если switchSelection Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на одну строку вниз с выделением");
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на одну строку вниз");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "goOneLevelUp" Тогда
				Если ТекущаяТЧ <> "" Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице  """ + ТекущаяТЧ + """ я перехожу на один уровень вверх");
				КонецЕсли;
			ИначеЕсли ИмяУзла = "selectOption" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Если СокрЛП(МассивСвойств[ИдВМассиве - 1]["title"]) <> "" Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я меняю значение переключателя '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' на '" + МассивСвойств[ИдВМассиве]["presentation"] + "'");
					Иначе
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я меняю значение переключателя с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' на '" + МассивСвойств[ИдВМассиве]["presentation"] + "'");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "beginEditingCurrentArea" Тогда
				ФлагРедактированияТекстаМакета = Истина;
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличном документе '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я делаю двойной клик на текущей ячейке");
			ИначеЕсли ИмяУзла = "finishEditingCurrentArea" Тогда
				ФлагРедактированияТекстаМакета = Ложь;
			ИначеЕсли ИмяУзла = "setCurrentArea" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					ПредыдущаяСтрока = "";
					Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
						ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
					КонецЕсли;
					ТекущаяСтрока = ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличном документе '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я перехожу к ячейке """ + МассивСвойств[ИдВМассиве]["area"] + """";
					Если ТекущаяСтрока <> ПредыдущаяСтрока Тогда
						//чтобы не добавлять одинаковых шагов
						ТекстРезультат.ДобавитьСтроку(ТекущаяСтрока);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "inputText" Тогда
				АктивныйЭлемент = МассивОбъектов[ИдВМассиве - 1];
				Если АктивныйЭлемент = "FormField" Или АктивныйЭлемент = "Form" Тогда

					Если ФлагРедактированияТекстаМакета Тогда
						ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в табличный документ """ + МассивСвойств[ИдВМассиве - 2]["name"] + """ я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
					Иначе
						ЗаголовокПоля = МассивСвойств[ИдВМассиве - 1]["title"];
						Если ТекущаяТЧ <> "" Тогда
							Если СокрЛП(ЗаголовокПоля) <> "" Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ в поле '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
							Иначе
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ в поле с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
							КонецЕсли;
						Иначе
							Если (СокрЛП(ЗаголовокПоля) <> "") и (Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ЗаголовокПоля, "ПолеФормы")) Тогда
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
							Иначе
								ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в поле с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "' я ввожу текст " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + МассивСвойств[ИдВМассиве]["text"] + "'"));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ЗначениеСтрокиinputText = ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(МассивСвойств[ИдВМассиве]["text"]);
				КонецЕсли;
			ИначеЕсли ИмяУзла = "setCheck" Тогда
				Если МассивОбъектов[ИдВМассиве - 1] = "FormField" Тогда
					Если ТекущаяТЧ <> "" Тогда
						Если СокрЛП(МассивСвойств[ИдВМассиве - 1]["title"]) <> "" Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я изменяю флаг '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
						Иначе
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " в таблице """ + ТекущаяТЧ + """ я изменяю флаг с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'");
						КонецЕсли;
					Иначе
						Если СокрЛП(МассивСвойств[ИдВМассиве - 1]["title"]) <> "" Тогда
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я изменяю флаг '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["title"]) + "'");
						Иначе
							ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я изменяю флаг с именем '" + ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]) + "'");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ИмяОкна = МассивСвойств[ИдВМассиве]["caption"];
				Если ИмяОкна <> Неопределено Тогда
					ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий, "ОткрытиеОкна") + " открылось окно '" + ИмяОкна + "'");
				КонецЕсли;
			ИначеЕсли ИмяУзла = "gotoNextItem" Тогда
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я перехожу к следующему реквизиту");

			ИначеЕсли ИмяУзла = "executeChoiceFromMenu" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве]["presentation"];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю пункт меню '" + ЗначениеМеню + "'");
			ИначеЕсли ИмяУзла = "executeChoiceFromList" Тогда
				ЗначениеМеню = МассивСвойств[ИдВМассиве]["presentation"];
				ТекстРезультат.ДобавитьСтроку(ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + " я выбираю из списка '" + ЗначениеМеню + "'");

			ИначеЕсли ИмяУзла = "clickFormattedStringHyperlink" Тогда
				ПредыдущееСвойство = МассивСвойств[ИдВМассиве - 1];
				ИмяОбъекта     = ПредыдущееСвойство["title"];
				ИмяГиперссылки = МассивСвойств[ИдВМассиве]["title"];

				Если СокрЛП(ИмяОбъекта) <> "" И Не ЕстьДублиЗаголовковУПоля(МассивСтруктурФорм, ТекущаяФорма, ИмяОбъекта, "ПолеФормы") Тогда
					ТекстШага = "%1 у поля ""%2"" я нажимаю гиперссылку '%3'";
				Иначе
					ИмяОбъекта = ПредыдущееСвойство["name"];
					ТекстШага = "%1 у поля с именем ""%2"" я нажимаю гиперссылку '%3'";
				КонецЕсли;
				ТекстРезультат.ДобавитьСтроку(СтрШаблон_(ТекстШага, ПолучитьПервоеКлючевоеСлово(СчетчикДействий), ИмяОбъекта, ИмяГиперссылки));
			КонецЕсли;
		КонецЕсли;

		Если XML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяУзла = "Form" Тогда
				ТекущаяФорма = "";
			ИначеЕсли ИмяУзла = "ClientApplicationWindow" Тогда
				ТекущееОкно = "";
			ИначеЕсли ИмяУзла = "FormTable" Тогда
				ТекущаяТЧ = "";
			КонецЕсли;

			Если ТекущаяТЧ <> "" Тогда
				Если (ИмяУзла = "gotoRow") или (ИмяУзла = "expand") или (ИмяУзла = "collapse") Тогда
					ЕстьСтрокиТаблицы = ТаблицаСвойствСтроки.Количество() > 0;
					Если ЕстьСтрокиТаблицы Тогда
						Стр1 = "| ";
						Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
							Если СокрЛП(СвойствоСтроки["cellText"]) = "" Тогда
								Продолжить;
							КонецЕсли;
							Стр1 = Стр1 + ЗначениеДляТаблицыГеркин(СвойствоСтроки["title"]);
						КонецЦикла;

						Стр2 = "| ";

						Для каждого СвойствоСтроки Из ТаблицаСвойствСтроки Цикл
							Если СокрЛП(СвойствоСтроки["cellText"]) = "" Тогда
								Продолжить;
							КонецЕсли;
							Стр2 = Стр2 + ЗначениеДляТаблицыГеркин(СвойствоСтроки["cellText"]);
						КонецЦикла;

						МассивТаблицы = Новый Массив();
						МассивТаблицы.Добавить(Стр1);
						МассивТаблицы.Добавить(Стр2);

						ФорматироватьТаблицуGherkin(МассивТаблицы);

						Стр = "		" + МассивТаблицы[0] + Символы.ПС + "		" + МассивТаблицы[1];
					КонецЕсли;

					ДобавляемыйШаг = "";
					ДобавлятьПодсказкуПриВыбореТекущегоШагаЕслиНетСтрокТаблицы = Не ЕстьСтрокиТаблицы;
					ИмяТаблицы = ЭкранироватьСпецСимволыДляЗначенияШага(МассивСвойств[ИдВМассиве - 1]["name"]);
					Если ИмяУзла = "gotoRow" Тогда
						ДобавляемаяСтрока = " в таблице """ + ИмяТаблицы +  """ я перехожу к строке:";
						Если ЭтоСлужебнаяФорма1С_ВыборТипа Тогда
							ДобавляемаяСтрока = " В форме ""Выбор типа данных""" + ДобавляемаяСтрока;
							ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа = Ложь;
							ДобавлятьПодсказкуПриВыбореТекущегоШагаЕслиНетСтрокТаблицы = Ложь;

						КонецЕсли;
						ДобавляемыйШаг = ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + ДобавляемаяСтрока;
					ИначеЕсли ИмяУзла = "expand" Тогда
						Если ЕстьСтрокиТаблицы Тогда
							ДобавляемыйШаг = ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ИмяТаблицы +  """ я разворачиваю строку:";
						Иначе
							ДобавляемыйШаг = ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
								+ " в таблице """ + ИмяТаблицы +  """ я разворачиваю текущую строку";
							ДобавлятьПодсказкуПриВыбореТекущегоШагаЕслиНетСтрокТаблицы = Ложь;
						КонецЕсли;
					ИначеЕсли ИмяУзла = "collapse" Тогда
						ДобавляемыйШаг = ПолучитьПервоеКлючевоеСлово(СчетчикДействий)
							+ " в таблице """ + ИмяТаблицы +  """ я сворачиваю строку:";
					КонецЕсли;
					Если ДобавляемыйШаг <> "" Тогда
						ПредыдущаяСтрока = "";
						Если ТекстРезультат.КоличествоСтрок() > 0 Тогда
							ПредыдущаяСтрока = ТекстРезультат.ПолучитьСтроку(ТекстРезультат.КоличествоСтрок());
							// если есть таблица выше, считаем, что есть выбор\переход к нужной строки и подсказку можно не показывать
							Если Прав(СокрП(ПредыдущаяСтрока), 1) = "|" Тогда
								ДобавлятьПодсказкуПриВыбореТекущегоШагаЕслиНетСтрокТаблицы = Ложь;
							КонецЕсли;
						КонецЕсли;

						Если ДобавлятьПодсказкуПриВыбореТекущегоШагаЕслиНетСтрокТаблицы Тогда
							ТекстРезультат.ДобавитьСтроку("	# ВНИМАНИЕ: использование текущей строки без перехода к конкретной строке таблицы может быть ошибочным");
							ТекстРезультат.ДобавитьСтроку("	# Используйте исследователь формы или кнопки получения состояния формы\текущего элемента подменю ""Форма"" на закладке ""Работа с UI"" ");
							ТекстРезультат.ДобавитьСтроку("	# Ниже пример шага для выбора правильной строки таблицы");
							ТекстРезультат.ДобавитьСтроку("	# " + ДобавляемыйШаг);
							ТекстРезультат.ДобавитьСтроку("	#   | Колонка1  | Колонка2  |");
							ТекстРезультат.ДобавитьСтроку("	#   | Значение1 | Значение2 |");
						Иначе
							ТекстРезультат.ДобавитьСтроку(ДобавляемыйШаг);
							ТекстРезультат.ДобавитьСтроку(Стр);
						КонецЕсли;
					КонецЕсли;

				ИначеЕсли ИмяУзла = "Field" Тогда
					ТаблицаСвойствСтроки.Добавить(СвойствоСтроки);
				КонецЕсли;
			КонецЕсли;

			УдалитьУзел(МассивОбъектов, МассивСвойств, ИдВМассиве);
		КонецЕсли;
	КонецЦикла;
	XML.Закрыть();

	ТекстРезультатКод = Новый ТекстовыйДокумент;

	Для НомерСтроки = 1 По ТекстРезультат.КоличествоСтрок() Цикл
		СтрокаТекста = СокрЛП(ТекстРезультат.ПолучитьСтроку(НомерСтроки));
		СтрокаТекста = СтрЗаменить(СтрокаТекста, """", """""");
		ТекстРезультатКод.ДобавитьСтроку("Ванесса.Шаг(""" + СтрокаТекста + """);");
	КонецЦикла;
	Объект.СгенерированныйСценарийКод = ТекстРезультатКод.ПолучитьТекст();

	ТекстРезультат.ВставитьСтроку(1, "#language: ru
	|
	|Функционал: <описание фичи>
	|
	|Как <Роль>
	|Я хочу <описание функционала>
	|Чтобы <бизнес-эффект>
	|
	|Контекст:
	|	Дано Я запускаю сценарий открытия TestClient или подключаю уже существующий
	|
	|
	|Сценарий: <описание сценария>");

	Объект.СгенерированныйСценарий = ТекстРезультат.ПолучитьТекст();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийПодсказкуПоВыборуМетаданныхИзФормыВыбораТипа(ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа, СчетчикДействий, Знач ТекстРезультат, Знач ЭтоСлужебнаяФорма1С_ВыборТипа)

	Перем Строка1;

	Если ЭтоСлужебнаяФорма1С_ВыборТипа И ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа Тогда
		ДобавитьПодсказкуПоПереходуКМетаданномуВСлужебнойФорма1С_ВыборТипа = Ложь;

		Строка1 = "	# #Следующие строки помогут точно выбрать нужное метаданное в форме выбора типа"
		+ ". ВАЖНО наличие именно двух указанных строк";
		ТекстРезультат.ДобавитьСтроку(Строка1);
		Строка1 = " В форме ""Выбор типа данных"" в таблице """" я перехожу к строке:";
		ТекстРезультат.ДобавитьСтроку("	# " + ПолучитьПервоеКлючевоеСлово(СчетчикДействий) + Строка1);
		Строка1 = "	# 		| ''            |";
		ТекстРезультат.ДобавитьСтроку(Строка1);
		Строка1 = "	# 		| НужныйСправочникИлиДокумент |";
		ТекстРезультат.ДобавитьСтроку(Строка1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьXMLВUILogToScript(Стр)
	Если Не ЗначениеЗаполнено(Стр) Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ПутьКОбработке = ДополнитьСлешВПуть(Объект.КаталогИнструментов) + "vendor/1C/UILogToScript.epf";
		ДвоичныеДанныеИлиПутьФичи = ПутьФайлаИлиДвоичныеДанныеДляСервера(ПутьКОбработке);
		Результат = ПолучитьКод1СИзUILogToScriptСервер(ДвоичныеДанныеИлиПутьФичи, Стр);

		ОбработатьПолученныйКодUILogToScript(Результат);

		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат);

		Объект.СгенерированныйКод = Текст.ПолучитьТекст(); //TODO зачем нужно это преобразование в ТекстовыйДокумент?

	Исключение
		Сообщить("Не смог обработать XML в UILogToScript.");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	Попытка
		ПолучитьТекстФичиИзДействийПользователя(Стр);
	Исключение
		Сообщить("Ошибка при получении текста фичи:");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Функция ПодключитьУжеЗапущенныйTestClient(ДанныеЗапускаКлиентаТестирования)
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		Попытка
			ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
			ТестовоеПриложение.УстановитьСоединение();
			Попытка
				Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"), , , Объект.ТаймаутЗапуска1С) Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
				Возврат Ложь;
			КонецПопытки;

			НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
			Если НайденДиалогАвторизации Тогда
				ЗакрытьДиалогАвторизации();
				ВызватьИсключение "Не удалось авторизоваться в базе.";
			КонецЕсли;

			ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение);

			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;

		Возврат Ложь;
	КонецЕсли;

	ТестовоеПриложение = ОбъектКонтекстСохраняемый.ТестовоеПриложение;

	Если ТестовоеПриложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Попытка
		ТестовоеПриложение.УстановитьСоединение();
		ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
		Если ГлавноеОкноТестируемого = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение);
	Исключение
		Попытка
			ТестовоеПриложение.РазорватьСоединение();
			ОбъектКонтекстСохраняемый.ТестовоеПриложение = Неопределено;
		Исключение

		КонецПопытки;

		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ЗапуститьСеансTestClient(ДанныеЗапускаКлиентаТестирования)

	ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивЗанятыхПортов()

	МассивЗанятыхПортов = Новый Массив;
	Если НЕ ЭтоLinux Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");

		ТекстКоманды = "netstat -ano > """ + ИмяВременногоФайла + """";
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды, Истина, Истина); //TODO проверить быстрое использование ВыполнитьКомандуОСБезПоказаЧерногоОкна(..., Истина, Ложь);

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, "UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			Если Стр = "" Тогда
				Продолжить;
			КонецЕсли;

			Порт_ = Сред(Сред(СокрЛП(Стр), 8), 1, Найти(Сред(СокрЛП(Стр), 8), "  "));
			Порт = "";
			Для НомерСимвола = 0 По СтрДлина(Порт_) - 1 Цикл
				СимволСтроки = Сред(Порт_, СтрДлина(Порт_) - НомерСимвола, 1);
				Если СимволСтроки = ":" Тогда
					Прервать;
				КонецЕсли;
				Если Найти("0123456789", СимволСтроки) > 0 Тогда
					Порт = СимволСтроки + Порт;
				КонецЕсли;
			КонецЦикла;

			Попытка
				Порт = Число(Порт);
				МассивЗанятыхПортов.Добавить(Порт);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		Текст.Закрыть();
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		СтрокаЗапуска = "ss -tuwan4 2>/dev/null | awk '{print $5}' | grep ':' | cut -d "":"" -f 2 | sort | uniq  > """ + ИмяВременногоФайла + """"; // взято из #383
		ВыполнитьКомандуОС(СтрокаЗапуска);
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоФайла, "UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			Если Стр = "" Тогда
				Продолжить;
			КонецЕсли;

			Порт = СокрЛП(Стр);
			Попытка
				Порт = Число(Порт);
				МассивЗанятыхПортов.Добавить(Порт);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		Текст.Закрыть();
	КонецЕсли;

	Для каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		МассивЗанятыхПортов.Добавить(СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента);
	КонецЦикла;

	Возврат МассивЗанятыхПортов;

КонецФункции // ПолучитьЗанятыеПорты()

&НаКлиенте
Функция ПолучитьКорректноеИмяTesClient(Знач Стр)
	Стр = Транслит(Стр);
	Стр = СтрЗаменить(Стр, " ", "");
	Стр = СтрЗаменить(Стр, ".", "");
	Стр = СтрЗаменить(Стр, "=", "");
	Стр = СтрЗаменить(Стр, """", "");
	Стр = СтрЗаменить(Стр, ":", "");
	Стр = СтрЗаменить(Стр, ";", "");
	Стр = СтрЗаменить(Стр, "?", "");
	Стр = СтрЗаменить(Стр, "\", "");
	Стр = СтрЗаменить(Стр, "/", "");
	Стр = СтрЗаменить(Стр, "*", "");
	Стр = СтрЗаменить(Стр, "!", "");
	Стр = СтрЗаменить(Стр, "@", "");
	Стр = СтрЗаменить(Стр, "#", "");
	Стр = СтрЗаменить(Стр, "$", "");
	Стр = СтрЗаменить(Стр, "%", "");
	Стр = СтрЗаменить(Стр, "-", "");
	Возврат Стр;
КонецФункции

&НаКлиенте
Функция СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования)
	ИмяКомпьютера = ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера;
	Если Не ЗначениеЗаполнено(ИмяКомпьютера) Тогда
		ИмяКомпьютера = "localhost";
	КонецЕсли;

	Порт = ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента;

	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРИнформация("СозданиеОбъектаТестируемоеПриложение", "ИмяКомпьютера=" + ИмяКомпьютера
		+ "; порт=" + Формат(Порт, "ЧГ="));
	КонецЕсли;

	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		ВтораяЧастьСтроки = ",""" + ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя) + """)";
	Иначе
		ВтораяЧастьСтроки = ")";
	КонецЕсли;
	ТестовоеПриложение = Вычислить("Новый ТестируемоеПриложение(""" + ИмяКомпьютера + """, " + Формат(Порт, "ЧГ=")
	+ ВтораяЧастьСтроки);

	ТекущийTestclientЭтоWebКлиент = Ложь;
	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		ТекущийTestclientЭтоWebКлиент = Истина;
	КонецЕсли;

	Возврат ТестовоеПриложение;
КонецФункции

&НаКлиенте
Процедура УстановитьКонектСTestClient(ТестовоеПриложение)
	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		ОбъектКонтекстСохраняемый = Новый Структура;
	КонецЕсли;

	ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", ТестовоеПриложение);

	МаксДата = ТекущаяДата() + Объект.ТаймаутЗапуска1С;
	Пока Истина Цикл
		Если ТекущаяДата() > МаксДата Тогда
			ВызватьИсключение "Не смог подключить TestClient. Прерывание по таймауту <"
			+ Объект.ТаймаутЗапуска1С + ">";
		КонецЕсли;

		ПолучилосьУстановитьСоединение = Ложь;
		Попытка
			ТестовоеПриложение.УстановитьСоединение();
			ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
			ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение);
			ПолучилосьУстановитьСоединение = Истина;
		Исключение
		КонецПопытки;

		Если ПолучилосьУстановитьСоединение Тогда
			Прервать;
		КонецЕсли;

		Sleep(1);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение)
	ГлавноеОкноТестируемого = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ГлавноеОкноТестируемого = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ГлавноеОкноТестируемого;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение)
	ОбъектКонтекстСохраняемый.Вставить("ТестовоеПриложение", ТестовоеПриложение);
	ГлавноеОкноТестируемого = ПолучитьГлавноеОкноТестируемого(ТестовоеПриложение);
	ОбъектКонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого", ГлавноеОкноТестируемого);
КонецПроцедуры

&НаКлиенте
Функция ОткрытьНовыйСеансTestClientИлиПодключитьУжеСуществующийДляНесколькихКлиентов(ДанныеЗапускаКлиентаТестирования, СтрокаОшибки = Неопределено)
	ПроисходилЗапускTescClient = Ложь;

	Если ПодключитьУжеЗапущенныйTestClient(ДанныеЗапускаКлиентаТестирования) Тогда
		СтрокаСообщения = ПолучитьТекстСообщенияПользователю("$Уже открытый TestClient подключен на %1 порту.$");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		Отладка(СтрокаСообщения);
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ЗаписатьЛогВЖРИнформация("НайденПодключенныйTestClient", "порт=" + Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ="));
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;

	ТестовоеПриложение = Неопределено;
	Попытка
		ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);
	Исключение
		СтрокаОшибки = ПолучитьТекстСообщенияПользователю("$Сеанс должен быть запущен с ключом TESTMANAGER.$");
		СтрокаОшибки = СтрокаОшибки + ОписаниеОшибки();
		СделатьСообщение(СтрокаОшибки);
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$"));
		Возврат Ложь;
	КонецПопытки;

	Попытка
		ЗапуститьСеансTestClient(ДанныеЗапускаКлиентаТестирования);

		//надо создать ещё один эксземпляр - т.к. возможно сменился порт
		ТестовоеПриложение = СоздатьТестовоеПриложение(ДанныеЗапускаКлиентаТестирования);

		УстановитьКонектСTestClient(ТестовоеПриложение);

		Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"), , , Объект.ТаймаутЗапуска1С) Тогда
			ТекстСообщения = "Не дождались отображения окна TestClient. Таймаут <%1>";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Объект.ТаймаутЗапуска1С);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
		Если НайденДиалогАвторизации Тогда
			Sleep(10);
		КонецЕсли;

		НайденДиалогАвторизации = НаЭкранеДиалогАвторизации();
		Если НайденДиалогАвторизации Тогда
			ЗакрытьДиалогАвторизации();
			ВызватьИсключение "Не удалось авторизоваться в базе.";
		КонецЕсли;

		НаЭкранеОкноПредупреждения = НаЭкранеОкноПредупреждения();
		Если НаЭкранеОкноПредупреждения Тогда
			ТекстПредупреждения = ПолучитьТекстПредупреждения();
			ТекстСообщения = "При подключении TestClient возникло сообщение:";
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстПредупреждения;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		Если НЕ ТестовоеПриложение.ОжидатьОтображениеОбъекта(Тип("ТестируемоеОкноКлиентскогоПриложения"), , , Объект.ТаймаутЗапуска1С) Тогда
			ТекстСообщения = "Не дождались отображения окна TestClient. Таймаут <%1>";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Объект.ТаймаутЗапуска1С);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		СтрокаСообщения = ПолучитьТекстСообщенияПользователю("$TestClient подключен на %1 порту.$");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		Отладка(СтрокаСообщения);
		Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
			ЗаписатьЛогВЖРИнформация("ПодключениеTestClient", "порт=" + Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ="));
		КонецЕсли;

		Отладка("ПодключениеTestClient : порт=" + Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ="));

		ЗаполнитьКонтекстСохраняемыйДляТестовоеПриложение(ТестовоеПриложение);

	Исключение
		СделатьСообщение(ОписаниеОшибки());
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$"));
		СтрокаОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;

	Если Не ОбъектКонтекстСохраняемый.Свойство("ПодключенныеTestClient") Тогда
		ОбъектКонтекстСохраняемый.Вставить("ПодключенныеTestClient", Новый Массив);
	КонецЕсли;

	ПодключенныеTestClient = ОбъектКонтекстСохраняемый.ПодключенныеTestClient;

	ТестовоеПриложение      = ОбъектКонтекстСохраняемый.ТестовоеПриложение;
	ГлавноеОкноТестируемого = ОбъектКонтекстСохраняемый.ГлавноеОкноТестируемого;
	ИмяTestClient           = ДанныеЗапускаКлиентаТестирования.Имя;
	Синоним                 = ДанныеЗапускаКлиентаТестирования.Синоним;

	СохранитьКлиентовТестирования();
	УдалитьИзПолучитьКлиентаТестированияПрофиль(ПодключенныеTestClient, ИмяTestClient);

	ПодключенныеTestClient.Добавить(Новый Структура("Имя, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого", ИмяTestClient, Синоним, ТестовоеПриложение, ГлавноеОкноТестируемого));
	ОбъектКонтекстСохраняемый.Вставить("ТекущийПрофильTestClient", ИмяTestClient);

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокуДерева(Строка)
	ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
	Если Строка.Тип = "Область" И НЕ Объект.ПроверкаРаботыVanessaADDВРежимеTestClient Тогда
		Элементы.ДеревоТестов.Свернуть(ИдентификаторСтроки);
		Возврат;
	КонецЕсли;

	Если Строка.ПолучитьЭлементы().Количество()	> 0 Тогда
		Элементы.ДеревоТестов.Развернуть(ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокуДерева(Строка)
	ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
	Элементы.ДеревоТестов.Свернуть(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		РазвернутьСтрокуДерева(Строка);

		Если Строка.Тип = "Область" И НЕ Объект.ПроверкаРаботыVanessaADDВРежимеTestClient Тогда
			Продолжить;
		КонецЕсли;

		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			РазвернутьСтрокиДерева(ПодчиненныеСтроки);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	ДеревоФормыСтроки = Объект.ДеревоТестов.ПолучитьЭлементы();
	РазвернутьСтрокиДерева(ДеревоФормыСтроки);
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетВоВнутреннемФормате(СтруктураОФ)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево = ОбъектСервер.ДеревоТестов;

	Возврат ОбъектСервер.ВывестиОтчетТестированияВоВнутреннемФормате(Дерево, СтруктураОФ);
КонецФункции

&НаКлиенте
Процедура ПодключитьВнешниеОбработкиДляОтладки(ЭтоПлагины = Ложь, РанееПодключенные = Неопределено)
	Перем МассивФорм;
	МассивФорм = Новый Массив;
	Если РанееПодключенные = Неопределено ИЛИ ТипЗнч(РанееПодключенные) <> Тип("Массив") Тогда
		РанееПодключенные = Новый Массив();
	КонецЕсли;

	ФормаVanessa = Неопределено;

	ЗаголовокТестов = "тест_test_";
	ЗаголовокПлагинов = "плагин_plugin_";
	ЧастьЗаголовка = ?(ЭтоПлагины, 7, 5);
	СтрокаПоискаЗаголовка = ?(ЭтоПлагины, ЗаголовокПлагинов, ЗаголовокТестов);

	Окна = ПолучитьОкна();
	Для каждого Окн Из Окна Цикл
		Если ТипЗнч(Окн) = Тип("ОкноКлиентскогоПриложения") Тогда
			Если Найти(СтрокаПоискаЗаголовка, Нрег(Лев(Строка(Окн.Заголовок), ЧастьЗаголовка))) > 0 Тогда
				МассивФорм.Добавить(Окн.ПолучитьСодержимое());
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Если МассивФорм.Количество() > 0 И НЕ ЭтоПлагины Тогда
		Для каждого Форма Из МассивФорм Цикл
			Попытка
				ДобавитьВнешнийСписокПроцедур(Форма.ПолучитьСписокТестов(ЭтаФорма), Форма.УникальныйИдентификатор, Форма);
				ТекстСообщения = "Подключили для отладки форма %1";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Форма.Заголовок);
				Сообщить(ТекстСообщения);
			Исключение
				ТекстСообщения = "Не удалось подключить форма %1 по причине:%2";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Форма.Заголовок);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
				Сообщить(ТекстСообщения);
				//ОписаниеОшибки()
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли МассивФорм.Количество() > 0 И ЭтоПлагины Тогда
		РанееПодключенные = МассивФорм;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция МетаданныеИмяСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмя = ОсновнойОбъект.Метаданные().Имя;

	Возврат НайденноеИмя;
КонецФункции

&НаКлиенте
Процедура АктивироватьСоседнююСтрокуДерева(СтрокаДерва)
	СтрокаРодитель = СтрокаДерва.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокиДерева   = СтрокаРодитель.ПолучитьЭлементы();
	Для Ккк = 0 По СтрокиДерева.Количество() - 1 Цикл
		ТекСтрока = СтрокиДерева[Ккк];

		Если ТекСтрока = СтрокаШагаСКоторогоНадоВыполнятьСценарий Тогда
			Если Ккк < СтрокиДерева.Количество() - 1 Тогда
				НужнаяСтрока = СтрокиДерева[Ккк + 1];
			ИначеЕсли Ккк > 0 Тогда
				НужнаяСтрока = СтрокиДерева[Ккк - 1];
			Иначе
				Продолжить;
			КонецЕсли;

			Элементы.ДеревоТестов.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();

			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокуДереваПоИдСтроки(ИдСтроки, СтрокиДерева, Результат)

	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Результат <> Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если ИдСтроки = СтрокаДерева.ИдСтроки Тогда
			Результат = СтрокаДерева;
			Возврат;
		КонецЕсли;

		ПодчиненныеЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
		НайтиСтрокуДереваПоИдСтроки(ИдСтроки, ПодчиненныеЭлементыСтроки, Результат);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок)
	Для каждого Зн Из СтрокаТабДок Цикл
		Если Зн <> "" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок, УдалятьСтрокиСверху = Истина, УдалятьКолонкиСлева = Истина)
	Если ТабДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ТабДок[0].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если УдалятьСтрокиСверху Тогда
		//пустые строки сверху
		МассивСтрокДляУдаления = Новый Массив;
		Ном = -1;
		Для каждого СтрокаТабДок Из ТабДок Цикл
			Ном = Ном + 1;
			Если ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок) Тогда
				МассивСтрокДляУдаления.Добавить(Ном);
			Иначе
				//значит нашли первую не пустую строку
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Для Ккк = 0 По МассивСтрокДляУдаления.Количество() - 1 Цикл
			ИдМассива = МассивСтрокДляУдаления[МассивСтрокДляУдаления.Количество() - 1 - Ккк];
			ТабДок.Удалить(ИдМассива);
		КонецЦикла;
	КонецЕсли;

	//пустые строки снизу
	МассивСтрокДляУдаления = Новый Массив;
	Для Ккк = 0 По ТабДок.Количество() - 1 Цикл
		Ном          = ТабДок.Количество() - 1 - Ккк;
		СтрокаТабДок = ТабДок[Ном];
		Если ЭтоПустаяСтрокаТабличногоДокумента(СтрокаТабДок) Тогда
			МассивСтрокДляУдаления.Добавить(Ном);
		Иначе
			//значит нашли первую не пустую строку
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Для каждого ИдМассива Из МассивСтрокДляУдаления Цикл
		ТабДок.Удалить(ИдМассива);
	КонецЦикла;

	Если ТабДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если УдалятьКолонкиСлева Тогда
		//пустые колонки слева
		КолКолонок = ТабДок[0].Количество();
		МассивКолонокДляУдаления = Новый Массив;
		Ном = -1;
		Для ИдКолонки = 0 По КолКолонок - 1 Цикл
			КолонкаПустая = Истина;
			Для каждого СтрокаТабДок Из ТабДок Цикл
				Зн = СтрокаТабДок[ИдКолонки];
				Если Зн <> "" Тогда
					КолонкаПустая = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если КолонкаПустая Тогда
				МассивКолонокДляУдаления.Добавить(ИдКолонки);
			Иначе
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Для Ккк = 0 По МассивКолонокДляУдаления.Количество() - 1 Цикл
			ИдМассива = МассивКолонокДляУдаления[МассивКолонокДляУдаления.Количество() - 1 - Ккк];
			Для каждого СтрокаТабДок Из ТабДок Цикл
				СтрокаТабДок.Удалить(ИдМассива);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	//пустые колонки справа
	КолКолонок = ТабДок[0].Количество();
	МассивКолонокДляУдаления = Новый Массив;
	Ном = -1;
	Для Ккк = 0 По КолКолонок - 1 Цикл
		ИдКолонки = КолКолонок - 1 - Ккк;

		КолонкаПустая = Истина;
		Для каждого СтрокаТабДок Из ТабДок Цикл
			Зн = СтрокаТабДок[ИдКолонки];
			Если Зн <> "" Тогда
				КолонкаПустая = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если КолонкаПустая Тогда
			МассивКолонокДляУдаления.Добавить(ИдКолонки);
		Иначе
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Для Ккк = 0 По МассивКолонокДляУдаления.Количество() - 1 Цикл
		ИдМассива = МассивКолонокДляУдаления[Ккк];
		Для каждого СтрокаТабДок Из ТабДок Цикл
			СтрокаТабДок.Удалить(ИдМассива);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
//считывет табличный документ из TestClient по ячейке
//убирает пустые области по краям макета, если они есть, т.к.
//предполагается, что считанные данные будут испльзованы в шагах, которые в качестве параметра получают таблицу Gherkin
//и пустые области убираются, чтобу улучшить читаемость сценария и не заграможать его текстом вида
//| ''               | '' | '' | '' | '' |
//| ''               | '' | '' | '' | '' |
//| 'Полезная часть' | '' | '' | '' | '' |
Функция МакетTestClientПоЯчейкеКакМассив(ЭлементФормы, ДопПараметры = Неопределено)
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
		КонецЕсли;
	КонецЕсли;

	ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Истина;
	Если ТекущийTestclientЭтоWebКлиент Тогда
		Если Версия8312ИлиВыше и НЕ Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
		КонецЕсли;
	КонецЕсли;

	ТабДок        = Новый Массив();
	СчетчикСтрок  = 0;
	ШиринаТаблицы = Неопределено;
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;

		Если НадоСчитатьОбласть Тогда
			Если СчетчикСтрок < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;

			Если СчетчикСтрок > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		Если ТекущийTestclientЭтоWebКлиент и ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда

			Адрес = СформироватьАдресЯчейки(СчетчикСтрок, 1);
			АдресТекущейОбласти = Неопределено;
			Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес) Тогда
				Прервать;
			КонецЕсли;
		Иначе
			//надо читать макет по установленным границам чтения

			Если СчетчикСтрок < СчитываниеМакетаНачСтр Тогда
				Продолжить;
			КонецЕсли;

			Если СчетчикСтрок > (СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1) Тогда
				Прервать;
			КонецЕсли;

		КонецЕсли;

		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Пока Истина Цикл
			СчетчикКолонок = СчетчикКолонок + 1;

			Если НадоСчитатьОбласть Тогда
				Если СчетчикКолонок < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;

				Если СчетчикКолонок > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ТекущийTestclientЭтоWebКлиент Или (ТекущийTestclientЭтоWebКлиент И Не ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти) Тогда
				Если СчетчикКолонок < СчитываниеМакетаНачКол Тогда
					Продолжить;
				КонецЕсли;

				Если СчетчикКолонок > (СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Если ШиринаТаблицы <> Неопределено Тогда
				Если СчетчикКолонок > ШиринаТаблицы Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Адрес = СформироватьАдресЯчейки(СчетчикСтрок, СчетчикКолонок);

			Значение = ЭлементФормы.ПолучитьТекстОбласти(Адрес);
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");

			Если ШиринаТаблицы = Неопределено Тогда
				//проверим, что у нас получилось установить область
				//если не получилось, значит мы пытаемся выйти за границу макета
				Если ТекущийTestclientЭтоWebКлиент и ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
					АдресТекущейОбласти = Неопределено;
					Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес) Тогда
						ШиринаТаблицы = СчетчикКолонок - 1;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			СтрокаТабДок.Добавить(Значение);
		КонецЦикла;

		ТабДок.Добавить(СтрокаТабДок);
	КонецЦикла;

	УдалятьПустыеСтрокиИзМакета = Истина;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("УдалятьПустыеСтрокиИзМакета") Тогда
			УдалятьПустыеСтрокиИзМакета = ДопПараметры.УдалятьПустыеСтрокиИзМакета;
		КонецЕсли;
	КонецЕсли;

	Если УдалятьПустыеСтрокиИзМакета Тогда
		УбратьПустыеСтрокиИКолонкиСКраёвМакета(ТабДок);
	КонецЕсли;

	Возврат ТабДок;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьФайлМакетаВМассив(ПутьМакетаИлиДвоичныеДанные, ДопПараметры)
	НадоСчитатьОбласть = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
		КонецЕсли;
	КонецЕсли;

	ИмяВременногоФайла = Неопределено;
	ПутьМакета = ПутьФайлаПоДвоичнымДаннымСервер(ПутьМакетаИлиДвоичныеДанные, "mxl", ИмяВременногоФайла);

	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ПутьМакета);

	ТабДок = Новый Массив();
	Для Стр = 1 По ТД.ВысотаТаблицы Цикл

		Если НадоСчитатьОбласть Тогда
			Если Стр < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;

			Если Стр > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		СтрокаТабДок = Новый Массив;
		Для Кол = 1 По ТД.ШиринаТаблицы Цикл

			Если НадоСчитатьОбласть Тогда
				Если Кол < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;

				Если Кол > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Значение = ТД.Область(Стр, Кол, Стр, Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");

			СтрокаТабДок.Добавить(Значение);
		КонецЦикла;

		ТабДок.Добавить(СтрокаТабДок);
	КонецЦикла;

	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;

	Возврат ТабДок;
КонецФункции

&НаКлиенте
Функция ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес)
	Если АдресТекущейОбласти = Неопределено Тогда
		ЭлементФормы.УстановитьТекущуюОбласть(Адрес);
		АдресТекущейОбласти = ЭлементФормы.ПолучитьАдресТекущейОбласти();
	КонецЕсли;

	Если НРег(Лев(АдресТекущейОбласти, 1)) = "r" Тогда
		НачСтр1 = -1;
		НачКол1 = -1;
		КолСтр1 = -1;
		КолКол1 = -1;
		ПолучитьПараметрыОбластиМакета(АдресТекущейОбласти, НачСтр1, НачКол1, КолСтр1, КолКол1);

		НачСтр2 = -1;
		НачКол2 = -1;
		КолСтр2 = -1;
		КолКол2 = -1;
		ПолучитьПараметрыОбластиМакета(Адрес, НачСтр2, НачКол2, КолСтр2, КолКол2);
		Если НачСтр1 > НачСтр2 Тогда
			Возврат Ложь; //значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;
		Если НачКол1 > НачКол2 Тогда
			Возврат Ложь; //значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;
		Если КолСтр1 < КолСтр2 Тогда
			Возврат Ложь; //значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;
		Если КолКол1 < КолКол2 Тогда
			Возврат Ложь; //значит АдресТекущейОбласти не находится внутри Адрес
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Функция СформироватьАдресЯчейки(НомерСтроки, НомерКолонки)
	Возврат "R" + XMLСтрока(НомерСтроки) + "C" + XMLСтрока(НомерКолонки);
КонецФункции

&НаКлиенте
Функция ТабличныйДокументTestClientПоЯчейкам(ЭлементФормы, ДопПараметры = Неопределено)
	НадоСчитатьОбласть = Ложь;
	СмещениеСтрок  = 0;
	СмещениеКолонок = 0;

	ПолучатьИменаОбластей = Ложь;
	Если ДопПараметры <> Неопределено Тогда
		ДопПараметры.Вставить("СчитываниеПоЯчейкам", Истина);
		Если ДопПараметры.Свойство("ПолучатьИменаОбластей") Тогда
			ПолучатьИменаОбластей = ДопПараметры.ПолучатьИменаОбластей;
		КонецЕсли;
		Если ДопПараметры.Свойство("НадоСчитатьОбласть") Тогда
			НадоСчитатьОбласть = ДопПараметры.НадоСчитатьОбласть;
			СмещениеСтрок      = ДопПараметры.НачСтр - 1;
			СмещениеКолонок    = ДопПараметры.НачКол - 1;
		КонецЕсли;
	КонецЕсли;

	ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Истина;
	Если ТекущийTestclientЭтоWebКлиент Тогда
		Если Версия8312ИлиВыше и НЕ Версия8313ИлиВыше Тогда
			ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти = Ложь;
		КонецЕсли;
	КонецЕсли;

	ШиринаТаблицы = Неопределено;

	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;

		Если НадоСчитатьОбласть Тогда
			Если СчетчикСтрок < ДопПараметры.НачСтр Тогда
				Продолжить;
			КонецЕсли;
			Если СчетчикСтрок > ДопПараметры.НачСтр + ДопПараметры.КолСтр - 1 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		//проверим, что мы можем перейти на новую строку
		Адрес = СформироватьАдресЯчейки(СчетчикСтрок, 1);
		Если ТекущийTestclientЭтоWebКлиент и ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
			АдресТекущейОбласти = Неопределено;
			Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес) Тогда
				Прервать;
			КонецЕсли;
		Иначе
			//надо читать макет по установленным границам чтения

			Если СчетчикСтрок < СчитываниеМакетаНачСтр Тогда
				Продолжить;
			КонецЕсли;

			Если СчетчикСтрок > (СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1) Тогда
				Прервать;
			КонецЕсли;

		КонецЕсли;

		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Пока Истина Цикл
			СчетчикКолонок = СчетчикКолонок + 1;

			Если НЕ ТекущийTestclientЭтоWebКлиент Или (ТекущийTestclientЭтоWebКлиент И Не ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти) Тогда
				Если СчетчикКолонок < СчитываниеМакетаНачКол Тогда
					Продолжить;
				КонецЕсли;

				Если СчетчикКолонок > (СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Если НадоСчитатьОбласть Тогда
				Если СчетчикКолонок < ДопПараметры.НачКол Тогда
					Продолжить;
				КонецЕсли;
				Если СчетчикКолонок > ДопПараметры.НачКол + ДопПараметры.КолКол - 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Если ШиринаТаблицы <> Неопределено Тогда
				Если СчетчикКолонок > ШиринаТаблицы Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Адрес = СформироватьАдресЯчейки(СчетчикСтрок, СчетчикКолонок);

			Значение = ЭлементФормы.ПолучитьТекстОбласти(Адрес);

			ТекОбласть = ТабДок.Область(СчетчикСтрок - СмещениеСтрок, СчетчикКолонок - СмещениеКолонок, СчетчикСтрок - СмещениеСтрок, СчетчикКолонок - СмещениеКолонок);
			ТекОбласть.Текст = Значение;

			АдресТекущейОбласти = Неопределено;
			Если ПолучатьИменаОбластей Тогда
				ЭлементФормы.УстановитьТекущуюОбласть(Адрес);
				АдресТекущейОбласти = ЭлементФормы.ПолучитьАдресТекущейОбласти();
				Если НРег(Лев(АдресТекущейОбласти, 1)) <> "r" Тогда
					ТекОбласть.Имя = АдресТекущейОбласти;
				КонецЕсли;
			КонецЕсли;

			Если ШиринаТаблицы = Неопределено Тогда
				//проверим, что у нас получилось установить область
				//если не получилось, значит мы пытаемся выйти за границу макета
				Если ТекущийTestclientЭтоWebКлиент и ОпределятьГраницыМакетаWebКлиентаЧерезПереходКОбласти Тогда
					Если НЕ ПерейтиВТабДокTestClientКЯчейке(ЭлементФормы, АдресТекущейОбласти, Адрес) Тогда
						ШиринаТаблицы = СчетчикКолонок - 1;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат ТабДок;
КонецФункции

&НаСервереБезКонтекста
Функция ТабличныйДокументИзДвоичныхДанных(ПутьМакетаИлиДвоичныеДанные)
	ИмяВременногоФайла = Неопределено;
	ПутьМакета = ПутьФайлаПоДвоичнымДаннымСервер(ПутьМакетаИлиДвоичныеДанные, "mxl", ИмяВременногоФайла);

	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ПутьМакета);

	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;

	Возврат ТД;
КонецФункции

&НаСервереБезКонтекста
Функция ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ПутьМакетаИлиДвоичныеДанные,
		СчитываниеМакетаНачСтр, СчитываниеМакетаНачКол,	СчитываниеМакетаКолСтр, СчитываниеМакетаКолКол)

	ИмяВременногоФайла = Неопределено;
	ПутьМакета = ПутьФайлаПоДвоичнымДаннымСервер(ПутьМакетаИлиДвоичныеДанные, "mxl", ИмяВременногоФайла);
	ТД = Новый ТабличныйДокумент;
	ТД.Прочитать(ПутьМакета);

	Если   СчитываниеМакетаНачСтр = 1
		И СчитываниеМакетаНачКол = 1
		И СчитываниеМакетаКолСтр >= ТД.ВысотаТаблицы
		И СчитываниеМакетаКолКол >= ТД.ШиринаТаблицы
		Тогда
		//значит можно сразу вернуть макет

		Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
		Возврат ТД;
	КонецЕсли;

	//если оказались тут, значит надо считать только область в макете

	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Для Стр = СчитываниеМакетаНачСтр По СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1 Цикл
		СчетчикСтрок = СчетчикСтрок + 1;

		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Для Кол = СчитываниеМакетаНачКол По СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1 Цикл
			СчетчикКолонок = СчетчикКолонок + 1;

			Значение = ТД.Область(Стр, Кол, Стр, Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, "\n");

			ТабДок.Область(СчетчикСтрок, СчетчикКолонок, СчетчикСтрок, СчетчикКолонок).Текст = Значение;
		КонецЦикла;

	КонецЦикла;

	Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;

	Возврат ТабДок;
КонецФункции

&НаКлиенте
Функция ПолучитьСостояниеЭлементаФормыTestClient(ЭлементФормы)
	СтруктураЗначения = Новый Структура;
	СтруктураЗначения.Вставить("Тип", ТипЗнч(ЭлементФормы));
	СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);

	Если ТипЗнч(ЭлементФормы) = Тип("ТестируемаяКнопкаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяТаблицаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);

		Попытка
			ЗначениеТЧ = ПолучитьЗначениеТестируемаяТаблицаФормы(ЭлементФормы);
		Исключение
			ЗначениеТЧ = Неопределено;
		КонецПопытки;

		СтруктураЗначения.Вставить("ЗначениеТЧ", ЗначениеТЧ);

	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяГруппаФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемоеПолеФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеТабличногоДокумента Тогда
			СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ТекстЗаголовка);
		КонецЕсли;
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);

		Попытка
			СтруктураЗначения.Вставить("ТекстРедактирования", ЭлементФормы.ПолучитьТекстРедактирования());
		Исключение
		КонецПопытки;

		Если ЭлементФормы.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
			Попытка
				Если ЭлементФормы.Имя = "" Или ЭлементФормы.ТекущаяДоступность() Тогда
					//если табличный документ был открыт как отдельное окно как ТабДок.Показать(), тогда у него не работет ТекущаяДоступность() (проверено в 8.3.10)
					ТабДок = ПолучитьТабДокИзTestClientКакМассив(ЭлементФормы);
					СтруктураЗначения.Вставить("ТабДок", ТабДок);
				КонецЕсли;
			Исключение
				ТекстСообщения = "Не смог получить значение табличного документа <%1>";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЭлементФормы.Имя);
				Сообщить(ТекстСообщения);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеКартинки Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеГеографическойСхемы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеГрафическойСхемы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДендрограммы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДиаграммы Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеДиаграммыГанта Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеИндикатора Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеКалендаря Тогда
		ИначеЕсли ЭлементФормы.Вид = ВидПоляФормы.ПолеПолосыРегулирования Тогда
		Иначе
			//для остальных надо сохранить представление данных
			Попытка
				Если ЭлементФормы.ТекущаяВидимость() Тогда
					СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ПолучитьПредставлениеДанных());
				КонецЕсли;
			Исключение

			КонецПопытки;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТестируемаяДекорацияФормы") Тогда
		СтруктураЗначения.Вставить("Имя", ЭлементФормы.Имя);
		СтруктураЗначения.Вставить("ТекстЗаголовка", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("ПредставлениеДанных", ЭлементФормы.ТекстЗаголовка);
		СтруктураЗначения.Вставить("Вид", ЭлементФормы.Вид);
	КонецЕсли;

	Попытка
		СтруктураЗначения.Вставить("ТекущаяВидимость", ЭлементФормы.ТекущаяВидимость());
		СтруктураЗначения.Вставить("ТекущаяДоступность", ЭлементФормы.ТекущаяДоступность());
	Исключение
	КонецПопытки;

	Возврат СтруктураЗначения;
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементыКолонкиТаблицы(ТаблицыФормы, МассивКолонокТаблиц)
	МассивЭлементовТаблицы = ТаблицыФормы.НайтиОбъекты();
	Для Каждого ЭлементТаблицы Из МассивЭлементовТаблицы Цикл
		МассивКолонокТаблиц.Добавить(ЭлементТаблицы.Имя);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостояниеФормыTestClient(ДопПараметры)
	ТолькоАктивныйЭлемент = Ложь;
	Если ДопПараметры.Свойство("ТолькоАктивныйЭлемент") Тогда
		ТолькоАктивныйЭлемент = ДопПараметры.ТолькоАктивныйЭлемент;
	КонецЕсли;

	Результат       = Новый Структура;
	МассивРезультат = Новый Массив;

	Если ТипЗнч(ОбъектКонтекстСохраняемый) <> Тип("Структура") Тогда
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$"));
		Возврат Неопределено;
	КонецЕсли;

	Если Не ОбъектКонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда
		СделатьСообщение(ПолучитьТекстСообщенияПользователю("$TestClient НЕ подключен.$"));
		Возврат Неопределено;
	КонецЕсли;

	Попытка
		//попробум найти окно предупреждения
		АктивноеОкно = НайтиОкноМодальногоДиалога();
		Если АктивноеОкно = Неопределено Тогда
			АктивноеОкно = ОбъектКонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
		КонецЕсли;

		ТекущаяФорма = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
		Если ТекущаяФорма = Неопределено Тогда
			СделатьСообщение(ПолучитьТекстСообщенияПользователю("$Активная форма не найдена$"));
			Возврат Неопределено;
		КонецЕсли;

		ДопПараметры.Вставить("ТекущаяФорма", ТекущаяФорма);

		АктивныйЭлемент = Неопределено;
		Если ТолькоАктивныйЭлемент Тогда
			Если ТекущаяФорма.ИмяФормы = "" Тогда
				//скорее всего это форма, полученная через ТабДок.Показать()
				МассивЭлементов = ТекущаяФорма.НайтиОбъекты();
				Если МассивЭлементов.Количество() > 0 Тогда
					АктивныйЭлемент = МассивЭлементов[0];
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				АктивныйЭлемент = ТекущаяФорма.ПолучитьТекущийЭлемент();
			КонецЕсли;

		КонецЕсли;

		ТекстСообщения = "Найдена форма: ТекстЗаголовка=%1, ИмяФормы=%2. Окно <%3>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекущаяФорма.ТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТекущаяФорма.ИмяФормы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", АктивноеОкно.Заголовок);
		Сообщить(ТекстСообщения);
	Исключение
		Сообщить("Ошибка при получении активной формы.");
		ТекстСообщения = "ПолучитьСостояниеФормыTestClient:%1";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
		Сообщить(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	ТекТЧ           = Неопределено;
	Если ТолькоАктивныйЭлемент Тогда
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(АктивныйЭлемент);

		ТаблицыФормы = Новый Массив;
	Иначе
		МассивЭлементов = ТекущаяФорма.НайтиОбъекты();
		ТаблицыФормы    = ТекущаяФорма.НайтиОбъекты(Тип("ТестируемаяТаблицаФормы"));
	КонецЕсли;

	МассивКолонокТаблиц = Новый Массив;
	Для Каждого ТаблицаФормы Из ТаблицыФормы Цикл
		ДобавитьЭлементыКолонкиТаблицы(ТаблицаФормы, МассивКолонокТаблиц);
	КонецЦикла;

	Для каждого Элем Из МассивЭлементов Цикл
		Если МассивКолонокТаблиц.Найти(Элем.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СостояниеЭлемента = ПолучитьСостояниеЭлементаФормыTestClient(Элем);
		МассивРезультат.Добавить(СостояниеЭлемента);

	КонецЦикла;

	Результат.Вставить("ИмяФормы", ТекущаяФорма.ИмяФормы);
	Результат.Вставить("МассивЭлементов", МассивРезультат);

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементИзСтруктурыПоИмени(Имя, Массив)
	Для каждого Элем Из Массив Цикл
		Если Элем.Имя = Имя Тогда
			Возврат Элем;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуИзменения(Стр, Изменение)
	Если Стр = "" Тогда
		Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
	Иначе
		Стр = Стр + "	И     " + Изменение + Символы.ПС;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(Знач Стр)
	Стр = СтрЗаменить(Стр, "\n", Символы.ПС);

	ЭтоМногоСтрочнаяСтрока = Ложь;
	Если Найти(Стр, Символы.ПС) > 0 Тогда
		ЭтоМногоСтрочнаяСтрока = Истина;
	КонецЕсли;

	Если НЕ ЭтоМногоСтрочнаяСтрока Тогда
		Возврат Стр;
	КонецЕсли;

	Стр = УбратьКавычкиАпострофы(Стр);

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Стр, Символы.ПС);

	НоваяСтрока = "";

	ПредставлениеЭкранированныйАпостроф = "__&Апостроф__";

	Для Каждого Элем Из МассивСтрок Цикл
		Элем = СтрЗаменить(Элем, "\'", ПредставлениеЭкранированныйАпостроф);
		Элем = СтрЗаменить(Элем, "'", "\'");
		Элем = СтрЗаменить(Элем, ПредставлениеЭкранированныйАпостроф, "\'");

		НоваяСтрока = НоваяСтрока + Символы.ПС + Символы.Таб + Символы.Таб + "|" + ЗначениеДляТаблицыГеркин(Элем);
	КонецЦикла;

	Возврат НоваяСтрока;
КонецФункции

&НаКлиенте
Функция ЭкранироватьСпецСимволыДляЗначенияШага(Знач Стр)
	Стр = СтрЗаменить(Стр, """", "\""");
	Возврат СтрЗаменить(Стр, "'", "\'");
КонецФункции

&НаКлиенте
Функция ВывестиИзмененияФормыGherkin(Было, Стало)
	Стр = "";

	Для каждого ЭлемСтало Из Стало.МассивЭлементов Цикл
		Имя = ЭлемСтало.Имя;

		Если Было <> Неопределено Тогда
			ЭлемБыло = ПолучитьЭлементИзСтруктурыПоИмени(Имя, Было.МассивЭлементов);
			Если ЭлемБыло = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Для каждого Свойство Из ЭлемСтало Цикл
			Ключ = Свойство.Ключ;

			Если Ключ = "ПредставлениеДанных" Тогда
				ПредставлениеДанных = ЭлемСтало.ПредставлениеДанных;

				Если Было = Неопределено Тогда
					Изменение = "элемент формы с именем """ + ЭлемСтало.Имя + """ стал равен " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + ЭкранироватьСпецСимволыДляЗначенияШага(ПредставлениеДанных) + "'");

					Если Стр = "" Тогда
						Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
					Иначе
						Стр = Стр + "	И     " + Изменение + Символы.ПС;
					КонецЕсли;

					Если ЭлемСтало.Свойство("ТекстРедактирования") Тогда
						Если ЭлемСтало.ТекстРедактирования <> ПредставлениеДанных Тогда
							Изменение = "у элемента формы с именем """ + ЭлемСтало.Имя
								+ """ текст редактирования стал равен "
								+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(
									"'" + ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ТекстРедактирования) + "'");

							Стр = Стр + "	И     " + Изменение + Символы.ПС;
						КонецЕсли;
					КонецЕсли;

				Иначе
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;

					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						Изменение = "элемент формы с именем """ + ЭлемСтало.Имя + """ стал равен "
							+ ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля(
								"'" + ЭкранироватьСпецСимволыДляЗначенияШага(ПредставлениеДанных) + "'");

						Если Стр = "" Тогда
							Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
						Иначе
							Стр = Стр + "	И     " + Изменение + Символы.ПС;
						КонецЕсли;
					КонецЕсли;

					Если ЭлемСтало.Свойство("ТекстРедактирования") Тогда
						Если НЕ ЭлемБыло.Свойство("ТекстРедактирования") Тогда
							ЭлемБыло.Вставить("ТекстРедактирования", Неопределено);
						КонецЕсли;

						Если СокрЛП(ЭлемСтало["ТекстРедактирования"]) <> СокрЛП(ЭлемБыло["ТекстРедактирования"])
							И ПредставлениеДанных <> ЭлемСтало["ТекстРедактирования"]
							Тогда
							Изменение = "у элемента формы с именем """ + ЭлемСтало.Имя + """ текст редактирования стал равен " + ПолучитьКорректноеПредставлениеСтроковогоЗначенияПоля("'" + ЭкранироватьСпецСимволыДляЗначенияШага(ЭлемСтало.ТекстРедактирования) + "'");

							Если Стр = "" Тогда
								Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
							Иначе
								Стр = Стр + "	И     " + Изменение + Символы.ПС;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Ключ = "ТекущаяДоступность" Тогда
				Значение = "доступен";
				Если ЭлемСтало[Ключ] = Ложь Тогда
					Значение = "не доступен";
				КонецЕсли;

				Изменение = "элемент формы с именем """ + ЭлемСтало.Имя + """ " + Значение;

				Если Было = Неопределено Тогда
				Иначе
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;

					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						ДобавитьСтрокуИзменения(Стр, Изменение);
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли Ключ = "ТекущаяВидимость" Тогда
				Значение = "присутствует на форме";
				Если ЭлемСтало[Ключ] = Ложь Тогда
					Значение = "отсутствует на форме";
				КонецЕсли;

				Изменение = "элемент формы с именем """ + ЭлемСтало.Имя + """ " + Значение;

				Если Было = Неопределено Тогда
				Иначе
					Если НЕ ЭлемБыло.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;

					Если СокрЛП(ЭлемСтало[Ключ]) <> СокрЛП(ЭлемБыло[Ключ]) Тогда
						ДобавитьСтрокуИзменения(Стр, Изменение);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Ключ = "ТабДок" Тогда

				СтрТабДок = ПолучитьСтрокуТабличныйДокументФормаTestClient(ЭлемСтало[Ключ]);

				Если СтрТабДок = "" Тогда
					Изменение = "табличный документ формы с именем """ + ЭлемСтало.Имя + """ стал пустым";
					Если Стр = "" Тогда
						Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
					Иначе
						Стр = Стр + "	И     " + Изменение + Символы.ПС;
					КонецЕсли;
				Иначе
					Изменение = "табличный документ формы с именем """ + ЭлемСтало.Имя + """ стал равен:";

					Если Стр = "" Тогда
						Стр = Стр + "	Тогда " + Изменение + Символы.ПС;
					Иначе
						Стр = Стр + "	И     " + Изменение + Символы.ПС;
					КонецЕсли;

					Стр = Стр + СтрТабДок + Символы.ПС;
				КонецЕсли;

			ИначеЕсли Ключ = "ЗначениеТЧ" Тогда
				Если ЭлемСтало[Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Ложь;
				Если (ЭлемСтало[Ключ].Количество() = 0) и ЭлемБыло <> Неопределено И ЭлемБыло[Ключ].Количество() <> 0 Тогда
					НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Истина;
				ИначеЕсли (ЭлемСтало[Ключ].Количество() = 0) и ЭлемБыло = Неопределено Тогда
					НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль = Истина;
				КонецЕсли;

				Если НадоПоказатьЧтоКоличествоСтрокСталоРавноНоль Тогда
					Стр = Стр + "	Тогда в таблице """ + ЭлемСтало.Имя + """ количество строк ""равно"" 0" + Символы.ПС;
					Продолжить;
				КонецЕсли;

				Если (ЭлемБыло = Неопределено) Или (ЭлемБыло[Ключ] = Неопределено) Тогда
					ДобавитьТекстШагаСравненияТаблиц(ЭлемСтало, Ключ, Стр);
				Иначе
					//надо сравнить две ТЧ
					ТЧбыло  = ЭлемБыло[Ключ];
					ТЧстало = ЭлемСтало[Ключ];

					Если ТЧстало.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;

					Если ТЧбыло.Количество() <> ТЧстало.Количество() Тогда
						//значит изменилось количество строк, просто выводим новую таблицу
						ДобавитьТекстШагаСравненияТаблиц(ЭлемСтало, Ключ, Стр);

						Продолжить;
					КонецЕсли;

					ФлагИзмененныеКолонки = Новый Массив;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Для каждого Колонка Из СтрокаСтало Цикл
							ФлагИзмененныеКолонки.Добавить(Ложь);
						КонецЦикла;

						Прервать;
					КонецЦикла;

					Ном = -1;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Ном        = Ном + 1;
						СтрокаБыло = ТЧбыло[Ном];

						идКолонки = -1;
						Для каждого Колонка Из СтрокаСтало Цикл
							идКолонки  = идКолонки + 1;

							ИмяКолонки = Колонка.Ключ;

							ЗначениеБыло  = СтрокаБыло[ИмяКолонки];
							ЗначениеСтало = СтрокаСтало[ИмяКолонки];

							Если ЗначениеБыло <> ЗначениеСтало Тогда
								ФлагИзмененныеКолонки[идКолонки] = Истина;
							КонецЕсли;
						КонецЦикла;

					КонецЦикла;

					ИзмененныеКолонки = Новый Массив;
					Для каждого СтрокаСтало Из ТЧстало Цикл
						Ном = -1;
						Для каждого Колонка Из СтрокаСтало Цикл
							Ном = Ном + 1;
							ИмяКолонки = Колонка.Ключ;
							Если ФлагИзмененныеКолонки[Ном] Тогда
								ИзмененныеКолонки.Добавить(ИмяКолонки);
							КонецЕсли;
						КонецЦикла;

						Прервать;
					КонецЦикла;

					Если ИзмененныеКолонки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;

					ДобавитьТекстШагаСравненияТаблиц(ЭлемСтало, Ключ, Стр, Истина, ИзмененныеКолонки);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ДобавитьТекстШагаСравненияТаблиц(Знач ЭлемСтало, Знач Ключ, Стр, Знач ЭтоТаблицаФормы = Ложь,
		ИзмененныеКолонки = Неопределено)

	НачалоШага = "таблица";
	Если ЭтоТаблицаФормы Тогда
		НачалоШага = "таблица формы с именем";
	КонецЕсли;
	Изменение = НачалоШага + " """ + ЭлемСтало.Имя + """ содержит строки:";
	ДопСтрокаДляКомментария = НачалоШага + " """ + ЭлемСтало.Имя + """ стала равной:";

	Если Стр = "" Тогда
		КлючевоеСловоДляВставки = "	Тогда ";
	Иначе
		КлючевоеСловоДляВставки = "	И     ";
	КонецЕсли;
	Стр = Стр + КлючевоеСловоДляВставки + Изменение + Символы.ПС;
	Стр = Стр + "# " + КлючевоеСловоДляВставки + ДопСтрокаДляКомментария + Символы.ПС;

	СтрТЧ = ПолучитьСтрокуСТЧФормаTestClient(ЭлемСтало[Ключ], ИзмененныеКолонки);

	Стр = Стр + СтрТЧ + Символы.ПС;
КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьМассивСтрокКакТаблицу(МассивСтрок)
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Стр = СокрЛП(МассивСтрок[0]);
	Стр = Сред(Стр, 2, СтрДлина(Стр) - 2);
	Стр = СтрЗаменить(Стр, "\|", ПредставлениеВертЧертыВТабДок);
	МассивСтолбцов = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");

	КолПараметров = МассивСтолбцов.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из МассивСтолбцов Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;

	Для каждого Стр Из МассивСтрок Цикл
		Стр = Сред(Стр, 2, СтрДлина(Стр) - 2);
		Стр = СтрЗаменить(Стр, "\|", ПредставлениеВертЧертыВТабДок);
		МассивСтолбцов = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");

		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивСтолбцов[Ккк]);
			Зн = СтрЗаменить(Зн, ПредставлениеВертЧертыВТабДок, "|");

			ДлинаСтроки = СтрДлина(Зн);
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Ном = -1;
	Для каждого Стр Из МассивСтрок Цикл
		Ном = Ном + 1;
		Стр = Сред(Стр, 2, СтрДлина(Стр) - 2);
		Стр = СтрЗаменить(Стр, "\|", ПредставлениеВертЧертыВТабДок);
		МассивСтолбцов = РазложитьСтрокуВМассивПодстрокКлиент(Стр, "|");

		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество() - 1 Цикл
			Зн = СокрЛП(МассивСтолбцов[Ккк]);
			Зн = СтрЗаменить(Зн, ПредставлениеВертЧертыВТабДок, "\|");

			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + " ";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;

		СтрПараметров = СокрЛП(СтрПараметров);

		МассивСтрок[Ном] = СтрПараметров;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуТабличныйДокументФормаTestClient(ТабДок)
	МассивСтрок = Новый Массив;

	Стр = "|";

	Для каждого СтрокаТабДок Из ТабДок Цикл
		СтрокаТЧ = "|";
		Для каждого КолонкаТабДок Из СтрокаТабДок Цикл
			СтрокаТЧ = СтрокаТЧ + " '" + СтрЗаменить(КолонкаТабДок, "|", ПредставлениеВертЧертыВТабДок) + "' |";

		КонецЦикла;
		МассивСтрок.Добавить(СтрокаТЧ);
	КонецЦикла;

	ФорматироватьМассивСтрокКакТаблицу(МассивСтрок);

	Стр = "";
	Для каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Символы.Таб + Символы.Таб +  Элем + Символы.ПС;
	КонецЦикла;

	Возврат Стр;
КонецФункции

&НаКлиенте
Функция ПолучитьКорректноеЗначениеТаблицыGherkin(Стр)
	ПромСтр = СтрЗаменить(Стр, "|", "\|");
	Возврат СтрЗаменить(ПромСтр, Символы.ПС, "\n")
КонецФункции

&НаКлиенте
Функция ЗначениеДляТаблицыГеркин(Знач ИсходнаяСтрока)
	Пробел = " ";
	Если ПустаяСтрока(ИсходнаяСтрока) Или Найти(ИсходнаяСтрока, """") <> 0 Или Найти(ИсходнаяСтрока, "|") <> 0
		Или Лев(ИсходнаяСтрока, 1) = Пробел Или Прав(ИсходнаяСтрока, 1) = Пробел Тогда

			Результат = " '" + ИсходнаяСтрока + "' |";
	Иначе
		ДобавитьАпострофы = Истина;

		КЧ = Новый КвалификаторыЧисла(20, 5);
		ОписаниеТипа = Новый ОписаниеТипов("Число", КЧ);
		ЧисловоеЗначение = ОписаниеТипа.ПривестиЗначение(ИсходнаяСтрока);

		МаксимальноеЧислоБезРазделителейВПредставлении = 999;
		ЧислоОтображаетсяБезПробелов = ЧисловоеЗначение <= МаксимальноеЧислоБезРазделителейВПредставлении;
		ЭтоЦелоеЧислоБезДробныхЗнаков = Цел(ЧисловоеЗначение) = ЧисловоеЗначение И Найти(ИсходнаяСтрока, ",") = 0;

		Если ЧислоОтображаетсяБезПробелов И ЭтоЦелоеЧислоБезДробныхЗнаков Тогда
			ДобавитьАпострофы = Ложь;
		КонецЕсли;

		Если ДобавитьАпострофы Тогда
			Результат = " '" + ИсходнаяСтрока + "' |";
		Иначе
			Результат = " " + ИсходнаяСтрока + " |";
		КонецЕсли;
	КонецЕсли;
	Результат = СтрЗаменить(Результат, "\'", "'");
	Результат = СтрЗаменить(Результат, "\""", """");
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуСТЧФормаTestClient(ТЧ, ИзмененныеКолонки = Неопределено)
	МассивСтрок = Новый Массив;

	Стр = "|";

	//шапка ТЧ
	Для каждого СтрТЧ Из ТЧ Цикл
		Для каждого Элем Из СтрТЧ Цикл
			Если ИзмененныеКолонки <> Неопределено Тогда
				//значит выводим только нужные колонки
				Если ИзмененныеКолонки.Найти(Элем.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Стр = Стр + ЗначениеДляТаблицыГеркин(Элем.Ключ);
		КонецЦикла;

		Прервать;
	КонецЦикла;

	МассивСтрок.Добавить(Стр);

	Для каждого СтрТЧ Из ТЧ Цикл
		СтрокаТЧ = "|";
		Для каждого Элем Из СтрТЧ Цикл
			Если ИзмененныеКолонки <> Неопределено Тогда
				//значит выводим только нужные колонки
				Если ИзмененныеКолонки.Найти(Элем.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			СтрокаТЧ = СтрокаТЧ + ЗначениеДляТаблицыГеркин(ПолучитьКорректноеЗначениеТаблицыGherkin(Элем.Значение));
		КонецЦикла;

		МассивСтрок.Добавить(СтрокаТЧ);
	КонецЦикла;

	ФорматироватьМассивСтрокКакТаблицу(МассивСтрок);

	Стр = "";
	Для каждого Элем Из МассивСтрок Цикл
		Стр = Стр + Символы.Таб + Символы.Таб +  Элем + Символы.ПС;
	КонецЦикла;

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ПолучитьИзмененияФормы(Тип, ДопПараметры)
	ТекущаяФорма = Неопределено;
	ТекущееСостояниеФормы = ПолучитьСостояниеФормыTestClient(ДопПараметры);
	Если ТекущееСостояниеФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СохраненноеСостояниеФормыTestClient <> Неопределено Тогда
		Если СохраненноеСостояниеФормыTestClient.ИмяФормы <> ТекущееСостояниеФормы.ИмяФормы Тогда
			ТекстСообщения = "Изменилось имя формы: было: %1, стало: %2";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СохраненноеСостояниеФормыTestClient.ИмяФормы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТекущееСостояниеФормы.ИмяФормы);
			Сообщить(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДопПараметры.Вставить("ТекущаяФорма", ТекущаяФорма);

	Если Тип = "Gherkin" Тогда
		Изменения = ВывестиИзмененияФормыGherkin(СохраненноеСостояниеФормыTestClient, ТекущееСостояниеФормы);
	Иначе
		ВызватьИсключение "Неизвестный тип вывода данных по изменению формы.";
	КонецЕсли;

	Объект.СгенерированныйСценарий = Изменения;

	ЭтаФорма.ТекущийЭлемент = Элементы.СгенерированныйСценарий;

	СделатьСообщение("Изменения формы обработаны.");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВременнуюФичу(Стр)
	ИмяФайла = ПолучитьИмяВременногоФайла("feature");

	ЗТ = Новый ЗаписьТекста(ИмяФайла, "UTF-8", , Истина);
	ЗТ.ЗаписатьСтроку("Функционал: Тест");
	ЗТ.ЗаписатьСтроку("Сценарий: Тестовый сценарий");
	ЗТ.ЗаписатьСтроку(Стр);

	ЗТ.Закрыть();

	Возврат ИмяФайла;
КонецФункции

&НаКлиенте
Функция СоздатьСтруктураПараметровДляЗагрузкиШага(ПутьЗагрузки, ДвоичныеДанные)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("DebugLog", Объект.DebugLog);
	СтруктураПараметров.Вставить("ДополнительныеПараметры", Неопределено);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
	СтруктураПараметров.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", ПутьЗагрузки);
	СтруктураПараметров.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	СтруктураПараметров.Вставить("ЯзыкГенератораGherkin", Объект.ЯзыкГенератораGherkin);

	МассивРезультатОбходаКаталоговДляОднойФичи = Новый Массив;
	ф = Новый Файл(ПутьЗагрузки);
	СтруткураФайла = ПолучитьСтруктуруФайлаФичи(1, ф.ИмяБезРасширения, ф.ПолноеИмя, ДвоичныеДанные);
	МассивРезультатОбходаКаталоговДляОднойФичи.Добавить(СтруткураФайла);

	СписокИсключения = ВычестьТеги( Объект.СписокТеговИсключение, Объект.СписокТеговОтбор);

	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов", МассивРезультатОбходаКаталоговДляОднойФичи);
	СтруктураПараметров.Вставить("МассивСообщений", Новый Массив);
	СтруктураПараметров.Вставить("СписокТеговИсключение", СписокИсключения);
	СтруктураПараметров.Вставить("СписокТеговОтбор", Объект.СписокТеговОтбор);
	СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Ложь);
	СтруктураПараметров.Вставить("ЭтоЗагрузкаФич", Истина);

	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ", ТаблицаУжеСуществующихСценариев);

	ДвДанныеvbFeatureReader = ПутьФайлаИлиДвоичныеДанныеДляСервера(ПолучитьПутьКFeatureReader());
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader", ДвДанныеvbFeatureReader);

	Возврат СтруктураПараметров;
КонецФункции

&НаСервере
Процедура ЗагрузитьВременнуюФичуСервер(СтруктураПараметров)
	FeatureReader = СоздатьFeatureReader(СтруктураПараметров.ДвДанныеvbFeatureReader);

	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"); //TODO ?? обойтись без РеквизитФормыВЗначение

	Дерево = Новый ДеревоЗначений;
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ОбъектСервер.СоздатьКолонкиДерева(Дерево);

	Если Не СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(
			СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
		СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев", ТаблицаУжеСуществующихСценариевСервер);
	КонецЕсли;

	ПерваяСтрокаДерева = Дерево.Строки.Добавить();
	ПерваяСтрокаДерева.Имя = "Фичи";
	ПерваяСтрокаДерева.ПолныйПуть = "";

	FeatureReader.ЗагрузитьФичу(СтруктураПараметров.КаталогФич, ПерваяСтрокаДерева.Строки,
		ТзнТаблицаИзвестныхStepDefinition, СтруктураПараметров);

	Если СтруктураПараметров.Свойство("КешФич") Тогда
		СтруктураПараметров.КешФич = Неопределено;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ТаблицаУжеСуществующихСценариев") Тогда
		СтруктураПараметров.ТаблицаУжеСуществующихСценариев = Неопределено;
	КонецЕсли;

	Шаги = Новый Массив;
	ПолучитьШагиИзДерева(Дерево.Строки, Шаги);

	СтруктураПараметров.Вставить("Шаги", Шаги);

	СтруктураПараметров.Вставить("ТаблицаОбластей", Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьШагиИзДерева(ДеревоСтроки, Шаги)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда

			Если СтрокаДерева.Родитель.ДопТип = "СтруктураСценария" Тогда
				// Эти шаги не выполняются в структуре сценария.
				Продолжить;
			КонецЕсли;

			Шаг = Новый Структура;
			Шаг.Вставить("Имя", СтрокаДерева.Имя);
			Шаг.Вставить("СтрокаРеальнойПроцедуры", СтрокаДерева.СтрокаРеальнойПроцедуры);
			Шаг.Вставить("ЗначенияПараметров", СтрокаДерева.ЗначенияПараметров);
			Шаг.Вставить("АдресСнипета", СтрокаДерева.АдресСнипета);
			Шаг.Вставить("ШагСПараметрамиВТаблице", СтрокаДерева.ШагСПараметрамиВТаблице);

			Если СтрокаДерева.ШагСПараметрамиВТаблице = Истина Тогда
				МассивТаблиц = Новый Массив;
				ПарамТаблица = Новый Массив;

				МассивТаблиц.Добавить(ПарамТаблица);

				ПодчиненныеСтроки = СтрокаДерева.Строки;
				Для каждого СтрокаТаблицы Из ПодчиненныеСтроки Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Имя) Тогда
						ПарамТаблица = Новый Массив;
						МассивТаблиц.Добавить(ПарамТаблица);
						Продолжить;
					КонецЕсли;

					СтрокаПарамТаблица = Новый Структура;

					НомерКолонки = 0;
					Для каждого Колонка Из СтрокаТаблицы.ПараметрыТаблицы Цикл
						НомерКолонки       = НомерКолонки + 1;
						СтруктураПараметра = Колонка.Значение;
						Значение           = ПолучитьЗначениеДляПередачиВМетодСервер(СтруктураПараметра.Значение, СтруктураПараметра.Тип);
						Значение           = Вычислить(Значение);

						СтрокаПарамТаблица.Вставить("Кол" + XMlСтрока(НомерКолонки), Значение);
					КонецЦикла;

					ПарамТаблица.Добавить(СтрокаПарамТаблица);
				КонецЦикла;
				Шаг.Вставить("МассивТаблиц", МассивТаблиц);
			КонецЕсли;

			Шаги.Добавить(Шаг);
		Иначе
			ПолучитьШагиИзДерева(СтрокаДерева.Строки, Шаги);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов)
	МассивПараметров = Новый Массив;
	Для Каждого ЭлементМассива Из СписокАргументов Цикл
		Элем = ЭлементМассива.Значение;
		МассивПараметров.Добавить(ПолучитьЗначениеДляПередачиВМетод(Элем.Значение, Элем.Тип));
	КонецЦикла;

	Возврат МассивПараметров;
КонецФункции

&НаКлиенте
Процедура ПодготовитьИВызватьМетод(ИмяШага, ОбработкаТеста, ИмяПроцедуры, МассивПараметров)
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;

	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемШага(ИмяШага);
	КонецЕсли;

	ВсёЕщёИдётВыполнениеШагов = Истина;
	ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	ВсёЕщёИдётВыполнениеШагов = Ложь;

	ОбъектКонтекст            = ОбработкаТеста.Контекст;
	ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляВыполненияОдногоШага(Стр, ДвДанныеvbFeatureReader)
	ВременноеИмяФайла = Неопределено;
	FeatureReader     = СоздатьFeatureReader(ДвДанныеvbFeatureReader, ВременноеИмяФайла);

	ОписаниеШага               = FeatureReader.ПолучитьОписаниеШагаПоСтроке(Стр);
	ТзнИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition"); //TODO ?? обойтись без РеквизитФормыВЗначение

	Поз          = Найти(ОписаниеШага.StepDefinition, "(");
	ИмяПроцедуры = Лев(ОписаниеШага.StepDefinition, Поз - 1);
	ОписаниеШага.Вставить("ИмяПроцедуры", ИмяПроцедуры);

	СтрокаТзнИзвестныхStepDefinition = ТзнИзвестныхStepDefinition.Найти(НРег(ИмяПроцедуры), "СтрокаДляПоиска");
	Если СтрокаТзнИзвестныхStepDefinition = Неопределено Тогда
		ОписаниеШага.Вставить("ШагНайден", Ложь);
	Иначе
		ОписаниеШага.Вставить("ШагНайден", Истина);
		ОписаниеШага.Вставить("ИмяФайла", СтрокаТзнИзвестныхStepDefinition.ИмяФайла);
	КонецЕсли;

	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;

	Возврат ОписаниеШага;
КонецФункции

&НаКлиенте
Процедура ВыполнитьМетодШагЧерезВременныйФичаФайл(Стр)
	ВременнаяФича = ПолучитьВременнуюФичу(Стр);
	ДвоичныеДанные = ПутьФайлаИлиДвоичныеДанныеДляСервера(ВременнаяФича);

	СтруктураПараметров = СоздатьСтруктураПараметровДляЗагрузкиШага(ВременнаяФича, ДвоичныеДанные);
	СтруктураПараметров.Вставить("ЭтоLinux", ЭтоLinux);
	ЗагрузитьВременнуюФичуСервер(СтруктураПараметров);

	Шаги = СтруктураПараметров.Шаги;
	Для каждого ТекШаг Из Шаги Цикл
		Если Не ЗначениеЗаполнено(ТекШаг.АдресСнипета) Тогда
			ТекстСообщения = "Для шага <%1> не найден EPF файл.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекШаг.Имя);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
		СписокАргументов = ТекШаг.ЗначенияПараметров;

		МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);
		Если ТекШаг.ШагСПараметрамиВТаблице = Истина Тогда
			Для Каждого ТабПарам Из ТекШаг.МассивТаблиц Цикл
				МассивПараметров.Добавить(ТабПарам);
			КонецЦикла;
		КонецЕсли;

		АдресСнипета   = ТекШаг.АдресСнипета;
		ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);

		РезультатПрохожденияШага = ОписаниеВложенногоШага(Стр);

		ПодготовитьИВызватьМетод(ТекШаг.Имя, ОбработкаТеста, ИмяПроцедуры, МассивПараметров);

		РезультатПрохожденияШага.Вставить("Статус", "Success");
		РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДляСлужебногоОповещения()
	Оповестить("СлужебноеОповещение", "СлужебноеОповещение");
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОТомЧтоПоЗаголовкуНайденоБольшеОдногоЭлемента(МассивЭлементов, ИмяРеквизита)
	ТекстСообщения = "Обнаружено несколько полей с заголовком <%1>";
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяРеквизита);
	Сообщить(ТекстСообщения);
	Ном = 0;
	Для каждого Элем Из МассивЭлементов Цикл
		Ном = Ном + 1;
		Попытка
			ПредставлениеДанных = Элем.ПолучитьПредставлениеДанных();
		Исключение
			ПредставлениеДанных = "";
		КонецПопытки;

		ТекстСообщения = "№%1. Заголовок=<%2>. Имя=<%3>. ТекстПоля = <%4>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Ном);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Элем.ТекстЗаголовка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", Элем.Имя);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ПредставлениеДанных);
		Сообщить(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

//{снятие скриншота
&НаКлиенте
Функция СформироватьИмяФайлаСкриншота()
	УИД = Новый УникальныйИдентификатор;

	Стр = "" + УИД + "-attachment.png";

	Каталог = Объект.КаталогOutputСкриншоты;

	Стр = ДополнитьСлешВПуть(Каталог) + Стр;

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура СоздатьКаталогСкриншотов()
	Каталог = Объект.КаталогOutputСкриншоты;
	Если НЕ ФайлСуществуетКомандаСистемы(Каталог, "СформироватьИмяФайлаСкриншота") Тогда
		СоздатьКаталогКомандаСистемы(Каталог);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкно()
	СделатьСкриншотТекущегоОкна();

	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибкиКаждогоОкна1С", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкноSikuliX()
	СделатьСообщение("Делаю скриншот.");
	СделатьСкриншотТекущегоОкна();
	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотТекущегоОкна()
	ИмяФайлаСкриншота = СформироватьИмяФайлаСкриншота();
	СделатьСкриншот(ИмяФайлаСкриншота);

	РезультатПрохожденияТестовСценария = ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияТестовСценария;
	Если НЕ РезультатПрохожденияТестовСценария.Свойство("МассивСкриншотов") Тогда
		МассивСкриншотов = Новый Массив();
		РезультатПрохожденияТестовСценария.Вставить("МассивСкриншотов", МассивСкриншотов);
	Иначе
		МассивСкриншотов = РезультатПрохожденияТестовСценария.МассивСкриншотов;
	КонецЕсли;

	ФайлИмяФайлаСкриншота = Новый Файл(ИмяФайлаСкриншота);
	// Не всегда успевает файл записаться, сделаем паузу для случаев ошибки.
	// TODO в идеале надо делать безконтекстный вызов сервера.
	Sleep(1);
	СтруктураСкриншот = Новый Структура;
	СтруктураСкриншот.Вставить("ИмяФайла", ФайлИмяФайлаСкриншота.Имя);
	ДвоичныеДанныеИлиПутьФайла = ПутьФайлаИлиДвоичныеДанныеДляСервера(ИмяФайлаСкриншота);
	СтруктураСкриншот.Вставить("ДвоичныеДанные", ДвоичныеДанныеИлиПутьФайла);
	МассивСкриншотов.Добавить(СтруктураСкриншот);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотыОшибкиКаждогоОкна1С()
	ТекProcessID = ТекProcessID + 1;
	Если ТекProcessID > (МассивPIDОкон1С.Количество() - 1) Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;

	ProcessID = МассивPIDОкон1С[ТекProcessID];

	WshShell = ПолучитьWshShell();

	Попытка
		WshShell.AppActivate(ProcessID);
	Исключение
		СделатьСообщение(ОписаниеОшибки());
	КонецПопытки;

	ПодключитьОбработчикОжидания("СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкно", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX()
	ТекProcessID = ТекProcessID + 1;
	Если ТекProcessID > (МассивКоординатОкон1С.Количество() - 1) Тогда
		ПерейтиКВыполнениюСледующегоСценария();
		Возврат;
	КонецЕсли;

	ТекКоординаты = МассивКоординатОкон1С[ТекProcessID];

	ТекстСообщения = "Активирую окно с координатами: %1;%2";
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", XMLСтрока(ТекКоординаты.x));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", XMLСтрока(ТекКоординаты.y));
	СделатьСообщение(ТекстСообщения);
	ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов + "\tools\Sikuli\ClickCoordinates.sikuli --args " + XMlСтрока(ТекКоординаты.x) + " " + XMlСтрока(ТекКоординаты.y) , -1, Истина);

	ПодключитьОбработчикОжидания("СделатьСкриншотТекущегоОкнаИАктивироватьСледущееОкноSikuliX", 1, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СортироватьМассивКоординат(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("x");
	Тзн.Колонки.Добавить("y");

	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.x = Элем.x;
		СтрТзн.y = Элем.y;
	КонецЦикла;

	Тзн.Сортировать("x");

	Массив = Новый Массив;

	Для Каждого СтрТзн Из Тзн Цикл
		Массив.Добавить(Новый Структура("x,y", СтрТзн.x, СтрТзн.y));
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивКоординатОкон1С()
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	Рез = ВыполнитьSikuliСкрипт(Объект.КаталогИнструментов + "/tools/Sikuli/GetAll1CWindowsCoordinates.sikuli > """ + ИмяФайлаЛога + """", -1, Истина);
	Если Рез <> 0 Тогда
		СделатьСообщение("Не смог выполнить команду по получению координат на экране всех окон 1С в панели задач.");
		Возврат Неопределено;
	КонецЕсли;

	Если Не ФайлСуществуетКомандаСистемы(ИмяФайлаЛога) Тогда
		СделатьСообщение("Не смог выполнить команду по получению координат на экране всех окон 1С в панели задач.");
		Возврат Неопределено;
	КонецЕсли;

	Массив = Новый Массив;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога, "UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		МассивЗначений = РазложитьСтрокуВМассивПодстрокКлиент(Стр, ";");

		Для Ккк = 0 По МассивЗначений.Количество() - 1 Цикл
			МассивЗначений[Ккк] = СокрЛП(МассивЗначений[Ккк]);
		КонецЦикла;

		Если МассивЗначений[0] <> "match" Тогда
			Продолжить;
		КонецЕсли;

		Массив.Добавить(Новый Структура("x,y", Число(МассивЗначений[1]), Число(МассивЗначений[2])));

	КонецЦикла;

	Текст.Закрыть();

	СортироватьМассивКоординат(Массив);

	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура СделатьСкриншотыОшибки()
	Если Объект.СниматьСкриншотКаждогоОкна1С Тогда
		//временное решение через SikuliX скрипт
		СделатьСообщение("Делаю скриншоты всех окон 1С.");
		ТекProcessID = -1;
		МассивКоординатОкон1С = ПолучитьМассивКоординатОкон1С();
		Если МассивКоординатОкон1С = Неопределено Тогда
			СделатьСкриншотТекущегоОкна();
			ПерейтиКВыполнениюСледующегоСценария();
			Возврат;
		КонецЕсли;

		ТекстСообщения = "Найдено %1 окон.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", МассивКоординатОкон1С.Количество());
		СделатьСообщение(ТекстСообщения);

		Если МассивКоординатОкон1С.Количество() = 0 Тогда
			СделатьСообщение("НЕ найдено ни одного окна 1С. Делаю обычный скриншот.");
			СделатьСкриншотТекущегоОкна();
			ПерейтиКВыполнениюСледующегоСценария();
			Возврат;
		КонецЕсли;

		//сделаем текущий скриншот - чтобы не получилось ситуации, что активное окно свернулось
		СделатьСообщение("Делаю общий скриншот.");
		СделатьСкриншотТекущегоОкна();

		СделатьСкриншотыОшибкиКаждогоОкна1СSikuliX();
		Возврат;
	КонецЕсли;

	СделатьСкриншотТекущегоОкна();

	ДействияПослеПолученияРезультатаПрохожденияТестовСценария(
		ЗначениеПараметровДляСнятияСкриншотов.РезультатПрохожденияТестовСценария);

	ПерейтиКВыполнениюСледующегоСценария();
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншотВозникновенияОшибки(ОписаниеШага, СтрокаСценария, РезультатПрохожденияТестовСценария)
	Если Не Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Возврат;
	КонецЕсли;

	ЗначениеПараметровДляСнятияСкриншотов = Новый Структура;
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("ОписаниеШага", ОписаниеШага);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("СтрокаСценария", СтрокаСценария);
	ЗначениеПараметровДляСнятияСкриншотов.Вставить("РезультатПрохожденияТестовСценария",
		РезультатПрохожденияТестовСценария);

	ПодключитьОбработчикОжидания("СделатьСкриншотыОшибки", 1, Истина);

КонецПроцедуры
//}снятие скриншота

&НаКлиенте
Функция ПолучитьМассивСнипетовПрерывающихЗаписьСценария()
	Массив = Новый Массив;
	Массив.Добавить("обратитевнимание");

	Возврат Массив;
КонецФункции

//свёртка дерева до строк фич
&НаКлиенте
Процедура СвернутьДеревоДоФичРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		Если Строка.Тип = "Фича" Тогда
			СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;

		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоФичРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//свёртка дерева до строк сценариев
&НаКлиенте
Процедура СвернутьДеревоДоСценариевРекурсивно(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		Если Строка.Тип = "Фича" Тогда
			РазвернутьСтрокуДерева(Строка);
		КонецЕсли;

		Если Строка.Тип = "Сценарий" Тогда
			СвернутьСтрокуДерева(Строка);
			Продолжить;
		КонецЕсли;

		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СвернутьДеревоДоСценариевРекурсивно(ПодчиненныеСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// несколько клиентов тестирования {

&НаКлиенте
Процедура СброситьФлагПодключенияКлиентаТестирования()
	Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТекущейИнфобазы()

	ДанныеТекущейИнфобазы = Новый Структура;
	ДанныеТекущейИнфобазы.Вставить("Имя", "Этот клиент");

	СвободныйПорт = 1538; //надо так, иначе не подключается уже запущенный TestClient, если была переоткрыта VB

	Отбор = Новый Структура;
	Отбор.Вставить("Имя", "Этот клиент");
	СтрокиДанныеКлиентовТестирования = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	Если СтрокиДанныеКлиентовТестирования.Количество() > 0 Тогда
		СтрокаЭтотКлиент = СтрокиДанныеКлиентовТестирования[0];
	Иначе
		СтрокаЭтотКлиент = ДанныеКлиентовТестирования.Вставить(0); // этот клиент должен быть первым

		КаталогБазы = СтрокаСоединенияИнформационнойБазы();
		ДанныеТекущейИнфобазы.Вставить("ИмяКомпьютера",  "localhost");
		ДанныеТекущейИнфобазы.Вставить("ТипКлиента",     "Тонкий");
		ДанныеТекущейИнфобазы.Вставить("ПутьКИнфобазе",  КаталогБазы);
		ДанныеТекущейИнфобазы.Вставить("ПортЗапускаТестКлиента", СвободныйПорт);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтрокаЭтотКлиент, ДанныеТекущейИнфобазы);

КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьПараметрДляWeb(Знач Стр)
	Стр = СтрЗаменить(Стр, "%", "%25");
	Стр = СтрЗаменить(Стр, "?", "%3F");
	Стр = СтрЗаменить(Стр, "&", "%26");
	Стр = СтрЗаменить(Стр, "=", "%3D");
	Стр = СтрЗаменить(Стр, " ", "%20");
	Стр = СтрЗаменить(Стр, """", "%22");
	Стр = СтрЗаменить(Стр, "/", "%2F");
	Стр = СтрЗаменить(Стр, "\", "%5C");

	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура ДобавитьПараметрКWeb(Стр, ИмяПараметра, Значение = Неопределено)
	Стр = Стр + ?(Найти(Стр, "?") = 0, "?", "&") + ИмяПараметра;
	Если Значение <> Неопределено Тогда
		Стр = Стр + "=" + ПреобразоватьПараметрДляWeb(Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция УбратьКавычки(Стр)
	Если Лев(Стр, 1) = """" и Прав(Стр, 1) = """" Тогда
		Возврат Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;

	Возврат Стр;
КонецФункции

&НаКлиенте
Функция УбратьКавычкиАпострофы(Стр)
	Если Лев(Стр, 1) = """" и Прав(Стр, 1) = """" Тогда
		Возврат Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;

	Если Лев(Стр, 1) = "'" и Прав(Стр, 1) = "'" Тогда
		Возврат Сред(Стр, 2, СтрДлина(Стр) - 2);
	КонецЕсли;

	Возврат Стр;
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПараметровЗапуска(Стр, Разделитель)
	Рез = "";
	КавычкаОткрылась = Ложь;
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр, Ккк, 1);

		Если Символ = """" Тогда
			КавычкаОткрылась = Не КавычкаОткрылась;
		КонецЕсли;

		Если КавычкаОткрылась Тогда
			Если Символ = " " Тогда
				Символ = "~ЭкранированиеПробела~";
			КонецЕсли;
		КонецЕсли;

		Рез = Рез + Символ;
	КонецЦикла;

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Рез, Разделитель);

	Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
		МассивСтрок[Ккк] = СтрЗаменить(МассивСтрок[Ккк], "~ЭкранированиеПробела~", " ")
	КонецЦикла;

	Возврат МассивСтрок;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуЗапускаWebКлиент(ДанныеЗапускаКлиентаТестирования)
	СтрокаЗапуска = СокрЛП(ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе);
	Если НРег(Лев(СтрокаЗапуска, 3)) = "ws=" Тогда
		СтрокаЗапуска = Сред(СтрокаЗапуска, 4);
		СтрокаЗапуска = УбратьКавычки(СтрокаЗапуска);
	КонецЕсли;
	ДобавитьПараметрКWeb(СтрокаЗапуска, "TESTCLIENT");
	ДобавитьПараметрКWeb(СтрокаЗапуска, "TESTCLIENTID",
		ПолучитьКорректноеИмяTesClient(ДанныеЗапускаКлиентаТестирования.Имя));

	МассивДоппараметров = ПолучитьМассивПараметровЗапуска(ДанныеЗапускаКлиентаТестирования.ДопПараметры, " ");
	Для Каждого Элем Из МассивДоппараметров Цикл
		Если Лев(Элем, 2) = "/N" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "N", УбратьКавычки(Сред(Элем, 3)));
		ИначеЕсли Лев(Элем, 2) = "/P" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "P", УбратьКавычки(Сред(Элем, 3)));
		ИначеЕсли Лев(Элем, 2) = "/L" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "L", УбратьКавычки(Сред(Элем, 3)));
		ИначеЕсли Лев(Элем, 3) = "/VL" Тогда
			ДобавитьПараметрКWeb(СтрокаЗапуска, "VL", УбратьКавычки(Сред(Элем, 4)));
		КонецЕсли;
	КонецЦикла;

	Возврат СтрокаЗапуска;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуЗапускаDesktopПриложение(ДанныеЗапускаКлиентаТестирования)
	КаталогБазы = ДанныеЗапускаКлиентаТестирования.ПутьКИнфобазе;
	Если Найти(ВРег(КаталогБазы), ВРег("File=")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "File=", " /F");
	ИначеЕсли Найти(ВРег(КаталогБазы), ВРег("Srvr=")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "Srvr=", "/S");
		КаталогБазы = СтрЗаменить(КаталогБазы, """;Ref=""", "\");
	ИначеЕсли Найти(ВРег(КаталогБазы), ВРег("ws=")) > 0 Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "ws=", " /WS");
	КонецЕсли;
	КаталогБазы = СтрЗаменить(КаталогБазы, ";", "");

	Если ЭтоLinux = Истина Тогда
		КаталогБазы = СтрЗаменить(КаталогБазы, "\", "/");
	КонецЕсли;

	ПараметрыОтладчика = "";
	Если Объект.ЗапускатьТестКлиентВРежимеОтладки Тогда
		// /debug -http -attach /debuggerURL "http://localhost:1560"
		ПараметрыОтладчика = "/debug " + Объект.КлючиОтладки + " /debuggerURL """ + Объект.АдресОтладчика + """";
	КонецЕсли;

	СтрокаЗапуска = "ENTERPRISE " + КаталогБазы + ПараметрыОтладчика + " /TESTCLIENT ";

	СвободныйПорт = ПроверитьПортНаЗанятость(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
	Если СвободныйПорт <> ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента Тогда
		ТекстСообщения = ПолучитьТекстСообщенияПользователю("$Порт %1 занят или находится вне указанного диапазона, порт подключения изменен на %2$");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", СвободныйПорт);
		СделатьСообщение(ТекстСообщения);
		ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента = СвободныйПорт;
		Отбор = Новый Структура;
		Отбор.Вставить("Имя", ДанныеЗапускаКлиентаТестирования.Имя);

		НайденныеКлиенты = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
		Если НайденныеКлиенты.Количество() = 1 Тогда
			НайденныеКлиенты[0].ПортЗапускаТестКлиента = ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента;
		КонецЕсли;
	КонецЕсли;

	СтрокаЗапуска = СтрокаЗапуска + "-TPort " + Формат(ДанныеЗапускаКлиентаТестирования.ПортЗапускаТестКлиента, "ЧГ=") + " ";

	ДопПараметр = ДанныеЗапускаКлиентаТестирования.ДопПараметры + ДопПараметр;
	Если ЭтоЗапускВРежимеКоманднойСтроки Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /CTemp " + ДопПараметр; //добавил /CTemp, чтобы убрать передачу параметра /C в TestClient, с которым был запущен TestManager
	Иначе
		СтрокаЗапуска = СтрокаЗапуска + ДопПараметр;
	КонецЕсли;

	Возврат СтрокаЗапуска;
КонецФункции

&НаКлиенте
Процедура ЗапуститьКлиентаТестирования(ДанныеЗапускаКлиентаТестирования)

	НадоЗапускатьПриложение = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) Тогда
		//Значит не указано имя ПК для запуска. Это равносильно указанию localhost
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли НРег(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) = "localhost" Тогда
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли НРег(ДанныеЗапускаКлиентаТестирования.ИмяКомпьютера) = "127.0.0.1" Тогда
		НадоЗапускатьПриложение = Истина;
	ИначеЕсли ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		//браузер мы можем спокойно запускать
		НадоЗапускатьПриложение = Истина;
	КонецЕсли;

	Если НЕ НадоЗапускатьПриложение Тогда
		Возврат;
	КонецЕсли;

	ПроисходилЗапускTescClient = Истина;

	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		СтрокаЗапуска = ПолучитьСтрокуЗапускаWebКлиент(ДанныеЗапускаКлиентаТестирования);
	Иначе
		СтрокаЗапуска = ПолучитьСтрокуЗапускаDesktopПриложение(ДанныеЗапускаКлиентаТестирования);
	КонецЕсли;

	Отладка("СтрокаЗапуска=" + СтрокаЗапуска);

	Если ДанныеЗапускаКлиентаТестирования.ТипКлиента = "Web" Тогда
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("start """" """ + СтрокаЗапуска + """", Ложь, Ложь);
		Иначе
			ЗапуститьПриложение(СтрокаЗапуска);
		КонецЕсли;

	ИначеЕсли Не ЗначениеЗаполнено(ДанныеЗапускаКлиентаТестирования.ТипКлиента) Или
		Найти(НРег(ДанныеЗапускаКлиентаТестирования.ТипКлиента), "тонкий") > 0 Или
		ЭтоLinux Тогда

		ЗапуститьСистему(СтрокаЗапуска);
	Иначе // толстый клиент для win
		СтрокаЗапуска1с = КаталогПрограммы() + "1cv8";
		Если ЭтоLinux = Ложь Тогда
			СтрокаЗапуска1с = СтрокаЗапуска1с + ".exe";
			ИмяВременногоBAT = ПолучитьИмяВременногоФайла("bat");
			ЗТ = Новый ЗаписьТекста(ИмяВременногоBAT, КодировкаТекста.ANSI, , Истина);
			ЗТ.ЗаписатьСтроку("chcp 1251");
			ЗТ.ЗаписатьСтроку("""" + СтрокаЗапуска1с  + """ " + СтрокаЗапуска);
			ЗТ.Закрыть();

			ВыполнитьКомандуОСБезПоказаЧерногоОкна(ИмяВременногоBAT, Ложь, Ложь); //TODO проверить выполнение, т.к. ранее был вывод в кодировке UTF8
		Иначе
			КомандаСистемы(СтрокаЗапуска1с + " " + СтрокаЗапуска);
		КонецЕсли;

	КонецЕсли;

	Для Каждого НайденнаяСтрока Из ДанныеКлиентовТестирования Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;
	ДанныеЗапускаКлиентаТестирования.Подключен = Истина;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьВсеНастройкиИзХранилища()
	ВосстановитьНастройкиИзХранилища("КаталогФич", "КаталогФич");
	ВосстановитьНастройкиИзХранилища("ДанныеКлиентовТестирования", "ДанныеКлиентовТестирования");
	ВосстановитьНастройкиИзХранилища("ДанныеАллюрМеток", "ДанныеАллюрМеток");


	Для Каждого СтрокаДанныеКлиентовТестирования Из ДанныеКлиентовТестирования Цикл
		СтрокаДанныеКлиентовТестирования.Подключен = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзХранилища(Ключ, ИмяРеквизита)
	ПрефиксИнструмента = "VanessaADD_";
	Если Объект.РежимСамотестирования Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + "autotest_";
	КонецЕсли;

	Успешно = ВосстановитьНастройкиИзХранилищаПоКлючу(ПрефиксИнструмента, Ключ, ИмяРеквизита);
	Если Не Успешно И Не Объект.РежимСамотестирования Тогда
		Успешно = ВосстановитьНастройкиИзХранилищаПоКлючу("VanessaBehavior_", Ключ, ИмяРеквизита);
	КонецЕсли;
	//Ключ = ПрефиксИнструмента + Ключ;

	//СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек(), Ключ);
	//// СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить(ЭтаФорма, Ключ);
	//Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
	//	Если Ложь
	//		Или ИмяРеквизита = "КаталогФич"
	//		Или ИмяРеквизита = "КаталогиБиблиотек"
	//		Тогда

	//		Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
	//			Объект[ИмяРеквизита].Загрузить(СохраненноеЗначение);
	//		Иначе
	//			Объект[ИмяРеквизита] = СохраненноеЗначение;
	//		КонецЕсли;

	//	ИначеЕсли Ложь
	//		Или ИмяРеквизита = "ДанныеКлиентовТестирования"
	//		Или ИмяРеквизита = "ТаблицаИзвестныхStepDefinition"
	//		Или ИмяРеквизита = "КешStepDefinition"
	//		Или ИмяРеквизита = "КешТаблицGherkin"
	//		Тогда

	//		Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
	//			ЭтаФорма[ИмяРеквизита].Загрузить(СохраненноеЗначение);
	//		Иначе
	//			ЭтаФорма[ИмяРеквизита] = СохраненноеЗначение;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройкиИзХранилищаПоКлючу(ПрефиксИнструмента, Ключ, ИмяРеквизита)

	Ключ = ПрефиксИнструмента + Ключ;

	СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек(), Ключ);
	// СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить(ЭтаФорма, Ключ);
	Если Не ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Ложь
		Или ИмяРеквизита = "КаталогФич"
		Или ИмяРеквизита = "КаталогиБиблиотек"
		Тогда

		Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
			Объект[ИмяРеквизита].Загрузить(СохраненноеЗначение);
		Иначе
			Объект[ИмяРеквизита] = СохраненноеЗначение;
		КонецЕсли;

	ИначеЕсли Ложь
		Или ИмяРеквизита = "ДанныеКлиентовТестирования"
		Или ИмяРеквизита = "ТаблицаИзвестныхStepDefinition"
		Или ИмяРеквизита = "КешStepDefinition"
		Или ИмяРеквизита = "КешТаблицGherkin"
		Тогда

		Если ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений") Тогда
			ЭтаФорма[ИмяРеквизита].Загрузить(СохраненноеЗначение);
		Иначе
			ЭтаФорма[ИмяРеквизита] = СохраненноеЗначение;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СохранитьНастройкиВХранилище(Знач Ключ, Знач Значение)
	ПрефиксИнструмента = "VanessaADD_";
	Если Объект.РежимСамотестирования Тогда
		ПрефиксИнструмента = ПрефиксИнструмента + "autotest_";
	КонецЕсли;

	Ключ = ПрефиксИнструмента + Ключ;

	Если ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") Тогда
		ХранилищеОбщихНастроек.Сохранить(ПолучитьИДДляОбщегоСохраненияНастроек(), Ключ, Значение.Выгрузить());
		// ХранилищеОбщихНастроек.Сохранить(ЭтаФорма, Ключ, Значение.Выгрузить());
	Иначе
		ХранилищеОбщихНастроек.Сохранить(ПолучитьИДДляОбщегоСохраненияНастроек(), Ключ, Значение);
		// ХранилищеОбщихНастроек.Сохранить(ЭтаФорма, Ключ, Значение);
	КонецЕсли;
КонецПроцедуры

// }

&НаСервереБезКонтекста
Процедура СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, РежимСамотестирования)
	Если РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить("VanessaADDНедавноЗагруженныеФичи", , НедавноЗагруженныеФичи);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВостановитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи)
	НедавноЗагруженныеФичи = ХранилищеОбщихНастроек.Загрузить("VanessaADDНедавноЗагруженныеФичи");
	Если Не ЗначениеЗаполнено(НедавноЗагруженныеФичи) Тогда
		НедавноЗагруженныеФичи = ХранилищеОбщихНастроек.Загрузить("VanessaBehaviorНедавноЗагруженныеФичи");
		Если НедавноЗагруженныеФичи = Неопределено Тогда
			НедавноЗагруженныеФичи = Новый Массив;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи)
	ПодчиненныеЭлементыНедавноЗагруженныеФичи = Элементы.ГруппаКнопокНедавноЗагруженныеФичи.ПодчиненныеЭлементы;
	КоличествоЭлементовВИнтерфейсе = ПодчиненныеЭлементыНедавноЗагруженныеФичи.Количество();
	Ид = 0;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		Если КоличествоЭлементовВИнтерфейсе < Ид Тогда
			Пункт1 = Элементы.Добавить("МенюЗагрузитьФичи" + Ид, Тип("КнопкаФормы"), Элементы.ГруппаКнопокНедавноЗагруженныеФичи);
		Иначе
			Пункт1 = ПодчиненныеЭлементыНедавноЗагруженныеФичи[Ид - 1];
		КонецЕсли;
		Пункт1.Заголовок  = Элем.Представление;
		Пункт1.ИмяКоманды = "ЗагрузитьНедавнююФичу" + Ид;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФичуВСписокНедавноЗагруженныхФич(Знач Путь)
	Нашли = Ложь;
	Ид = -1;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;

		Если НРег(Элем.Путь) = НРег(Путь) Тогда
			НедавноЗагруженныеФичи.Удалить(Ид);
			Нашли = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ЗначениеМассива = Новый Структура;
	ЗначениеМассива.Вставить("Путь", Путь);
	ЗначениеМассива.Вставить("Представление", "1. " + Путь);
	НедавноЗагруженныеФичи.Вставить(0, ЗначениеМассива);

	Если НедавноЗагруженныеФичи.Количество() > 9 Тогда
		НедавноЗагруженныеФичи.Удалить(9);
	КонецЕсли;

	Ид = -1;
	Для Каждого Элем Из НедавноЗагруженныеФичи Цикл
		Ид = Ид + 1;
		Путь = Элем.Путь;
		Элем.Представление = "" + (Ид + 1) + ". " + Путь;
	КонецЦикла;

	СохранитьНедавноЗагруженныеФичи(НедавноЗагруженныеФичи, Объект.РежимСамотестирования);
	СкопироватьНедавноЗагруженныеФичиВИнтерфейс(НедавноЗагруженныеФичи);

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСценарийСоСтрокиПрисланнойИзвне()
	СделатьСтрокуДереваТекущейПоНомеру(НомерСтрокиСценарияПереданныйИзвне);
	ВыполнитьДанныйСценарийСТекущегоШага();
КонецПроцедуры

&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоНомеру(Ном)
	СтрокиДерева = Объект.ДеревоТестов.ПолучитьЭлементы();

	НадоПрервать = Ложь;
	СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева, Ном, НадоПрервать);
КонецПроцедуры

&НаКлиенте
Процедура СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокиДерева, Ном, НадоПрервать)
	Если НадоПрервать Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.НомерСтрокиВФиче = Ном Тогда
			Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			НадоПрервать = Истина;
			Возврат;
		КонецЕсли;

		СделатьСтрокуДереваТекущейПоНомеруРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Ном, НадоПрервать)
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБрейкПоинт(ПолныйПуть)
	Брейкпоинты.Добавить(ПолныйПуть);
	Если НЕ Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость  Тогда
		Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБрейкПоинт(ПолныйПуть)
	ИД = Брейкпоинты.Найти(ПолныйПуть);
	Если ИД <> Неопределено Тогда
		Брейкпоинты.Удалить(ИД);
	КонецЕсли;

	Если Брейкпоинты.Количество() = 0 Тогда
		Если Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость Тогда
			Элементы.ДеревоТестов.ПодчиненныеЭлементы.ДеревоТестовБрейкпоинт.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуБрейкпоинтаРекурсивно(СтрокиДерева)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Брейкпоинт Тогда
			СтрокаДерева.Брейкпоинт = Ложь;
		КонецЕсли;

		СнятьПометкуБрейкпоинтаРекурсивно(СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СброситьКешИзвестныхStepDefinitionСервер()
	Копия = ТаблицаИзвестныхStepDefinition.Выгрузить();
	Копия.Очистить();
	СохранитьНастройкиВХранилище("ТаблицаИзвестныхStepDefinition", Копия);

	Копия = КешStepDefinition.Выгрузить();
	Копия.Очистить();
	СохранитьНастройкиВХранилище("КешStepDefinition", Копия);

	Копия = КешТаблицGherkin.Выгрузить();
	Копия.Очистить();
	СохранитьНастройкиВХранилище("КешТаблицGherkin", Копия);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаДоступностиВидимостиЭлементов()

	Если Объект.СоздаватьИнструкциюВидео Тогда
		Элементы.НастройкиВидеоИнструкций.Доступность     = Истина;
		Элементы.КаталогOutputИнструкцияВидео.Доступность = Истина;
	Иначе
		Элементы.НастройкиВидеоИнструкций.Доступность     = Ложь;
		Элементы.КаталогOutputИнструкцияВидео.Доступность = Ложь;
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюHTML Тогда
		Элементы.КаталогOutputИнструкцияHTML.Доступность = Истина;
	Иначе
		Элементы.КаталогOutputИнструкцияHTML.Доступность = Ложь;
	КонецЕсли;

	Если Объект.СоздаватьИнструкциюMarkdown Тогда
		Элементы.КаталогOutputИнструкцияMarkdown.Доступность = Истина;
	Иначе
		Элементы.КаталогOutputИнструкцияMarkdown.Доступность = Ложь;
	КонецЕсли;

	Если Объект.ДелатьСкриншотПриВозникновенииОшибки Тогда
		Элементы.КаталогOutputСкриншоты.Доступность = Истина;
	Иначе
		Элементы.КаталогOutputСкриншоты.Доступность = Ложь;
	КонецЕсли;

	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		Элементы.КаталогOutputAllure.Доступность = Истина;
		Элементы.ОтобразитьОтчетAllure.Доступность = Истина;
	Иначе
		Элементы.КаталогOutputAllure.Доступность = Ложь;
		Элементы.ОтобразитьОтчетAllure.Доступность = Ложь;
	КонецЕсли;

	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		Элементы.КаталогOutputjUnit.Доступность = Истина;
	Иначе
		Элементы.КаталогOutputjUnit.Доступность = Ложь;
	КонецЕсли;

	Если Объект.ДелатьОтчетВФорматеCucumberJson Тогда
		Элементы.КаталогOutputCucumberJson.Доступность = Истина;
	Иначе
		Элементы.КаталогOutputCucumberJson.Доступность = Ложь;
	КонецЕсли;

	Если Объект.ДелатьЛогВыполненияСценариевВТекстовыйФайл Тогда
		Элементы.ИмяФайлаЛогВыполненияСценариев.Доступность = Истина;
	Иначе
		Элементы.ИмяФайлаЛогВыполненияСценариев.Доступность = Ложь;
	КонецЕсли;

	Если Объект.ДелатьЛогОшибокВТекстовыйФайл Тогда
		Элементы.ИмяКаталогаЛогОшибок.Доступность = Истина;
	Иначе
		Элементы.ИмяКаталогаЛогОшибок.Доступность = Ложь;
	КонецЕсли;

	Если Объект.ЗаписьВидеоДелатьНаложениеTTS Тогда
		Элементы.ЗаписьВидеоПутьКДвижкуTTS.Доступность = Истина;
		Элементы.ЗаписьВидеоИмяTTS.Доступность         = Истина;
		Элементы.ЗаписьВидеоСловарьЗамен.Доступность   = Истина;
	Иначе
		Элементы.ЗаписьВидеоПутьКДвижкуTTS.Доступность = Ложь;
		Элементы.ЗаписьВидеоИмяTTS.Доступность         = Ложь;
		Элементы.ЗаписьВидеоСловарьЗамен.Доступность   = Ложь;
	КонецЕсли;

	Если Объект.ЗапускатьТестКлиентВРежимеОтладки Тогда
		Элементы.КлючиОтладки.Доступность   = Истина;
		Элементы.АдресОтладчика.Доступность = Истина;
	Иначе
		Элементы.КлючиОтладки.Доступность   = Ложь;
		Элементы.АдресОтладчика.Доступность = Ложь;
	КонецЕсли;

	Элементы.ДанныеАллюрМеток.Видимость = Объект.ДелатьОтчетВФорматеАллюр;

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница)
	Элементы.СгенерированныйСценарий.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Объект.СгенерированныйСценарий, Символы.ПС);

	ВерхняяГраница = НачалоСтроки;
	НижняяГраница  = НачалоСтроки;

	НомерСтроки = НижняяГраница;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки - 1;
		Если НомерСтроки < 1 Тогда
			Прервать;
		КонецЕсли;

		Стр = СокрЛП(МассивСтрок[НомерСтроки - 1]);

		Если Лев(Стр, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;

		НижняяГраница = НомерСтроки;
	КонецЦикла;

	НомерСтроки = ВерхняяГраница;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки > МассивСтрок.Количество() Тогда
			Прервать;
		КонецЕсли;

		Стр = СокрЛП(МассивСтрок[НомерСтроки - 1]);

		Если Лев(Стр, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;

		ВерхняяГраница = НомерСтроки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедактированиеТаблицыGherkin()
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Объект.СгенерированныйСценарий, Символы.ПС);

	МассивСтрокДляРедактирования = Новый Массив;
	Для Ккк = (НижняяГраница - 1) По ВерхняяГраница - 1 Цикл
		МассивСтрокДляРедактирования.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;

	Если МассивСтрокДляРедактирования.Количество() = 0 Тогда
		СделатьСообщение("Не найдена таблица для редактирования.");
		Возврат;
	КонецЕсли;

	Если МассивСтрокДляРедактирования.Количество() = 1 Тогда
		Если Не ЗначениеЗаполнено(МассивСтрокДляРедактирования[0]) Тогда
			СделатьСообщение("Не найдена таблица для редактирования.");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФорматироватьТаблицуGherkin(МассивСтрокДляРедактирования);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтрокДляРедактирования", МассивСтрокДляРедактирования);
	ФормаДобавитьШаг = ПолучитьФорму("ВнешняяОбработка.bddRunner.Форма.РедактированиеТаблицы", ПараметрыФормы);
	ФормаДобавитьШаг.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьТаблицуGherkinПослеРедактирования(МассивСтрокТаблицы)
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	ВерхняяГраница = 0;
	НижняяГраница = 0;
	ОпределитьГраницыТаблицыGherkin(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки, ВерхняяГраница, НижняяГраница);

	ФорматироватьТаблицуGherkin(МассивСтрокТаблицы);

	МассивСтрок = РазложитьСтрокуВМассивПодстрокКлиент(Объект.СгенерированныйСценарий, Символы.ПС);

	НовыйМассивСтрок = Новый Массив;
	НомерСтроки = 0;
	ДобавилиРедактированныеСтроки = Ложь;
	Для Ккк = 0 По МассивСтрок.Количество() - 1 Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки >= НижняяГраница и НомерСтроки <= ВерхняяГраница Тогда
			Если НЕ ДобавилиРедактированныеСтроки Тогда
				ДобавилиРедактированныеСтроки = Истина;

				Для Каждого НоваяСтрока Из МассивСтрокТаблицы Цикл
					НовыйМассивСтрок.Добавить(Символы.Таб + Символы.Таб + НоваяСтрока);
				КонецЦикла;
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		НовыйМассивСтрок.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;

	ФинальнаяСтрока = "";
	Для Каждого Стр Из НовыйМассивСтрок Цикл
		ФинальнаяСтрока = ФинальнаяСтрока + Стр + Символы.ПС;
	КонецЦикла;

	Объект.СгенерированныйСценарий = ФинальнаяСтрока;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиСтатистикуКлиент()
	Если НЕ Версия836ИлиВыше Тогда
		Возврат;
	КонецЕсли;

	Если Не Объект.ИдетВыполнениеСценариев Тогда
		ВывестиСтатистикуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСтатистикуНаСервере()

	тДерево = РеквизитФормыВЗначение("Объект").ДеревоТестов;

	ВсегоФич       = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 1), Истина).Количество();
	ВсегоСценариев = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 2), Истина).Количество();
	ВсегоШагов     = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки", 3), Истина).Количество();

	ВсегоШаговSuccess = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 4, "Success"), Истина).Количество();
	ВсегоШаговFailed  = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 5, "Failed"),  Истина).Количество();
	ВсегоШаговPending = тДерево.Строки.НайтиСтроки(Новый Структура("ТипКартинки, Статус", 6, "Pending"), Истина).Количество();

	ВсегоШаговОбщее = ВсегоШагов + ВсегоШаговSuccess + ВсегоШаговFailed + ВсегоШаговPending;

	СтрокаВсегоШаговSuccess = Вычислить("Новый ФорматированнаяСтрока("""" + ВсегоШаговSuccess, Новый Шрифт(, , Истина), Новый Цвет(21, 177, 14))"); // Жирный, зеленый
	СтрокаВсегоШаговFailed  = Вычислить("Новый ФорматированнаяСтрока("""" + ВсегоШаговFailed,  Новый Шрифт(, , Истина), Новый Цвет(255, 0, 0))");   // Жирный, красный
	СтрокаВсегоШаговPending = Вычислить("Новый ФорматированнаяСтрока("""" + ВсегоШаговPending, Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0))"); // Жирный, оранжевый

	ОбщаяСтрока = "";
	Если ВсегоШаговSuccess + ВсегоШаговPending + ВсегоШаговFailed > 0 Тогда
		ОбщаяСтрока = Вычислить("Новый ФорматированнаяСтрока("", "", СтрокаВсегоШаговSuccess, ""/"", СтрокаВсегоШаговFailed, ""/"", СтрокаВсегоШаговPending)");
	КонецЕсли;

	НеРеализованыхСпипетовВсего = тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 3), Истина).Количество() +
	тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 4), Истина).Количество() +
	тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 5), Истина).Количество() +
	тДерево.Строки.НайтиСтроки(Новый Структура("АдресСнипета, ТипКартинки", "", 6), Истина).Количество();

	Если НеРеализованыхСпипетовВсего > 0 Тогда
		СтрокаНеРеализованыхСпипетовВсего = Вычислить("Новый ФорматированнаяСтрока(""("" + Формат(НеРеализованыхСпипетовВсего, ""ЧГ="") + "")"", Новый Шрифт(, , Истина), Новый Цвет(255, 92, 0))"); // Жирный, оранжевый
	Иначе
		СтрокаНеРеализованыхСпипетовВсего = "";
	КонецЕсли;

	ОбщаяСтатистикаПоФиче = "" + Формат(ВсегоФич, "ЧГ=") + "/" + Формат(ВсегоСценариев, "ЧГ=") + "/" + Формат(ВсегоШаговОбщее, "ЧГ=");
	ОбщаяСтатистикаПоФиче = Вычислить("Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, Новый Шрифт(, , Истина))");
	Элементы.Статистика.Заголовок = Вычислить("Новый ФорматированнаяСтрока(ОбщаяСтатистикаПоФиче, СтрокаНеРеализованыхСпипетовВсего, ОбщаяСтрока)");

	Элементы.Статистика.Подсказка = НСтр("ru = 'Всего фич: '; en = 'Features: '") + ВсегоФич + Символы.ПС +
	НСтр("ru = 'Всего сценариев: '; en = 'Scenarios: '") + ВсегоСценариев + Символы.ПС +
	НСтр("ru = 'Всего шагов: '; en = 'Steps: '") + ВсегоШаговОбщее + Символы.ПС +
	?(НеРеализованыхСпипетовВсего > 0, НСтр("ru = 'Не реализовано шагов: '; en = 'Not implemented: '") + НеРеализованыхСпипетовВсего, "") +
	?(ВсегоШаговSuccess + ВсегоШаговPending + ВсегоШаговFailed > 0,
	Символы.ПС +
	НСтр("ru = 'Результат выполнения шагов '; en = 'Result: '") + "(Success, Failed, Pending): " +
	ВсегоШаговSuccess + "/" + ВсегоШаговFailed + "/" + ВсегоШаговPending + Символы.ПС +
	НСтр("ru = 'Пропущено шагов: '; en = 'Skiped: '") + ВсегоШагов, ""
);

КонецПроцедуры

// { Плагины
// портировано из xUnitFor1C 4.1.1.0

&НаКлиенте
Процедура ЗагрузитьПлагины(Знач Перезагрузить = Ложь, Знач ОбработчикПослеЗавершенияЗагрузки = Неопределено)
	Если Не Перезагрузить И Объект.ПлагиныЗагружены Тогда
		Возврат;
	КонецЕсли;

	Объект.Плагины = Новый Структура;
	КэшФормПлагинов = Новый Структура;

	КаталогПлагинов = ПолучитьПутьКПлагинам();

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОбработчикОповещения", ОбработчикПослеЗавершенияЗагрузки);

	ОбработчикПоискаКлиентскихПлагинов = АСинк().смв_НовыйОписаниеОповещения("ОбработчикПоискаКлиентскихПлагинов", ЭтаФорма, ПараметрыОповещения);
	АСинк().смв_НайтиФайлы(ОбработчикПоискаКлиентскихПлагинов, КаталогПлагинов, "*.epf", Ложь);

КонецПроцедуры

&НаСервере
Функция ПодключитьПлагиныНаСервере(Знач ЗагружаемыеФайлы, Знач ИспользоватьПолноеИмя, Знач ПодключенныеРанее)

	ОписанияПлагинов = Новый Соответствие;
	ЭтотОбъектНаСервере = Объект();

	Для Каждого ОписаниеФайла Из ЗагружаемыеФайлы Цикл

		Если ИспользоватьПолноеИмя Тогда
			КлючФайла = ОписаниеФайла.ПолноеИмя;
		Иначе
			КлючФайла = ОписаниеФайла.Имя;
		КонецЕсли;

		ФайлОбъект = Новый Файл(КлючФайла);
		ИмяПлагина = ФайлОбъект.ИмяБезРасширения;
		Если ПодключенныеРанее.Получить(ИмяПлагина) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не Объект.ИспользоватьПрямыеПутиФайлов Тогда
			ПодключитьФайлОбработкиНаСервере(КлючФайла, ОписаниеФайла.Хранение, ИмяПлагина, ЕстьЗащитаОтОпасныхДействий, Ложь);
		КонецЕсли;

		Попытка
			ОбъектОбработки = СоздатьФайлОбработкиНаСервере(КлючФайла, ИмяПлагина, Объект.ИспользоватьПрямыеПутиФайлов);
			ОбъектОбработки.Инициализация(ЭтотОбъектНаСервере);
			ОписаниеПлагина = ОбъектОбработки.ОписаниеПлагина(ЭтотОбъектНаСервере, Объект.ТипыПлагинов);
			Если ОписаниеПлагина <> Неопределено Тогда
				ОписанияПлагинов.Вставить(КлючФайла, ОписаниеПлагина);
			КонецЕсли;
		Исключение
			Ошибка = "Возникла ошибка при загрузке плагина: " + КлючФайла + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщить(Ошибка);
			Продолжить;
		КонецПопытки;

	КонецЦикла;

	Возврат Новый ФиксированноеСоответствие(ОписанияПлагинов);

КонецФункции // ПодключитьПлагиныНаСервере()

&НаСервере
Функция ПолучитьОписанияПлагиновПоТипуНаСервере(Знач ТипПлагина)
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектНаСервере.ПолучитьОписанияПлагиновПоТипу(ТипПлагина);

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ПодключитьФайлОбработкиНаСервере(Знач ПутьФайла, Знач АдресХранилища, Знач ИдентификаторОбработки,
		ПараметрЕстьЗащитаОтОпасныхДействий, ИспользоватьПрямыеПутиФайлов)
	ПодключитьВнешнююОбработкуСервер(ПутьФайла, АдресХранилища, ПараметрЕстьЗащитаОтОпасныхДействий,
		ИспользоватьПрямыеПутиФайлов);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьФайлОбработкиНаСервере(Знач ПолныйПутьФайла, ИдентификаторОбработки, Знач ИспользоватьПрямыеПутиФайлов, ЭтоОтчет = Ложь)
	Если ЭтоОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	Если ИспользоватьПрямыеПутиФайлов Тогда
		ОбъектОбработки = Менеджер.Создать(ПолныйПутьФайла, Ложь);
	Иначе
		ОбъектОбработки = Менеджер.Создать(ИдентификаторОбработки, Ложь);
	КонецЕсли;

	ИдентификаторОбработки = ОбъектОбработки.Метаданные().Имя;

	Возврат ОбъектОбработки;
КонецФункции

&НаСервере
Процедура СоздатьФайлОбработки(Знач ПолныйПутьФайла, ИдентификаторОбработки, ЭтоОтчет = Ложь)
	СоздатьФайлОбработкиНаСервере(ПолныйПутьФайла, ИдентификаторОбработки, Объект.ИспользоватьПрямыеПутиФайлов, ЭтоОтчет);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьКПлагинам()

	Путь = ПолучитьПутьКОбработкеКлиент() + "/plugins/";
	Возврат Путь;
КонецФункции

// } Плагины

&НаКлиенте
Функция НайтиТЧВДаннойФорме(ИмяТЧ, НужнаяФорма, ИскатьПоИмени)
	Если НужнаяФорма = Неопределено Тогда
		ТекстСообщения = "Не смогли найти таблицу <%1> в активном окне.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТЧ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ИмяТЧ = "" Тогда
		ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"));
	Иначе
		Если ИскатьПоИмени Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), , ИмяТЧ);
		Иначе
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), ИмяТЧ);
		КонецЕсли;
	КонецЕсли;

	Если ТЧ = Неопределено Тогда
		//попытаемся найти таблицу с другим именем
		Если ИмяТЧ = "TypeTree"  Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), , "ValueList");
		ИначеЕсли ИмяТЧ = "ValueList" Тогда
			ТЧ = НужнаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), , "TypeTree");
		КонецЕсли;
	КонецЕсли;

	Возврат ТЧ;
КонецФункции

&НаКлиенте
Процедура УдалитьИзПолучитьКлиентаТестированияПрофиль(ПодключенныеTestClient, ИмяTestClient)
	Массив = Новый Массив;

	Ид = -1;
	Для Каждого Профиль Из ПодключенныеTestClient Цикл
		Ид = Ид + 1;
		Если Профиль.Имя = ИмяTestClient Тогда
			Массив.Добавить(Ид);
		КонецЕсли;
	КонецЦикла;

	Для Ккк = 0 По Массив.Количество() - 1 Цикл
		ИдПрофиля = Массив[Массив.Количество() - 1 - Ккк];
		ПодключенныеTestClient.Удалить(ИдПрофиля);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СделатьПереводСгенерированногоТекстаGherkinСервер(ДанныеПеревода)
	ДвДанныеvbFeatureReader = ДанныеПеревода.ДвДанныеvbFeatureReader;
	ВременноеИмяФайла = Неопределено;

	FeatureReader = СоздатьFeatureReader(ДвДанныеvbFeatureReader, ВременноеИмяФайла);

	FeatureReader.СделатьПереводТекстаGherkin(ДанныеПеревода);

	Если ВременноеИмяФайла <> Неопределено Тогда
		УдалитьФайлы(ВременноеИмяФайла);
	КонецЕсли;

	ДанныеПеревода.Вставить("ТаблицаПеревода", ЗначениеВСтрокуВнутр(ДанныеПеревода.ТаблицаПеревода));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлыПеревода()
	Соответствие = Новый Соответствие;
	//TODO потенциальные пожиратели времени Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/locales/gherkin/en.mxl"));
	Соответствие.Вставить("en", Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/locales/gherkin/en.mxl"));
	Соответствие.Вставить("ro", Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/locales/gherkin/ro.mxl"));
	Соответствие.Вставить("de", Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/locales/gherkin/de.mxl"));
	Соответствие.Вставить("lv", Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/locales/gherkin/lv.mxl"));
	Соответствие.Вставить("it", Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/locales/gherkin/it.mxl"));
	Соответствие.Вставить("pl", Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/locales/gherkin/pl.mxl"));
	Соответствие.Вставить("vi", Новый ДвоичныеДанные(Объект.КаталогИнструментов + "/locales/gherkin/vi.mxl"));

	Возврат Соответствие;
КонецФункции

&НаКлиенте
Процедура СделатьПереводСгенерированногоТекстаGherkin()
	Если Объект.ЯзыкГенератораGherkin = "ru" Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ЯзыкГенератораGherkin) Тогда
		Возврат;
	КонецЕсли;

	Перевод = ПеревестиТекст(Объект.СгенерированныйСценарий);

	Объект.СгенерированныйСценарий = Перевод;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, ВНРегистр = Ложь)
	ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл;
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл ) = Тип("Файл") Тогда
		ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл.ПолноеИмя;
	КонецЕсли;

	УниверсальноеПолноеИмя = ПолноеИмяФайла;
	Если Лев(УниверсальноеПолноеИмя, 2) <> "\\" Тогда
		УниверсальноеПолноеИмя = СтрЗаменить(УниверсальноеПолноеИмя, "\", "/");
	КонецЕсли;
	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
КонецФункции

// TODO Дубль кода в методах "УниверсальноеПолноеИмяФайлаШаговФичи" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
&НаКлиентеНаСервереБезКонтекста
Функция УниверсальноеПолноеИмяФайлаШаговФичи(Знач ПутьФичи, Знач ИмяФичиБезРасширения, ЭтоLinux = Ложь)

	РазделительПути = ?(ЭтоLinux, "/", "\");

	Результат = ПутьФичи + "step_definitions" + РазделительПути + УбратьСпецсимволыИзИмениОбработки(ИмяФичиБезРасширения) + ".epf";

	Возврат Результат;

КонецФункции

// TODO Дубль кода в методах "УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
&НаКлиентеНаСервереБезКонтекста
Функция УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(Знач ПутьФичи, Знач ИмяФичиБезРасширения, ЭтоLinux = Ложь)
	РазделительПути = ?(ЭтоLinux, "/", "\");
	Результат = ПутьФичи + "step_definitions" + РазделительПути + ИмяФичиБезРасширения + ".epf";

	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УниверсальноеПолноеИмяФайлаШаговФичи_КаталогВнешнихОбработокEDT(Знач КаталогиБиблиотек, Знач ИмяБезРасширения, ЭтоLinux = Ложь)

	РазделительПути = ?(ЭтоLinux, "/", "\");
	Результат = "";

	// для проектов EDT тесты хранятся в отдельном каталоге
	// поищем обработки шагов в нем
	// иерархия не поддерживается
	ПутьФайлаEPF = "" + КаталогиБиблиотек + РазделительПути + ИмяБезРасширения + ".epf";
	ПутьФайлаEPF = УниверсальноеПолноеИмяФайла(ПутьФайлаEPF, Истина);

	Файл = Новый Файл(ПутьФайлаEPF);
	Если Файл.Существует() Тогда
		Результат = ПутьФайлаEPF;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПроверитьФлагОстановкаПриВозникновенииОшибки()
	Если Объект.ОстановкаПриВозникновенииОшибки Тогда
		//TODO возможно, есть проблема с остановкой при возникновении ошибки на последнем сценарии, т.к. есть расхождение с ВсеСценарииВыполнены()
		Если МассивСценариевДляВыполнения.Количество() - 1 > ТекИД_СценарияВМассиве Тогда
			СделатьСообщение("Установлен флаг ""Остановка при возникновении ошибки"". Выполнение следующих сценариев отменено.");
			ПрекратитьВыполнениеВсехСценариев = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЭлементФормыИзКешЕслиЭтоВозможно(ИмяРеквизита)
	Если Не ОбъектКонтекст.Свойство("АктивнаяТаблицаTestClient") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ИмяРеквизита = ОбъектКонтекст.АктивнаяТаблицаTestClient.ИмяТаблицы Тогда
		Возврат ОбъектКонтекст.АктивнаяТаблицаTestClient.Значение;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура СерверныеВызовыПриОткрытииФормы(ДопПараметры)
	ЗаполнитьКонтекстноеМеню();
	ЗаполнитьКаталогИнструментовЕслиОнПустой();

	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	МакетПереводСообщений = ОбъектСервер.ПолучитьМакет("ПереводСообщений");

	ДопПараметры.Вставить("МакетПереводСообщений", МакетПереводСообщений);
КонецПроцедуры



&НаКлиенте
Процедура ОбновитьВидимостьЭлементовСвязанныхСПереводомТекста()
	Если Объект.ЯзыкГенератораGherkin <> "ru" Тогда
		Элементы.ПеревестиТекстНаДругойЯзык.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовПослеЗагрузкиНастроек()
	ОбновитьВидимостьЭлементовСвязанныхСПереводомТекста();
КонецПроцедуры

&НаКлиенте
Функция ОписаниеВложенногоШага(Стр)

	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить("Имя", Стр);
	РезультатПрохожденияШага.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить("Статус", "Failed");
	РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", 0);
	РезультатПрохожденияШага.Вставить("ИДСтроки", 0);
	РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", 0);

	Если Объект.ИдетВыполнениеСценариев Тогда

		ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;

		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;

		ТекРодителя = Шаги[ТекИД_ШагаВМассиве];

		ИДСтрокиШага                       = ТекРодителя.СтрокаШага;
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

		СтрокаСценария = ПолучитьСтрокуСценарияИзДанныхФормы(ИДСтрокиСценария);
		СтрокаШага     = ПолучитьСтрокуШагаИзДанныхФормы(ИДСтрокиШага);

		РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче", СтрокаШага.НомерСтрокиВФиче);
		РезультатПрохожденияШага.Вставить("ИДСтроки", ИДСтрокиШага);
		РезультатПрохожденияШага.Вставить("ЭтоШагКонтекста", ТекРодителя.ЭтоШагКонтекста);

		РезультатТекущегоШага = РезультатПрохожденияТестовШагов.Получить(РезультатПрохожденияТестовШагов.Вграница());
		Если НЕ РезультатТекущегоШага.Свойство("ВложенныеШаги") Тогда
			РезультатТекущегоШага.Вставить("ВложенныеШаги", Новый Массив);
		КонецЕсли;

		РезультатТекущегоШага.ВложенныеШаги.Добавить(РезультатПрохожденияШага);
	КонецЕсли;

	Возврат РезультатПрохожденияШага;

КонецФункции

&НаСервере
Процедура ВыполнитьКодНаСервереНаСервере()
	// Вставить содержимое обработчика.
	Выполнить(Объект.СгенерированныйСценарийКод);

КонецПроцедуры

&НаКлиенте
Функция КлиентИСерверРасположеныНаОднойМашине()

	Если ИнформационнаяБазаФайловая() Тогда
		Возврат Истина;
	Иначе

		ИмяКомпьютераНаКлиенте = ИмяКомпьютера();
		ИмяКомпьютераНаСервере = ИмяКомпьютераСервер();

		Если НРег(ИмяКомпьютераНаКлиенте) = НРег(ИмяКомпьютераНаСервере) Тогда
			Возврат Истина;
		КонецЕсли;
		Если НРег(ИмяКомпьютераНаСервере) = "localhost" Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяКомпьютераСервер()

	Возврат ИмяКомпьютера();

КонецФункции

&НаКлиенте
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
КонецФункции

&НаКлиенте
Процедура УстановитьПеременныеТелаМодуля()

	ТаблицаОбработокДляОтладки = Новый Соответствие;

	ВыполнятьСценарииАсинхронно = Истина;

	ШагСтрокДляМодуля         = 10000;
	ВсёЕщёИдётВыполнениеШагов = Ложь;

	МассивСостоянияКонтекстовДоВыполненияШага = Новый Массив;

	ТаблицаУжеСуществующихСценариев = Новый Массив;
	Брейкпоинты                     = Новый Массив;

	КоллекцияВерсийFeatureИмяФайла = Новый Соответствие;

	МассивВерсийEPFИмяФайла = Новый Массив;
	МассивВерсийEPFВерсия   = Новый Массив;

	ТаблицаКонтекстовОбработок = Новый Массив;
	КоллекцияИменКонтекстовОбработок = Новый Соответствие;
	НедавноЗагруженныеФичи = Новый Массив;

	ЭтоLinux = Ложь;

	ПрекратитьВыполнениШаговТакКакЗакончилсяСценарий = Ложь;
	ИнтервалВыполненияШагаПриЗаписиВидео             = 4;
	БылаОшибкаСкриптовСборкиВидео                    = Ложь;
	СкриншотСделанВСценарии                          = Ложь;
	ЭтоЗапускВРежимеКоманднойСтроки                  = Ложь;
	ЭтоЗапускВРежимеБезЗагрукиНастроек               = Ложь;
	Версия8311ИлиВыше                                = Ложь;
	Версия8312ИлиВыше                                = Ложь;
	Версия8313ИлиВыше                                = Ложь;

	МассивTTS = Неопределено;

	ИмяСценарияКоторыйНадоВыполнитьПослеПереазгрузки             = "";
	СтрокаСценарияКоторыйНадоВыполнитьПослеПереазгрузкиЭтоПример = Ложь;

	ПредставлениеВертЧертыВТабДок = "__&ВертЧерта__";

	МаксСчетчикШаговБезТаймера = 100;
	НадоПерейтиКСтрокеДерева = -1;
	ВозниклаОшибкаПодключенияTestClient = Ложь;
	ВозниклаОшибкаВШагеКонтекста        = Ложь;

	КешДанныеПеревода = Новый Структура;
	КешДанныеПеревода.Вставить("ТаблицаПеревода", Неопределено);
	КешДанныеПеревода.Вставить("Язык", Неопределено);

	ГлобальныеЗначенияТаблиц = Новый Структура;

	ПризнакРучногоВыполненияШага = Ложь;

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия836ИлиВыше    = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.6.0");
	Версия8311ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0");
	Версия8312ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.12.0");
	Версия8313ИлиВыше   = ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.13.0");

	СчитываниеМакетаНачСтр = 1;
	СчитываниеМакетаНачКол = 1;
	СчитываниеМакетаКолСтр = 30;
	СчитываниеМакетаКолКол = 20;

	ЭтоLinux = Ложь;
	Если Найти(Строка(СистемнаяИнформация.ТипПлатформы), "Linux") > 0 Тогда
		ЭтоLinux = Истина;
	КонецЕсли;

	ЗаполнитьСтатусыИПриоритетыВыполнения();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатусыИПриоритетыВыполнения()
	Статусы = Новый Соответствие;
	Статусы.Вставить("", 0);
	Статусы.Вставить("Skipped", 1);
	Статусы.Вставить("Success", 2);
	Статусы.Вставить("Pending", 3);
	Статусы.Вставить("Failed", 4);
	//Статусы.Вставить("НеизвестнаяОшибка", 5);

	ПриоритетыСтатусовВыполненияСтрок = Новый Соответствие;
	Для каждого КлючЗначение Из Статусы Цикл
		ПриоритетыСтатусовВыполненияСтрок.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);
	КонецЦикла;

	СтатусыВыполненияСтрок = Новый ФиксированноеСоответствие(Статусы);
	ПриоритетыСтатусовВыполненияСтрок = Новый ФиксированноеСоответствие(ПриоритетыСтатусовВыполненияСтрок);

КонецПроцедуры

&НаКлиенте
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(Знач ТекстОшибки, Знач ИмяМетода)
	Результат = Ложь;
	Если Найти(ТекстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0
		ИЛИ Найти(ТекстОшибки, "Object method not found (" + ИмяМетода + ")") > 0  Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПутьФайлаИлиДвоичныеДанныеДляСервера(Знач ИмяФайла)
	ДвоичныеДанные = ИмяФайла;
	Если Не Объект.ИспользоватьПрямыеПутиФайлов Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	КонецЕсли;
	Возврат ДвоичныеДанные;
КонецФункции

&НаСервереБезКонтекста
Функция ПутьФайлаПоДвоичнымДаннымСервер(Знач ДвоичныеДанныеИлиПутьФичи, Знач Расширение = "",
                                            ИмяВременногоФайла = Неопределено)

	Если ТипЗнч(ДвоичныеДанныеИлиПутьФичи) = Тип("ДвоичныеДанные") Тогда

		Если Расширение = "" Тогда
			Расширение = "feature";
		КонецЕсли;

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанныеИлиПутьФичи.Записать(ИмяВременногоФайла);
		ДвоичныеДанныеИлиПутьФичи = ИмяВременногоФайла;

	КонецЕсли;

	Возврат ДвоичныеДанныеИлиПутьФичи;

КонецФункции

// Универсальная функция для проверки наличия свойств у значения любого типа данных
//
// Параметры:
//   Объект - Любой - Коллекция любого типа, для которой необходимо проверить наличие свойства
//   ИмяСвойства - Строка - имя проверяемого свойства
//
//  Возвращаемое значение:
//   Булево - Истина, если свойство существует
//
&НаКлиенте
Функция ЕстьСвойство(Знач Объект, Знач ИмяСвойства) Экспорт
    НачальноеЗначение = Новый УникальныйИдентификатор();
    ЗначениеРеквизита = Новый Структура(ИмяСвойства, НачальноеЗначение);
    ЗаполнитьЗначенияСвойств(ЗначениеРеквизита, Объект);
    Если ЗначениеРеквизита[ИмяСвойства] <> НачальноеЗначение Тогда
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

&НаКлиенте
Функция АСинк() Экспорт

	Если АСинк = Неопределено Тогда

		АСинк = ПолучитьФорму("ВнешняяОбработка.bddRunner.Форма.МодульАсинк", , ЭтаФорма, ЭтаФорма);
		АСинк.МодальностьЗапрещена = ЕстьПоддержкаАсинхронныхВызовов;

	КонецЕсли;

	Возврат АСинк;

КонецФункции

#КонецОбласти //СлужебныеПроцедурыИФункции

#Область УправляющиеВоздействияПользователя

// { Управляющие воздействия пользователя
&НаКлиенте
Процедура ГенераторМакетовДанных(Команда)
	ОткрытьИнструмент("СериализаторMXL", ПолучитьПутьКПлагинам());
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГУИД(Команда)
	ОткрытьИнструмент("xddGuidShow");
КонецПроцедуры

&НаКлиенте
Процедура КонвертерТестов(Команда)
	ОткрытьИнструмент("xddTestsConvertIntoRebornFormat");
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьЖурналДействийПользователяВТест(Команда)
	ОткрытьИнструмент("UILogToScript", ПолучитьПутьКПлагинам() + "..\vendor\1C");
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийИнструментБраузерТестов_xddTestRunner(Команда)
	ОткрытьИнструмент("xddTestRunner", ПолучитьПутьКОбработкеКлиент());
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДублированиеСценариев(Команда)
	ПротоколОшибок = "";
	ПроверитьДублированиеСценариевНаСервере(ПротоколОшибок);
	Если ЗначениеЗаполнено(ПротоколОшибок) Тогда
		ТекстДок = новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(ПротоколОшибок);
		ТекстДок.Показать("ДублиСценариев");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехническаяИнформация(Команда)
	Информатор = Плагин("Информатор");
	Информатор.Открыть();
КонецПроцедуры

// } Управляющие воздействия пользователя

// { Внешние интерфейсные инструменты
&НаКлиенте
Процедура ОткрытьИнструмент(Знач ИмяИнструмента, Знач ПутьИнструмента = "", Знач ИмяФормы = "Форма")
	Перем АдресХранилища;

	// Для встроенного в состав конфигурации браузера тестов
	// инструменты находятся также в составке конфигурации
	Если Объект.ЭтоВстроеннаяОбработка Тогда

		// Преобразование имени инструмента к имени обработки
		Если ИмяИнструмента = "UILogToScript" Тогда
			ИмяИнструмента = "ПреобразованиеЖурналаДействийПользователя";
		КонецЕсли;
		ФормаИнструмента = ПолучитьФорму("Обработка." + ИмяИнструмента + "." + ИмяФормы);
		ФормаИнструмента.Открыть();
		ФормаИнструмента = Неопределено;

	Иначе

		Если Не ПустаяСтрока(ПутьИнструмента) Тогда
			ПутьКВнешнимИнструментам = ПутьИнструмента + "\";
		Иначе
			ПутьКВнешнимИнструментам = ПолучитьПутьКВнешнимИнструментам();
		КонецЕсли;

		ПутьИнструмента = ПутьКВнешнимИнструментам + ИмяИнструмента + ".epf";
		ФайлИнструмента = Новый Файл(ПутьИнструмента);

		Если Не ФайлСуществуетКомандаСистемы(ФайлИнструмента.ПолноеИмя) Тогда

			Сообщить("Инструмент <" + ИмяИнструмента + "> не найден в каталоге <" + ФайлИнструмента.Путь + ">");
			Возврат;

		КонецЕсли;

		Оповещение = АСинк().смв_НовыйОписаниеОповещения("ОткрытьИнструментЗавершение", ЭтаФорма,
			Новый Структура("ИмяИнструмента, ИмяФормыИнструмента", ИмяИнструмента, ИмяФормы));
		АСинк().смв_ПоместитьФайл(Оповещение, АдресХранилища, ФайлИнструмента.ПолноеИмя , Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструментЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	ИмяИнструмента = ДополнительныеПараметры.ИмяИнструмента;
	ИмяФормыИнструмента = ДополнительныеПараметры.ИмяФормыИнструмента;

	ПодключитьФайлОбработкиНаСервере(ВыбранноеИмяФайла, Адрес, ИмяИнструмента, ЕстьЗащитаОтОпасныхДействий, Объект.ИспользоватьПрямыеПутиФайлов);

	ФормаИнструмента = ПолучитьФорму("ВнешняяОбработка." + ИмяИнструмента + "." + ИмяФормыИнструмента);
	Если ФормаИнструмента = Неопределено Тогда
		Сообщить("Инструмент <" + ИмяИнструмента + ">: не удалось получить основную форму!");
		Возврат;
	КонецЕсли;

	ФормаИнструмента.Открыть();
	ФормаИнструмента = Неопределено;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьКВнешнимИнструментам()
	Путь = ПолучитьПутьКОбработкеКлиент() + "/tools/epf/utils/";
	Возврат Путь;
КонецФункции

&НаКлиенте
Процедура СоздатьОткрытьОтчетAllure(Команда)

	СоздатьОткрытьОтчетAllureНачало();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОткрытьОтчетAllureНачало()

	Если Не ЗначениеЗаполнено(Объект.КаталогOutputAllure) Тогда

		Сообщить("Заполните каталог исходников отчета Allure");
		Возврат;

	КонецЕсли;

	Если Не ЭтоLinux Тогда

		КомандаГенерации = СтрШаблон_("cmd /c call allure generate --clean %1 && call allure open",
		Объект.КаталогOutputAllure);
		ОписаниеОповещения = АСинк().смв_НовыйОписаниеОповещения("СоздатьОткрытьОтчетAllureПродолжение", ЭтаФорма);
		АСинк().смв_ЗапуститьПриложение(ОписаниеОповещения, КомандаГенерации, Объект.КаталогOutputAllure, Ложь);

	Иначе

		Сообщить(СтрШаблон_("Автопоказа Allure в linux не возможен.
		|Используйте командную строку для ручного запуска
		|sh allure generate --clean %1 && allure open", Объект.КаталогOutputAllure));

	КонецЕсли;

КонецПроцедуры

// СоздатьОткрытьОтчетAllureПродолжение
//
// Параметры:
//   КодВозврата - Число - <описание параметра>
//   ДополнительныеПараметры - Структура - <описание параметра>
//
&НаКлиенте
Процедура СоздатьОткрытьОтчетAllureПродолжение(КодВозврата, ДополнительныеПараметры) Экспорт
	// пустой метод для оповещения до 8.3.12
КонецПроцедуры // ОписаниеОповещения()

&НаСервере
Процедура ПроверитьДублированиеСценариевНаСервере(ПротоколОшибок)
	ПротоколОшибок = "";


	ОбъектСервер = РеквизитФормыВЗначение("Объект");


	СтрокиСценариев = ОбъектСервер.ДеревоТестов.Строки.НайтиСтроки(Новый Структура("Тип", "Сценарий"), Истина);
	Для каждого ЭлементСроки из СтрокиСценариев цикл
		Если ЭлементСроки.ДопТип = "Контекст" Тогда
			Продолжить;
		КонецЕсли;
		СтрокиДублей = ОбъектСервер.ДеревоТестов.Строки.НайтиСтроки(Новый Структура("Тип, Имя", "Сценарий", ЭлементСроки.Имя), Истина);
		Если СтрокиДублей.Количество() > 1 Тогда
			ПротоколОшибок = ПротоколОшибок + Символы.ПС + ЭлементСроки.Имя + "	" + ЭлементСроки.ПолныйПуть + ":" + Формат(ЭлементСроки.ИДСтроки, "ЧГ=0") + Символы.ПС;

			Для каждого элементДубль из СтрокиДублей Цикл
				Если элементДубль.ПолныйПуть + ":" + элементДубль.ИДСтроки = ЭлементСроки.ПолныйПуть + ":" + ЭлементСроки.ИДСтроки Тогда
					Продолжить;
				КонецЕсли;

				ПротоколОшибок = ПротоколОшибок + Символы.Таб + элементДубль.Имя + "	" + элементДубль.ПолныйПуть + ":" + Формат(элементДубль.ИДСтроки, "ЧГ=0") + Символы.ПС;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;


КонецПроцедуры

// } Внешние интерфейсные инструменты

#КонецОбласти //Управляющие воздействия пользователя

#Область ИнициализацияМодуля

#КонецОбласти
