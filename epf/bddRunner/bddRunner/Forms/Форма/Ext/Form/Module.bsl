Перем ШагСтрокДляМодуля;
Перем ОбъектКонтекст;
Перем ОбъектКонтекстСохраняемый Экспорт;

Перем ЭтоУФ;

Перем ВыполнятьСценарииАсинхронно;

Перем МассивСценариевДляВыполнения;
Перем ТекИД_СценарияВМассиве;
Перем ТекИД_ШагаВМассиве;
Перем ТекИД_ВыполненногоШагаВМассиве;

Перем МассивКонтекстовОбработок;
Перем МассивИменКонтекстовОбработок;

Перем ЦветУспешно;
Перем ЦветОжидает;
Перем ЦветНеУспешно;
Перем ЦветЧужойСнипет;

Перем СтруктураПараметровДляСамотестирования Экспорт;

Перем ХостСистема Экспорт;

Перем СтатусЗапускаСценариев;

Перем ВсёЕщёИдётВыполнениеШагов;

Перем ТаблицаУжеСуществующихСценариев;
Перем ТаблицаИзвестныхStepDefinition;
Перем ТаблицаВерсийEPF;
Перем ТаблицаВерсийFeature;
Перем ОбработкаСвязаннаяСИсполняемойФичей Экспорт;

Перем ЕстьПоддержкаАсинхронныхВызовов;
Перем ТаблицаКонтекстовОбработок;

Процедура Приостановить(Интервал)
	НовЗнач = ТекущаяУниверсальнаяДатаВМиллисекундах() + Интервал;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < НовЗнач Цикл
		Продолжить;
	КонецЦикла;
КонецПроцедуры

Процедура ВызватьМетод(Обработка, Знач ИмяПроцедуры, МассивАргументов)
	Поз = Найти(ИмяПроцедуры,"(");
	Если Поз > 0 Тогда
		ИмяПроцедуры = Лев(ИмяПроцедуры,Поз-1);
	КонецЕсли;

	Команда = "Обработка." + ИмяПроцедуры + "(";

	АргументТаблица = Новый Массив;

	Если МассивАргументов <> Неопределено Тогда
		Для Ккк = 0 По МассивАргументов.Количество()-1 Цикл
			Элем = МассивАргументов[Ккк];
			Если ТипЗнч(Элем) = Тип("Массив") Тогда
				АргументТаблица.Добавить(Элем);
				Команда = Команда + "АргументТаблица[" + (АргументТаблица.Количество()-1) + "]";
			Иначе
				Команда = Команда + Элем;
			КонецЕсли;

			Если Ккк < МассивАргументов.Количество()-1 Тогда
				Команда = Команда + ",";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Команда = Команда + ")";

	Отладка("Выполняю: " + Команда);
	Выполнить(Команда);
КонецПроцедуры

Процедура ПриЗакрытии()
	СохранитьНастройки();
КонецПроцедуры

Процедура ОсновныеДействияФормыНачатьЗапись(Кнопка)
	ОбъектКонтекст.ТестируемоеПриложение.НачатьЗаписьЖурналаДействийПользователя();
КонецПроцедуры

Процедура ОсновныеДействияФормыОстановитьЗапись(Кнопка)
	Стр = ОбъектКонтекст.ТестируемоеПриложение.ЗавершитьЗаписьЖурналаДействийПользователя();

	ПутьКОбработке = КаталогИнструментов + "\vendor\1C\UILogToScript.epf";
	Файл = Новый Файл(ПутьКОбработке);
	Если Файл.Существует() Тогда
		Обработка = ВнешниеОбработки.Создать(ПутьКОбработке);
		Результат = Обработка.Convert(Стр);
		ОчиститьСообщения();
		Сообщить(Результат);
	Иначе
		Сообщить(Стр);
	КонецЕсли;

КонецПроцедуры

Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды, ЖдатьОкончания = -1) Экспорт

	//если ЖдатьОкончания = -1, тогда будет ожидания окончания работы приложения
	ИмяВременногоФайлаКоманды = ПолучитьИмяВременногоФайла("bat");

	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.ANSI, , Ложь);
	ЗТ.Закрыть();
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманды, КодировкаТекста.UTF8, , Истина);
	ЗТ.ЗаписатьСтроку("chcp 65001");
	ЗТ.ЗаписатьСтроку(ТекстКоманды);
	ЗТ.Закрыть();

	WshShell	= Новый COMОбъект("WScript.Shell");
	Рез			= WshShell.Run("""" + ИмяВременногоФайлаКоманды + """", 0, ЖдатьОкончания);
	WshShell	= Неопределено;

	Возврат Рез;

КонецФункции

Процедура ЗаписатьЛогВЖРПередВыполнениемШага(ИмяШага)
	ЗаписьЖурналаРегистрации("VanessaADD.ПередВыполнениемШага",УровеньЖурналаРегистрации.Информация,,,ИмяШага);
КонецПроцедуры

Процедура ЗаписатьЛогВЖРПередВыполнениемСценария(ИмяСценария)
	ЗаписьЖурналаРегистрации("VanessaADD.ПередВыполнениемСценария",УровеньЖурналаРегистрации.Информация,,,ИмяСценария);
КонецПроцедуры

Процедура ЗаписатьЛогВЖРОшибка(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Стр);
КонецПроцедуры

Процедура ВосстановитьНастройки()

	Если РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBehavior");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда

		ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(Настройки);

		Настройки.Свойство("DebugLog", DebugLog);
		Настройки.Свойство("ГенерироватьУФ", ГенерироватьУФ);
		Настройки.Свойство("КаталогПроекта", КаталогПроекта);
		Настройки.Свойство("КаталогФич", КаталогФич);
		Настройки.Свойство("ДелатьОтчетВФорматеАллюр", ДелатьОтчетВФорматеАллюр);
		Настройки.Свойство("ДелатьОтчетВФорматеjUnit", ДелатьОтчетВФорматеjUnit);
		Настройки.Свойство("ДелатьОтчетВФорматеCucumberJson", ДелатьОтчетВФорматеCucumberJson);
		Настройки.Свойство("КаталогOutputAllure", КаталогOutputAllure);
		Настройки.Свойство("КаталогOutputjUnit", КаталогOutputjUnit);
		Настройки.Свойство("КаталогOutputCucumberJson", КаталогOutputCucumberJson);
		Настройки.Свойство("КаталогиБиблиотек", КаталогиБиблиотек);
		Настройки.Свойство("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);

		Настройки.Свойство("СписокТеговИсключение", СписокТеговИсключение);
		Настройки.Свойство("СписокТеговОтбор", СписокТеговОтбор);

		Настройки.Свойство("ДелатьЛогВыполненияСценариевВЖР", ДелатьЛогВыполненияСценариевВЖР);

		Если Настройки.Свойство("ВыполнятьШагиАссинхронно") Тогда
			Настройки.Свойство("ВыполнятьШагиАссинхронно", ВыполнятьШагиАссинхронно);
		КонецЕсли;

		Настройки.Свойство("ВерсияПлатформыДляГенерацииEPF", ВерсияПлатформыДляГенерацииEPF);
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьНастройки()
	Если РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", DebugLog);
	Настройки.Вставить("ГенерироватьУФ", ГенерироватьУФ);
	Настройки.Вставить("КаталогПроекта", КаталогПроекта);
	Настройки.Вставить("КаталогФич", КаталогФич);
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", ДелатьОтчетВФорматеАллюр);
	Настройки.Вставить("ДелатьОтчетВФорматеjUnit", ДелатьОтчетВФорматеjUnit);
	Настройки.Вставить("ДелатьОтчетВФорматеCucumberJson", ДелатьОтчетВФорматеCucumberJson);
	Настройки.Вставить("КаталогOutputAllure", КаталогOutputAllure);
	Настройки.Вставить("КаталогOutputjUnit", КаталогOutputjUnit);
	Настройки.Вставить("КаталогOutputCucumberJson", КаталогOutputCucumberJson);
	Настройки.Вставить("КаталогиБиблиотек", КаталогиБиблиотек);
	Настройки.Вставить("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур", СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);

	Настройки.Вставить("СписокТеговИсключение", СписокТеговИсключение);
	Настройки.Вставить("СписокТеговОтбор", СписокТеговОтбор);

	Настройки.Вставить("ДелатьЛогВыполненияСценариевВЖР", ДелатьЛогВыполненияСценариевВЖР);

	Настройки.Вставить("ВыполнятьШагиАссинхронно", ВыполнятьШагиАссинхронно);

	Настройки.Вставить("ВерсияПлатформыДляГенерацииEPF", ВерсияПлатформыДляГенерацииEPF);

	ХранилищеОбщихНастроек.Сохранить("VanessaBehavior",, Настройки);
КонецПроцедуры

Процедура ЗаполнитьКаталогИнструментовЕслиОнПустой()
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		Файл = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
		КаталогИнструментов = Файл.Путь;
		Если Прав(КаталогИнструментов,1) = "\" Тогда
			КаталогИнструментов = Лев(КаталогИнструментов,СтрДлина(КаталогИнструментов)-1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПутьКПлагинам()
	Возврат КаталогИнструментов + "/plugins/";
КонецФункции

Процедура ЗагрузитьПлагины()
	ЭтотОбъект.Плагины = Новый Структура;

	КаталогПлагинов = ПолучитьПутьКПлагинам();
	НайденныеФайлы = НайтиФайлы(КаталогПлагинов, "*.epf", Ложь);
	Для каждого ФайлОбработки Из НайденныеФайлы Цикл
		Обработка = ВнешниеОбработки.Создать(ФайлОбработки.ПолноеИмя, Ложь);
		Попытка
			ОписаниеПлагина = Обработка.ОписаниеПлагина(ЭтотОбъект, ЭтотОбъект.ТипыПлагинов);
			Если ОписаниеПлагина <> Неопределено Тогда
				Обработка.Инициализация(ЭтотОбъект);
				ЭтотОбъект.Плагины.Вставить(ОписаниеПлагина.Идентификатор, Обработка);
			КонецЕсли;
		Исключение
			Ошибка = "Возникла ошибка при загрузке плагина: "+ФайлОбработки.Имя + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщить(Ошибка);
			Продолжить;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ПриОткрытии()
	ИспользоватьПрямыеПутиФайлов = Истина;

	ВыполнятьШагиАссинхронно = Истина;
	ВосстановитьНастройки();
	ОбъектКонтекстСохраняемый = Новый Структура;
	ЯзыкГенератораGherkin = "ru";

	ЗаполнитьКаталогИнструментовЕслиОнПустой();

	ИнтервалВыполненияШага = 0.1;

	ВыполнятьШагиАссинхронно = Истина;

	ОбновитьКнопкуЗагрузитьФичи();

	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработки();

	ЗапускВРежимеКоманднойСтроки();

	Если Не ЗапускИзКоманднойСтроки Тогда
		Если СокрЛП(КаталогФич) <> "" Тогда
			ЗагрузитьФичи();
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно();

	ЗагрузитьПлагины();

КонецПроцедуры

Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Знач Версия1, Знач Версия2) Экспорт
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2,".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

Процедура ЗаполнитьПолеВерсияПлатформыДляГенерацииEPFЕслиЭтоВозможно()
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ВерсияПлатформыДляГенерацииEPF) Тогда
		Возврат;
	КонецЕсли;

	Массив = Новый Массив;

	Файлы = НайтиФайлы("C:\Program Files (x86)\1cv8","*.exe",Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.ИмяБезРасширения) <> "1cv8" Тогда
			Продолжить;
		КонецЕсли;

		Путь = Файл.Путь;
		ФайлВерсия = Новый Файл(Путь);
		Версия = ФайлВерсия.Путь;

		ФайлВерсия = Новый Файл(Версия);
		Версия = ФайлВерсия.Имя;

		Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия,"8.3.10.1") Тогда
			Массив.Добавить(Версия);
		КонецЕсли;

	КонецЦикла;

	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МаксВерсия = ОпределитьМаксВерсиюПлатформы(Массив);

	ВерсияПлатформыДляГенерацииEPF = "C:\Program Files (x86)\1cv8\" + МаксВерсия + "\bin";

КонецПроцедуры

Функция ОпределитьМаксВерсиюПлатформы(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Версия");
	Тзн.Колонки.Добавить("Параметр");

	Для Каждого Элем Из Массив Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.Версия = Элем;

		Попытка
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(Элем,".");
			СтрТзн.Параметр = Число(МассивСтрок[3]*1000);
		Исключение
			СтрТзн.Параметр = 0;
		КонецПопытки;
	КонецЦикла;

	Тзн.Сортировать("Параметр");

	Возврат Тзн[Тзн.Количество()-1].Версия;
КонецФункции

Функция ПолучитьСтруктуруПараметров(Стр)
	Результат = Новый Структура;

	Массив = РазложитьСтрокуВМассивПодстрок(Стр,";");
	Для каждого Элем Из Массив Цикл
		Поз = Найти(Элем,"=");
		Если Поз > 0 Тогда
			Ключ     = Лев(Элем,Поз-1);
			Значение = Сред(Элем,Поз+1);
			Результат.Вставить(Ключ,Значение);
		Иначе
			Результат.Вставить(Элем,Истина);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров,ИмяПараметра)
	Если СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		Возврат СтруктураПараметров[ИмяПараметра];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ОчиститьСодержимоеКаталога(Знач ИмяКаталога)
	ФайлПроверкаСуществования = Новый Файл(ИмяКаталога);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Возврат;
	КонецЕсли;

	Если Прав(ИмяКаталога,1) = "\" Тогда
		ИмяКаталога = Лев(ИмяКаталога,СтрДлина(ИмяКаталога)-1);
	КонецЕсли;

	МассивФайлов = НайтиФайлы(ИмяКаталога,"*.*",Ложь);
	Для каждого Файл Из МассивФайлов Цикл
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(Файл.ПолноеИмя);
			Исключение
				СделатьСообщение("Не смог удалить файл!!! " + Файл.ПолноеИмя);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;



КонецПроцедуры

Функция НужноПреобразоватьПуть(ЗначениеИзКонфига)
	Если ТипЗнч(ЗначениеИзКонфига) = Тип("Массив") Тогда
		Для Каждого ЗначениеСписка Из ЗначениеИзКонфига Цикл
			Если НужноПреобразоватьПуть(ЗначениеСписка) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	Иначе
		Путь = СокрЛП(ЗначениеИзКонфига);
		Возврат Лев(Путь, 1) = "." ИЛИ Найти(Путь, "$workspaceRoot") > 0 ИЛИ Найти(Путь, "$instrumentsRoot") > 0;
	КонецЕсли;
КонецФункции

Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров) Экспорт
	МассивКлючей = Новый Массив;

	Для каждого ПараметрСборки Из СтруктураПараметров Цикл
		Если НужноПреобразоватьПуть(ПараметрСборки.Значение) Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;
	КонецЦикла;

	Для каждого Ключ Из МассивКлючей Цикл
		Было  = СтруктураПараметров[Ключ];
		Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(Было);

		СтруктураПараметров.Вставить(Ключ, Стало);
	КонецЦикла;
КонецПроцедуры

Процедура ЗапускВРежимеКоманднойСтроки()
	Если РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	СтрЗапуска = СокрЛП(ПараметрЗапуска);
	Если СтрЗапуска = "" Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрЗапуска);

	КаталогПроекта = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров, "workspaceRoot");

	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров);

	StartFeaturePlayer = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров,"StartFeaturePlayer");
	Если StartFeaturePlayer = Истина Тогда
		ЗапускИзКоманднойСтроки = Истина;

		VBParams = ПолучитьЗначениеПереданногоПараметра(СтруктураПараметров,"VBParams");
		Если VBParams = Неопределено Тогда
			СделатьСообщение("Не найден путь к файлу JSON. Параметр: VBParams.");
			Возврат;
		КонецЕсли;

		Попытка
			СтрутктураJSON = ПрочитатьСтруктуруИзJSONФайла(VBParams);
		Исключение
			ИнфОбОшибке = "Не удалось загрузить настройки: "+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписатьЛогВЖРОшибка("VanessaADD.ЗагрузкаНастроек",ИнфОбОшибке);
			Сообщить(ИнфОбОшибке);
			ЗавершитьРаботуСистемы(Ложь);
		КонецПопытки;

		Если СтрутктураJSON = Неопределено Тогда
			СделатьСообщение("Ошибка чтения структуры JSON.");
			Возврат;
		КонецЕсли;
		ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтрутктураJSON);

		ПромСтр = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"КаталогФич");
		Если ПромСтр = Неопределено Тогда
			СделатьСообщение("В параметрах JSON не найден каталог Фич!");
			Возврат;
		КонецЕсли;

		КаталогФич = ПромСтр;

		СписокТеговИсключение.Очистить();
		ЗначСписокТеговИсключение = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"СписокТеговИсключение");
		Если ТипЗнч(ЗначСписокТеговИсключение) = Тип("Массив") Тогда
			СписокТеговИсключение.ЗагрузитьЗначения(ЗначСписокТеговИсключение);
		КонецЕсли;


		СписокТеговОтбор.Очистить();
		ЗначСписокТеговОтбор = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"СписокТеговОтбор");
		Если ТипЗнч(ЗначСписокТеговОтбор) = Тип("Массив") Тогда
			СписокТеговОтбор.ЗагрузитьЗначения(ЗначСписокТеговОтбор);
		КонецЕсли;

		КаталогиБиблиотек.Очистить();
		ЗначКаталогиБиблиотек = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"КаталогиБиблиотек");
		Если ТипЗнч(ЗначКаталогиБиблиотек) = Тип("Массив") Тогда
			КаталогиБиблиотек.ЗагрузитьЗначения(ЗначКаталогиБиблиотек);
		КонецЕсли;

		ЗнДелатьСообщенияТранслитом = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ДелатьСообщенияТранслитом");
		Если ЗнДелатьСообщенияТранслитом = Истина Тогда
			ДелатьСообщенияТранслитом = Истина;
		КонецЕсли;

		//для формирования отчетов
		ЗнДобавлятьКИмениСценарияУсловияВыгрузки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ДобавлятьКИмениСценарияУсловияВыгрузки");
		Если ЗнДобавлятьКИмениСценарияУсловияВыгрузки = Истина Тогда
			ДобавлятьКИмениСценарияУсловияВыгрузки = Истина;
		КонецЕсли;

		ЗнВыгружатьСтатусВыполненияСценариевВФайл = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ВыгружатьСтатусВыполненияСценариевВФайл");
		Если ЗнВыгружатьСтатусВыполненияСценариевВФайл = Истина Тогда
			ВыгружатьСтатусВыполненияСценариевВФайл = Истина;
		КонецЕсли;

		ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев");
		Если ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев <> Неопределено Тогда
			ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = ЗнПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев;
		КонецЕсли;

		ИмяТекущейСборки = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ИмяСборки");

		//Allure
		ЗнДелатьОтчетВФорматеАллюр = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ДелатьОтчетВФорматеАллюр");
		Если ЗнДелатьОтчетВФорматеАллюр = Истина Тогда
			ОпределилиКаталогAllure = Ложь;

			ЗнКаталогOutputAllure = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"КаталогOutputAllure");
			Если ЗнКаталогOutputAllure <> Неопределено Тогда
				Файл = Новый Файл(ЗнКаталогOutputAllure);
				Если НЕ Файл.Существует() Тогда
					СделатьСообщение("В параметрах JSON передан несуществующий каталог для отчета КаталогOutputAllure!");
					Возврат;
				КонецЕсли;
				КаталогOutputAllure      = ЗнКаталогOutputAllure;
				ДелатьОтчетВФорматеАллюр = Истина;
				ОпределилиКаталогAllure  = Истина;
			КонецЕсли;



			ЗнКаталогOutputAllureБазовый = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"КаталогOutputAllureБазовый");
			Если ЗнКаталогOutputAllureБазовый <> Неопределено Тогда
				Файл = Новый Файл(ЗнКаталогOutputAllureБазовый);
				Если НЕ Файл.Существует() Тогда
					СоздатьКаталог(Файл.ПолноеИмя);

				КонецЕсли;

				СисИнфо = Новый СистемнаяИнформация;

				Если ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки") =  Истина Тогда
					ЗнКаталогOutputAllureБазовый = ЗнКаталогOutputAllureБазовый + "\" + ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ИмяСборки");
				КонецЕсли;

				ОчиститьСодержимоеКаталога(ЗнКаталогOutputAllureБазовый);
				ФайлПроверкаСуществования = Новый Файл(ЗнКаталогOutputAllureБазовый);
				Если НЕ ФайлПроверкаСуществования.Существует() Тогда
					СоздатьКаталог(ЗнКаталогOutputAllureБазовый);

					ФайлПроверкаСуществования = Новый Файл(ЗнКаталогOutputAllureБазовый);
					Если НЕ ФайлПроверкаСуществования.Существует() Тогда
						СделатьСообщение("Не смог создать каталог для отчета Allure: " + ЗнКаталогOutputAllureБазовый);
						Возврат;
					КонецЕсли;
				КонецЕсли;

				КаталогOutputAllure      = ЗнКаталогOutputAllureБазовый;
				ДелатьОтчетВФорматеАллюр = Истина;
				ОпределилиКаталогAllure  = Истина;
			КонецЕсли;

			Если НЕ ОпределилиКаталогAllure Тогда
				СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета Allure!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

		//jUnit
		ЗнДелатьОтчетВФорматеjUnit = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ДелатьОтчетВФорматеjUnit");
		Если ЗнДелатьОтчетВФорматеjUnit = Истина Тогда
			ОпределилиКаталогjUnit = Ложь;

			ЗнКаталогOutputjUnit = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"КаталогOutputjUnit");
			Если ЗнКаталогOutputjUnit <> Неопределено Тогда
				Файл = Новый Файл(ЗнКаталогOutputjUnit);
				Если НЕ Файл.Существует() Тогда
					СоздатьКаталог(Файл.ПолноеИмя);
					Файл = Новый Файл(ЗнКаталогOutputjUnit);
					Если НЕ Файл.Существует() Тогда
						СделатьСообщение("В параметрах JSON передан несуществующий каталог для отчета КаталогOutputjUnit!");
						Возврат;
					КонецЕсли;

				КонецЕсли;
				КаталогOutputjUnit       = ЗнКаталогOutputjUnit;
				ДелатьОтчетВФорматеjUnit = Истина;
				ОпределилиКаталогjUnit   = Истина;
			КонецЕсли;
			Если НЕ ОпределилиКаталогjUnit Тогда
				СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета jUnit!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

		//Cucumber json format
		ЗнДелатьОтчетВФорматеCucumberJson = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ДелатьОтчетВФорматеCucumberJson");
		Если ЗнДелатьОтчетВФорматеCucumberJson = Истина Тогда
			ОпределилиКаталогCucumberJson = Ложь;

			ЗнКаталогOutputCucumberJson = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"КаталогOutputCucumberJson");
			Если ЗнКаталогOutputCucumberJson <> Неопределено Тогда
				Файл = Новый Файл(ЗнКаталогOutputCucumberJson);
				Если НЕ Файл.Существует() Тогда
					СоздатьКаталог(Файл.ПолноеИмя);
					Файл = Новый Файл(ЗнКаталогOutputCucumberJson);
					Если НЕ Файл.Существует() Тогда
						СделатьСообщение("В параметрах JSON передан несуществующий каталог для отчета КаталогOutputCucumberJson!");
						Возврат;
					КонецЕсли;

				КонецЕсли;
				КаталогOutputCucumberJson       = ЗнКаталогOutputCucumberJson;
				ДелатьОтчетВФорматеCucumberJson = Истина;
				ОпределилиКаталогCucumberJson   = Истина;
			КонецЕсли;
			Если НЕ ОпределилиКаталогCucumberJson Тогда
				СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета CucumberJson!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

		ВыполнитьСценарии = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ВыполнитьСценарии");
		Если ВыполнитьСценарии = Истина Тогда
			ЗавершитьРаботуСистемы = ПолучитьЗначениеПереданногоПараметра(СтрутктураJSON,"ЗавершитьРаботуСистемы");
			Если ЗавершитьРаботуСистемы = Истина Тогда
				НадоЗавершитьРаботуСистемыПослеВыполненияВсехСценариев = Истина;
			КонецЕсли;

			ЗагрузитьФичи();
			ВыполнитьСценарии();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЭлементыФормы.тпДеревоТестов.Видимость = Истина;
КонецПроцедуры

Функция ОпределитьКоличествоПередаваемыхТаблиц(СтрокаДерева)
	Если СтрокаДерева.ШагСПараметрамиВТаблице <> Истина Тогда
		Возврат 0;
	КонецЕсли;

	Количество = 1;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.Имя) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат Количество;
КонецФункции

Процедура ДобавитьШагиВМассив(ДеревоСтроки,Шаги)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = "Примеры" Тогда
			//эти сценарии уже учтены
			Продолжить;
		КонецЕсли;

		Если СтрДеревоСтроки.Тип = "Шаг" Тогда
			СтруктураШага = Новый Структура;
			СтруктураШага.Вставить("Имя",СтрДеревоСтроки.Имя);
			СтруктураШага.Вставить("ИмяШагаБезКлючевогоСлова",СтрДеревоСтроки.ИмяШагаБезКлючевогоСлова);
			СтруктураШага.Вставить("АдресСнипета",СтрДеревоСтроки.АдресСнипета);
			СтруктураШага.Вставить("ШагСПараметрамиВТаблице",СтрДеревоСтроки.ШагСПараметрамиВТаблице);
			СтруктураШага.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрДеревоСтроки));
			Шаги.Добавить(СтруктураШага);
		КонецЕсли;
		ДобавитьШагиВМассив(СтрДеревоСтроки.Строки,Шаги);
	КонецЦикла
КонецПроцедуры


Процедура ДобавитьИменаФайловФичИзДереваВМассив(ДеревоСтроки,МассивФич,МассивШагов)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Тип = "Фича" Тогда
			МассивФич.Добавить(СтрДеревоСтроки.ПолныйПуть);
			Шаги = Новый Массив;
			ДобавитьШагиВМассив(СтрДеревоСтроки.Строки,Шаги);
			МассивШагов.Добавить(Шаги);
		КонецЕсли;
		ДобавитьИменаФайловФичИзДереваВМассив(СтрДеревоСтроки.Строки,МассивФич,МассивШагов);
	КонецЦикла;
КонецПроцедуры


Процедура ПолучитьСписокФичПоДереву(Дерево,МассивФич,МассивШагов)
	ДобавитьИменаФайловФичИзДереваВМассив(Дерево.Строки,МассивФич,МассивШагов);
КонецПроцедуры


Процедура СоздатьШаблоныОбработок() Экспорт
	Если Не ЗначениеЗаполнено(ВерсияПлатформыДляГенерацииEPF) Тогда
		СделатьСообщение("Не указан каталог с нужной версией платформы 8.3.10 или выше.");
		Возврат;
	КонецЕсли;

	Если Не РежимСамотестирования Тогда
		ОчиститьСообщения();
	КонецЕсли;
	СделатьПараметрыКорректными();


	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	СтруктураПараметров.Вставить("ГенерироватьУФ",ГенерироватьУФ);
	СтруктураПараметров.Вставить("СоздаватьОбластиПриГенерацииКода",СоздаватьОбластиПриГенерацииКода);
	СтруктураПараметров.Вставить("ШагСтрокДляМодуля",ШагСтрокДляМодуля);
	СтруктураПараметров.Вставить("КонтекстVanessaADD",ЭтотОбъект);
	СтруктураПараметров.Вставить("КаталогиБиблиотек",КаталогиБиблиотек);
	СтруктураПараметров.Вставить("СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур",СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);

	СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition",ТаблицаИзвестныхStepDefinition);
	СтруктураПараметров.Вставить("ТаблицаВерсийEPF",ТаблицаВерсийEPF);
	СтруктураПараметров.Вставить("ТаблицаВерсийFeature",ТаблицаВерсийFeature);



	МассивФич   = Новый Массив;
	МассивШагов = Новый Массив;
	ПолучитьСписокФичПоДереву(ДеревоТестов,МассивФич,МассивШагов);
	СтруктураПараметров.Вставить("МассивФич",МассивФич);
	СтруктураПараметров.Вставить("МассивШагов",МассивШагов);
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader",Неопределено);


	СоздатьEPFПоМассивуФич(СтруктураПараметров);

	ЭтаФорма.Активизировать();
КонецПроцедуры

// TODO почему пустое тело функции ?? ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition
Процедура ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition(МассивВерсийФайловИзТаблицаИзвестныхStepDefinition,МассивИменФайловИзТаблицаИзвестныхStepDefinition)
КонецПроцедуры

// TODO почему пустое тело функции ?? ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры,КаталогФич,Стр)
Функция ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры,КаталогФич,Стр)
	Возврат Новый Массив;
КонецФункции

Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaADD)
	FeatureReader = ПолучитьИнструментПарсерФич();
	FeatureReader.ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогФич,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaADD);
КонецПроцедуры

Процедура СделатьGenerateEpf(СтруктураПараметров)

	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaADD = СтруктураПараметров.КонтекстVanessaADD;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;

	ДополнительныеПараметры = Неопределено;
	Если СтруктураПараметров.Свойство("ДополнительныеПараметры") Тогда
		ДополнительныеПараметры = СтруктураПараметров.ДополнительныеПараметры;
	КонецЕсли;

	СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур       = СтруктураПараметров.СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур;


	МассивВерсийФайловИзТаблицаИзвестныхStepDefinition = Новый Массив;
	МассивИменФайловИзТаблицаИзвестныхStepDefinition   = Новый Массив;
	МассивИменФайловКоторыеСовпалиСКеш                 = Новый Массив;
	ПолучитьТаблицыПоТаблицаИзвестныхStepDefinition(МассивВерсийФайловИзТаблицаИзвестныхStepDefinition,МассивИменФайловИзТаблицаИзвестныхStepDefinition);

	ТаблицаКонтекстовОбработок = Новый Массив;
	ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогФич,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaADD);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСнипетыИзОбработок(Элем.Значение,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition,ТаблицаВерсийEPF,КонтекстVanessaADD);
	КонецЦикла;


	МассивФич   = СтруктураПараметров.МассивФич;
	МассивШагов = СтруктураПараметров.МассивШагов;
	Ном = 0;
	Для каждого ИмяФайлаФичи Из МассивФич Цикл
		Ном = Ном+1;
		Шаги = МассивШагов.Получить(Ном-1);

		ФайлФичи       = Новый Файл(ИмяФайлаФичи);
		ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
		СделатьСообщение("Работаю по фиче: " + ИмяФайлаФичи);

		МассивДляСозданияEpf = Новый Массив;
		ОтносительныйКаталогФичи = ФайлФичи.Путь;
		Если Найти(Прав(ОтносительныйКаталогФичи,1), "\/") > 0 Тогда
			ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи,СтрДлина(ОтносительныйКаталогФичи)-1);
		КонецЕсли;

		Отладка("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
		СтруктураОписанияEpf = СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи,ФайлФичи.ИмяБезРасширения,Истина,ДвДанныеvbFeatureReader,ДополнительныеПараметры);

		Снипеты = СнипетыПолучитьСнипетыПоШагам(Шаги,ДвДанныеvbFeatureReader);
		ЗаполнитьПроцедуруПолучитьСписокТестов(СтруктураОписанияEpf.ТелоМодуля,Снипеты,ДвДанныеvbFeatureReader,ИмяФайлаФичи,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		Для каждого ЭлемСнипет Из Снипеты Цикл
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,ЭлемСнипет.StepDefinition,ЭлемСнипет.Шаг,ШагСтрокДляМодуля,ЭлемСнипет.АдресСнипета,ГенерироватьУФ,ДвДанныеvbFeatureReader,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
		КонецЦикла;

		БылиОшибки = Ложь;

		Если ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
			ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf);
		Иначе
			СоздатьФайлыОбработок(БылиОшибки,СтруктураОписанияEpf,ДополнительныеПараметры);
		КонецЕсли;

	КонецЦикла;
	СделатьСообщение("Создание epf по фичам закончено.");

КонецПроцедуры

// TODO почему пустое тело метода ?? ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf)
Процедура ВывестиТекстМодуляНаЭкран(СтруктураОписанияEpf)
КонецПроцедуры

// TODO почему пустое тело метода ?? ПолучитьТелоМодуляВМассивСервер(Стр)
Функция ПолучитьТелоМодуляВМассивСервер(Стр)
	Возврат Неопределено;
КонецФункции

// TODO Дубль кода в методах "УбратьСпецсимволыИзИмениОбработки" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
Функция УбратьСпецсимволыИзИмениОбработки(Знач Стр)
	Стр = СтрЗаменить(Стр," ","_");
	Стр = СтрЗаменить(Стр,"`","");
	Стр = СтрЗаменить(Стр,"~","");
	Стр = СтрЗаменить(Стр,"'","");
	Стр = СтрЗаменить(Стр,".","");
	Стр = СтрЗаменить(Стр,",","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,";","");
	Стр = СтрЗаменить(Стр,"-","_");
	Стр = СтрЗаменить(Стр,"+","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"=","");
	Стр = СтрЗаменить(Стр,"!","");
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,"#","");
	Стр = СтрЗаменить(Стр,"$","");
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"^","");
	Стр = СтрЗаменить(Стр,"&","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"(","");
	Стр = СтрЗаменить(Стр,")","");
	Стр = СтрЗаменить(Стр,"№","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");

	ЛевСимвол = Лев(Стр, 1);
	Если ЛевСимвол = "0"
	 Или ЛевСимвол = "1"
	 Или ЛевСимвол = "2"
	 Или ЛевСимвол = "3"
	 Или ЛевСимвол = "4"
	 Или ЛевСимвол = "5"
	 Или ЛевСимвол = "6"
	 Или ЛевСимвол = "7"
	 Или ЛевСимвол = "8"
	 Или ЛевСимвол = "9"
	Тогда
		Стр = "_" + Стр;
	КонецЕсли;

	Возврат Стр;
КонецФункции

Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки)

	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + "/" + ИмяОбработки + ".xml"));
	МассивФайлов.Добавить(Новый Файл(ПутьКИсходникам + "/" + ИмяОбработки +  "/Forms/Форма/Ext/Form.xml"));


	Для Каждого Файл Из МассивФайлов Цикл
		Если НЕ ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;


		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя, "UTF-8");

		ВременноеИмяФайла = Файл.ПолноеИмя + "_Temp";
		ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла, "UTF-8", , Истина);
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			Стр = СтрЗаменить(Стр, "<Name>Обработка</Name>", "<Name>" + ИмяОбработки + "</Name>");
			Стр = СтрЗаменить(Стр, "<v8:content>Обработка</v8:content>", "<v8:content>" + ИмяОбработки + "</v8:content>");
			Стр = СтрЗаменить(Стр, "ExternalDataProcessor.Обработка.", "ExternalDataProcessor." + ИмяОбработки + ".");
			Стр = СтрЗаменить(Стр, "ExternalDataProcessorObject.Обработка", "ExternalDataProcessorObject." + ИмяОбработки);

			ЗТ.ЗаписатьСтроку(Стр);
		КонецЦикла;

		ЗТ.Закрыть();
		Текст.Закрыть();
		Текст = "";

		УдалитьФайлыКомандаСистемы(Файл.ПолноеИмя);
		ПереместитьФайлКомандаСистемы(ВременноеИмяФайла, Файл.ПолноеИмя);
	КонецЦикла;


КонецПроцедуры

Процедура ВывестиТекстФайлаЛога(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");

	Сообщить(Текст.Прочитать());

	Текст.Закрыть();
КонецПроцедуры

Процедура СоздатьФайлыОбработок(БылиОшибки,СтруктураОписанияEpf,ДополнительныеПараметры = Неопределено)

	ТекстМодуля = "";

	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
	Иначе
		ТелоМодуля.Сортировать("НомСтр");
		ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку("Стр");
	КонецЕсли;





	Отладка("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);

	УдалитьФайлыКомандаСистемы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля, "UTF-8", , Ложь);
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		ЗТ.ЗаписатьСтроку(СтрТелоМодуля);
	КонецЦикла;
	ЗТ.Закрыть();
	Отладка("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);

	ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;

	ИмяВременногоEPF = ПолучитьИмяВременногоФайла("epf");

	ИмяОбработки = УбратьСпецсимволыИзИмениОбработки(СтруктураОписанияEpf.ИмяФичи);
	Если ЗначениеЗаполнено(СтруктураОписанияEpf.РеальноеИмяОбработки) Тогда
		ИмяОбработки = СтруктураОписанияEpf.РеальноеИмяОбработки;
	КонецЕсли;


	КорневойФайлОбработки = ПутьКИсходникам + "/" + ИмяОбработки + ".xml";


	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам + "/" + ИмяОбработки);
		КопироватьКаталогКомандаСистемы(ПутьКИсходникам + "/Обработка", ПутьКИсходникам + "/" + ИмяОбработки);
		ПереместитьФайлКомандаСистемы(ПутьКИсходникам + "/Обработка.xml", КорневойФайлОбработки);

		ЗаменитьСтрокиВФайлеОсновыОбработки(ПутьКИсходникам, ИмяОбработки);
	КонецЕсли;


	ВременныйКаталогБазы = ПолучитьИмяВременногоФайла();
	СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
	КомандаСистемы = """" + ДополнитьСлешВПуть(ВерсияПлатформыДляГенерацииEPF) + "1cv8"" CREATEINFOBASE File="""  + ВременныйКаталогБазы +  """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
	Отладка(КомандаСистемы);
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
	Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + "/1Cv8.1CD") Тогда
		СделатьСообщение("Файл EPF не создан. Не смог создать каталог временной базы.");
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT);
		СделатьСообщение("Проверьте работу команды <" + КомандаСистемы + ">");
		Возврат ;
	КонецЕсли;


	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);


	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");

	КомандаСистемы = """" + ДополнитьСлешВПуть(ВерсияПлатформыДляГенерацииEPF) + "1cv8"" DESIGNER /F """ + ВременныйКаталогБазы + """ /LoadExternalDataProcessorOrReportFromFiles """ + КорневойФайлОбработки + """ """ + ИмяВременногоEPF + """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
	Отладка(КомандаСистемы);
	ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);



	Если ФайлСуществуетКомандаСистемы(ИмяВременногоEPF) Тогда
		ФайлИмяФайлаEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ФайлСуществуетКомандаСистемы(ФайлИмяФайлаEpf.Путь) Тогда
			СоздатьКаталогКомандаСистемы(ФайлИмяФайлаEpf.Путь);
		КонецЕсли;
		ПереместитьФайлКомандаСистемы(ИмяВременногоEPF,СтруктураОписанияEpf.ИмяФайлаEpf);
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			Сообщить("Пересоздан " + СтруктураОписанияEpf.ИмяФайлаEpf);
		Иначе
			Сообщить("Создан " + СтруктураОписанияEpf.ИмяФайлаEpf);
		КонецЕсли;
	Иначе
		СделатьСообщение("Файл EPF не создан.");
		СделатьСообщение("Проверьте работу команды <" + КомандаСистемы + ">");
		ВывестиТекстФайлаЛога(ИмяФайлаЛога);
		ВывестиТекстФайлаЛога(ИмяФайлаOUT);
	КонецЕсли;

	УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);

	ОчиститьСодержимоеКаталога(ВременныйКаталогБазы);

КонецПроцедуры

Функция СнипетыПолучитьСнипетыПоШагам(Шаги,ДвДанныеvbFeatureReader)
	FeatureReader = ПолучитьИнструментПарсерФич();
	Возврат FeatureReader.СнипетыПолучитьСнипетыПоШагам(Шаги);
КонецФункции

Процедура ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля,Снипеты,ДвДанныеvbFeatureReader,ИмяФайлаФичи,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур)
	FeatureReader = ПолучитьИнструментПарсерФич();
	FeatureReader.ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля,Снипеты,ЭтоУФ,ИмяФайлаФичи,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур);
КонецПроцедуры

Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,Шаг,ШагСтрокДляМодуля,АдресСнипета,ГенерироватьУФ,ДвДанныеvbFeatureReader,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур)
	FeatureReader = ПолучитьИнструментПарсерФич();
	FeatureReader.ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,Шаг,ШагСтрокДляМодуля,АдресСнипета,СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур,ГенерироватьУФ,ЭтоУФ);
КонецПроцедуры

Функция СоздатьПустуюСтруктуруEpf()
	Стр = Новый Структура;
	Стр.Вставить("ИмяФичи","");
	Стр.Вставить("ИмяФайлаEpf","");
	Стр.Вставить("ВременноеИмяМодуля","");
	Стр.Вставить("ТелоМодуля","");//таблица значений
	Стр.Вставить("ИмяМодуляEpf","");
	Стр.Вставить("КаталогИсходников","");
	Стр.Вставить("ФайлEpfПересоздавался",Ложь);
	Стр.Вставить("РеальноеИмяОбработки",Неопределено);

	Возврат Стр;
КонецФункции

// TODO почему пустое тело метода ?? НайтиФайлВМассивеФайлов(МассивФайлов,ИмяФайлаEpf)
Функция НайтиФайлВМассивеФайлов(МассивФайлов,ИмяФайлаEpf)
	Возврат Неопределено;
КонецФункции

Функция РаспаковатьEPF(СтруктураОписанияEpf)

	ИмяФайла = СтруктураОписанияEpf.ИмяФайлаEPF;
	ФайлEPF = Новый Файл(ИмяФайла);

	Попытка

		ВременныйКаталогБазы = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ВременныйКаталогБазы);
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");
		КомандаСистемы = """" + ДополнитьСлешВПуть(ВерсияПлатформыДляГенерацииEPF) + "1cv8"" CREATEINFOBASE File="""  + ВременныйКаталогБазы +  """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);
		Если НЕ ФайлСуществуетКомандаСистемы(ВременныйКаталогБазы + "/1Cv8.1CD") Тогда
			СделатьСообщение("Файл EPF не создан. Не смог создать каталог временной базы.");
			ВывестиТекстФайлаЛога(ИмяФайлаЛога);
			ВывестиТекстФайлаЛога(ИмяФайлаOUT);
			СделатьСообщение("Проверьте работу команды <" + КомандаСистемы + ">");
			Возврат Неопределено;
		КонецЕсли;

		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);

		ПутьКИсходникам = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ПутьКИсходникам);

		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		ИмяФайлаOUT = ПолучитьИмяВременногоФайла("txt");

		КомандаСистемы = """" + ДополнитьСлешВПуть(ВерсияПлатформыДляГенерацииEPF) + "1cv8"" DESIGNER /F """ + ВременныйКаталогБазы + """ /DumpExternalDataProcessorOrReportToFiles  """ + ПутьКИсходникам + """ """ + СтруктураОписанияEpf.ИмяФайлаEPF + """ /out """ + ИмяФайлаOUT + """ > """ + ИмяФайлаЛога + """";
		Отладка(КомандаСистемы);
		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаСистемы);


		СписокКаталогов = Новый СписокЗначений;
		СписокФайлов    = Новый СписокЗначений;

		НайтиФайлыКомандаСистемы(ПутьКИсходникам,СписокКаталогов,СписокФайлов,Ложь);
		Если СписокФайлов.Количество() <> 1 Тогда
			ВызватьИсключение "В каталоге <" + ПутьКИсходникам + "> должен был быть один файл xml!";
		КонецЕсли;

		ФайлXML = СписокФайлов[0].Значение;
		СтруктураОписанияEpf.Вставить("РеальноеИмяОбработки",ФайлXML.ИмяБезРасширения);

		СтруктураОписанияEpf.КаталогИсходников = ПутьКИсходникам;
		Если ЭтоУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + "/" + ФайлXML.ИмяБезРасширения + "/Forms/Форма/Ext/Form/Module.bsl"
		Иначе
			СтруктураОписанияEpf.ВременноеИмяМодуля = ПутьКИсходникам + "/" + ФайлXML.ИмяБезРасширения + "/Ext/ObjectModule.bsl"
		КонецЕсли;

		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
		УдалитьФайлыКомандаСистемы(ИмяФайлаOUT);

		ОчиститьСодержимоеКаталога(ВременныйКаталогБазы);

		Возврат СтруктураОписанияEpf.ВременноеИмяМодуля;

	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СделатьСообщение("Не смог распаковать " + ИмяФайла);
		СделатьСообщение(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

Функция СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи,ИмяТекущейФичи,GenerateEpf,ДвДанныеvbFeatureReader,ДополнительныеПараметры)

	СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
	СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
	СтруктураОписанияEpf.ИмяФайлаEpf        = УниверсальноеПолноеИмяФайлаШаговФичи(
		ДополнитьСлешВПуть(ОтносительныйКаталогФичи), ИмяТекущейФичи, ЭтоLinux);

	Если GenerateEpf Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
			ФайлСуществует = ФайлEpf.Существует();
			Если Не ФайлСуществует Тогда
				ИмяФайлаEpf_Устаревший = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(
					ДополнитьСлешВПуть(ОтносительныйКаталогФичи), ИмяТекущейФичи, ЭтоLinux);
				ФайлEpf = Новый Файл(ИмяФайлаEpf_Устаревший);
				Если ФайлEpf.Существует() Тогда
					ПереместитьФайлКомандаСистемы(ИмяФайлаEpf_Устаревший, СтруктураОписанияEpf.ИмяФайлаEpf);
				КонецЕсли;
			КонецЕсли;
		Иначе
			МассивФайлов = ПолучитьЗначениеПоРанееСобраннойИнформации(ДополнительныеПараметры, "ПоискEPF", "НайденныеФайлы");
			ФайлСуществует = НайтиФайлВМассивеФайлов(МассивФайлов, СтруктураОписанияEpf.ИмяФайлаEpf);
			Если Не ФайлСуществует Тогда
				ИмяФайлаEpf_Устаревший = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(
					ДополнитьСлешВПуть(ОтносительныйКаталогФичи), ИмяТекущейФичи, ЭтоLinux);

				ФайлСуществует = НайтиФайлВМассивеФайлов(МассивФайлов, ИмяФайлаEpf_Устаревший);
				Если ФайлСуществует Тогда
					ПереместитьФайлКомандаСистемы(ИмяФайлаEpf_Устаревший, СтруктураОписанияEpf.ИмяФайлаEpf);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ФайлСуществует Тогда //т.е. если мы не первый раз работаем с данной фичей
			Если НЕ ВыводитьТекстМодуляВместоПерегенерацииEPF Тогда
				СтруктураОписанияEpf.ИмяМодуляEpf          = РаспаковатьEPF(СтруктураОписанияEpf);
				СтруктураОписанияEpf.ФайлEpfПересоздавался = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ВременныйКаталогИсходников = ПолучитьИмяВременногоФайла();
		СоздатьКаталогКомандаСистемы(ВременныйКаталогИсходников);
		СтруктураОписанияEpf.КаталогИсходников = ВременныйКаталогИсходников;

		Если ГенерироватьУФ Тогда
			КопироватьКаталогКомандаСистемы(ДополнитьСлешВПуть(КаталогИнструментов) + "lib\TemplateEpfUF",ВременныйКаталогИсходников);
		Иначе
			КопироватьКаталогКомандаСистемы(ДополнитьСлешВПуть(КаталогИнструментов) + "lib\TemplateEpf",ВременныйКаталогИсходников);
		КонецЕсли;
	КонецЕсли;

	Если Не СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников) + "Обработка\Ext\ObjectModule.bsl";
		Если ГенерироватьУФ Тогда
			СтруктураОписанияEpf.ВременноеИмяМодуля = ДополнитьСлешВПуть(СтруктураОписанияEpf.КаталогИсходников) + "Обработка\Forms\Форма\Ext\Form\Module.bsl";
		КонецЕсли;
		Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Ложь);
		ЗТ.Закрыть();
	КонецЕсли;

	ФайлСуществует = ФайлСуществуетКомандаСистемы(СтруктураОписанияEpf.ИмяМодуляEpf);

	СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если НЕ СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
		ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ДвДанныеvbFeatureReader,СоздаватьОбластиПриГенерацииКода);
	КонецЕсли;

	Возврат СтруктураОписанияEpf;
КонецФункции

Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader,
				ЗнСоздаватьОбластиПриГенерацииКода)

	ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader,
		ЗнСоздаватьОбластиПриГенерацииКода);

КонецПроцедуры

Процедура ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ДвДанныеvbFeatureReader,
			знСоздаватьОбластиПриГенерацииКода)

	FeatureReader = ПолучитьИнструментПарсерФич();
	FeatureReader.ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ЭтоУФ,
		знСоздаватьОбластиПриГенерацииКода);
КонецПроцедуры

Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	ФайлПроверкаСуществования = Новый Файл(ПутьКФайлу);
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	Возврат ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные,ШагСтрокДляМодуля);
КонецФункции

Функция ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные,ШагСтрокДляМодуля)
	ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");

	ДвоичныеДанные.Записать(ПутьКФайлу);

	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");

	НомСтр = 0;
	ПромФайл = Новый Файл(ПутьКФайлу);
	Если Не ПромФайл.Существует() Тогда
		СтрОшибки = "Файл """ + ПутьКФайлу + """ не существует!";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		НомСтр = НомСтр + ШагСтрокДляМодуля;

		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;

	Текст.Закрыть();

	Возврат Тзн;
КонецФункции

Процедура СоздатьEPFПоМассивуФич(СтруктураПараметров)
	СделатьСообщение("Запускаю генерацию epf.");
	СделатьGenerateEpf(СтруктураПараметров);
КонецПроцедуры

Процедура кнСоздатьШаблоныОбработокНажатие(Элемент)
	СоздатьШаблоныОбработок();
КонецПроцедуры

Функция ЭтоСценарий_SceanrioOutline(СтрокаДерева)
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = "Примеры" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Процедура ДобавитьСценарийАутлайн(СтрокаДерева,МассивСценариевДляВыполнения,ТекПример = Неопределено)
	//получим сами именнованные параметры

	ИменаПараметров = Неопределено;
	СтрокаПримеров  = Неопределено;
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Тип = "Примеры" Тогда
			ИменаПараметров = СтрСтроки.ИменованныеПараметры;
			СтрокаПримеров = СтрСтроки;
		КонецЕсли;
	КонецЦикла;

	Если ИменаПараметров = Неопределено Тогда
		СтрОшибки = "Не смог найти у сценария " + СтрокаДерева.Имя + " имена изменяемых параметров!";
		СделатьСообщение(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;

	Ном = 0;
	Для каждого СтрСтрокаПримеров Из СтрокаПримеров.Строки Цикл
		Ном = Ном + 1;
		Если Ном = 1 Тогда
			//в первой строке лежат имена параметров
			Продолжить;
		КонецЕсли;

		Если ТекПример <> Неопределено Тогда
			Если СтрСтрокаПримеров <> ТекПример Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		СтруктураПараметровСценария = Новый Структура;
		СтруктураПараметровСценария.Вставить("Имя",СтрокаДерева.Имя + " (Пример №" + (Ном-1) + ")");
		СтруктураПараметровСценария.Вставить("СтрокаДерева",СтрСтрокаПримеров);

		Шаги = Новый Массив;

		Если СтрокаДерева.Родитель.Строки[0].ДопТип = "Контекст" Тогда //значит надо добавить шаги контекста к нашим шагам
			ДобавитьШагиДляВыполненияСценария(Шаги,СтрокаДерева.Родитель.Строки[0].Строки,СтрокаДерева,СтрСтрокаПримеров,Истина);
		КонецЕсли;

		ДобавитьШагиДляВыполненияСценария(Шаги,СтрСтрокаПримеров.Строки,СтрокаДерева,СтрСтроки.Родитель,Ложь);

		СтруктураПараметровСценария.Вставить("Шаги",Шаги);

		МассивСценариевДляВыполнения.Добавить(СтруктураПараметровСценария);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаСценария,ЭтоШагКонтекста)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя",СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров",СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета",СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры",СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет",СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария",СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария",СтрокаСценария);
	СтруктураШага.Вставить("СтрокаШага",СтрСтроки);
	СтруктураШага.Вставить("ШагСчитаетсяУпавшим",Ложь);
	СтруктураШага.Вставить("ОписаниеОшибки","");
	СтруктураШага.Вставить("ЭтоШагКонтекста",ЭтоШагКонтекста);
	СтруктураШага.Вставить("ИдСледующегоШага",Неопределено);
	СтруктураШага.Вставить("ДопТип",СтрСтроки.ДопТип);
	СтруктураШага.Вставить("ИдЦикла", Неопределено);

	Возврат СтруктураШага;
КонецФункции

Процедура ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги)
	ЕстьЦиклВышеПоДереву = Ложь;
	ТекСтрокаДерева      = СтрСтроки;
	ТекСтрокиРодителя    = ТекСтрокаДерева.Родитель.Строки;
	ИдЦикла              = Неопределено;
	Пока Истина Цикл

		Если ТекСтрокиРодителя.Индекс(ТекСтрокаДерева) <> (ТекСтрокиРодителя.Количество()-1) Тогда
			//это должна быть последняя строка в свроём уровне
			Прервать;
		КонецЕсли;

		Если ТекСтрокаДерева.Родитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;

		Если ТекСтрокаДерева.Родитель.ДопТип = "Цикл" Тогда
			ЕстьЦиклВышеПоДереву = Истина;
			ИдСтрокиЦикла        = ТекСтрокаДерева.Родитель;
			Прервать;
		КонецЕсли;

		ТекСтрокаДерева   = ТекСтрокаДерева.Родитель;
		ТекСтрокиРодителя = ТекСтрокаДерева.Родитель.Строки;
	КонецЦикла;

	Если ЕстьЦиклВышеПоДереву Тогда
		ИдВМассиве = Шаги.Количество()-1;

		Пока Истина Цикл
			Если Шаги[ИдВМассиве].СтрокаШага = ИдСтрокиЦикла Тогда
				Прервать;
			КонецЕсли;

			ИдВМассиве = ИдВМассиве - 1;
		КонецЦикла;

		СтруктураШага.Вставить("ИдЦикла",ИдВМассиве);
	КонецЕсли;

КонецПроцедуры

Функция НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева)
	Если СтрокаДерева.Тип = "Область" Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.ДопТип) Тогда
			Возврат СтрокаДерева;
		Иначе
			Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокаДерева.Строки[0]);
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаДерева;
КонецФункции

Функция ОпределитьИдСледующейСтроки(СтрокаДерева,СтрокиРодителя)
	ИдСледующейСтроки = СтрокиРодителя.Индекс(СтрокаДерева)+1;

	Если (СтрокиРодителя.Количество() - 1) >= ИдСледующейСтроки Тогда
		Возврат НайтиСледующуюИсполнимуюСтрокуДерева(СтрокиРодителя[ИдСледующейСтроки]);
	КонецЕсли;

	Если СтрокаДерева.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтрокаДерева.Родитель.Тип = "Сценарий" Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтрокаДерева.Родитель.ДопТип = "Цикл" Тогда
		Возврат СтрокаДерева.Родитель;
	КонецЕсли;

	Возврат ОпределитьИдСледующейСтроки(СтрокиРодителя.Родитель,СтрокиРодителя.Родитель.Родитель.Строки);
КонецФункции

Процедура ДобавитьШагиДляВыполненияСценария(Шаги,ДеревоСтроки,СтрокаДерева,СтрокаСценария,ЭтоШагКонтекста)
	Для каждого СтрСтроки Из ДеревоСтроки Цикл
		Если СтрСтроки.Тип = "Шаг" Тогда
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаДерева,ЭтоШагКонтекста);

			ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги);

			Шаги.Добавить(СтруктураШага);
		ИначеЕсли СтрСтроки.Тип = "ШагСценарий" Тогда
			Если СтрСтроки.ДопТип = "СтруктураСценария" Тогда //это вложенная структура сценария
				СтрокаПримеров = Неопределено;
				Для Каждого СтрокаДереваСтруктурыСценария Из СтрСтроки.Строки Цикл
					Если СтрокаДереваСтруктурыСценария.Тип = "Примеры" Тогда
						СтрокаПримеров = СтрокаДереваСтруктурыСценария;
					КонецЕсли;
				КонецЦикла;

				Если СтрокаПримеров = Неопределено Тогда
					ВызватьИсключение "Не найдена строка примеров во вложенной структуре сценария. <" + СтрокаДерева.ПолныйПуть + ">";
				КонецЕсли;

				НомерСтрокиПримера = 0;
				Для Каждого СтрокаПримера Из СтрокаПримеров.Строки Цикл
					НомерСтрокиПримера = НомерСтрокиПримера + 1;
					Если НомерСтрокиПримера = 1 Тогда
						Продолжить;//это служебная строка
					КонецЕсли;

					ДобавитьШагиДляВыполненияСценария(Шаги,СтрокаПримера.Строки,СтрокаПримера,СтрокаСценария,ЭтоШагКонтекста)
				КонецЦикла;
			Иначе
				ДобавитьШагиДляВыполненияСценария(Шаги,СтрСтроки.Строки,СтрокаДерева,СтрокаСценария,ЭтоШагКонтекста)
			КонецЕсли;
		ИначеЕсли СтрСтроки.Тип = "Область" Тогда

			Если (СтрСтроки.ДопТип = "Условие") или (СтрСтроки.ДопТип = "Цикл")  Тогда
				СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаДерева,ЭтоШагКонтекста);

				СледующаяСтрока = ОпределитьИдСледующейСтроки(СтрСтроки,ДеревоСтроки);
				СтруктураШага.Вставить("ИдСледующегоШага", СледующаяСтрока);

				ОбработатьСлужебныеЗначенияВСтруктуреШага(СтруктураШага,СтрСтроки,Шаги);
				Шаги.Добавить(СтруктураШага);
			КонецЕсли;

			ДобавитьШагиДляВыполненияСценария(Шаги,СтрСтроки.Строки,СтрокаДерева,СтрокаСценария,ЭтоШагКонтекста)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьОбычныйСценарий(СтрокаДерева,МассивСценариевДляВыполнения)
	Если СтрокаДерева.ДопТип = "Контекст" Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя",СтрокаДерева.Имя);
	СтруктураПараметров.Вставить("СтрокаДерева",СтрокаДерева);

	Шаги = Новый Массив;

	Если СтрокаДерева.Родитель.Строки[0].ДопТип = "Контекст" Тогда //значит надо добавить шаги контекста к нашим шагам
		ДобавитьШагиДляВыполненияСценария(Шаги,СтрокаДерева.Родитель.Строки[0].Строки,СтрокаДерева,СтрокаДерева,Истина);
	КонецЕсли;

	ДобавитьШагиДляВыполненияСценария(Шаги,СтрокаДерева.Строки,СтрокаДерева,СтрокаДерева,Ложь);

	СтруктураПараметров.Вставить("Шаги",Шаги);

	МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);

КонецПроцедуры

Процедура ДобавитьСценарийВМассивСценариевДляВыполнения(СтрокаДерева,МассивСценариевДляВыполнения)

	ЭтоСценариоАутлайн = ЭтоСценарий_SceanrioOutline(СтрокаДерева);
	Если ЭтоСценариоАутлайн Тогда
		ДобавитьСценарийАутлайн(СтрокаДерева,МассивСценариевДляВыполнения);
		Возврат;
	КонецЕсли;

	ДобавитьОбычныйСценарий(СтрокаДерева,МассивСценариевДляВыполнения);
КонецПроцедуры

Процедура ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ДеревоСтроки,МассивСценариевДляВыполнения)
	Если ТипЗнч(ДеревоСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоСтроки.Тип = "Сценарий" Тогда
			ДобавитьСценарийВМассивСценариевДляВыполнения(ДеревоСтроки,МассивСценариевДляВыполнения);
		ИначеЕсли ДеревоСтроки.Тип = "Пример" Тогда
			ДобавитьСценарийАутлайн(ДеревоСтроки.Родитель.Родитель,МассивСценариевДляВыполнения,ДеревоСтроки)
		КонецЕсли;
	Иначе
		Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
			Если СтрДеревоСтроки.Тип = "Сценарий" Тогда
				ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки,МассивСценариевДляВыполнения);
			Иначе
				ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(СтрДеревоСтроки.Строки,МассивСценариевДляВыполнения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьОписаниеОшибки(Знач Стр,ИмяФайла,ИмяПроцедуры) Экспорт
	Стр = СтрЗаменить(Стр,Символы.ПС,"");
	Стр = СтрЗаменить(Стр,Символы.ВК,"");

	Стр = Стр + "; ИмяФайла="+ИмяФайла + ", ИмяПроцедуры="+ИмяПроцедуры + ", версия Vanessa-ADD=" + ПолучитьВерсиюОбработки();
	Возврат Стр;
КонецФункции


Функция ПреобразоватьКДатеСтроку(Знач Стр)
	НачСтр = Стр;
	Год   = 0;
	Месяц = 0;
	День  = 0;

	Поз  = Найти(Стр,".");
	День = Число(Лев(Стр,Поз-1));
	Стр = Сред(Стр,Поз+1);

	Поз   = Найти(Стр,".");
	Месяц = Число(Лев(Стр,Поз-1));
	Стр   = Сред(Стр,Поз+1);

	Год   = Число(Стр);
	Если СтрДлина(Стр) = 2 Тогда
		Если Год < 100 Тогда
			Год = Год + 2000;
		КонецЕсли;
	КонецЕсли;

	Зн = Дата(Год,Месяц,День);

	Зн = Формат(Зн,"ДФ=yyyyMMdd; ДП=00010101");
	Зн = "'" + Зн + "'";

	Возврат Зн;
КонецФункции

Функция ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета)
	ФайлШагов = Новый Файл(АдресСнипета);
	ИД = МассивИменКонтекстовОбработок.Найти(АдресСнипета);
	ОбработкуНужноПересоздать = ИД = Неопределено;
	Если Не ОбработкуНужноПересоздать Тогда
		ОбработкуНужноПересоздать = ФайлШаговОбновлен(ФайлШагов);
	КонецЕсли;
	Если ОбработкуНужноПересоздать Тогда
	// Если ИД = Неопределено Тогда
		Попытка
			ОбработкаТеста = ВнешниеОбработки.Создать(АдресСнипета);
			ОбработкаТеста.ПолучитьСписокТестов(ЭтотОбъект);//чтобы передать контекст vanessa-add внутрь теста
		Исключение
			//Скорее всего это обработка не содержащая в себе тесты.
			Возврат Неопределено;
		КонецПопытки;

		МассивИменКонтекстовОбработок.Добавить(АдресСнипета);
		МассивКонтекстовОбработок.Добавить(ОбработкаТеста);
	Иначе
		ОбработкаТеста = МассивКонтекстовОбработок[ИД];
	КонецЕсли;

	Возврат ОбработкаТеста;
КонецФункции

Функция ФайлШаговОбновлен(Знач ФайлШагов)
	ИмяФайла = НРег(ФайлШагов.ПолноеИмя);
	ВерсияФайла = ФайлШагов.ПолучитьВремяИзменения();

	СтрТаблицаВерсийШагов = ТаблицаВерсийEPF.Найти(ИмяФайла, "");
	Если СтрТаблицаВерсийШагов = Неопределено Тогда
		СтрТаблицаВерсийШагов             = ТаблицаВерсийEPF.Добавить();
		СтрТаблицаВерсийШагов.ИмяФайла    = ИмяФайла;
		СтрТаблицаВерсийШагов.ВерсияФайла = ВерсияФайла;
		Возврат Истина;
	Иначе
		Если СтрТаблицаВерсийШагов.ВерсияФайла <> ВерсияФайла Тогда
			//значит файл изменился
			//обновляем версию и удаляем старые снипеты
			СтрТаблицаВерсийШагов.ВерсияФайла = ВерсияФайла;

			Возврат Истина;

			// МассивИД = Новый Массив;
			// Ном = -1;
			// Для каждого Элем Из ТаблицаУжеСуществующихСценариев Цикл
			// 	Ном = Ном + 1;
			// 	Если Элем.ИмяФайла = ИмяФайла Тогда
			// 		МассивИД.Добавить(Ном);
			// 	КонецЕсли;

			// КонецЦикла;

			// Для Ккк = 0 По МассивИД.Количество()-1 Цикл
			// 	ИД = МассивИД[МассивИД.Количество()-1 - Ккк];
			// 	ТаблицаУжеСуществующихСценариев.Удалить(ИД);
			// КонецЦикла;

		// Иначе
		// 	//значит уже актуальная версия файла загружена
		// 	Продолжить;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура ДействияПослеЗавершенияСценария(СтрокаСценария,БылаОшибка = Ложь,ОписаниеОшибки = Неопределено)
	ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередОкончаниемСценария",,БылаОшибка,ОписаниеОшибки);

	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ЗапретитьВыполнениеШаговФорма() Экспорт
	ОстановитьВыполнениеШагов = Истина;
КонецПроцедуры

Процедура УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки)
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_ШагаВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		ТекШаг.Вставить("ШагСчитаетсяУпавшим",Истина);
		ТекШаг.Вставить("ОписаниеОшибки",ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьИдСледующегоШага(ТекШаг)
	ИдСледующегоШага = Неопределено;
	Если ТекШаг.ДопТип = "Условие" Тогда
		Если НЕ РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдСледующегоШага,Истина);
		КонецЕсли;
	ИначеЕсли ТекШаг.ДопТип = "Цикл" Тогда
		Если НЕ РезультатУсловия Тогда
			ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдСледующегоШага,Истина);
			Если ТекШаг.ИдСледующегоШага = Неопределено Тогда
				ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдЦикла,Ложь);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекШаг.ИдЦикла <> Неопределено Тогда
		ИдСледующегоШага = Новый Структура("Ид,ИскатьПоИдСтроки",ТекШаг.ИдЦикла,Ложь);
	КонецЕсли;

	Возврат ИдСледующегоШага;
КонецФункции

Процедура ПродолжитьВыполнениеШаговФорма(ШагУпал = Ложь,ОписаниеОшибки = "") Экспорт
	ОстановитьВыполнениеШагов = Ложь;

	Если ШагУпал Тогда
		УстановитьТекущемуШагуФлагЧтоОнДолженСчитатьсяУпавшим(ОписаниеОшибки);
	КонецЕсли;


	Если ВсёЕщёИдётВыполнениеШагов Тогда
		Возврат;
	КонецЕсли;


	ИдСледующегоШага = Неопределено;
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		Если (МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги.Количество()-1) >= ТекИД_ШагаВМассиве Тогда
			ТекШаг = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги[ТекИД_ШагаВМассиве];
			ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);
		КонецЕсли;
	КонецЕсли;


	ПерейтиКВыполнениюСледующегоШага(Истина,ИдСледующегоШага);
КонецПроцедуры

Процедура ПерейтиКВыполнениюСледующегоШага(НадоОбновитьСтатусШага = Ложь,ИдСледующегоШага = Неопределено)
	Если ОстановитьВыполнениеШагов Тогда
		Возврат;
	КонецЕсли;

	Если (ТекИД_СценарияВМассиве >= 0) и (ТекИД_ШагаВМассиве >= 0) Тогда
		Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];

		Если ТекШаг.ШагСчитаетсяУпавшим Тогда


			СтрокаШага                         = ТекШаг.СтрокаШага;
			СтрокаСценария                     = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = СтрокаСценария.РезультатПрохожденияТестовСценария;
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

			СтрокаШага.Статус      = "Failed";
			СтрокаШага.ТипКартинки = 5;
			СтрокаСценария.Статус  = СтрокаШага.Статус;
			АдресСнипета           = ТекШаг.АдресСнипета;
			ИмяПроцедуры           = ТекШаг.СтрокаРеальнойПроцедуры;

			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не выполнен.");

			Если ЗначениеЗаполнено(ТекШаг.ОписаниеОшибки) Тогда
				ОписаниеОшибки = ТекШаг.ОписаниеОшибки;
			Иначе
				ОписаниеОшибки = ОписаниеОшибки();
			КонецЕсли;

			ОписаниеОшибки = СформироватьОписаниеОшибки(ОписаниеОшибки,АдресСнипета,ИмяПроцедуры);
			СделатьСообщение(ОписаниеОшибки);

			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество()-1];


			РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);
			РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияШага.Вставить("ОписаниеОшибки",ОписаниеОшибки);
			РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче",СтрокаШага.НомерСтрокиВФиче);

			СделатьСообщение(ОписаниеОшибки);

			РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);

			БылаОшибка     = Ложь;
			ОписаниеОшибки = "";
			ДействияПослеЗавершенияСценария(СтрокаСценария,БылаОшибка,ОписаниеОшибки);

			СтрокаСценария.Статус = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);

			ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
			//выполняем следующий сценарий
			ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);

			Возврат;
		КонецЕсли;
	КонецЕсли;


	Если НадоОбновитьСтатусШага Тогда
		Если ТекИД_ШагаВМассиве >= 0 Тогда

			Шаги   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
			ТекШаг = Шаги[ТекИД_ШагаВМассиве];

			СтрокаШага                         = ТекШаг.СтрокаШага;
			СтрокаСценария                     = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
			РезультатПрохожденияТестовСценария = СтрокаСценария.РезультатПрохожденияТестовСценария;
			РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче",СтрокаСценария.НомерСтрокиВФиче);
			РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;




			СтрокаШага.Статус = "Success";


			РезультатПрохожденияШага = РезультатПрохожденияТестовШагов[РезультатПрохожденияТестовШагов.Количество()-1];
			РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
			РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
			РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче",СтрокаШага.НомерСтрокиВФиче);
		КонецЕсли;
	КонецЕсли;



	Если ТекИД_ШагаВМассиве = -1 Тогда
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	ИначеЕсли 	ТекИД_ШагаВМассиве = ТекИД_ВыполненногоШагаВМассиве Тогда // это надо т.к. в определенных случаях таймер, подключающий следующий шаг может не сработать
		ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	КонецЕсли;


	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;

	Если ИдСледующегоШага <> Неопределено Тогда
		//значит явно указано с какого шага надо продолжить
		Если ИдСледующегоШага.ИД <> Неопределено Тогда
			Если ИдСледующегоШага.ИскатьПоИдСтроки Тогда
				НашлиШаг = Ложь;
				Для Ккк = ТекИД_ШагаВМассиве - 1 По Шаги.Количество() - 1 Цикл

					Если ИдСледующегоШага.ИД = Шаги[Ккк].СтрокаШага Тогда
						//нашли нужный ИД
						ТекИД_ШагаВМассиве = Ккк;
						НашлиШаг           = Истина;
						Прервать;
					КонецЕсли;


					// Если ИдСледующегоШага.ИД < Шаги[Ккк].СтрокаШага Тогда // TODO у УФ такой код
					Если ИдСледующегоШага.ИД.НомерСтрокиВФиче < Шаги[Ккк].СтрокаШага.НомерСтрокиВФиче Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;


				Если Не НашлиШаг Тогда
					Пока Истина Цикл
						ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве - 1;
						Если ТекИД_ШагаВМассиве < 0 Тогда
							Прервать;
						КонецЕсли;

						Если ИдСледующегоШага.ИД = Шаги[ТекИД_ШагаВМассиве].СтрокаШага Тогда
							//нашли нужный ИД
							НашлиШаг           = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				Если Не НашлиШаг Тогда
					ВызватьИсключение "Не смогли найти следующий шаг после цикла.";
				КонецЕсли;
			Иначе
				ТекИД_ШагаВМассиве = ИдСледующегоШага.ИД;
			КонецЕсли;
		Иначе
			//это значит, что далее некуда переходить
			//поэтому ставим ТекИД_ШагаВМассиве таким, чтобы сработало правило что выполнены все шаги
			ТекИД_ШагаВМассиве = Шаги.Количество();
		КонецЕсли;
	КонецЕсли;



	Если (НЕ ВыполнятьШагиАссинхронно) или ТранзакцияАктивна() Тогда //если транзакция активна, то нельзя использовать таймер
		ВыполнитьШаг();//просто вызываем следующий шаг
	Иначе
		ПодключитьОбработчикОжидания("ВыполнитьШаг",ИнтервалВыполненияШага,Истина); //вызвываем шаг через таймер, чтобы дать всем формам прорисоваться
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗначениеДляПередачиВМетод(Значение,Тип)
	Если Тип = "Строка" Тогда
		Возврат """" + СтрЗаменить(Значение,"""","""""") + """";
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат ПреобразоватьКДатеСтроку(Значение);
	Иначе
		ВызватьИсключение "Неизвестный Тип: " + Тип + " в ПолучитьЗначениеДляПередачиВМетод";
	КонецЕсли;
КонецФункции

Функция ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов)
	МассивПараметров = Новый Массив;
	Для Каждого ЭлементМассива Из СписокАргументов Цикл
		Элем = ЭлементМассива.Значение;
		МассивПараметров.Добавить(ПолучитьЗначениеДляПередачиВМетод(Элем.Значение,Элем.Тип));
	КонецЦикла;

	Возврат МассивПараметров;
КонецФункции

Процедура ПодготовитьИВызватьМетод(ТекШаг,ОбработкаТеста,ИмяПроцедуры,МассивПараметров)
	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;

	Если ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемШага(ТекШаг.Имя);
	КонецЕсли;

	ВсёЕщёИдётВыполнениеШагов = Истина;
	ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	ВсёЕщёИдётВыполнениеШагов = Ложь;

	ОбъектКонтекст            = ОбработкаТеста.Контекст;
	ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
КонецПроцедуры

Процедура ВыполнитьШаг()
	ТекИД_ВыполненногоШагаВМассиве = ТекИД_ШагаВМассиве;

	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	Если (Шаги.Количество()-1) < ТекИД_ШагаВМассиве Тогда
		//значит все шаги выполнены, запускаем следующий сценарий

		СтрокаСценария                     = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;

		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария,БылаОшибка,ОписаниеОшибки);

		РезультатПрохожденияТестовСценария = СтрокаСценария.РезультатПрохожденияТестовСценария;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче",СтрокаСценария.НомерСтрокиВФиче);


		Если БылаОшибка Тогда
			СтрокаСценария.Статус = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		КонецЕсли;


		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
		Возврат;
	КонецЕсли;

	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока = ТекШаг.СтрокаШага;

	СтрокаШага                         = ТекШаг.СтрокаШага;
	СтрокаСценария                     = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = СтрокаСценария.РезультатПрохожденияТестовСценария;
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить("Имя",СтрокаШага.Имя);
	РезультатПрохожденияШага.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияШага.Вставить("НомерСтрокиВФиче",СтрокаШага.НомерСтрокиВФиче);


	АдресСнипета = ТекШаг.АдресСнипета;
	Если СокрЛП(АдресСнипета) = "" Тогда

		СтрокаШага.Статус = "Pending";
		ОписаниеОшибки = "Не реализован. Пустой адрес снипета у шага: " + ТекШаг.Имя;

		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче",СтрокаСценария.НомерСтрокиВФиче);
		СтрокаСценария.Статус         = СтрокаШага.Статус;

		РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);

		СделатьСообщение(ОписаниеОшибки);


		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);

		ДействияПослеЗавершенияСценария(СтрокаСценария);

		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		//выполняем следующий сценарий
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);

		Возврат;
	КонецЕсли;

	ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);

	ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
	СписокАргументов = ТекШаг.ЗначенияПараметров;

	МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);

	Если СтрокаШага.ШагСПараметрамиВТаблице = Истина Тогда
		ПарамТаблица = Новый Массив;
		МассивПараметров.Добавить(ПарамТаблица);

		ПодчиненныеСтроки = СтрокаШага.Строки;
		Для каждого СтрокиТаблицы Из ПодчиненныеСтроки Цикл
			СтрокаПарамТаблица = Новый Структура;

			Если (СтрокиТаблицы.СтрокаПараметровШагаВВидеТаблицы <> Истина) или (НЕ ЗначениеЗаполнено(СтрокиТаблицы.ИМя)) Тогда
				ПарамТаблица = Новый Массив;
				МассивПараметров.Добавить(ПарамТаблица);
				Продолжить;
			КонецЕсли;

			НомерКолонки = 0;
			Для каждого Колонка Из СтрокиТаблицы.ПараметрыТаблицы Цикл
				НомерКолонки       = НомерКолонки + 1;
				СтруктураПараметра = Колонка.Значение;
				Значение           = ПолучитьЗначениеДляПередачиВМетод(СтруктураПараметра.Значение,СтруктураПараметра.Тип);
				Значение           = Вычислить(Значение);

				СтрокаПарамТаблица.Вставить("Кол" + НомерКолонки,Значение);
			КонецЦикла;

			ПарамТаблица.Добавить(СтрокаПарамТаблица);
		КонецЦикла;
	КонецЕсли;


	СтрОшибка       = Неопределено;
	ШагВыполнен     = Ложь;
	ШагНеРеализован = Ложь;
	Попытка
		ПодготовитьИВызватьМетод(ТекШаг,ОбработкаТеста,ИмяПроцедуры,МассивПараметров);

		ШагВыполнен = Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		Отладка("ОписаниеОшибки()=" + ОписаниеОшибкиСтр);
		Если Найти(ОписаниеОшибкиСтр,"}: Не реализовано.") > 0 Тогда //тогда это Pending
			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не реализован.");
			СтрОшибка = "Не реализовано.";
			ШагНеРеализован = Истина;
		Иначе
			//значит возникла ошибка
			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не выполнен.");
			СтрОшибка = СформироватьОписаниеОшибки(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), АдресСнипета, ИмяПроцедуры);
			СделатьСообщение(СтрОшибка);
		КонецЕсли;
	КонецПопытки;

	СтрокаШага = ТекШаг.СтрокаШага;
	РезультатПрохожденияШага.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());

	ИдСледующегоШага = ПолучитьИдСледующегоШага(ТекШаг);

	Если ШагВыполнен Тогда
		СтрокаШага.Статус = "Success";
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);

		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);

		ПерейтиКВыполнениюСледующегоШага(,ИдСледующегоШага);
	Иначе
		Если ШагНеРеализован Тогда
			СтрокаШага.Статус = "Pending";
		Иначе
			СтрокаШага.Статус = "Failed";

			СтатусЗапускаСценариев = Ложь;
		КонецЕсли;
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки",СтрОшибка);
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);

		СтрокаСценария                = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",СтрОшибка);
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче",СтрокаСценария.НомерСтрокиВФиче);

		СтрокаСценария.Статус         = СтрокаШага.Статус;

		БылаОшибка     = Ложь;
		ОписаниеОшибки = "";
		ДействияПослеЗавершенияСценария(СтрокаСценария,БылаОшибка,ОписаниеОшибки);

		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);

		Если БылаОшибка Тогда
			СтрокаСценария.Статус = "Failed";
			РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		КонецЕсли;


		ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги,ТекИД_ШагаВМассиве,РезультатПрохожденияТестовШагов);



		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		//выполняем следующий сценарий
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги,ТекИД,РезультатПрохожденияТестовШагов)
	Ид = ТекИД;
	Пока Истина Цикл
		Ид = Ид+1;
		Если Шаги.Количество() < (Ид+1) Тогда
			Прервать;
		КонецЕсли;

		ТекШаг = Шаги[Ид];

		РезультатПрохожденияШага = Новый Структура;
		РезультатПрохожденияШага.Вставить("Имя",ТекШаг.Имя);
		РезультатПрохожденияШага.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки","Пропущен");
		РезультатПрохожденияШага.Вставить("Статус","Skipped");

		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);

	КонецЦикла;
КонецПроцедуры


Процедура ОбработатьСтатусСценария(ИД)
	СтрокаСценария = МассивСценариевДляВыполнения[ИД].СтрокаДерева;

	Если СокрЛП(СтрокаСценария.Статус) <> "" Тогда
		Возврат;
	КонецЕсли;

	РезультатПрохожденияТестовШагов = СтрокаСценария.РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;

	СценарийВыполнен = Истина;
	Для каждого СтрШаг Из РезультатПрохожденияТестовШагов Цикл
		Если СтрШаг.Статус <> "Success" Тогда
			СценарийВыполнен = Ложь;
			Статус = СтрШаг.Статус;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если СценарийВыполнен Тогда
		СтрокаСценария.Статус = "Success";
	Иначе
		СтрокаСценария.Статус = Статус;
	КонецЕсли;
КонецПроцедуры

Функция ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева)
	Если СтрокаДерева.Тип = "Фича" Тогда
		Возврат СтрокаДерева.ПолныйПуть;
	КонецЕсли;

	Возврат ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева.Родитель);
КонецФункции

Процедура ВызватьМетодСценарияЕслиОнЕсть(СтрокаДереваСценария, ИмяПроцедуры, МассивПараметров = Неопределено, 
		БылаОшибка = Ложь,ОписаниеОшибки = Неопределено)

	ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДереваСценария);
	Если ИмяФичаФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Файл         = Новый Файл(ИмяФичаФайла);
	КаталогФичи  = Файл.Путь;
	АдресСнипета = УниверсальноеПолноеИмяФайлаШаговФичи(КаталогФичи, Файл.ИмяБезРасширения, ЭтоLinux);

	ФайлПроверкаСуществования = Новый Файл(АдресСнипета);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда //значит у фичи нет своей epf
		АдресСнипета_Устаревший = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(КаталогФичи, Файл.ИмяБезРасширения, ЭтоLinux);

		ФайлПроверкаСуществования = Новый Файл(АдресСнипета_Устаревший);

		Если НЕ ФайлПроверкаСуществования.Существует() Тогда
			Возврат;
		КонецЕсли;

		АдресСнипета = АдресСнипета_Устаревший;
	КонецЕсли;

	ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
	Если ОбработкаТеста = Неопределено Тогда
		//это возможно, если у фичи вообще нет своей обработки и она использует только шаги из других фич
		Возврат;
	КонецЕсли;

	ОбработкаТеста.Контекст            = ОбъектКонтекст;
	ОбработкаТеста.КонтекстСохраняемый = ОбъектКонтекстСохраняемый;

	Попытка
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ОписаниеОшибки();
		СделатьСообщение("Ошибка в " + ИмяПроцедуры + ". " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		БылаОшибка     = Истина;
	КонецПопытки;

	ОбъектКонтекст            = ОбработкаТеста.Контекст;
	ОбъектКонтекстСохраняемый = ОбработкаТеста.КонтекстСохраняемый;
КонецПроцедуры

Процедура ВыгрузитьСтатусВыполненияСценариевВФайл(Статус,ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);

	Если Файл.Существует() Тогда
		Если Файл.ЭтоКаталог() Тогда
			СделатьСообщение("Не могу выгрузить статус сценариев, т.к. был передан каталог, а не файл.");
			Возврат;
		КонецЕсли;
	КонецЕсли;


	ФайлКаталог = Новый Файл(Файл.Путь);
	Если НЕ ФайлКаталог.Существует() Тогда
		СделатьСообщение("Не могу выгрузить статус сценариев, т.к. каталог " + ФайлКаталог.ПолноеИмя + " не существует!");
		Возврат;
	КонецЕсли;


	УдалитьФайлы(ПутьКФайлу);

	ЗТ = Новый ЗаписьТекста(ПутьКФайлу,"UTF-8",,Истина);
	Если Статус Тогда
		Стр = "0";
	Иначе
		Стр = "1";
	КонецЕсли;

	ЗТ.ЗаписатьСтроку(Стр);

	ЗТ.Закрыть();

	СделатьСообщение("Записал файл статуса сборки: " + ПутьКФайлу);
КонецПроцедуры

Функция ПолучитьОбработкаСвязаннаяСИсполняемойФичей(ИмяФайлаФичи)
	ЭтоLinux = Ложь;
	ФайлФичи = Новый Файл(ИмяФайлаФичи);
	ФайлEPF  = УниверсальноеПолноеИмяФайлаШаговФичи(ФайлФичи.Путь, ФайлФичи.ИмяБезРасширения, ЭтоLinux);

	Файл = Новый Файл(ФайлEPF);

	Если НЕ Файл.Существует() Тогда
		ФайлEPF  = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(ФайлФичи.Путь, ФайлФичи.ИмяБезРасширения, ЭтоLinux);

		Файл = Новый Файл(ФайлEPF);

		Если НЕ Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат ПолучитьКонтекстТестаПоАдресСнипета(ФайлEPF);
КонецФункции

Функция НайтиСтрокуФичиЧерезРодителя(Стр)
	СтрокаДерева = Стр;
	Пока Истина Цикл
		СтрокаДерева = СтрокаДерева.Родитель;
		Если СтрокаДерева = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		Если СтрокаДерева.Тип = "Фича" Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура УбратьВсеЗапрещенныеСимволыИзИмениФайла(Стр)
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,"?","");
КонецПроцедуры

Функция ПреобразоватьПутьСТочкамиКНормальномуПути(Знач ОригСтр="") Экспорт

	Если ТипЗнч(ОригСтр) = Тип("Массив") Тогда
		Для Сч = 0 По ОригСтр.Количество() - 1 Цикл
			ОригСтр[Сч] = ПреобразоватьПутьСТочкамиКНормальномуПути(ОригСтр[Сч]);
		КонецЦикла;
		Возврат ОригСтр;
	КонецЕсли;

	Если Найти(ОригСтр, "$workspaceRoot") > 0 Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$workspaceRoot", ДополнитьСлешВПуть(КаталогПроекта));
	КонецЕсли;

	Если Найти(ОригСтр, "$instrumentsRoot") > 0 И НЕ ПустаяСтрока(КаталогИнструментов) Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$instrumentsRoot", ДополнитьСлешВПуть(КаталогИнструментов));
	КонецЕсли;

	Если Лев(ОригСтр, 1) = "." Тогда
		//Для совместимости со старым кодом оставим пока КаталогИнструментов, правильней было-бы использовать КаталогПроекта
		ФайлПути = Новый Файл(ДополнитьСлешВПуть(КаталогИнструментов) + ОригСтр);
		Возврат ФайлПути.ПолноеИмя;
	КонецЕсли;
	
	Возврат ОригСтр;
КонецФункции

Процедура ВыполнинтьСценарийАссинхронноТаймер()
	ОбъектКонтекст = Новый Структура;

	Если ТекИД_СценарияВМассиве > 0 Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве-1);
	КонецЕсли;

	Если (МассивСценариевДляВыполнения.Количество()-1) < ТекИД_СценарияВМассиве Тогда
		Сообщить(" ");
		СделатьСообщение("Все сценарии обработаны!");


		Если ДелатьОтчетВФорматеАллюр Тогда
			СтруктураОФ = Новый Структура;
			СтруктураОФ.Вставить("ЭтоОФ", Истина);

			СтруктураОФ.Вставить("ЕстьПоддержкаАсинхронныхВызовов", ЕстьПоддержкаАсинхронныхВызовов);

			СформироватьОтчетАллюр(СтруктураОФ);
		КонецЕсли;

		Если ДелатьОтчетВФорматеjUnit Тогда
			СтруктураОФ    = Новый Структура;
			СтруктураОФ.Вставить("ЭтоОФ",Истина);
			СформироватьОтчетjUnit(СтруктураОФ);

			Если ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ИмяСборки             = ИмяТекущейСборки;
				УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
				ИмяФайлаXML           = КаталогOutputjUnit + "\" + ИмяСборки  + "-junit.xml";
			Иначе
				ИмяФайлаXML           = КаталогOutputjUnit + "\junit.xml";
			КонецЕсли;

			Файл = Новый Файл(КаталогOutputjUnit);
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(КаталогOutputjUnit);
			КонецЕсли;

			СтруктураОФ.xml.Записать(ИмяФайлаXML);
			СделатьСообщение("Файл отчета jUnit-report (" + ИмяФайлаXML + ") записан.");
		КонецЕсли;

		Если ДелатьОтчетВФорматеCucumberJson Тогда
			СтруктураОФ    = Новый Структура;
			СтруктураОФ.Вставить("ЭтоОФ",Истина);
			СформироватьОтчетCucumberJson(СтруктураОФ);

			Если ДобавлятьКИмениСценарияУсловияВыгрузки Тогда
				ИмяСборки             = ИмяТекущейСборки;
				УбратьВсеЗапрещенныеСимволыИзИмениФайла(ИмяСборки);
				ИмяФайлаJson           = КаталогOutputCucumberJson + "\" + ИмяСборки + "-cucumber.json";
			Иначе
				ИмяФайлаJson           = КаталогOutputCucumberJson + "\cucumber.json";
			КонецЕсли;

			Файл = Новый Файл(КаталогOutputCucumberJson);
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(КаталогOutputCucumberJson);
			КонецЕсли;

			СтруктураОФ.json.Записать(ИмяФайлаJson);
			СделатьСообщение("Файл отчета CucumberJson-report (" + ИмяФайлаJson + ") записан.");
		КонецЕсли;

		Если ВыгружатьСтатусВыполненияСценариевВФайл Тогда
			ВыгрузитьСтатусВыполненияСценариевВФайл(СтатусЗапускаСценариев,ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев);
		КонецЕсли;


		Если НадоЗавершитьРаботуСистемыПослеВыполненияВсехСценариев Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Сообщить(" ");
	СделатьСообщение("Работаю по сценарию: " + МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);

	Если ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписатьЛогВЖРПередВыполнениемСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	КонецЕсли;

	СтрокаДерева = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаДерева.РезультатПрохожденияТестовСценария = Новый Структура;
	СтрокаДерева.РезультатПрохожденияТестовСценария.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовШагов = Новый Массив;
	СтрокаДерева.РезультатПрохожденияТестовСценария.Вставить("РезультатПрохожденияТестовШагов",РезультатПрохожденияТестовШагов);

	ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока = СтрокаДерева;

	СтрокаФичи = НайтиСтрокуФичиЧерезРодителя(СтрокаДерева);
	ОбработкаСвязаннаяСИсполняемойФичей = ПолучитьОбработкаСвязаннаяСИсполняемойФичей(СтрокаФичи.ПолныйПуть);





	БылаОшибка = Ложь;
	ОписаниеОшибки = "";
	ВызватьМетодСценарияЕслиОнЕсть(СтрокаДерева, "ПередНачаломСценария",,БылаОшибка,ОписаниеОшибки);
	Если БылаОшибка Тогда
		СтрокаСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария.Статус = "Failed";

		ДействияПослеЗавершенияСценария(СтрокаСценария);

		РезультатПрохожденияТестовСценария = СтрокаСценария.РезультатПрохожденияТестовСценария;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		РезультатПрохожденияТестовСценария.Вставить("НомерСтрокиВФиче",СтрокаСценария.НомерСтрокиВФиче);


		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
		Возврат;
	КонецЕсли;

	ТекИД_ШагаВМассиве             = -1;
	ТекИД_ВыполненногоШагаВМассиве = -1;
	ВсёЕщёИдётВыполнениеШагов      = Ложь;
	ПерейтиКВыполнениюСледующегоШага();


КонецПроцедуры


Процедура ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		  СтрСтроки.РезультатПрохожденияТестовСценария = Неопределено;
		  СтрСтроки.Статус                             = "";

		ОчиститьПоляВДеревеДляПостроенияОтчетов(СтрСтроки);
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьСценарии(ТекСценарий = Неопределено) Экспорт
	СделатьПараметрыКорректными();

	ОстановитьВыполнениеШагов = Ложь;
	СтатусЗапускаСценариев    = Истина;

	ОчиститьПоляВДеревеДляПостроенияОтчетов(ДеревоТестов);

	МассивКонтекстовОбработок     = Новый Массив;
	МассивИменКонтекстовОбработок = Новый Массив;

	МассивСценариевДляВыполнения = Новый Массив;

	Если ТекСценарий = Неопределено Тогда
		ТекСценарий = ДеревоТестов.Строки;
	КонецЕсли;

	ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ТекСценарий,МассивСценариевДляВыполнения);



	Если ВыполнятьСценарииАсинхронно Тогда
		ТекИД_СценарияВМассиве = 0;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
	КонецЕсли;

КонецПроцедуры

Процедура СделатьПараметрыКорректными()
	Если Прав(КаталогИнструментов,1) = "\" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов,СтрДлина(КаталогИнструментов)-1);
	КонецЕсли;
	Если Прав(КаталогИнструментов,1) = "\" Тогда
		КаталогOutputAllure = Лев(КаталогOutputAllure,СтрДлина(КаталогOutputAllure)-1);
	КонецЕсли;
	Если Прав(КаталогИнструментов,1) = "\" Тогда
		КаталогOutputjUnit = Лев(КаталогOutputjUnit,СтрДлина(КаталогOutputjUnit)-1);
	КонецЕсли;
	Если Прав(КаталогИнструментов,1) = "\" Тогда
		КаталогOutputCucumberJson = Лев(КаталогOutputCucumberJson,СтрДлина(КаталогOutputCucumberJson)-1);
	КонецЕсли;
КонецПроцедуры



Процедура кнЗапуститьСценарииНажатие(Элемент)



	ОчиститьСообщения();

	ВыполнитьСценарии();

КонецПроцедуры

Процедура СкопироватьСтрокиДерева(ДеревоОткудаСтроки,ДеревоКудаСтроки)
	Для каждого СтрДеревоОткудаСтроки Из ДеревоОткудаСтроки Цикл
		СтрДеревоКудаСтроки = ДеревоКудаСтроки.Добавить();
		Если СтрДеревоОткудаСтроки.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДерева(СтрДеревоОткудаСтроки.Строки,СтрДеревоКудаСтроки.Строки)
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрДеревоКудаСтроки,СтрДеревоОткудаСтроки);
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьДеревоНаФорму(ДеревоФич)
	ДеревоТестов.Строки.Очистить();
	СкопироватьСтрокиДерева(ДеревоФич.Строки,ДеревоТестов.Строки);
КонецПроцедуры


Функция ПолучитьИнструментПарсерФич()
	ПутьКФайлу = КаталогИнструментов + "\lib\FeatureReader\vbFeatureReader.epf";
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Файл " + ПутьКФайлу + " не найден!");
		Возврат Неопределено;
	КонецЕсли;
	ПарсерФич = ВнешниеОбработки.Создать(ПутьКФайлу);

	Возврат  ПарсерФич;
КонецФункции


Процедура РазврнутьДеревоДоСценариев(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Если (СтрСтроки.Тип = "Каталог") или (СтрСтроки.Тип = "Фича") Тогда
			ЭлементыФормы.тпДеревоТестов.Развернуть(СтрСтроки,Ложь);
		КонецЕсли;
		РазврнутьДеревоДоСценариев(СтрСтроки);
	КонецЦикла;
КонецПроцедуры


Процедура ПолучитьУжеСуществующиеСценарииИзФич(Знач КаталогФич,ДополнительныеПараметры, МассивОбработанныхФайлов)
	Файл = Новый Файл(КаталогФич);

	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;

	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;

	Отладка("Ищу сценарии в каталоге " + КаталогПоиска);

	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.feature",Истина);

	Для Каждого Файл Из МассивФайлов Цикл
		ИмяФайла = НРег(Файл.ПолноеИмя);

		Зн = МассивОбработанныхФайлов.Найти(ИмяФайла);
		Если Зн <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		МассивОбработанныхФайлов.Добавить(ИмяФайла);

		ВерсияФайла = Файл.ПолучитьВремяИзменения();


		СтрТаблицаВерсийFeature = ТаблицаВерсийFeature.Найти(ИмяФайла,"");
		Если СтрТаблицаВерсийFeature = Неопределено Тогда
			СтрТаблицаВерсийFeature             = ТаблицаВерсийFeature.Добавить();
			СтрТаблицаВерсийFeature.ИмяФайла    = ИмяФайла;
			СтрТаблицаВерсийFeature.ВерсияФайла = ВерсияФайла;
		Иначе
			Если СтрТаблицаВерсийFeature.ВерсияФайла <> ВерсияФайла Тогда
				//значит файл изменился
				//обновляем версию и удаляем старые снипеты
				СтрТаблицаВерсийFeature.ВерсияФайла = ВерсияФайла;


				МассивИД = Новый Массив;
				Ном = -1;
				Для каждого Элем Из ТаблицаУжеСуществующихСценариев Цикл
					Ном = Ном + 1;
					Если Элем.ИмяФайла = ИмяФайла Тогда
						МассивИД.Добавить(Ном);
					КонецЕсли;

				КонецЦикла;

				Для Ккк = 0 По МассивИД.Количество()-1 Цикл
					ИД = МассивИД[МассивИД.Количество()-1 - Ккк];
					ТаблицаУжеСуществующихСценариев.Удалить(ИД);
				КонецЦикла;

			Иначе
				//значит уже актуальная версия файла загружена
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла,"UTF-8");

		НашлиТегExportScenarios = Ложь;
		НомерСтроки = 0;
		ДобавлятьШаги = Ложь;
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			НомерСтроки = НомерСтроки + 1;

			Стр = СокрЛП(Стр);
			СтрНРег = НРег(Стр);

			Если Стр = "" Тогда
				Продолжить;
			КонецЕсли;

			Если СтрНРег = "@exportscenarios" Тогда
				НашлиТегExportScenarios = Истина;
			КонецЕсли;

			Если Лев(СтрНРег,1) = "@" Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(СтрНРег,1) = "#" Тогда
				Продолжить;
			КонецЕсли;

			Если НашлиТегExportScenarios Тогда
				Если Лев(СтрНРег,9) = "сценарий:" Тогда
					ДобавлятьШаги = Истина;
					ИмяСценария = СокрЛП(Сред(Стр,10));
					ТаблицаШагов = Новый Массив;
					ТаблицаУжеСуществующихСценариев.Добавить(ПолучитьСтруктуруДляСценария((ИмяСценария),ИмяФайла,ТаблицаШагов,Файл.ПолноеИмя,Ложь));
					Продолжить;
				ИначеЕсли Лев(СтрНРег,19) = "структура сценария:" Тогда
					ДобавлятьШаги = Истина;
					ИмяСценария = СокрЛП(Сред(Стр,20));
					ТаблицаШагов = Новый Массив;
					ТаблицаУжеСуществующихСценариев.Добавить(ПолучитьСтруктуруДляСценария((ИмяСценария),ИмяФайла,ТаблицаШагов,Файл.ПолноеИмя,Истина));
					Продолжить;
				КонецЕсли;

				Если ДобавлятьШаги Тогда
					ТаблицаШагов.Добавить(Стр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Текст.Закрыть();

	КонецЦикла;



КонецПроцедуры

Функция ПолучитьСтруктуруДляСценария(ИмяСценария,ИмяФайла,ТаблицаШагов,ПолноеИмя,ЭтоСтруктураСценария)
	Структура = Новый Структура;
	Структура.Вставить("ИмяСценария",ИмяСценария);
	Структура.Вставить("ИмяФайла",ИмяФайла);
	Структура.Вставить("ПолноеИмя",ПолноеИмя);
	Структура.Вставить("ТаблицаШагов",ТаблицаШагов);
	Структура.Вставить("ЭтоСтруктураСценария",ЭтоСтруктураСценария);
	Структура.Вставить("ДвоичныеДанные",Новый ДвоичныеДанные(ИмяФайла));

	Возврат Структура;
КонецФункции

Процедура ЗагрузитьФичи() Экспорт
	ПарсерФич = ПолучитьИнструментПарсерФич();

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов", КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич", КаталогФич);
	СтруктураПараметров.Вставить("ЭтоLinux", ЭтоLinux);

	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений",МассивСообщений);
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	СтруктураПараметров.Вставить("КонтекстVanessaADD",ЭтотОбъект);
	СтруктураПараметров.Вставить("КаталогиБиблиотек",КаталогиБиблиотек);
	СтруктураПараметров.Вставить("СписокТеговИсключение",СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор",СписокТеговОтбор);
	СтруктураПараметров.Вставить("ЯзыкГенератораGherkin",ЯзыкГенератораGherkin);






	ПутьКФичам = Новый Файл(КаталогФич);
	Путь = ПутьКФичам.ПолноеИмя;
	Если Не ПутьКФичам.Существует() Тогда
		СделатьСообщение("Путь к фичам <" + КаталогФич + "> не существует!");
		Возврат;
	КонецЕсли;

	Если ПутьКФичам.ЭтоФайл() Тогда
		Путь = ПутьКФичам.Путь;
		СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога",Ложь);
	КонецЕсли;


	МассивОбработанныхФайлов = Новый Массив;
	ДополнительныеПараметры = Неопределено;

	ПолучитьУжеСуществующиеСценарииИзФич(Путь,ДополнительныеПараметры,МассивОбработанныхФайлов);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСценарииИзФич(Элем.Значение,ДополнительныеПараметры,МассивОбработанныхФайлов);
	КонецЦикла;

	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ",ТаблицаУжеСуществующихСценариев);
	ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);
	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев",ТаблицаУжеСуществующихСценариевСервер);

	СтруктураПараметров.Вставить("ТаблицаИзвестныхStepDefinition",ТаблицаИзвестныхStepDefinition);
	СтруктураПараметров.Вставить("ТаблицаВерсийEPF",ТаблицаВерсийEPF);
	СтруктураПараметров.Вставить("ТаблицаВерсийFeature",ТаблицаВерсийFeature);




	Попытка
		ДеревоФич = ПарсерФич.ПолучитьДеревоФич(СтруктураПараметров);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СделатьСообщение("Ошибка при построении дерева.");
		СделатьСообщение("" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат;
	КонецПопытки;

	Для каждого Элем Из МассивСообщений Цикл
		СделатьСообщение(Элем);
	КонецЦикла;

	Если ДеревоФич = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СкопироватьДеревоНаФорму(ДеревоФич);

	РазврнутьДеревоДоСценариев(ДеревоТестов);


	СделатьСообщение("Фичи загружены.");

КонецПроцедуры

Функция ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(ИсходныйМассив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ИмяСценария");
	Тзн.Колонки.Добавить("ИмяФайла");
	Тзн.Колонки.Добавить("ПолноеИмя");
	Тзн.Колонки.Добавить("ТаблицаШагов");
	Тзн.Колонки.Добавить("ДвоичныеДанные");
	Тзн.Колонки.Добавить("ЭтоСтруктураСценария");
	Для каждого Элем Из ИсходныйМассив Цикл
		СтрТзн = Тзн.Добавить();

		СтрТзн.ИмяСценария          = Элем.ИмяСценария;
		СтрТзн.ИмяФайла             = Элем.ИмяФайла;
		СтрТзн.ПолноеИмя            = Элем.ПолноеИмя;
		СтрТзн.ТаблицаШагов         = Элем.ТаблицаШагов;
		СтрТзн.ДвоичныеДанные       = Элем.ДвоичныеДанные;
		СтрТзн.ЭтоСтруктураСценария = Элем.ЭтоСтруктураСценария;
	КонецЦикла;

	Возврат Тзн;
КонецФункции

Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	ОчиститьСообщения();

	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогФич = ДиалогОткрытияФайла.Каталог;
	Иначе
		Возврат;
	КонецЕсли;

	ЗагрузитьФичи();
КонецПроцедуры

Процедура ЗагрузитьТестыЗагрузитьОднуФичу()
	ОчиститьСообщения();

	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите feature файл";
	ДиалогОткрытияФайла.Фильтр = "Фича файл (*.feature)|*.feature";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогФич = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;

	ЗагрузитьФичи();
КонецПроцедуры

Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		ЭлементыФормы.кнЗагрузитьФичи.Заголовок = "Загрузить фичи из каталога";
	ИначеЕсли текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		ЭлементыФормы.кнЗагрузитьФичи.Заголовок = "Загрузить одну фичу";
	ИначеЕсли текЗначениеОперации = "" Тогда
	Иначе
		Стр = "Ошибка! Неизвестное значение параметра текЗначениеОперации = " + текЗначениеОперации;
		СделатьСообщение(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;
КонецПроцедуры


Процедура КнЗагрузитьТестыЗагрузитьФичиИзКаталога(Кнопка)
	текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры

Процедура КнЗагрузитьФичиЗагрузитьОднуФичу(Кнопка)
	текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры

Процедура ОбновитьИконкуСтатуса(ОформлениеСтроки, ДанныеСтроки)
КонецПроцедуры

Процедура тпДеревоТестовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Тип = "Каталог" Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиКаталогТестов.Картинка);
	ИначеЕсли ДанныеСтроки.Тип = "Фича" Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиФича.Картинка);
		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);
	ИначеЕсли ДанныеСтроки.ДопТип = "Контекст" Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиКонтекст.Картинка);
		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);
	ИначеЕсли ДанныеСтроки.Тип = "Сценарий" Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиСценарий.Картинка);
		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);
	ИначеЕсли ДанныеСтроки.Тип = "Шаг" Тогда

		Если ДанныеСтроки.Статус = "Success" Тогда
			ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиПометкаЗеленый.Картинка);
		ИначеЕсли ДанныеСтроки.Статус = "Pending" Тогда
			ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиПометкаЖелтый.Картинка);
		ИначеЕсли ДанныеСтроки.Статус = "Failed" Тогда
			ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиПометкаКрасный.Картинка);
		Иначе
			ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиШагСерый.Картинка);
		КонецЕсли;


		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);

		Если ДанныеСтроки.ЭтоЧужойСнипет = Истина Тогда
			ОформлениеСтроки.Ячейки.ПолныйПуть.ЦветФона = ЦветЧужойСнипет;
			ОформлениеСтроки.Ячейки.Снипет.ЦветФона = ЦветЧужойСнипет;
			ОформлениеСтроки.Ячейки.АдресСнипета.ЦветФона = ЦветЧужойСнипет;
		КонецЕсли;
	ИначеЕсли (ДанныеСтроки.Тип = "Пример") или (ДанныеСтроки.СтрокаПараметровШагаВВидеТаблицы = Истина) Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт("Lucida Console",10);
		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);
	КонецЕсли;
КонецПроцедуры

Процедура кнЗагрузитьФичиНажатие(Элемент)
	Если текЗначениеОперации = "" Тогда
		ЗагрузитьТестыЗагрузитьФичиИзКаталога();
		Возврат;
	КонецЕсли;

	Если текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		ЗагрузитьТестыЗагрузитьФичиИзКаталога();
	ИначеЕсли текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		ЗагрузитьТестыЗагрузитьОднуФичу();
	Иначе
		Стр = "Ошибка! Неизвестное значение параметра текЗначениеОперации = " + текЗначениеОперации;
		СделатьСообщение(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;

КонецПроцедуры

Процедура кнПерезагрузитьНажатие(Элемент)
	ЗагрузитьФичи();
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ЭлементыФормы.нКаталогФич1.Заголовок = КаталогФич;
	ЭлементыФормы.нКаталогФич2.Заголовок = КаталогФич;
КонецПроцедуры

Процедура КонтекстноеМенюДеревоВыполнитьОдинСценарий(Кнопка)
	ТекСтрокаДерева = ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока;
	Если ТекСтрокаДерева.Тип = "Сценарий" Тогда
		ВыполнитьСценарии(ТекСтрокаДерева);
	ИначеЕсли ТекСтрокаДерева.Тип = "Пример" Тогда
		ВыполнитьСценарии(ТекСтрокаДерева);
	Иначе
		СделатьСообщение("Это не строка сценария.");
	КонецЕсли;

КонецПроцедуры

Процедура КонтекстноеМенюДеревоОткрытьФичаФайл(Кнопка)
	ЗапуститьПриложение(ЭлементыФормы.тпДеревоТестов.ТекущиеДанные.ПолныйПуть);
КонецПроцедуры



Функция ПолучитьВременнуюФичу(Стр)
	ИмяФайла = ПолучитьИмяВременногоФайла("feature");

	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Истина);
	ЗТ.ЗаписатьСтроку("Функционал: Тест");
	ЗТ.ЗаписатьСтроку("Сценарий: Тестовый сценарий");
	ЗТ.ЗаписатьСтроку(Стр);

	ЗТ.Закрыть();

	Возврат ИмяФайла;
КонецФункции

Функция ПолучитьПутьКFeatureReader() Экспорт
	ПутьКФайлу = КаталогИнструментов + "\lib\FeatureReader\vbFeatureReader.epf";

	Возврат ПутьКФайлу;
КонецФункции

Функция СоздатьСтруктураПараметровДляЗагрузкиШага(ПутьЗагрузки)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	СтруктураПараметров.Вставить("ДополнительныеПараметры",Неопределено);
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога",Ложь);
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",ПутьЗагрузки);
	СтруктураПараметров.Вставить("КаталогиБиблиотек",КаталогиБиблиотек);
	СтруктураПараметров.Вставить("МассивРезультатОбходаКаталогов",Новый Массив);
	СтруктураПараметров.Вставить("МассивСообщений",Новый Массив);
	СтруктураПараметров.Вставить("СписокТеговИсключение",СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор",СписокТеговОтбор);
	СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Ложь);
	СтруктураПараметров.Вставить("ЯзыкГенератораGherkin",ЯзыкГенератораGherkin);

	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариевУФ",ТаблицаУжеСуществующихСценариев);
	ТаблицаУжеСуществующихСценариевСервер = ПреобразоватьМассивТаблицаУжеСуществующихСценариевВТаблицуЗначений(СтруктураПараметров.ТаблицаУжеСуществующихСценариевУФ);

	СтруктураПараметров.Вставить("ТаблицаУжеСуществующихСценариев",ТаблицаУжеСуществующихСценариевСервер);


	ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader",ДвДанныеvbFeatureReader);

	Возврат СтруктураПараметров;
КонецФункции

Процедура ПолучитьШагиИзДерева(ДеревоСтроки,Шаги)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если СтрокаДерева.Тип = "Шаг" Тогда

			Если СтрокаДерева.Родитель.ДопТип = "СтруктураСценария" Тогда
				// Эти шаги не выполняются в структуре сценария.
				Продолжить;
			КонецЕсли;

			Шаг = Новый Структура;
			Шаг.Вставить("Имя",СтрокаДерева.Имя);
			Шаг.Вставить("СтрокаРеальнойПроцедуры",СтрокаДерева.СтрокаРеальнойПроцедуры);
			Шаг.Вставить("ЗначенияПараметров",СтрокаДерева.ЗначенияПараметров);
			Шаг.Вставить("АдресСнипета",СтрокаДерева.АдресСнипета);
			Шаг.Вставить("ШагСПараметрамиВТаблице",СтрокаДерева.ШагСПараметрамиВТаблице);


			Если СтрокаДерева.ШагСПараметрамиВТаблице = Истина Тогда
				МассивТаблиц = Новый Массив;
				ПарамТаблица = Новый Массив;

				МассивТаблиц.Добавить(ПарамТаблица);

				ПодчиненныеСтроки = СтрокаДерева.Строки;
				Для каждого СтрокаТаблицы Из ПодчиненныеСтроки Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Имя) Тогда
						ПарамТаблица = Новый Массив;
						МассивТаблиц.Добавить(ПарамТаблица);
						Продолжить;
					КонецЕсли;


					СтрокаПарамТаблица = Новый Структура;

					НомерКолонки = 0;
					Для каждого Колонка Из СтрокаТаблицы.ПараметрыТаблицы Цикл
						НомерКолонки       = НомерКолонки + 1;
						СтруктураПараметра = Колонка.Значение;
						Значение           = ПолучитьЗначениеДляПередачиВМетод(СтруктураПараметра.Значение,СтруктураПараметра.Тип);
						Значение           = Вычислить(Значение);

						СтрокаПарамТаблица.Вставить("Кол" + НомерКолонки,Значение);
					КонецЦикла;

					ПарамТаблица.Добавить(СтрокаПарамТаблица);
				КонецЦикла;
				Шаг.Вставить("МассивТаблиц",МассивТаблиц);
			КонецЕсли;

			Шаги.Добавить(Шаг);
		Иначе
			ПолучитьШагиИзДерева(СтрокаДерева.Строки,Шаги);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьВременнуюФичуСервер(СтруктураПараметров)

	FeatureReader = ВнешниеОбработки.Создать(ПолучитьПутьКFeatureReader(),Ложь);

	Дерево = Новый ДеревоЗначений;
	СоздатьКолонкиДерева(Дерево);
	ПерваяСтрокаДерева = Дерево.Строки.Добавить();
	ПерваяСтрокаДерева.Имя = "Фичи";
	ПерваяСтрокаДерева.ПолныйПуть = "";

	FeatureReader.ЗагрузитьФичу(СтруктураПараметров.КаталогФич,ПерваяСтрокаДерева.Строки,ТаблицаИзвестныхStepDefinition,СтруктураПараметров);
	Шаги = Новый Массив;
	ПолучитьШагиИзДерева(Дерево.Строки,Шаги);

	СтруктураПараметров.Вставить("Шаги",Шаги);
КонецПроцедуры

Процедура ШагФорма(Стр) Экспорт

	ВременнаяФича = ПолучитьВременнуюФичу(Стр);

	СтруктураПараметров = СоздатьСтруктураПараметровДляЗагрузкиШага(ВременнаяФича);
	ЗагрузитьВременнуюФичуСервер(СтруктураПараметров);

	Шаги = СтруктураПараметров.Шаги;
	Для каждого ТекШаг Из Шаги Цикл
		Если Не ЗначениеЗаполнено(ТекШаг.АдресСнипета) Тогда
			ВызватьИсключение "Для шага <" + ТекШаг.Имя + "> не найден EPF файл!";
		КонецЕсли;

		ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
		СписокАргументов = ТекШаг.ЗначенияПараметров;

		МассивПараметров = ПолучитьМассивПараметровИзСписокАргументов(СписокАргументов);
		Если ТекШаг.ШагСПараметрамиВТаблице = Истина Тогда
			Для Каждого ТабПарам Из ТекШаг.МассивТаблиц Цикл
				МассивПараметров.Добавить(ТабПарам);
			КонецЦикла;
		КонецЕсли;

		АдресСнипета = ТекШаг.АдресСнипета;
		ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);

		ПодготовитьИВызватьМетод(ТекШаг,ОбработкаТеста,ИмяПроцедуры,МассивПараметров);

	КонецЦикла;

КонецПроцедуры

//для работы с файлами - начало
Процедура УдалитьФайлыКомандаСистемы(Знач ИмяФайла) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда

		Если ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла,"\","/");
			КомандаСистемы("rm -Rf """ + ИмяФайла + """");
		Иначе
			ИмяФайла = СтрЗаменить(ИмяФайла,"/","\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("DEL /Q """ + ИмяФайла + """");
		КонецЕсли;
	Иначе
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКаталогКомандаСистемы(Знач ИмяФайла) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Если ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла,"\","/");
			КомандаСистемы("rm -Rf """ + ИмяФайла + """");
		Иначе

			ИмяФайла = СтрЗаменить(ИмяФайла,"/","\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("RD /S /Q """ + ИмяФайла + """");
		КонецЕсли;

	Иначе
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьФайлКомандаСистемы(Знач Откуда,Знач Куда) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда

		Если ЭтоLinux Тогда
			Откуда = СтрЗаменить(Откуда,"\","/");
			Куда   = СтрЗаменить(Куда,"\","/");
			КомандаСистемы("mv """ + Откуда + """ """ + Куда + """");
		Иначе

			Откуда = СтрЗаменить(Откуда,"/","\");
			Куда   = СтрЗаменить(Куда,"/","\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("MOVE """ + Откуда + """ """ + Куда + """");
		КонецЕсли;
	Иначе
		ПереместитьФайл(Откуда,Куда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыКомандаСистемы(Путь,СписокКаталогов,СписокФайлов,ИскатьВПодкаталогах)

	Если НЕ ЕстьПоддержкаАсинхронныхВызовов Тогда
		Файлы = НайтиФайлы(Путь,"*",ИскатьВПодкаталогах);

		Для Каждого Файл Из Файлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				СписокКаталогов.Добавить(Файл,Файл.ПолноеИмя);
			Иначе
				СписокФайлов.Добавить(Файл,Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	Иначе
		//получение каталогов
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		КомандаКаталоги = "DIR """ + Путь + """ /A:D /B " + ?(ИскатьВПодкаталогах,"/S","") + " > """ + ИмяФайлаЛога + """";

		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаКаталоги);

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога,"UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			СписокКаталогов.Добавить(Новый Файл(Стр),Стр);
		КонецЦикла;

		Текст.Закрыть();

		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);

		//получение файлов
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
		КомандаФайлы = "DIR """ + Путь + """ /A:-D /B " + ?(ИскатьВПодкаталогах,"/S","") + " > """ + ИмяФайлаЛога + """";

		ВыполнитьКомандуОСБезПоказаЧерногоОкна(КомандаФайлы);

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаЛога,"UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			СписокФайлов.Добавить(Новый Файл(Стр),Стр);
		КонецЦикла;

		Текст.Закрыть();
		УдалитьФайлыКомандаСистемы(ИмяФайлаЛога);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КопироватьКаталогКомандаСистемы(Знач Откуда,Знач Куда)
	Куда = СтрЗаменить(Куда,"\","/");
	Если Прав(Куда,1) = "/" Тогда
		Куда = Лев(Куда,СтрДлина(Куда)-1);
	КонецЕсли;

	СписокКаталогов = Новый СписокЗначений;
	СписокФайлов    = Новый СписокЗначений;


	НайтиФайлыКомандаСистемы(Откуда,СписокКаталогов,СписокФайлов,Истина);


	СписокКаталогов.СортироватьПоПредставлению();

	Позиция = СтрДлина(Откуда)+1+1;

	Для Каждого Каталог Из СписокКаталогов Цикл
		ВтораяЧастьПути = СтрЗаменить(Сред(Каталог.Значение.ПолноеИмя,Позиция),"\","/");
		НовыйКаталогИмя = Куда + "/" + ВтораяЧастьПути;

		СоздатьКаталогКомандаСистемы(НовыйКаталогИмя);
	КонецЦикла;

	Для Каждого ЭлементФайл Из СписокФайлов Цикл
		Файл            = ЭлементФайл.Значение;
		ВтораяЧастьПути = СтрЗаменить(Сред(Файл.ПолноеИмя,Позиция),"\","/");
		НовоеИмяФайла   = Куда + "/" + ВтораяЧастьПути;

		КопироватьФайлКомандаСистемы(Файл.ПолноеИмя,НовоеИмяФайла);
	КонецЦикла;


КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлКомандаСистемы(Знач Откуда,Знач Куда) Экспорт

    Если ЕстьПоддержкаАсинхронныхВызовов Тогда
        Команда = "";
        Если ЭтоLinux Тогда
            Откуда = СтрЗаменить(Откуда,"\","/");
            Куда   = СтрЗаменить(Куда,"\","/");
            Команда = "cp r """ + Откуда + """ """ + Куда + """";
        Иначе
            Откуда = СтрЗаменить(Откуда,"/","\");
            Куда   = СтрЗаменить(Куда,"/","\");
            Команда = "COPY """ + Откуда + """ """ + Куда + """";
        КонецЕсли;

		Попытка
            Если ЭтоLinux Тогда
                КомандаСистемы(Команда);
            Иначе
                ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда);
            КонецЕсли;
        Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
            Сообщить("КопироватьФайлКомандаСистемы:"+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)+ " команда:"+Команда);
        КонецПопытки;
	Иначе
		КопироватьФайл(Откуда,Куда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогКомандаСистемы(Знач ИмяФайла, ДополнительныеПараметрыАсинхронности = Неопределено) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ИмяФайла = СтрЗаменить(ИмяФайла,"/","\");
		Если НЕ ЭтоLinux Тогда
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("MKDIR """ + ИмяФайла + """");
		Иначе
			ИмяФайла = СтрЗаменить(ИмяФайла,"\","/");
			КомандаСистемы("mkdir -p """ + ИмяФайла + """");
		КонецЕсли;
	Иначе
		СоздатьКаталог(ИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ФайлСуществуетКомандаСистемы(Знач ИмяФайла,ДопПараметры = Неопределено) Экспорт
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		ИмяВременногоЛог = ПолучитьИмяВременногоФайла("log");

		Если НЕ ЭтоLinux Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла,"/","\");
			ВыполнитьКомандуОСБезПоказаЧерногоОкна("(If Exist """ + ИмяФайла + """ (Echo yes) Else (Echo no)) > """ + ИмяВременногоЛог + """");
		Иначе
			ИмяВременнгоФайла = ПолучитьИмяВременногоФайла("sh");
			ЗТ = Новый ЗаписьТекста(ИмяВременнгоФайла,"UTF-8",Символы.ПС, Истина, Символы.ПС);

			ЗТ.ЗаписатьСтроку("#!/bin/sh");
			СтрокаКоманды = "sh -c 'test -f "+ИмяФайла+" && echo yes || echo no' > "+ИмяВременногоЛог +"";
			ЗТ.ЗаписатьСтроку(СтрокаКоманды);
			СтрокаКоманды = "sh -c 'test -d "+ИмяФайла+" && echo yes || echo no' >> "+ИмяВременногоЛог +"";
			ЗТ.ЗаписатьСтроку(СтрокаКоманды);
			ЗТ.Закрыть();

			КомандаСистемы("sh "+ ИмяВременнгоФайла);
		КонецЕсли;


		ФайлСуществует = Ложь;

		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяВременногоЛог,"UTF-8");

		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;

			Если Стр = "yes" Тогда
				ФайлСуществует = Истина;
			КонецЕсли;
		КонецЦикла;
		Текст.Закрыть();

		Возврат ФайлСуществует;
	Иначе
		ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
		Возврат ФайлПроверкаСуществования.Существует();
	КонецЕсли;
КонецФункции

//для работы с файлами - конец

Процедура КаталогПроектаНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораКаталога(КаталогПроекта, Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура НачалоВыбораКаталога(ПарамКаталог, Элемент, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ПарамКаталог;
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПарамКаталог = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;
КонецПроцедуры

// { Управляющие воздействия пользователя

Процедура КнопкаИнструментыГенераторМакетовДанных(Кнопка)
	ОткрытьИнструмент("СериализаторMXL", ПолучитьПутьКПлагинам());
КонецПроцедуры

Процедура КнопкаИнструментыПоказатьГУИД(Кнопка)
	ОткрытьИнструмент("xddGuidShow");
КонецПроцедуры

Процедура КнопкаИнструментыКонвертерТестов(Кнопка)
	ОткрытьИнструмент("xddTestsConvertIntoRebornFormat");
КонецПроцедуры

Процедура КнопкаИнструменты_xddTestRunner(Кнопка)
	ОткрытьИнструмент("xddTestRunner", КаталогИнструментов);
КонецПроцедуры

// } Управляющие воздействия пользователя

// { Внешние интерфейсные инструменты
Процедура ОткрытьИнструмент(Знач ИмяИнструмента, Знач ПутьИнструмента = "", Знач ИмяФормы = "Форма")
	// Если браузер тестов встроен в конфигурацию, то обработки инструментов
	// получаем также из состава конфигурации
	Если ЭтотОбъект.ЭтоВстроеннаяОбработка Тогда
		// Преобразование имени инструмента к имени обработки
		Если ИмяИнструмента = "UILogToScript" Тогда
			ИмяИнструмента = "ПреобразованиеЖурналаДействийПользователя";
		КонецЕсли;
		НоваяФорма = ПолучитьФорму("Обработка." + ИмяИнструмента + "." + ИмяФормы);
	Иначе
		Если Не ПустаяСтрока(ПутьИнструмента) Тогда
			ПутьКВнешнимИнструментам = ПутьИнструмента + "\";
		Иначе
			ПутьКВнешнимИнструментам = ПолучитьПутьКВнешнимИнструментам();
		КонецЕсли;
		ПутьИнструмента = ПутьКВнешнимИнструментам + ИмяИнструмента + ".epf";
		ФайлИнструмента = Новый Файл(ПутьИнструмента);
		Если Не ФайлИнструмента.Существует() Тогда
			Сообщить("Инструмент <" + ИмяИнструмента + "> не найден в каталоге <" + ФайлИнструмента.Путь + ">");
			Возврат;
		КонецЕсли;
		Обработка = ВнешниеОбработки.Создать(ФайлИнструмента.ПолноеИмя, Ложь);
		НоваяФорма = Обработка.ПолучитьФорму(ИмяФормы);
		Если НоваяФорма = Неопределено Тогда
			Сообщить("Инструмент <" + ИмяИнструмента + ">: не удалось получить основную форму!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	НоваяФорма.Открыть();
	НоваяФорма = Неопределено;
КонецПроцедуры

Функция ПолучитьПутьКВнешнимИнструментам()
	Возврат КаталогИнструментов + "\tools\epf\utils\";
КонецФункции
// } Внешние интерфейстные инструменты

// TODO Дубль кода в методах "УниверсальноеПолноеИмяФайлаШаговФичи" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
Функция УниверсальноеПолноеИмяФайлаШаговФичи(Знач ПутьФичи, Знач ИмяФичиБезРасширения, ЭтоLinux = Ложь)

	РазделительПути = ?(ЭтоLinux, "/", "\");

	Результат = ПутьФичи + "step_definitions" + РазделительПути + УбратьСпецсимволыИзИмениОбработки(ИмяФичиБезРасширения) + ".epf";

	Возврат Результат;

КонецФункции

// TODO Дубль кода в методах "УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
Функция УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(Знач ПутьФичи, Знач ИмяФичиБезРасширения, ЭтоLinux = Ложь)
	РазделительПути = ?(ЭтоLinux, "/", "\");
	Результат = ПутьФичи + "step_definitions" + РазделительПути + ИмяФичиБезРасширения + ".epf";

	Возврат Результат;

КонецФункции

Процедура КнопкаИнструментыБраузерИзвестныхШагов(Кнопка)

	ФормаДобавитьШаг = ПолучитьФорму("ВыборИзвестногоШагаОФ", ЭтаФорма);
	ФормаДобавитьШаг.ТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Скопировать();
	ФормаДобавитьШаг.ТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев;
	
	ФормаДобавитьШаг.Открыть();
КонецПроцедуры

ЭтоУФ = Ложь;
ЭтоLinux = Ложь;


СоздатьКолонкиДерева(ДеревоТестов);


ШагСтрокДляМодуля    = 10000;


ВыполнятьСценарииАсинхронно = Истина;

ЦветУспешно     = Новый Цвет(154,250,117);
ЦветОжидает     = Новый Цвет(244,255,91);
ЦветНеУспешно   = Новый Цвет(255,53,35);
ЦветЧужойСнипет = Новый Цвет(192,192,192);

ЕстьПоддержкаАсинхронныхВызовов = Ложь;

СтруктураПараметровДляСамотестирования = Новый Структура;

ТаблицаИзвестныхStepDefinition = Новый ТаблицаЗначений;
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ИмяФайла");
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Id");
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("СтрокаРеальнойПроцедуры");
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("СтрокаДляПоиска");
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Параметры");
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ВерсияФайла");
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("СтрокаОбрабатывалась");
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ТипШагаВДереве",Новый ОписаниеТипов("Строка"));
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ПредставлениеТеста",Новый ОписаниеТипов("Строка"));
ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ОписаниеШага",Новый ОписаниеТипов("Строка"));

ТаблицаВерсийEPF = Новый ТаблицаЗначений;
ТаблицаВерсийEPF.Колонки.Добавить("ИмяФайла");
ТаблицаВерсийEPF.Колонки.Добавить("ВерсияФайла");

ТаблицаВерсийFeature = Новый ТаблицаЗначений;
ТаблицаВерсийFeature.Колонки.Добавить("ИмяФайла");
ТаблицаВерсийFeature.Колонки.Добавить("ВерсияФайла");

ТаблицаУжеСуществующихСценариев = Новый Массив();

//где читать про Аллюр репорт
//https://github.com/allure-framework/allure-core/wiki/Creating-Allure-Adapter
//пример xml Allure
//https://github.com/allure-framework/allure-core/blob/master/allure-model/src/test/resources/allure-results/d7ecfd47-8020-4c04-9fd5-3981fa856228-testsuite.xml
