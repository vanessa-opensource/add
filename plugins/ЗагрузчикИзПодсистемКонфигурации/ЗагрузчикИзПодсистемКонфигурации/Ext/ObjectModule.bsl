Перем мЗначенияТиповСтроки Экспорт;

Перем КэшПостроительДереваТестов;
Перем ЗагружаемыйПуть;

Перем КонтейнерТестов;
Перем ТекущаяГруппа; 

Перем ЗагрузкаИзМодуляФормы;

// { Plugin interface

Функция ОписаниеПлагина(КонтекстЯдра, ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Загрузчик);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", "Загрузить тесты из конфигурации");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
КонецПроцедуры

// } Plugin interface

// { Loader interface

#Если ТолстыйКлиентОбычноеПриложение Тогда

Функция ВыбратьПутьИнтерактивно(КонтекстЯдра, ТекущийПуть = "") Экспорт
	ФормаВыбораПодсистем = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПодсистемы");
	ФормаВыбораПодсистем.РежимВыбора = Истина;
	ФормаВыбораПодсистем.ОтборПоИмениТеста = "";
	ВыбранныйПуть = ФормаВыбораПодсистем.ОткрытьМодально();
	
	Возврат ВыбранныйПуть;
КонецФункции

#КонецЕсли

Функция Загрузить(КонтекстЯдра, Путь) Экспорт
	Перем ДеревоТестов;
	
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	ЗагрузчикФайла = КонтекстЯдра.Плагин("ЗагрузчикФайла");
	
	ДеревоТестов = ЗагрузитьПуть(Путь, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра);
	
	Возврат ДеревоТестов;
КонецФункции

Функция ПолучитьКонтекстПоПути(КонтекстЯдра, Путь) Экспорт  
    
    Если Найти(Путь, ПрефиксПутейСФормами()) > 0 Тогда
        
        ПрефиксПутейСФормами = ПрефиксПутейСФормами();
        ИмяОбъектаМетаданных = Сред(Путь, СтрДлина(ПрефиксПутейСФормами) + 1);
        ОбъектМетаданных = ПолучитьОбъектМетаданныхПоПути(ИмяОбъектаМетаданных);
        Контекст = ПолучитьФорму("Обработка."+ ОбъектМетаданных.Имя + ".Форма");        
        
    Иначе
        
        ОбъектМетаданных = ПолучитьОбъектМетаданныхПоПути(Путь);
        Контекст = СоздатьОбработкуПоМетаданным(ОбъектМетаданных);
        
    КонецЕсли;
    
    Возврат Контекст;
    
КонецФункции   

// } Loader interface

Функция ЗагрузитьПуть(Путь, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра = Неопределено) Экспорт
	ОбъектМетаданных = ПолучитьОбъектМетаданныхПоПути(Путь);
	ДеревоТестов = ОбработатьОбъектМетаданных(ОбъектМетаданных, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра);
	
	Возврат ДеревоТестов;
КонецФункции

Функция ПолучитьОбъектМетаданныхПоПути(Путь) Экспорт
	Перем ОбъектКонфигурации;
	Попытка
		Выполнить("ОбъектКонфигурации = " + Путь);
	Исключение
		ВызватьИсключение "Передан невалидный путь <" + Путь + ">";
	КонецПопытки;
	
	Возврат ОбъектКонфигурации;
КонецФункции

Функция ОбработатьОбъектМетаданных(ОбъектМетаданных, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра)
	Если ЭтоПодсистема(ОбъектМетаданных) Тогда
		Контейнер = ЗагрузитьПодсистему(ОбъектМетаданных, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра);
	Иначе
		Контейнер = ЗагрузитьОбработку(ОбъектМетаданных, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра);
	КонецЕсли;
	
	Возврат Контейнер;
КонецФункции

Функция ЭтоПодсистема(ОбъектМетаданных)
	Возврат (Найти(НРег(ОбъектМетаданных.ПолноеИмя()), НРег("Подсистема")) > 0);
КонецФункции

Функция ЗагрузитьПодсистему(Подсистема, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра)
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер(Подсистема.Имя, ПостроительДереваТестов.ИконкиУзловДереваТестов.Подсистема);
	Для каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы цикл
		КонтейнерПодчиненнойПодсистемы = ЗагрузитьПодсистему(ПодчиненнаяПодсистема, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра);
		Если КонтейнерПодчиненнойПодсистемы.Строки.Количество() > 0 Тогда
			Контейнер.Строки.Добавить(КонтейнерПодчиненнойПодсистемы);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ДочернееМетаданное Из Подсистема.Состав цикл
		Если Метаданные.Обработки.Найти(ДочернееМетаданное.Имя) <> Неопределено
			ИЛИ Метаданные.Отчеты.Найти(ДочернееМетаданное.Имя) <> Неопределено Тогда
			КонтейнерСТестамиОбработки = ЗагрузитьОбработку(ДочернееМетаданное, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра);
			Если КонтейнерСТестамиОбработки.Строки.Количество() > 0 Тогда
				Контейнер.Строки.Добавить(КонтейнерСТестамиОбработки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Контейнер;
КонецФункции

Функция ЗагрузитьОбработку(МетаданныеОбработки, ПостроительДереваТестов, ЗагрузчикФайла, КонтекстЯдра) Экспорт
	Обработка = СоздатьОбработкуПоМетаданным(МетаданныеОбработки);
	Попытка
		Контейнер = ЗагрузитьТестыВНовомФормате(ПостроительДереваТестов, Обработка, МетаданныеОбработки, ЗагрузчикФайла, КонтекстЯдра);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ЭтоНовыйФорматОбработки(ТекстОшибки) Тогда
			ВызватьИсключение;
		Иначе
			Контейнер = ЗагрузитьТестыВСтаромФормате(ПостроительДереваТестов, Обработка, МетаданныеОбработки, ЗагрузчикФайла);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Контейнер;
КонецФункции

Функция ЗагрузитьТестыВНовомФормате(ПостроительДереваТестов, Обработка, МетаданныеОбработки, ЗагрузчикФайла, КонтекстЯдра)
    
    КэшПостроительДереваТестов = ПостроительДереваТестов;
	Если Метаданные.Обработки.Содержит(МетаданныеОбработки) Тогда
        
        ЗагружаемыйПуть = СтрЗаменить("Метаданные." + МетаданныеОбработки.ПолноеИмя(), ".Обработка.", ".Обработки.");
		ИконкаУзла = ПостроительДереваТестов.ИконкиУзловДереваТестов.Обработка;
        
    ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбработки) Тогда
        
        ЗагружаемыйПуть = СтрЗаменить("Метаданные." + МетаданныеОбработки.ПолноеИмя(), ".Отчет.", ".Отчеты.");
		ИконкаУзла = ПостроительДереваТестов.ИконкиУзловДереваТестов.Отчет;
        
    КонецЕсли;
    
    КонтейнерТестов = ПостроительДереваТестов.СоздатьКонтейнер(МетаданныеОбработки.Имя, ИконкаУзла);   
    ЗаполнитьНаборКонтейнераТестов(Обработка, МетаданныеОбработки, КонтекстЯдра);
       
    Результат = КонтейнерТестов;
	КонтейнерТестов = Неопределено;
	ТекущаяГруппа = Неопределено;
	
	Возврат Результат;

КонецФункции  

Процедура ЗаполнитьНаборКонтейнераТестов(Обработка, МетаданныеОбработки, КонтекстЯдра)  
    
	// Порядок попыток заполнения набора тестов 
    // ___________________________________________________________________________
    // | Место поиска   | Тестовый метод                                          |
    // |________________|_________________________________________________________|
    // | Модуль объекта | Обработка.ЗаполнитьНаборТестов(ЭтотОбъект, КонтекстЯдра)|
    // |________________|_________________________________________________________|
    // | Модуль объекта | Обработка.ЗаполнитьНаборТестов(ЭтотОбъект)              |
    // |________________|_________________________________________________________|
    // | Модуль формы   | Форма.ЗаполнитьНаборТестов(ЭтотОбъект, КонтекстЯдра)    |
    // |________________|_________________________________________________________|
    
    КонтейнерТестовЗаполненИзМодуляОбъекта = ЗаполнитьНаборКонтейнераИзМодуляОбработки(Обработка, КонтекстЯдра);            
    Если КонтейнерТестовЗаполненИзМодуляОбъекта Тогда
        Возврат;        
    КонецЕсли; 
    
    КонтейнерТестовЗаполненИзМодуляФормы = Ложь;
    #Если ТолстыйКлиентОбычноеПриложение Тогда 
    КонтейнерТестовЗаполненИзМодуляФормы = ЗаполнитьНаборКонтейнераИзМодуляФормыОбработки(МетаданныеОбработки, КонтекстЯдра);
    #КонецЕсли   

    Если ЗагрузкаИзМодуляФормы И НЕ КонтейнерТестовЗаполненИзМодуляФормы Тогда
        ВызватьИсключение НСтр("ru='Обработка не содержит доступных наборов тестов для заполнения'");            
    КонецЕсли;
    
КонецПроцедуры

Функция ЗаполнитьНаборКонтейнераИзМодуляОбработки(Обработка, КонтекстЯдра)
    
    ЗагрузкаИзМодуляФормы = Ложь;
    КонтейнерТестовЗаполнен = Ложь; 
    
    Попытка                              
        
		Обработка.ЗаполнитьНаборТестов(ЭтотОбъект, КонтекстЯдра);
        КонтейнерТестовЗаполнен = Истина;       

	Исключение
        
        Инфо = ИнформацияОбОшибке();
        Если Инфо.ИмяМодуля = "ВнешняяОбработка.ЗагрузчикИзПодсистемКонфигурации.МодульОбъекта" 
            И ((Инфо.Описание = "Слишком много фактических параметров" ИЛИ	Инфо.Описание = "Too many actual parameters")) 
            И Найти(Инфо.ИсходнаяСтрока, "Обработка.ЗаполнитьНаборТестов(ЭтотОбъект, КонтекстЯдра);") > 0 Тогда
            
            Попытка
                Обработка.ЗаполнитьНаборТестов(ЭтотОбъект);
                КонтейнерТестовЗаполнен = Истина;
            Исключение
                ВызватьИсключение    
            КонецПопытки
            
		КонецЕсли;
        
    КонецПопытки;
    
    Возврат КонтейнерТестовЗаполнен;
    
КонецФункции 

#Если ТолстыйКлиентОбычноеПриложение Тогда  
    
Функция ЗаполнитьНаборКонтейнераИзМодуляФормыОбработки(МетаданныеОбработки, КонтекстЯдра)
    
    КонтейнерТестовЗаполненИзМодуляФормы = Ложь;
    ЗагрузкаИзМодуляФормы = Истина;

    Попытка
                
        ФормаОбработкиСИменемФорма = ПолучитьФорму(МетаданныеОбработки.ПолноеИмя() + ".Форма");
        ФормаОбработкиСИменемФорма.ЗаполнитьНаборТестов(ЭтотОбъект, КонтекстЯдра);
        
        КонтейнерТестовЗаполненИзМодуляФормы = Истина;
        
    Исключение
        ВызватьИсключение; 
    КонецПопытки;
    
    Возврат КонтейнерТестовЗаполненИзМодуляФормы;
        
КонецФункции 

 #КонецЕсли 

Функция ЭтоНовыйФорматОбработки(Знач ТекстОшибки)
	ЭтоНовыйФорматОбработки = Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, "ЗаполнитьНаборТестов");
	
	Возврат ЭтоНовыйФорматОбработки;
КонецФункции

Функция ЗагрузитьТестыВСтаромФормате(ПостроительДереваТестов, Обработка, МетаданныеОбработки, ЗагрузчикФайла)
	
	Обработка = СоздатьОбработкуПоМетаданным(МетаданныеОбработки);
	Попытка
		СписокТестов = Обработка.ПолучитьСписокТестов();
	Исключение
		Описание = ОписаниеОшибки();
		Если Найти(Описание, "Недостаточно фактических параметров") > 0 Тогда
			ВызватьИсключение "Старый формат тестов в обработке тестов <"+МетаданныеОбработки.Имя+">."+Символы.ПС+
				"Метод ПолучитьСписокТестов сейчас не принимает параметров";
		КонецЕсли;
		
		Если Найти(Описание, "Метод объекта не обнаружен (ПолучитьСписокТестов)") = 0 Тогда
			ВызватьИсключение Описание;
		КонецЕсли;
	КонецПопытки;
	
	СлучайныйПорядокВыполнения = Истина;
	Попытка
		СлучайныйПорядокВыполнения = Обработка.РазрешенСлучайныйПорядокВыполненияТестов();
	Исключение
	КонецПопытки;
	Путь = СтрЗаменить("Метаданные." + МетаданныеОбработки.ПолноеИмя(), ".Обработка.", ".Обработки.");
	Контейнер = ПолучитьКонтейнерДереваТестовПоСпискуТестов(ПостроительДереваТестов, ЗагрузчикФайла, СписокТестов, МетаданныеОбработки.Имя, Путь, СлучайныйПорядокВыполнения);
	
	Возврат Контейнер;
КонецФункции

Функция ПолучитьКонтейнерДереваТестовПоСпискуТестов(ПостроительДереваТестов, ЗагрузчикФайла, СписокТестов, ИмяКонтейнера, Путь, СлучайныйПорядокВыполнения = Истина) Экспорт
	
	Контейнер = ЗагрузчикФайла.ПолучитьКонтейнерДереваТестовПоСпискуТестов(ПостроительДереваТестов, СписокТестов, ИмяКонтейнера, Путь, СлучайныйПорядокВыполнения);
	
	Возврат Контейнер;
	
КонецФункции

Функция СоздатьОбработкуПоМетаданным(МетаданныеОбработки)
	Если Метаданные.Обработки.Найти(МетаданныеОбработки.Имя) <> Неопределено Тогда
		Возврат Обработки[МетаданныеОбработки.Имя].Создать();
	ИначеЕсли Метаданные.Отчеты.Найти(МетаданныеОбработки.Имя) <> Неопределено Тогда
		Возврат Отчеты[МетаданныеОбработки.Имя].Создать();
	Иначе
		ВызватьИсключение "Не удалось найти обработку / отчет с идентификатором """+МетаданныеОбработки.Имя+"""";
	КонецЕсли;
КонецФункции

//{ Работа со встроенными в конфигурацию тестами и подсистемами

Процедура ЗаполнитьДеревоПодсистем(ДеревоПодсистем, ОтборПоИмениТеста) Экспорт
	Для каждого МетаПодсистема из Метаданные.Подсистемы цикл
		ДобавитьПодсистемуВДерево(МетаПодсистема, ДеревоПодсистем, ЭтотОбъект, ОтборПоИмениТеста);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьПодсистемуВДерево(ТекМетаПодсистема, РодительскаяСтрока, ОбработкаОбъект, ОтборПоИмениТеста)
	СтрокаПодсистемы = ПодчиненныеСтроки(РодительскаяСтрока).Добавить();
	СтрокаПодсистемы.Имя = ТекМетаПодсистема.Имя;
	СтрокаПодсистемы.Путь = "Метаданные."+СтрЗаменить(ТекМетаПодсистема.ПолноеИмя(), "Подсистема.", "Подсистемы.");
	СтрокаПодсистемы.ТипСтроки = мЗначенияТиповСтроки.Подсистема;
	Для Каждого Подсистема из ТекМетаПодсистема.Подсистемы Цикл 
		ДобавитьПодсистемуВДерево(Подсистема,СтрокаПодсистемы, ОбработкаОбъект, ОтборПоИмениТеста);
	КонецЦикла;
	
	Для каждого ОбъектМетаданных из ТекМетаПодсистема.Состав цикл
		Если Найти(ОбъектМетаданных.ПолноеИмя(), "Обработка."+ОтборПоИмениТеста) = 1 Тогда
			СтрокаТеста = ПодчиненныеСтроки(СтрокаПодсистемы).Добавить();
			СтрокаТеста.Имя = ОбъектМетаданных.Имя;
			СтрокаТеста.Путь = "Метаданные."+СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), "Обработка.", "Обработки.");
			СтрокаТеста.ТипСтроки = мЗначенияТиповСтроки.ТестовыйСлучай;
		ИначеЕсли Найти(ОбъектМетаданных.ПолноеИмя(), "Отчет."+ОтборПоИмениТеста) = 1 Тогда
			СтрокаТеста = ПодчиненныеСтроки(СтрокаПодсистемы).Добавить();
			СтрокаТеста.Имя = ОбъектМетаданных.Имя;
			СтрокаТеста.Путь = "Метаданные."+СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), "Отчет.", "Отчеты.");
			СтрокаТеста.ТипСтроки = мЗначенияТиповСтроки.ТестовыйСлучайОтчет;		
		КонецЕсли;
	КонецЦикла;
	
	Если ПодчиненныеСтроки(СтрокаПодсистемы).Количество() = 0 Тогда
		ПодчиненныеСтроки(РодительскаяСтрока).Удалить(СтрокаПодсистемы);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодчиненныеСтроки(СтрокаДерева, РезЭтоСтрокаДереваУФ = Ложь) Экспорт
	РезЭтоСтрокаДереваУФ = ЭтоСтрокаДереваУФ(СтрокаДерева);
    Если Не РезЭтоСтрокаДереваУФ Тогда
        Строки = СтрокаДерева.Строки;
    Иначе
        Строки = СтрокаДерева.ПолучитьЭлементы();
	КонецЕсли;
	Возврат Строки;
КонецФункции

Функция ЭтоСтрокаДереваУФ(СтрокаДерева)
	Рез = Ложь;
    Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
    ИначеЕсли ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
		Рез = Истина;
	КонецЕсли;
	Возврат Рез;
КонецФункции

//}

// { API нового формата

Процедура СлучайныйПорядокВыполнения() Экспорт
	Если ЗначениеЗаполнено(КонтейнерТестов) Тогда
		КонтейнерТестов.СлучайныйПорядокВыполнения = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура СтрогийПорядокВыполнения() Экспорт
	Если ЗначениеЗаполнено(КонтейнерТестов) Тогда
		КонтейнерТестов.СлучайныйПорядокВыполнения = Ложь;

		ОстановитьВыполнениеПослеПаденияТестов();
	КонецЕсли;
КонецПроцедуры

Процедура ПродолжитьВыполнениеПослеПаденияТеста() Экспорт
	Если ЗначениеЗаполнено(КонтейнерТестов) Тогда
		КонтейнерТестов.ПродолжитьВыполнениеПослеПаденияТеста = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ОстановитьВыполнениеПослеПаденияТестов() Экспорт
	Если ЗначениеЗаполнено(КонтейнерТестов) Тогда
		КонтейнерТестов.ПродолжитьВыполнениеПослеПаденияТеста = Ложь;
	КонецЕсли;	
КонецПроцедуры

Процедура НачатьГруппу(Знач ИмяГруппы, Знач СтрогийПорядокВыполнения = Ложь) Экспорт
    
    ЗагружаемыйПутьДляГруппы = ЗагружаемыйПуть;
    Если ЗагрузкаИзМодуляФормы Тогда
        ЗагружаемыйПутьДляГруппы = ПрефиксПутейСФормами() + ЗагружаемыйПуть;          
    КонецЕсли;
        
    ТекущаяГруппа = КэшПостроительДереваТестов.СоздатьКонтейнер(ИмяГруппы, КэшПостроительДереваТестов.ИконкиУзловДереваТестов.Группа);
	ТекущаяГруппа.Путь = ЗагружаемыйПутьДляГруппы;
	ТекущаяГруппа.СлучайныйПорядокВыполнения = Не СтрогийПорядокВыполнения;
	КонтейнерТестов.Строки.Добавить(ТекущаяГруппа);

КонецПроцедуры

Функция Добавить(Знач ИмяМетода, Знач Параметры = Неопределено, Знач Представление = "") Экспорт
    
    Если НЕ ЗначениеЗаполнено(Параметры) ИЛИ ТипЗнч(Параметры) <> Тип("Массив") Тогда
		Если ТипЗнч(Параметры) = Тип("Строка") И Представление = "" Тогда
			Представление = Параметры;
		КонецЕсли;
		Параметры = Неопределено;    
    КонецЕсли;                      
    
    ЗагружаемыйПутьДляПостроителяДереваТестов = ЗагружаемыйПуть;
    Если ЗагрузкаИзМодуляФормы Тогда
        ЗагружаемыйПутьДляПостроителяДереваТестов = ПрефиксПутейСФормами() + ЗагружаемыйПуть;    
    КонецЕсли; 
    
	Элемент = КэшПостроительДереваТестов.СоздатьЭлемент(ЗагружаемыйПутьДляПостроителяДереваТестов, 
                                                        ИмяМетода, 
                                                        Представление);
    
    Если Параметры <> Неопределено Тогда
		Элемент.Параметры = Параметры;
    КонецЕсли; 
    
	Если ЗначениеЗаполнено(ТекущаяГруппа) Тогда
		ТекущаяГруппа.Строки.Добавить(Элемент);
	Иначе
		КонтейнерТестов.Строки.Добавить(Элемент);
	КонецЕсли;
	
	Возврат Элемент;
    
КонецФункции

Функция ДобавитьДеструктор(Знач ИмяМетодаДеструктора, Знач Представление = "") Экспорт
	ЭлементДеструктор = Добавить(ИмяМетодаДеструктора, Неопределено, Представление);
	Если ЗначениеЗаполнено(ТекущаяГруппа) Тогда
		ТекущаяГруппа.ЭлементДеструктор = ЭлементДеструктор;
	Иначе
		КонтейнерТестов.ЭлементДеструктор = ЭлементДеструктор;
	КонецЕсли;
	Возврат ЭлементДеструктор;
КонецФункции

Функция ПараметрыТеста(Знач Парам1, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено, Знач Парам6 = Неопределено, Знач Парам7 = Неопределено, Знач Парам8 = Неопределено, Знач Парам9 = Неопределено) Экспорт
	ВсеПараметры = Новый Массив;
	ВсеПараметры.Добавить(Парам1);
	ВсеПараметры.Добавить(Парам2);
	ВсеПараметры.Добавить(Парам3);
	ВсеПараметры.Добавить(Парам4);
	ВсеПараметры.Добавить(Парам5);
	ВсеПараметры.Добавить(Парам6);
	ВсеПараметры.Добавить(Парам7);
	ВсеПараметры.Добавить(Парам8);
	ВсеПараметры.Добавить(Парам9);
	
	ИндексСПоследнимПараметром = 0;
	Для Сч = 0 По ВсеПараметры.ВГраница() Цикл
		Индекс = ВсеПараметры.ВГраница() - Сч;
		Если ВсеПараметры[Индекс] <> Неопределено Тогда
			ИндексСПоследнимПараметром = Индекс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыТеста = Новый Массив;
	Для Сч = 0 По ИндексСПоследнимПараметром Цикл
		ПараметрыТеста.Добавить(ВсеПараметры[Сч]);
	КонецЦикла;
	
	Возврат ПараметрыТеста;
КонецФункции

Функция ПрефиксПутейСФормами()
	Возврат "УпрФорма # ";
КонецФункции

// } API нового формата

// { Helpers
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(Знач ТекстОшибки, Знач ИмяМетода)
	Результат = Ложь;
	Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0 
		ИЛИ Найти(текстОшибки, "Object method not found (" + ИмяМетода + ")") > 0  Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Пропустить тест, при этом ядро не пытается найти и выполнять тест, а сразу помечает его неиспользованным
//	Такой подход значительно ускорит прогон тестов, о которых еще на этапе подготовки известно, что они должны быть пропущены.
//
// Параметры:
//  Представление	 - Строка	 - Представление теста
// 
// Возвращаемое значение:
//   Произвольный - созданный элемент. См. Добавить
//
Функция ПропуститьТест(Знач Представление) Экспорт

	Элемент = Добавить(Представление, Неопределено, Представление);
	Элемент.ПропуститьТест = Истина;
	
	Возврат Элемент;

КонецФункции
// } Helpers

мЗначенияТиповСтроки = Новый Структура;
мЗначенияТиповСтроки.Вставить("КаталогТестов", 0);
мЗначенияТиповСтроки.Вставить("ТестовыйСлучай", 1);
мЗначенияТиповСтроки.Вставить("ТестовыйСлучайОтчет", 7);
мЗначенияТиповСтроки.Вставить("ТестовыйМетод", 2);
мЗначенияТиповСтроки.Вставить("Подсистема", 3);
мЗначенияТиповСтроки.Вставить("Ошибка", 9);
мЗначенияТиповСтроки = Новый ФиксированнаяСтруктура(мЗначенияТиповСтроки);
