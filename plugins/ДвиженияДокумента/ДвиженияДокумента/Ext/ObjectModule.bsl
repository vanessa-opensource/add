// { Plugin interface
Функция ОписаниеПлагина(КонтекстЯдра, ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", "ДвиженияДокумента");
	Результат.Вставить("Представление", "Проверка движений документа");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
КонецПроцедуры
// } Plugin interface

#Область ПрограммныйИнтерфейс

// Создает конструктор для создания нового "Вычисляемого поля"
// 
// Возвращаемое значение:
//  Структура - настройка проверки движений регистра.
//	  * Имя - Строка - Имя нового вычисляемого поля. Имя должно соответствовать требованиям образования имен переменных.
//	  * Тип - ОписаниеТипов - Тип значения нового вычисляемого поля. Не обязательно для заполнения. 
//	  	Рекомендуется указывать если выполняется 
//	  * Формула - Строка - содержит имена полей (измерений, реквизитов, ресурсов и т.д.), по которым будет выполняться 
//	  	проверка движений регистров. Для использования также доступны переменные:
//	  	* ДокументОбъект - для доступа к реквизитам документа, для которого используется проврека движений.
//	  	* ЗаписьРегистра - для доступа к значением полей текущей записи. 
//
&НаСервере
Функция НовоеВычисляемоеПоле() Экспорт
	
	ВычисляемоеПоле = Новый Структура();
	ВычисляемоеПоле.Вставить("Имя","");
	ВычисляемоеПоле.Вставить("Тип","");
	ВычисляемоеПоле.Вставить("Формула","");	
	
	Возврат ВычисляемоеПоле;
	
КонецФункции

// Создает конструктор настроек для проверки движений регистра.
// 
// Возвращаемое значение:
//  Структура - настройка проверки движений регистра.
//		* ВычисляемыеПоля - Массив - содержит вычисляемые поля. При проверке движений будут созданы дополнительные поля 
//			(колонки) в наборе записей регистра. Значения этих полей будут заполнены по формуле. 
//			См. ф-ию НовоеВычисляемоеПоле(). 
//		* ИсключаемыеПоля - Массив - содержит имена полей (измерений, реквизитов, ресурсов и т.д.), 
//			которые не будут использоваться при проверке движений регистров.
//		* ПроверяемыеПоля - Массив - содержит имена полей (измерений, реквизитов, ресурсов и т.д.), 
//			по которым будет выполняться проверка движений регистров.
//  	* Свернуть - Структура - настройка свертки таблицы движений регистра.
//			* Свернуть - Булево - Если установить ложь, то таблица движений регистра не будет свернута. 
//			* КолонкиГруппировок - Строка - через запятую указать имена колонок, 
// 				по которым движения регистра будут сгруппированы. 
//			* КолонкиСуммирования - Строка - через запятую указать имена колонок, данные которых будут просуммированы.
//			!!! - Если КолонкиГруппировок и КолонкиСуммирования оставить пустыми, но Свернуть = Истина, тогда 
//				колонки группировок будут определены по типу значения колонок. Все "Числовые" колонки будут отнесены 
//				к  колонкам суммирования.
Функция НоваяНастройкаПроверкиРегистра() Экспорт 
	
	ВычисляемыеПоля = Новый Массив;
	ИсключаемыеПоля = Новый Массив;
	ПроверяемыеПоля = Новый Массив;    
	
	НастройкаПроверкиРегистра = Новый Структура;
	НастройкаПроверкиРегистра.Вставить("ВычисляемыеПоля",ВычисляемыеПоля);
	НастройкаПроверкиРегистра.Вставить("ИсключаемыеПоля",ИсключаемыеПоля);
	НастройкаПроверкиРегистра.Вставить("ПроверяемыеПоля",ПроверяемыеПоля);
	
	НастройкаСвертки = Новый Структура;
	НастройкаСвертки.Вставить("Свернуть",			Ложь);
	НастройкаСвертки.Вставить("КолонкиГруппировок",	"");
	НастройкаСвертки.Вставить("КолонкиСуммирования","");
	
	НастройкаПроверкиРегистра.Вставить("НастройкаСвертки",НастройкаСвертки);
	
	Возврат НастройкаПроверкиРегистра;
	
КонецФункции

// Создает конструктор настроек для проверки движений документа.
// 
// Возвращаемое значение:
//  Структура - настройка проверки движений документа. Используется для передачу в процедуру ПроверитьДвиженияДокумента.
//	  * ИсключаемыеРегистры - Массив - содержит полные имена регистров, по которым проверка движений не выполняется.
//	  * ПроверяемыеРегистры - Массив - содержит полные имена регистров, по которым проверка движений выполняется.
//	  * НастройкиПроверкиРегистров - Соответсвие - содержит дополнительные настроки проверок 
//	  	(можно указать исключаемые из проверок поля и др.). Настравивается индивидуально для каждого регистра.
//	  	* Ключ - полное имя регистра, для которого выполняются настроки.
//	  	* Значение -  см. функцию НоваяНастройкаПроверкиРегистра() 
//	  * ОбщиеНастройки - Структура - содержит общие настройки выполнения проверок движений документа  
//	  	* БезСохраненияНовыхДвижений - Булево - движения документа не будут изменны в результате его проведения. 
//	  		(т.е. движения документа не будут изменены)
//
Функция НоваяНастройкаПроверкиДвиженийДокумента() Экспорт
	
	ИсключаемыеРегистры 		= Новый Массив;
	ПроверяемыеРегистры 		= Новый Массив;	
	НастройкиПроверкиРегистров 	= Новый Соответствие;
	
	ОбщиеНастройки = Новый Структура();
	ОбщиеНастройки.Вставить("БезСохраненияНовыхДвижений",Истина);
	
	НастройкаПроверок = Новый Структура;
	НастройкаПроверок.Вставить("ИсключаемыеРегистры",		ИсключаемыеРегистры);
	НастройкаПроверок.Вставить("ПроверяемыеРегистры",		ПроверяемыеРегистры);	
	НастройкаПроверок.Вставить("НастройкиПроверкиРегистров",НастройкиПроверкиРегистров);
	НастройкаПроверок.Вставить("ОбщиеНастройки",			ОбщиеНастройки);
	
	Возврат НастройкаПроверок;
	
КонецФункции

// Проверяет движения документа путем его перепроведения. При наличии разницы в движения (до и после перепроведения) 
//	формирует таблицу отклонений.
//
// Параметры:
//  ДокументОбъект			  - ДокументОбъект, ДокументСсылка - документ, для которого необходимо проверить движения.
//  НастройкаПроверкиДвижений - Структура - Настройка проверки движений документа 
//		см. функцию НоваяНастройкаПроверкиДвиженийДокумента() 
//  ДопСообщениеОшибки			 - Строка	 - Текст сообщения, который будет вывведен пользователю 
// 		при наличии изменений в движениях документа.
//
&НаСервере
Процедура ПроверитьДвиженияДокумента(Знач ДокументОбъект, Знач НастройкаПроверкиДвижений = Неопределено, 
		Знач ДопСообщениеОшибки = "") Экспорт
	
	ОбъектМетаданные = ДокументОбъект.Метаданные();
	Если Не Метаданные.Документы.Содержит(ОбъектМетаданные) Тогда
		ВызватьИсключение "Переданный объект не является документом";
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка." + ОбъектМетаданные.Имя) Тогда
		ДокументОбъект = ДокументОбъект.ПолучитьОбъект();
	КонецЕсли;	
	
	// Если настройка проверки не определена, то используем настройки по умолчанию.
	Если НастройкаПроверкиДвижений = Неопределено Тогда 
		НастройкаПроверкиДвижений = НоваяНастройкаПроверкиДвиженийДокумента();
	КонецЕсли;	
	
	// Фиксируем движения документа до перепроведения.
	НабораЗаписейОбъекта		= ЗапомнитьДвиженияДокумента(ДокументОбъект,НастройкаПроверкиДвижений);
	
	// Определяем настройки проверки движений документа.
	БезСохраненияНовыхДвижений = НастройкаПроверкиДвижений.ОбщиеНастройки.БезСохраненияНовыхДвижений;	
	
	// Перепроводим документ и запоминаем новые движения документа.
	Если БезСохраненияНовыхДвижений Тогда		
		НачатьТранзакцию();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
			
			// Фиксируем новые движения документа (после перепроведения).
			НабораЗаписейОбъектаПосле	= ЗапомнитьДвиженияДокумента(ДокументОбъект,НастройкаПроверкиДвижений);
			
			ОтменитьТранзакцию();
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ВызватьИсключение "Не удалось перепровести документ в транзакции";
			
		КонецПопытки;
	Иначе 
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		// Фиксируем новые движения документа (после перепроведения).
		НабораЗаписейОбъектаПосле	= ЗапомнитьДвиженияДокумента(ДокументОбъект,НастройкаПроверкиДвижений);
		
	КонецЕсли;
	
	// Проверяем наличие отклонений в наборах записей регистра.
	ОтклонениеНабораЗаписей = ПроверитьДвиженияДокументаНаИзменения(НабораЗаписейОбъекта,НабораЗаписейОбъектаПосле); 
	
	Если ОтклонениеНабораЗаписей.Количество() > 0 Тогда
				
		СтрокаОшибок = "Различия в регистрах (для просмотра установите шрифт Courier):";
		Для Каждого СтрокаОтклоненией Из ОтклонениеНабораЗаписей Цикл
			КлючМетаданные 	= СтрокаОтклоненией.Ключ.Метаданные();
			ИмяРегистра 	= КлючМетаданные.Имя + " (" + КлючМетаданные.Синоним + ") ";
			
			СтрокаОшибок 	= СтрокаОшибок + Символы.ПС + ИмяРегистра;	
			
			// Формируем таблицу для вывода отколонений в движениях документа. 
			// Для просмотра таблицы необходим моношрифт - например - Courier.
			МаксимальныеДлиныКолонок = Новый Соответствие;
			ТаблицаДвиженияРегистров = СтрокаОтклоненией.Значение;
			Для Каждого СтрокаТз Из ТаблицаДвиженияРегистров Цикл 
				Для Каждого КолонкаТз Из ТаблицаДвиженияРегистров.Колонки Цикл	
					ЗначТЗ = СтрокаТз[КолонкаТз.Имя];
					ДлинаЗнач = Макс(СтрДлина(ЗначТЗ), СтрДлина(КолонкаТз.Имя));
					
					значМаксДлинаКолонки = МаксимальныеДлиныКолонок[КолонкаТз.Имя];
					Если значМаксДлинаКолонки = Неопределено или значМаксДлинаКолонки < ДлинаЗнач Тогда
						МаксимальныеДлиныКолонок.Вставить(КолонкаТз.Имя,ДлинаЗнач);
					КонецЕсли;	
					
				КонецЦикла;
			КонецЦикла;	
			
			СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТаблицаДвиженияРегистров,
				МаксимальныеДлиныКолонок);			// Прорисовываем рамку таблицы.
			СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТаблицаДвиженияРегистров,
				МаксимальныеДлиныКолонок,Истина); 	// Прорисовываем шапку с именами колонок.
			СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТаблицаДвиженияРегистров,
				МаксимальныеДлиныКолонок);			// Прорисовываем рамку.
			
			// Выводим непосредственно саму таблицу движений.
			Для Каждого СтрокаТз Из ТаблицаДвиженияРегистров Цикл
				СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТаблицаДвиженияРегистров,
					МаксимальныеДлиныКолонок, СтрокаТЗ);					 
			КонецЦикла;	
			СтрокаОшибок = СтрокаОшибок +Символы.ПС + ВывестиСтрокуТаблицы(ТаблицаДвиженияРегистров,
				МаксимальныеДлиныКолонок);			// Прорисовываем рамку.
			
			СтрокаОшибок = СтрокаОшибок + Символы.ПС; // Пустая строка под таблицей.
			
		КонецЦикла;			
		
		ВызватьОшибкуПроверки("Движения должны совпадать, а они различны" 
			+ Символы.ПС + СтрокаОшибок + Символы.ПС + ДопСообщениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// считывает движения документа в соответствии с переданными настройками
//
// Параметры:
//  ДокументОбъект				 - ДокументОбъект	- документ, для которого необходимо прочитать движения 
//  НастройкаПроверкиДвижений	 - Структура	-  настройка проверки движений документа. 
// 		См. ф-ию НоваяНастройкаПроверкиДвиженийДокумента().
// 
// Возвращаемое значение:
// 		Соответсвие - прочитанные движения документа.
//			* Ключ - Набор записей регистра.
//			* Значение -  ТаблицаЗначений - таблица, содержащая движения регистра, сформированные 
// 				в соотв. с переданными настройками.
//
&НаСервере
Функция ЗапомнитьДвиженияДокумента(Знач ДокументОбъект, Знач НастройкаПроверкиДвижений)
	
	ИсключаемыеРегистры = НастройкаПроверкиДвижений.ИсключаемыеРегистры;
	ПроверяемыеРегистры = НастройкаПроверкиДвижений.ПроверяемыеРегистры;
	ПроверкиРегистров 	= НастройкаПроверкиДвижений.НастройкиПроверкиРегистров;
	
	НаборЗаписейОбъекта = Новый Соответствие;	
	Для Каждого НаборЗаписейРегистра из ДокументОбъект.Движения Цикл
		
		МетаданныеНабораЗаписей = НаборЗаписейРегистра.Метаданные();
		ИмяНабораЗаписей 		= МетаданныеНабораЗаписей.Имя;
		ПолноеИмяНабораЗаписей 	= МетаданныеНабораЗаписей.ПолноеИмя();
		
		// Если регистр добавлен в ислючения, то пропускаем проверку.
		Если ИсключаемыеРегистры.Количество() > 0 Тогда
			Если ИсключаемыеРегистры.Найти(ПолноеИмяНабораЗаписей) <> Неопределено 
					Или ИсключаемыеРегистры.Найти(ИмяНабораЗаписей) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если настроен список проверяемых регистров и в этом списке нет проверяемого регистра, то пропускаем проверку.
		Если ПроверяемыеРегистры.Количество() > 0 Тогда
			Если ПроверяемыеРегистры.Найти(ПолноеИмяНабораЗаписей) = Неопределено 
					И ПроверяемыеРегистры.Найти(ИмяНабораЗаписей) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписейРегистра.Прочитать();
		ТаблицаЗаписейРегистра = НаборЗаписейРегистра.Выгрузить(); 
		
		НастройкаПроверкиРегистра = ?(ПроверкиРегистров[ПолноеИмяНабораЗаписей] <> Неопределено, 
			ПроверкиРегистров[ПолноеИмяНабораЗаписей], ПроверкиРегистров[ИмяНабораЗаписей]);

		Если НастройкаПроверкиРегистра <> Неопределено Тогда
			
			ВычисляемыеПоля 		= НастройкаПроверкиРегистра.ВычисляемыеПоля;
			ИсключаемыеПоля 		= НастройкаПроверкиРегистра.ИсключаемыеПоля;
			ПроверяемыеПоля 		= НастройкаПроверкиРегистра.ПроверяемыеПоля;
			КолонкиЗаписейРегистра 	= ТаблицаЗаписейРегистра.Колонки;
			
			// Создадим новые вычисляемые поля.
			Если ВычисляемыеПоля.Количество() > 0 Тогда
				Для Каждого ВычисляемоеПоле Из ВычисляемыеПоля Цикл
					Если ЗначениеЗаполнено(ВычисляемоеПоле.Тип) 
							И ТипЗнч(ВычисляемоеПоле.Тип) = Тип("ОписаниеТипов") Тогда
						КолонкиЗаписейРегистра.Добавить(ВычисляемоеПоле.Имя,ВычисляемоеПоле.Тип);
					Иначе	
					    КолонкиЗаписейРегистра.Добавить(ВычисляемоеПоле.Имя);
					КонецЕсли;
					
					Для Каждого ЗаписьРегистра Из ТаблицаЗаписейРегистра Цикл
						ЗаписьРегистра[ВычисляемоеПоле.Имя] = Вычислить(ВычисляемоеПоле.Формула);	
					КонецЦикла;				
				КонецЦикла;				
			КонецЕсли;
			
			// Удалим исключаемые поля.
			Если ИсключаемыеПоля.Количество() > 0 Тогда
				Для Каждого ИсключаемоеПоле Из ИсключаемыеПоля Цикл
					КолонкаЗаписейРегистра = КолонкиЗаписейРегистра.Найти(ИсключаемоеПоле);
					Если КолонкаЗаписейРегистра <> Неопределено Тогда
						КолонкиЗаписейРегистра.Удалить(КолонкаЗаписейРегистра);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;

			// Удалим все поля, кроме тех, которые указаны в проверяемых.
			Если ПроверяемыеПоля.Количество() > 0 Тогда
				ПоляКУдалению = Новый Массив;
				Для Каждого КолонкаЗаписейРегистра Из КолонкиЗаписейРегистра Цикл
					Если ПроверяемыеПоля.Найти(КолонкаЗаписейРегистра.Имя) = Неопределено Тогда
						ПоляКУдалению.Добавить(КолонкаЗаписейРегистра);
					КонецЕсли;	
				КонецЦикла;
				
				Для Каждого ИсключаемоеПоле Из ПоляКУдалению Цикл
					КолонкиЗаписейРегистра.Удалить(ИсключаемоеПоле);					
				КонецЦикла;	
			КонецЕсли;			
			
			// Проверяем необходимость свертки движений регистра, после 
			Если НастройкаПроверкиРегистра.НастройкаСвертки.Свернуть Тогда
				КолонкиГруппировок	=	НастройкаПроверкиРегистра.НастройкаСвертки.КолонкиГруппировок;
				КолонкиСуммирования	=	НастройкаПроверкиРегистра.НастройкаСвертки.КолонкиСуммирования;
				
				Если ЗначениеЗаполнено(КолонкиГруппировок) Или ЗначениеЗаполнено(КолонкиСуммирования) Тогда
					ТаблицаЗаписейРегистра.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
				Иначе	
					// Сворачиваем дивжения регистра с группировокой колонкам с типом значения "Число".
					КолонкиГруппировок = "";
					КолонкиСуммирования = ""; 
					Для Каждого КолонкаЗаписейРегистра Из КолонкиЗаписейРегистра Цикл
						Если КолонкаЗаписейРегистра.ТипЗначения.СодержитТип(Тип("Число")) Тогда
							КолонкиСуммирования = КолонкиСуммирования + ?(СтрДлина(КолонкиСуммирования) > 0, "," ,"") 
								+ КолонкаЗаписейРегистра.Имя;	
						Иначе 
							КолонкиГруппировок = КолонкиГруппировок  + ?(СтрДлина(КолонкиГруппировок) > 0, "," ,"")
								+  КолонкаЗаписейРегистра.Имя;	
						КонецЕсли;
					КонецЦикла;
					ТаблицаЗаписейРегистра.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		НаборЗаписейОбъекта[НаборЗаписейРегистра] = ТаблицаЗаписейРегистра;
	КонецЦикла;
	
	Возврат НаборЗаписейОбъекта;
	
КонецФункции

// Сравнивает 2 таблицы значений. см. http://infostart.ru/public/326983/ (3.2 Трюк, свертка и сортировка)
// 
// Параметры:
//  <Таблица0>  - <ТаблицаЗначений> - первая сравниваемая таблица значений.
// 	<Таблица1>  - <ТаблицаЗначений> - вторая сравниваемая таблица значений.
// 	<ИмяРегистра>  - Строка - 
// 	<Измерения>  - Список измерений, по которым необходимо отсортировать ТЗ на выходе
//
// Возвращаемое значение:
//   <ТаблицаЗначений> - содержит результат сравнения. 
// 	  Результатом сравнения двух таблиц Таблица0 и Таблица1 должна быть таблица «Разница» той же структуры, 
// 			что и сравниваемые таблицы.
// 		«Разница» содержит отличающиеся строки двух таблиц (удаленные, добавленные, измененные).
// 		При этом в дополнительном столбце «Знак» должна стоять отметка: 
// 			0 - если строка имеется в Таблице0 и 1 - если строка имеется в Таблице1.
// 		Это можно интерпретировать как 0 - строка удалена, 1 - добавлена, или 0 - строка до изменения, 1 - после. 
// 		Кроме того (внимание!), строки с одинаковыми значениями измерений должны быть расположены друг под другом, 
// 			что реализует удобный для визуального контроля способ «связывания» строк до и после изменения.	 
// 
&НаСервере
Функция РазницаТаблицЗначений(Таблица0, Таблица1, ИмяРегистра =  Неопределено, Измерения = Неопределено)
	
	Если Таблица0.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
		Таблица0.Колонки.Удалить(Таблица0.Колонки.Найти("НомерСтроки")); 
		Таблица1.Колонки.Удалить(Таблица1.Колонки.Найти("НомерСтроки")); 
	КонецЕсли;
	
	ВсеКолонки = "";
	Для Каждого Колонка Из Таблица0.Колонки Цикл 
		ВсеКолонки = ВсеКолонки + ", " + Колонка.Имя
	КонецЦикла;
	ВсеКолонки = Сред(ВсеКолонки, 2);
	
	// Предварительно срернем ТЗ, и просуммируем ресурсы.
	Если ИмяРегистра <> Неопределено Тогда
		Если ИмяРегистра = "Товары" Тогда
			
			ВсеКолонкиСвернуть = "";
			Для Каждого Колонка Из Таблица0.Колонки Цикл 
				Если Колонка.Имя <> "Количество" и Колонка.Имя <> "Сумма" Тогда
					ВсеКолонкиСвернуть = ВсеКолонкиСвернуть + ", " + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ВсеКолонкиСвернуть = Сред(ВсеКолонкиСвернуть, 2);
			
			Таблица0.Свернуть(ВсеКолонкиСвернуть,"Количество,Сумма") ;
			Таблица1.Свернуть(ВсеКолонкиСвернуть,"Количество,Сумма");
			
		КонецЕсли;
	КонецЕсли;
	
	Таблица = Таблица1.Скопировать();
	Таблица.Колонки.Добавить("Знак", Новый ОписаниеТипов("Число"));
	Таблица.ЗаполнитьЗначения(1, "Знак");
	
	Для ё = 1 По Таблица0.Количество() Цикл Таблица.Вставить(0) КонецЦикла;
	
	Для ё = 0 По Таблица0.Колонки.Количество() - 1 Цикл Таблица.ЗагрузитьКолонку(Таблица0.ВыгрузитьКолонку(ё), ё) 
	КонецЦикла;
	
	Таблица.Колонки.Добавить("Счёт");
	Таблица.ЗаполнитьЗначения(1, "Счёт");
	
	Таблица.Свернуть(ВсеКолонки, "Знак, Счёт");
	
	Ответ = Таблица.Скопировать(Новый Структура("Счёт", 1), ВсеКолонки + ", Знак");
	
	Если Измерения <> Неопределено Тогда
		Ответ.Сортировать(Измерения);
	КонецЕсли;
	
	СтруктураДействий = НовыеДействияСЗаписямиРегистра();	
	
	Ответ.Колонки.Вставить(0,"Действие");
	Для Каждого СтрОтвет Из Ответ Цикл
		//Это можно интерпретировать как 0 - строка удалена, 1 - добавлена, или 0 - строка до изменения, 1 - после. 
		Если СтрОтвет.Знак = 1 Тогда
			СтрОтвет.Действие = СтруктураДействий.Добавлена;
		Иначе	
			СтрОтвет.Действие = СтруктураДействий.Удалена;
		КонецЕсли;
	КонецЦикла;	
	Ответ.Колонки.Удалить(Ответ.Колонки.Найти("Знак")); 
	
	Возврат Ответ
    
КонецФункции

&НаСервере
Функция ПроверитьДвиженияДокументаНаИзменения(НабораЗаписейОбъекта,НабораЗаписейОбъектаПосле)
	
	СоответсвиеРазличий = Новый Соответствие;
	Для каждого НаборЗаписей Из НабораЗаписейОбъекта Цикл
		ТаблицаРазличий = РазницаТаблицЗначений(НаборЗаписей.Значение, НабораЗаписейОбъектаПосле[НаборЗаписей.Ключ],
			НаборЗаписей.Ключ.Метаданные().Имя);
		Если ТаблицаРазличий.Количество() > 0 Тогда
			СоответсвиеРазличий[НаборЗаписей.Ключ] = ТаблицаРазличий;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СоответсвиеРазличий;
	
КонецФункции

&НаСервере
Процедура ВызватьОшибкуПроверки(СообщениеОшибки = "")
	
	Префикс = "["+ СтатусыРезультатаТестирования().ОшибкаПроверки + "]";
	ВызватьИсключение Префикс + " " + СообщениеОшибки;
	
КонецПроцедуры

&НаСервере
Функция СтатусыРезультатаТестирования()
	
	СтатусыРезультатаТестирования = Новый Структура;
	СтатусыРезультатаТестирования.Вставить("ОшибкаПроверки", "Failed");
	СтатусыРезультатаТестирования.Вставить("НеизвестнаяОшибка", "Broken");
	СтатусыРезультатаТестирования.Вставить("ТестПропущен", "Pending");
	
	Возврат Новый ФиксированнаяСтруктура(СтатусыРезультатаТестирования);
	
КонецФункции

&НаСервере
Функция НовыеДействияСЗаписямиРегистра()
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("Добавлена",	"добавлена (после)");
	СтруктураДействий.Вставить("Удалена",	"удалена (до изменения)");
	Возврат СтруктураДействий;
КонецФункции

// Прорисовывает строку таблицы, которая будет выводиться в отчет об автоматическом тестировании.
Функция ВывестиСтрокуТаблицы(Знач ТаблицаДвиженияРегистров, Знач МаксимальныеДлиныКолонок, 
		Знач ВыводимоеЗначение = Неопределено)
	
	СтрокаТаблицыОшибок = "";
	Для Каждого КолонкаТз Из ТаблицаДвиженияРегистров.Колонки Цикл
		ИмяКолонки 	= КолонкаТз.Имя;
		МаксДлина 	= МаксимальныеДлиныКолонок[ИмяКолонки];
		
		ВОтчет = "";
		Если ТипЗнч(ВыводимоеЗначение) = Тип("СтрокаТаблицыЗначений") Тогда
             ВОтчет = ВыводимоеЗначение[ИмяКолонки];
		ИначеЕсли ТипЗнч(ВыводимоеЗначение) = Тип("Булево") Тогда
			 ВОтчет = ИмяКолонки;
		КонецЕсли;	
		
		мДлинаИмени 		= СтрДлина(ВОтчет);
		СтрокаТаблицыОшибок = СтрокаТаблицыОшибок + "|" + ВОтчет;
		
		Пока мДлинаИмени < МаксДлина Цикл
			СтрокаТаблицыОшибок = СтрокаТаблицыОшибок + ?(ВыводимоеЗначение = Неопределено,"-"," ");	
			мДлинаИмени = мДлинаИмени + 1;						
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокаТаблицыОшибок = СтрокаТаблицыОшибок + "|";
	
	Возврат СтрокаТаблицыОшибок;	
	
КонецФункции

#КонецОбласти
