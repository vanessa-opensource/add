
Перем ИмяПараметраТЧ;
Перем СтруктураПредставленияСтроки;

// { Plugin interface
Функция ОписаниеПлагина(КонтекстЯдра, ВозможныеТипыПлагинов) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", "Данные");
	Результат.Вставить("Представление", "Данные");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
КонецПроцедуры

// } Plugin interface

//{ ПрограммныйИнтерфейс_v2

Функция НачатьСоздание(ИмяМетаданных) Экспорт

	НовыйОбъект = ВнешниеОбработки.Создать("Данные");
	
	НовыйОбъект.ПараметрыМетаданныхСлужебный = ПараметрыМетаданныхИзПолногоИмени(ИмяМетаданных);
	
	НовыйОбъект.ИмяМетаданныхСлужебный = ИмяМетаданных;
	НовыйОбъект.ПараметрыОбъектаСлужебный = Новый Структура;
	
	Возврат НовыйОбъект;

КонецФункции

Функция Реквизит(ИмяРеквизита, Значение = Неопределено) Экспорт

	ПараметрыОбъектаСлужебный.Вставить(ИмяРеквизита, Значение);
	Возврат ЭтотОбъект;

КонецФункции

Функция ШапкаТабличнойЧасти(ИмяТабличнойЧасти = "",
							Колонка1 = Неопределено,
							Колонка2 = Неопределено,
							Колонка3 = Неопределено,
							Колонка4 = Неопределено,
							Колонка5 = Неопределено,
							Колонка6 = Неопределено,
							Колонка7 = Неопределено,
							Колонка8 = Неопределено,
							Колонка9 = Неопределено,
							Колонка10 = Неопределено) Экспорт
	
							
	Если ПараметрыМетаданныхСлужебный.ТипМетаданных = "ТаблицаЗначений" Тогда
		ИмяТабличнойЧасти = "";
	КонецЕсли; 							
	НачатьВводТабличнойЧасти(ПараметрыОбъектаСлужебный, ИмяТабличнойЧасти,
													Колонка1,
													Колонка2,
													Колонка3,
													Колонка4,
													Колонка5,
													Колонка6,
													Колонка7,
													Колонка8,
													Колонка9,
													Колонка10);
													
	Возврат ЭтотОбъект;													

КонецФункции 

Функция ТаблицаЗначений(ИмяТЧ) Экспорт

	Если НЕ ПараметрыОбъектаСлужебный.Свойство(ИмяРеквизитаТабличнойЧасти(ИмяТЧ)) Тогда
		ВызватьИсключение "Не найдена табличная часть "+ИмяТЧ;
	КонецЕсли; 
	
	Результат = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблица Из СтруктураПредставленияСтроки Цикл
		Если ТипЗнч(КолонкаТаблица) = Тип("Строка") Тогда
			Результат.Колонки.Добавить(КолонкаТаблица);
		Иначе
			Результат.Колонки.Добавить(КолонкаТаблица.Имя, КолонкаТаблица.Тип)
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из ПараметрыОбъектаСлужебный[ИмяРеквизитаТабличнойЧасти(ИмяТЧ)] Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции 

Функция СтрокаТЧ(Параметр0
				,Параметр1 = Неопределено
				,Параметр2 = Неопределено
				,Параметр3 = Неопределено
				,Параметр4 = Неопределено
				,Параметр5 = Неопределено
				,Параметр6 = Неопределено
				,Параметр7 = Неопределено
				,Параметр8 = Неопределено
				,Параметр9 = Неопределено) Экспорт

	ПредставлениеСтроки = Новый Структура;
	Для й = 0 По СтруктураПредставленияСтроки.Количество()-1 Цикл
		ОписаниеСтроки = СтруктураПредставленияСтроки[й];
		Если ТипЗнч(ОписаниеСтроки) = Тип("Структура") Тогда
			Выполнить("ПредставлениеСтроки.Вставить(ОписаниеСтроки.Имя, Параметр"+й+")");
		Иначе
			Выполнить("ПредставлениеСтроки.Вставить(ОписаниеСтроки, Параметр"+й+")");
		КонецЕсли; 
		
	КонецЦикла;
	
	ПараметрыОбъектаСлужебный[ИмяПараметраТЧ].Добавить(ПредставлениеСтроки);
	
	Возврат ЭтотОбъект;

КонецФункции 

Функция Создать(НеЗаписывать = Ложь) Экспорт

	Возврат СоздатьОбъект(Неопределено, ПараметрыОбъектаСлужебный, НеЗаписывать);	

КонецФункции

Функция ШапкаНабора(Параметр0
					,Параметр1 = Неопределено
					,Параметр2 = Неопределено
					,Параметр3 = Неопределено
					,Параметр4 = Неопределено
					,Параметр5 = Неопределено
					,Параметр6 = Неопределено
					,Параметр7 = Неопределено
					,Параметр8 = Неопределено
					,Параметр9 = Неопределено) Экспорт


	НачатьВводНабораЗаписей(ПараметрыОбъектаСлужебный,Параметр0,
													Параметр1,
													Параметр2,
													Параметр3,
													Параметр4,
													Параметр5,
													Параметр6,
													Параметр7,
													Параметр8,
													Параметр9); 		

	Возврат ЭтотОбъект;
	
КонецФункции 

Функция ЗаписьНабора(Параметр0
					,Параметр1 = Неопределено
					,Параметр2 = Неопределено
					,Параметр3 = Неопределено
					,Параметр4 = Неопределено
					,Параметр5 = Неопределено
					,Параметр6 = Неопределено
					,Параметр7 = Неопределено
					,Параметр8 = Неопределено
					,Параметр9 = Неопределено) Экспорт

	СтрокаТЧ(Параметр0,
			Параметр1,
			Параметр2,
			Параметр3,
			Параметр4,
			Параметр5,
			Параметр6,
			Параметр7,
			Параметр8,
			Параметр9);
	
	Возврат ЭтотОбъект;													
													
КонецФункции 

Функция ОписаниеКолонки(ИмяКолонки, ОписаниеТиповКолонки) Экспорт

	Возврат Новый Структура("Имя, Тип", ИмяКолонки, ОписаниеТиповКолонки);

КонецФункции 

Функция Отбор(Имяотбора, Значение = Неопределено) Экспорт

	Реквизит(ИмяОтбора+"_Отбор", Значение);
	Возврат ЭтотОбъект;

КонецФункции 

// }

//{ ПрограммныйИнтерфейс_v1

Функция СоздатьПланОбмена(ИмяПланаОбмена, ПараметрыЭлемента = Неопределено) Экспорт

	НовыйОбъект = СоздатьПланОбменаСлужебный(ИмяПланаОбмена, ПараметрыЭлемента);
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;

КонецФункции 

Функция СоздатьЭлементСправочника(ИмяСправочника, ПараметрыЭлемента = Неопределено) Экспорт

	НовыйОбъект = СоздатьЭлементСправочникаСлужебный(ИмяСправочника, ПараметрыЭлемента);
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Функция СоздатьДокумент(ИмяДокумента, ПараметрыДокумента = Неопределено, ОбработчикиСтрокТЧ = Неопределено) Экспорт

	НовыйОбъект = СоздатьДокументСлужебный(ИмяДокумента, ПараметрыДокумента, ОбработчикиСтрокТЧ);
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Функция НачатьВводТабличнойЧасти(ПараметрыОбъекта, ИмяТабличнойЧасти
													,Параметр0
													,Параметр1 = Неопределено
													,Параметр2 = Неопределено
													,Параметр3 = Неопределено
													,Параметр4 = Неопределено
													,Параметр5 = Неопределено
													,Параметр6 = Неопределено
													,Параметр7 = Неопределено
													,Параметр8 = Неопределено
													,Параметр9 = Неопределено) Экспорт
	
	ИмяПараметраТЧ = ИмяРеквизитаТабличнойЧасти(ИмяТабличнойЧасти);												
	Если НЕ ПараметрыОбъекта.Свойство(ИмяПараметраТЧ) Тогда
		ПараметрыОбъекта.Вставить(ИмяПараметраТЧ, Новый Массив);	
	КонецЕсли; 
	
	СтруктураПредставленияСтроки = Новый Массив;
	Для й = 0 По 9 Цикл
		
		Командлет = "
		|Если ЗначениеЗаполнено(Параметр"+й+") Тогда
		|	СтруктураПредставленияСтроки.Добавить(Параметр"+й+");		
		|КонецЕсли;"; 	
		
		Выполнить(Командлет);
		
	КонецЦикла; 
	
	ПараметрыОбъектаСлужебный = ПараметрыОбъекта;
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция НачатьВводНабораЗаписей(ПараметрыОбъекта 
												,Параметр0
												,Параметр1 = Неопределено
												,Параметр2 = Неопределено
												,Параметр3 = Неопределено
												,Параметр4 = Неопределено
												,Параметр5 = Неопределено
												,Параметр6 = Неопределено
												,Параметр7 = Неопределено
												,Параметр8 = Неопределено
												,Параметр9 = Неопределено) Экспорт


	ИмяПараметраТЧ = "ЭтотОбъект";												
	Если НЕ ПараметрыОбъекта.Свойство(ИмяПараметраТЧ) Тогда
		ПараметрыОбъекта.Вставить(ИмяПараметраТЧ, Новый Массив);	
	КонецЕсли; 
	
	СтруктураПредставленияСтроки = Новый Массив;
	Для й = 0 По 9 Цикл
		
		Командлет = "
		|Если ЗначениеЗаполнено(Параметр"+й+") Тогда
		|	СтруктураПредставленияСтроки.Добавить(Параметр"+й+");		
		|КонецЕсли;"; 	
		
		Выполнить(Командлет);
		
	КонецЦикла; 
	
	ПараметрыОбъектаСлужебный = ПараметрыОбъекта;
	Возврат ЭтотОбъект;

КонецФункции 

Функция СтрокаНабора(ПараметрыОбъекта, Параметры) Экспорт

	Если НЕ ПараметрыОбъекта.Свойство("ЭтотОбъект") Тогда
		ПараметрыОбъекта.Вставить("ЭтотОбъект", Новый Массив);	
	КонецЕсли;	
	
	ПараметрыОбъекта.ЭтотОбъект.Добавить(Параметры);
	
	Возврат ЭтотОбъект;

КонецФункции 

Функция СоздатьНаборЗаписей(ТипМетаданных, ИмяМетаданных, Параметры = Неопределено, ОчищатьРегистр = Истина) Экспорт

	НовыйОбъект = СоздатьНаборЗаписейСлужебный(ТипМетаданных, ИмяМетаданных, Параметры, ОчищатьРегистр);
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;


КонецФункции 

Функция СоздатьПланВидовХарактеристик(ИмяМетаданных, ПараметрыЭлемента = Неопределено) Экспорт

	НовыйОбъект = СоздатьПланВидовХарактеристикСлужебный(ИмяМетаданных, ПараметрыЭлемента);
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;

КонецФункции 

// }

//{ СлужебныеПроцедурыФункции

Функция СоздатьОбъект(ИмяМетаданных, Параметры, НеЗаписывать)

	Перем Объект;
	
	Если Не ИмяМетаданных = Неопределено Тогда
		ПараметрыМетаданных = ПараметрыМетаданныхИзПолногоИмени(ИмяМетаданных);
	Иначе
		ПараметрыМетаданных = ПараметрыМетаданныхСлужебный;
	КонецЕсли;
	
	ТипМетаданных = ПараметрыМетаданных.ТипМетаданных;
	ИмяМетаданных = ПараметрыМетаданных.ИмяМетаданных;
	
	Если ТипМетаданных = "ПланыОбмена" Тогда
		Объект = СоздатьПланОбменаСлужебный(ИмяМетаданных, Параметры);
	ИначеЕсли ТипМетаданных = "Справочники" Тогда
		Объект = СоздатьЭлементСправочникаСлужебный(ИмяМетаданных, Параметры);
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		Объект = СоздатьДокументСлужебный(ИмяМетаданных, Параметры);
	ИначеЕсли ТипМетаданных = "РегистрыНакопления" 
				Или ТипМетаданных = "РегистрыСведений" Тогда
		Объект = СоздатьНаборЗаписейСлужебный(ТипМетаданных, ИмяМетаданных, Параметры);
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
		Объект = СоздатьПланВидовХарактеристикСлужебный(ИмяМетаданных, Параметры);	
	ИначеЕсли ТипМетаданных = "ТаблицаЗначений" Тогда
		Объект = ТаблицаЗначений("");
	Иначе
		ВызватьИсключение "Тип метаданных " + ТипМетаданных + " не поддерживается";
	КонецЕсли; 	
	
	Если НЕ НеЗаписывать И ТипМетаданных <> "ТаблицаЗначений" Тогда
		Объект.Записать();
	КонецЕсли; 
	
	СсылочныеТипы = Новый Массив;
	СсылочныеТипы.Добавить("ПланыОбмена");
	СсылочныеТипы.Добавить("Справочники");
	СсылочныеТипы.Добавить("Документы");
	Если СсылочныеТипы.Найти(ТипМетаданных) <> Неопределено И Не НеЗаписывать Тогда
		Объект = Объект.Ссылка;
	КонецЕсли; 
	
	Возврат Объект;

КонецФункции

Функция ПараметрыМетаданныхИзПолногоИмени(ИмяМетаданных)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипМетаданных");
	Параметры.Вставить("ИмяМетаданных");
	
	ПараметрыТипа = РазложитьСтрокуВМассивПодстрок(ИмяМетаданных, ".");
	ЭтоТаблица = ПараметрыТипа.Количество() = 1 И  ПараметрыТипа[0] = "ТаблицаЗначений";
	Если ПараметрыТипа.Количество() <> 2 И НЕ ЭтоТаблица Тогда
		ВызватьИсключение "Наименование метаданных не соответсвует шаблону [ТипМетаданных].[ИмяМетаданных]";
	КонецЕсли; 

	Если ЭтоТаблица Тогда
		Параметры.ТипМетаданных = ПараметрыТипа[0];
	Иначе
		Параметры.ТипМетаданных = ИмяМетаданныхПолномеИмя()[ПараметрыТипа[0]];
		Параметры.ИмяМетаданных = ПараметрыТипа[1];
	КонецЕсли; 

	Возврат Параметры;

КонецФункции

Процедура СтрокаТабличнойЧасти(ПараметрыОбъекта, ИмяТабличнойЧасти, Параметры = Неопределено)

	Если НЕ Параметры.Свойство(ИмяТабличнойЧасти) Тогда
		ПараметрыОбъекта.Вставить(ИмяТабличнойЧасти, Новый Массив);	
	КонецЕсли; 
	
	СтрокаТЧ = ПараметрыОбъекта[ИмяТабличнойЧасти].Добавить(Параметры);
		
	//Если параметр = неопределено, то создать объект

КонецПроцедуры 

Процедура ЗаполнитьТабличнуюЧасть(Документ, ОбработчикиСтрокТЧ, ПараметрыДокумента, МетаданноеОбъекта)
	
	Перем ИмяТЧ, КлючЗначение, НоваяСтрока, Параметр, ПредставлениеСтроки;
	
	Для каждого Параметр Из ПараметрыДокумента Цикл
		
		Если Не ЭтоРеквизитТабличнойЧасти(Параметр.Ключ) Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяТЧ = Сред(Параметр.Ключ, СтрДлина(ПрефиксТабличнойЧастиВИмени()) + 1);
		//ИмяТЧ = СтрЗаменить(Параметр.Ключ, ПрефиксТабличнойЧастиВИмени(), "");
		Для каждого ПредставлениеСтроки Из ПараметрыДокумента[Параметр.Ключ] Цикл
			НоваяСтрока = Документ[ИмяТЧ].Добавить();
			МетаТЧ = МетаданноеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ);
			
			Для Каждого КлючЗначение Из ПредставлениеСтроки Цикл
				
				ИмяРеквизитаТЧ = КлючЗначение.Ключ;
				Если МетаТЧ.Реквизиты.Найти(ИмяРеквизитаТЧ) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Нашли = Ложь;
				Для каждого МетаРеквизит Из МетаТЧ.СтандартныеРеквизиты Цикл
					Если МетаРеквизит.Имя = ИмяРеквизитаТЧ Тогда
						Нашли = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не Нашли Тогда
					ВызватьИсключение СтрШаблон("Поле %2 табличной части %1 объекта не обнаружено", ИмяТЧ, ИмяРеквизитаТЧ);
					
				КонецЕсли;
				
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПредставлениеСтроки);
			
			Если ОбработчикиСтрокТЧ <> Неопределено Тогда
				Для каждого КлючЗначение Из ОбработчикиСтрокТЧ Цикл
					Если КлючЗначение.Ключ = "ТекущаяСтрока" Тогда
						КлючЗначение.Значение = НоваяСтрока;	
					КонецЕсли; 
					ВыполнитьМетодКонфигурации(КлючЗначение.Ключ, КлючЗначение.Значение, Ложь); 
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьАвтозаполнениеПараметров(Знач ТипОбъекта, Знач ВидОбъекта, ПараметрыЭлемента) 
	
	ТипОбъекта = ИмяМетаданныхПолномеИмя()[ТипОбъекта];
	
	МетаданноеОбъекта = Метаданные[ТипОбъекта][ВидОбъекта];
	Реквизиты = МетаданноеОбъекта.Реквизиты;
	СтандартныеРеквизиты = МетаданноеОбъекта.СтандартныеРеквизиты;
	
	Для каждого КлючЗначение Из ПараметрыЭлемента Цикл
		
		ИмяРеквизита = КлючЗначение.Ключ;
		Если ЭтоРеквизитТабличнойЧасти(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяРеквизита = "ОбменДанными" Или ИмяРеквизита = "DataExchange" Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит = Реквизиты.Найти(ИмяРеквизита);
		Если Реквизит = Неопределено Тогда 
			Реквизит = НайтиСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда 
				ВызватьИсключение СтрШаблон("Поле объекта не обнаружено (%1)", ИмяРеквизита);	
			КонецЕсли;
		КонецЕсли;
		
		Если КлючЗначение.Значение = Неопределено Тогда
			ПараметрыЭлемента[ИмяРеквизита] = ЗначениеРеквизитаПоТипу(Реквизит);	
		КонецЕсли; 
	КонецЦикла;

	Возврат МетаданноеОбъекта;
КонецФункции

Функция НайтиСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита)
	Для каждого МетаРеквизит Из СтандартныеРеквизиты Цикл
		Если МетаРеквизит.Имя = ИмяРеквизита Тогда
			Возврат МетаРеквизит;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ЗначениеРеквизитаПоТипу(Реквизит)

	Типы = Реквизит.Тип.Типы();
	Если Типы.Количество() > 1 Тогда
		ВызватьИсключение "Автозаполнение не поддерживается в составных типах";
	КонецЕсли; 
	
	ПервыйТип = Типы[0];
	МетаТип = Метаданные.НайтиПоТипу(ПервыйТип);
	Если МетаТип = Неопределено Тогда
		ОписаниеТипа = Новый ОписаниеТипов("" + ПервыйТип);
		ЗначениеРеквизита = ОписаниеТипа.ПривестиЗначение();
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	Тип = МетаТип.ПолноеИмя();
	ЗначениеРеквизита = СоздатьОбъект(Тип, Неопределено, Ложь);
	Возврат ЗначениеРеквизита.Ссылка;

КонецФункции

Функция ИмяМетаданныхПолномеИмя()

	Параметры = Новый Соответствие;
	Параметры.Вставить("Документы", "Документы");
	Параметры.Вставить("Документ", "Документы");
	
	Параметры.Вставить("Справочники", "Справочники");
	Параметры.Вставить("Справочник", "Справочники");
	
	Параметры.Вставить("ПланыОбмена", "ПланыОбмена");
	Параметры.Вставить("ПланОбмена", "ПланыОбмена");
	
	Параметры.Вставить("РегистрыНакопления", "РегистрыНакопления");
	Параметры.Вставить("РегистрНакопления", "РегистрыНакопления");

	Параметры.Вставить("РегистрыСведений", "РегистрыСведений");
	Параметры.Вставить("РегистрСведений", "РегистрыСведений");
	
	Параметры.Вставить("ПланыВидовХарактеристик", "ПланыВидовХарактеристик");
	Параметры.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	
	Параметры.Вставить("ТаблицаЗначений", "ТаблицаЗначений");
	
	Возврат Параметры;

КонецФункции 

// Параметры:
//  Метод		 - Строка - Имя процедуры модуля
//  Параметры	 - Структура - Массив переменных
// 
// Возвращаемое значение:
//   - Любое
//
Функция ВыполнитьМетодКонфигурации(Метод, Параметры, ЭтоФункция) Экспорт

	ПредставлениеПараметров = "";
	Для каждого КлючЗначение Из Параметры Цикл
		ПредставлениеПараметров = ПредставлениеПараметров + "Параметры["+КлючЗначение.Занчение+"],";	
	КонецЦикла; 
	
	СтрокаКоманды = Метод+"("+Лев(ПредставлениеПараметров, СтрДлина(ПредставлениеПараметров)-1)+")";
	Если ЭтоФункция Тогда
		Результат = Неопределено;
		Выполнить("Результат=" + СтрокаКоманды);
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции // Тестирвоание_ВыполнитьМетодМодуля()

// { Helpers
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено,
										СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
// } Helpers

Функция СоздатьПланОбменаСлужебный(ИмяПланаОбмена, ПараметрыЭлемента = Неопределено) 

	Если ПараметрыЭлемента = Неопределено Тогда
		ПараметрыЭлемента = Новый Структура;	
	КонецЕсли; 
	
	ВыполнитьАвтозаполнениеПараметров("ПланОбмена", ИмяПланаОбмена, ПараметрыЭлемента);
	
	Элемент = ПланыОбмена[ИмяПланаОбмена].СоздатьУзел();

	СгенерироватьНаименованиеВСлучаеОтсутствия(ПараметрыЭлемента, ИмяПланаОбмена);

	ЗаполнитьЗначенияСвойств(Элемент, ПараметрыЭлемента);

	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.Код = Строка(Новый УникальныйИдентификатор);
	Элемент.УстановитьСсылкуНового(ПланыОбмена[ИмяПланаОбмена].ПолучитьСсылку(Новый УникальныйИдентификатор));	
	
	Возврат Элемент;

КонецФункции 

Функция СоздатьЭлементСправочникаСлужебный(ИмяСправочника, ПараметрыЭлемента = Неопределено) 

	Если ПараметрыЭлемента = Неопределено Тогда
		ПараметрыЭлемента = Новый Структура;	
	КонецЕсли; 
	
	МетаданноеОбъекта = ВыполнитьАвтозаполнениеПараметров("Справочник", ИмяСправочника, ПараметрыЭлемента);
	
	Если ПараметрыЭлемента.Свойство("ЭтоГруппа") И ПараметрыЭлемента.ЭтоГруппа Тогда
		Элемент = Справочники[ИмяСправочника].СоздатьГруппу();		
	Иначе	
		Элемент = Справочники[ИмяСправочника].СоздатьЭлемент();		
	КонецЕсли;
	
	СгенерироватьНаименованиеВСлучаеОтсутствия(ПараметрыЭлемента, ИмяСправочника);

	ЗаполнитьЗначенияСвойств(Элемент, ПараметрыЭлемента);
	
	ЗаполнитьТабличнуюЧасть(Элемент, Неопределено, ПараметрыЭлемента, МетаданноеОбъекта);
	
	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.УстановитьСсылкуНового(Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор));	
	
	Возврат Элемент;
	
КонецФункции

Функция СоздатьДокументСлужебный(ИмяДокумента, ПараметрыДокумента = Неопределено, ОбработчикиСтрокТЧ = Неопределено) 

	Если ПараметрыДокумента = Неопределено Тогда
		ПараметрыДокумента = Новый Структура;	
	КонецЕсли; 
	
	МетаданноеОбъекта = ВыполнитьАвтозаполнениеПараметров("Документ", ИмяДокумента, ПараметрыДокумента);
	
	Документ = Документы[ИмяДокумента].СоздатьДокумент();	
	Документ.Дата = ТекущаяДатаСеанса();
	Документ.УстановитьНовыйНомер();
	
	ЗаполнитьЗначенияСвойств(Документ, ПараметрыДокумента);
	
	ЗаполнитьТабличнуюЧасть(Документ, ОбработчикиСтрокТЧ, ПараметрыДокумента, МетаданноеОбъекта);
	
	Документ.ОбменДанными.Загрузка = Истина;
	Документ.УстановитьСсылкуНового(Документы[ИмяДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор));	
	
	Возврат Документ;
	
КонецФункции

Функция СоздатьНаборЗаписейСлужебный(ТипМетаданных, ИмяМетаданных, Параметры = Неопределено, ОчищатьРегистр = Истина) 

	Перем Набор;
	
	 Выполнить("Набор = " + ТипМетаданных + "." + ИмяМетаданных + ".СоздатьНаборЗаписей()");	
	
	ГлобальныеПараметры = Новый Структура;
	Для каждого КлючЗначение Из Параметры Цикл
	
		Если КлючЗначение.Ключ = "ЭтотОбъект"
			ИЛИ КлючЗначение.Ключ = "Регистратор" Тогда
			
			Продолжить;
		КонецЕсли; 	
		
		Если Найти(КлючЗначение.Ключ, "_Отбор") > 0 Тогда
			ИмяПараметра = СтрЗаменить(КлючЗначение.Ключ, "_Отбор", "");
			ГлобальныеПараметры.Вставить(ИмяПараметра, КлючЗначение.Значение);
			Набор.Отбор[ИмяПараметра].Установить(КлючЗначение.Значение);		
		КонецЕсли; 
		
		Если Найти(КлючЗначение.Ключ, "_Отбор") = 0 Тогда
			ГлобальныеПараметры.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла; 
		
	Если Параметры.Свойство("ЭтотОбъект") Тогда
		Для каждого СтрокаНабора Из Параметры.ЭтотОбъект Цикл
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ГлобальныеПараметры);
			ЗаполнитьЗначенияСвойств(Запись, СтрокаНабора);
		КонецЦикла; 
	КонецЕсли; 
	
	Набор.ОбменДанными.Загрузка = Истина;
	
	Возврат Набор;	

КонецФункции 

Функция СоздатьПланВидовХарактеристикСлужебный(ИмяМетаданных, ПараметрыЭлемента = Неопределено) 

	Если ПараметрыЭлемента = Неопределено Тогда
		ПараметрыЭлемента = Новый Структура;	
	КонецЕсли; 
	
	МетаданноеОбъекта = ВыполнитьАвтозаполнениеПараметров("ПланВидовХарактеристик", ИмяМетаданных, ПараметрыЭлемента);
	
	Если ПараметрыЭлемента.Свойство("ЭтоГруппа") И ПараметрыЭлемента.ЭтоГруппа Тогда
		Элемент = ПланыВидовХарактеристик[ИмяМетаданных].СоздатьГруппу();		
	Иначе	
		Элемент = ПланыВидовХарактеристик[ИмяМетаданных].СоздатьЭлемент();		
	КонецЕсли;
	
	СгенерироватьНаименованиеВСлучаеОтсутствия(ПараметрыЭлемента, ИмяМетаданных);

	ЗаполнитьЗначенияСвойств(Элемент, ПараметрыЭлемента);
	
	ЗаполнитьТабличнуюЧасть(Элемент, Неопределено, ПараметрыЭлемента, МетаданноеОбъекта);
	
	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.УстановитьСсылкуНового(ПланыВидовХарактеристик[ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор));
	
	Возврат Элемент;

КонецФункции 

Процедура СгенерироватьНаименованиеВСлучаеОтсутствия(Параметры, ИмяОбъекта)
	
	Наименование = Неопределено;
	Если Не Параметры.Свойство("Наименование", Наименование) Или ПустаяСтрока(Наименование) Тогда
		Параметры.Вставить("Наименование", ИмяОбъекта + "_" + Строка(Новый УникальныйИдентификатор));
	КонецЕсли;	
	
КонецПроцедуры

Функция ПрефиксТабличнойЧастиВИмени()
	
	Возврат "ТЧ_";
	
КонецФункции

Функция ИмяРеквизитаТабличнойЧасти(Знач Имя)
	
	Возврат ПрефиксТабличнойЧастиВИмени() + Имя;
		
КонецФункции

Функция ЭтоРеквизитТабличнойЧасти(Знач Имя)
	
	Возврат Лев(Имя, 3) = ПрефиксТабличнойЧастиВИмени();
КонецФункции
 
 
// } СлужебныеПроцедуры

ИмяМетаданныхСлужебный = "";
ПараметрыОбъектаСлужебный = Новый Структура;
