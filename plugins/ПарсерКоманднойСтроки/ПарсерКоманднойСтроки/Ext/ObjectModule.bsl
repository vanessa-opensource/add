// { Plugin interface
Функция ОписаниеПлагина(КонтекстЯдра, ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	МетаданныеПлагина = Метаданные();
	Результат.Вставить("Идентификатор", МетаданныеПлагина.Имя);
	Результат.Вставить("Представление", МетаданныеПлагина.Синоним);

	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	НачальнаяНастройка();
КонецПроцедуры
// } Plugin interface

Процедура НачальнаяНастройка() Экспорт
	ВозможныеКлючи = ВозможныеКлючиКоманднойСтроки();
КонецПроцедуры

Функция Разобрать(СтрокаПараметров) Экспорт
	Результат = Новый Структура;

	СтруктураДляПовторяющихсяКлючей = Новый Структура;

	МассивСтрокПараметров = РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, ";");
	Для каждого СтрокаПараметра Из МассивСтрокПараметров Цикл
		КлючИПараметры = РаспознатьКлючИЕгоПараметры(СтрокаПараметра);
		Если КлючИПараметры <> Неопределено Тогда
			Ключ = КлючИПараметры.Ключ;
			Параметры = КлючИПараметры.Параметры;

			МассивПараметров = Неопределено;
			Если СтруктураДляПовторяющихсяКлючей.Свойство(Ключ, МассивПараметров) Тогда

				МассивПараметров.Добавить(Параметры);

			Иначе

				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(Параметры);
				СтруктураДляПовторяющихсяКлючей.Вставить(Ключ, МассивПараметров);

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого КлючЗначение Из СтруктураДляПовторяющихсяКлючей Цикл
		Ключ = КлючЗначение.Ключ;
		МассивПараметров = КлючЗначение.Значение;
		Если МассивПараметров.Количество() <= 1 Тогда
			Результат.Вставить(Ключ, МассивПараметров[0]);
		Иначе
			МассивПараметров = Новый ФиксированныйМассив(МассивПараметров);
			Результат.Вставить(КлючЗначение.Ключ, МассивПараметров);
		КонецЕсли;
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт

	Результат = Новый Массив;

	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//

	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;

	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция РаспознатьКлючИЕгоПараметры(Знач СтрокаПараметра)
	Результат = Неопределено;
	СтрокаПараметра = СокрЛП(СтрокаПараметра);
	СтрокаПараметраДляАнализа = НРег(СокрЛП(СтрокаПараметра));
	Разделитель = " ";
	КлючКоманднойСтроки = ПолучитьКлюч(СтрокаПараметраДляАнализа, Разделитель);
	Если ЗначениеЗаполнено(КлючКоманднойСтроки) И ЭтоДопустимыйКлюч(КлючКоманднойСтроки) Тогда
		ПараметрыКлюча = ВыделитьПараметрыКлюча(СтрокаПараметра, Разделитель);
		Результат = Новый Структура("Ключ, Параметры", КлючКоманднойСтроки, ПараметрыКлюча);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ПолучитьКлюч(СтрокаПараметра, Разделитель)
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(СтрокаПараметра, Разделитель);
	КлючКоманднойСтроки = МассивПодстрок[0];

	Возврат КлючКоманднойСтроки;
КонецФункции

Функция ВыделитьПараметрыКлюча(Знач СтрокаПараметра, Разделитель);
	Результат = Новый Массив;
	Кавычка = """";
	ВнутриКавычки = Ложь;

	ИскатьПодстроки = Истина;
	Пока ИскатьПодстроки Цикл
		ПозицияРазделителя = Найти(СтрокаПараметра, Разделитель);
		ПозицияКавычки = Найти(СтрокаПараметра, Кавычка);
		ВнутриКавычки = (ПозицияКавычки > 0) И (ПозицияРазделителя > ПозицияКавычки) Или (ПозицияРазделителя = 0);
		Позиция = ?(ВнутриКавычки, ПозицияКавычки, ПозицияРазделителя);
		ИскатьПодстроки = Позиция > 0;
		Если ИскатьПодстроки Тогда
			Если ВнутриКавычки Тогда
				СтрокаПараметра = Сред(СтрокаПараметра, Позиция + СтрДлина(Кавычка));
				ПозицияКонца = Найти(СтрокаПараметра, Кавычка);
				Подстрока = Лев(СтрокаПараметра, ПозицияКонца - 1);
				СтрокаПараметра = Сред(СтрокаПараметра, ПозицияКонца + СтрДлина(Кавычка));
			Иначе
				Подстрока = Лев(СтрокаПараметра, Позиция - 1);
				СтрокаПараметра = Сред(СтрокаПараметра, Позиция + СтрДлина(Разделитель));
			КонецЕсли;
			Результат.Добавить(Подстрока);
		КонецЕсли;
	КонецЦикла;

	Если Не ПустаяСтрока(СтрокаПараметра) Тогда
		Результат.Добавить(СтрокаПараметра);
	КонецЕсли;

	Результат.Удалить(0);

	Возврат Новый ФиксированныйМассив(Результат);
КонецФункции

Функция ВозможныеКлючиКоманднойСтроки()
	ВозможныеКлючиКоманднойСтроки = Новый Структура;
	ВозможныеКлючиКоманднойСтроки.Вставить("xddRun", "xddRun");
	ВозможныеКлючиКоманднойСтроки.Вставить("xddShutdown", "xddShutdown");
	ВозможныеКлючиКоманднойСтроки.Вставить("xddReport", "xddReport");
	ВозможныеКлючиКоманднойСтроки.Вставить("xddExitCodePath", "xddExitCodePath");
	ВозможныеКлючиКоманднойСтроки.Вставить("xddConfig", "xddConfig");
	ВозможныеКлючиКоманднойСтроки.Вставить("xddTestClient", "xddTestClient");
	ВозможныеКлючиКоманднойСтроки.Вставить("xddTestClientAdditional", "xddTestClientAdditional");
	ВозможныеКлючиКоманднойСтроки.Вставить("workspaceRoot", "workspaceRoot");
	ВозможныеКлючиКоманднойСтроки.Вставить("debug", "debug");

	Возврат Новый ФиксированнаяСтруктура(ВозможныеКлючиКоманднойСтроки);
КонецФункции

Функция ЭтоДопустимыйКлюч(Знач Ключ)
	Результат = Истина;
	ВозможныеКлючиКоманднойСтроки = ВозможныеКлючиКоманднойСтроки();
	Попытка
		ПредставлениеКлюча = ВозможныеКлючиКоманднойСтроки[Ключ];
	Исключение
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;
КонецФункции

НачальнаяНастройка();
