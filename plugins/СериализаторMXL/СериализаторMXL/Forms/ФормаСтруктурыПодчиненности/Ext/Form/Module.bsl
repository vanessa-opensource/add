&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИмяТипаМетаданных",ИмяТипаМетаданных);
	Параметры.Свойство("ПолноеИмяМетаданных",ПолноеИмяМетаданных);
	Если Параметры.Свойство("ДокументСсылка") 
		И НЕ Параметры.ДокументСсылка=Неопределено Тогда
		ДокументСсылка = Параметры.ДокументСсылка;
		ИсходныйДокумент = ДокументСсылка;
		//ИмяТипаМетаданных = ОбъектДанныхСсылка.Метаданные.Имя;
		стр_н = ЛогТекущихПорядкаВыбораСсылок.Добавить();
		стр_н.Ссылка = ДокументСсылка;
	КонецЕсли;
	
	Если ИмяТипаМетаданных="Документ" Тогда
		Попытка
			ТипДокументСсылка = новый ОписаниеТипов("ДокументСсылка."+ПолноеИмяМетаданных);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	Если ЗначениеЗаполнено(ДокументСсылка)Тогда
		ВывестиСтруктуруПодчиненности();
	КонецЕсли;
	
	ГлубинаИстории = "("+?(ЛогТекущихПорядкаВыбораСсылок.Количество()=0,0,ЛогТекущихПорядкаВыбораСсылок.Количество()-1)+")";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИПрименить(Команда)
	
	мПараметры = новый Структура;
	мПараметры.Вставить("МассивВыбранныхДанных",ПолучитьМассивСсылокДокументовИзКорзины());
	Оповестить("ВыборВыгрузкиПоСтруктуреПодчиненности",мПараметры);
	ЭтаФорма.Закрыть();

КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСсылокДокументовИзКорзины()
	
	МассивСтруктурСсылок = новый Массив;  	
	
	Для каждого стр из КорзинаСсылок Цикл
		мСтруктура = новый Структура;
		мСтруктура.Вставить("Ссылка",стр.Ссылка);
		мСтруктура.Вставить("ИмяТипаМетаданных","Документ");
		мСтруктура.Вставить("ПолноеИмяМетаданных",стр.Ссылка.Метаданные().Имя);
		МассивСтруктурСсылок.Добавить(мСтруктура);
	КонецЦикла;
	
	Возврат МассивСтруктурСсылок;
	
КонецФункции

&НаКлиенте
Процедура ВывестиДляТекущего(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСтруктураПодчиненности.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТипДокументСсылка = ПолучитьОписаниеТипМетаданныхПоСсылке(ТекущиеДанные.Ссылка);
	Элементы.ДокументСсылка.ОграничениеТипа = ТипДокументСсылка;

	ДокументСсылка = ТекущиеДанные.Ссылка;
	ВывестиСтруктуруПодчиненности();
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьОписаниеТипМетаданныхПоСсылке(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;		
	
	ОписаниеТипа = новый ОписаниеТипов("ДокументСсылка."+Ссылка.Метаданные().Имя);
	
	Возврат ОписаниеТипа;
	
КонецФункции

&НаКлиенте
Процедура Обновить(Команда)
	ВывестиСтруктуруПодчиненности();
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВКорзину(Команда)
	
	Для каждого стр из ТаблицаСтруктураПодчиненности Цикл
		
		Если стр.Выбрана=Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		// может есть ссылка?
		мОтбор = новый Структура("Ссылка",стр.Ссылка);
		нСтроки = КорзинаСсылок.НайтиСтроки(мОтбор);
		
		Если нСтроки.Количество()>0 Тогда
			Продолжить;
		КонецЕсли;
		
		стр_н = КорзинаСсылок.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
		
	КонецЦикла;
	
	
	ИзменитьЗаголовокПоместитьВКорзину();

	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаголовокПоместитьВКорзину()
	
	Элементы.ГруппаКорзина.Заголовок = "Корзина ("+КорзинаСсылок.Количество()+")";

КонецПроцедуры

#Область Служебные

// Инициирует вывод в табличный документ и отображает его по окончанию формирования.
&НаКлиенте
Процедура ВывестиСтруктуруПодчиненности()

	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоСтруктурыПодчиненности();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоСтруктурыПодчиненности(ВозвратНазад = Ложь)

	ПоследняяСсылка = Неопределено;
	
	Если ЛогТекущихПорядкаВыбораСсылок.Количество()>0 Тогда
		стр = ЛогТекущихПорядкаВыбораСсылок[ЛогТекущихПорядкаВыбораСсылок.Количество()-1];
		ПоследняяСсылка = стр.Ссылка;
	КонецЕсли;
	
	Если ПоследняяСсылка<>ДокументСсылка И ВозвратНазад=Ложь Тогда
		стр_н = ЛогТекущихПорядкаВыбораСсылок.Добавить();
		стр_н.Ссылка = ДокументСсылка;
	КонецЕсли;
	
	Если ЛогТекущихПорядкаВыбораСсылок.Количество()>1 Тогда
		Элементы.ФормаВернутьсяНазад.Доступность = Истина;
	КонецЕсли;
	
	ГлубинаИстории = "("+?(ЛогТекущихПорядкаВыбораСсылок.Количество()=0,0,ЛогТекущихПорядкаВыбораСсылок.Количество()-1)+")";
	
	Если ОсновнойДокументДоступен() Тогда
		СформироватьДеревьяДокументов();
		ВывестиТабличныйДокумент();
	Иначе
		Сообщить(
			Нстр("ru = 'Объект, для которого сформирован отчет о структуре подчиненности, стал недоступен.'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОсновнойДокументДоступен()

	Если Не ПравоДоступа("Чтение", ДокументСсылка.Метаданные()) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1
	|ИЗ
	|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК Таб
	|ГДЕ
	|	Таб.Ссылка = &ТекущийДокумент
	|");
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура СформироватьДеревьяДокументов()

	ДеревоРодительскиеДокументы.ПолучитьЭлементы().Очистить();
	ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Очистить();

	ВывестиРодительскиеДокументы(ДокументСсылка,ДеревоРодительскиеДокументы);
	ВывестиПодчиненныеДокументы(ДокументСсылка,ДеревоПодчиненныеДокументы);
	
	УдалитьЛишнююВложенностьВДереве("ДеревоРодительскиеДокументы");
	УдалитьЛишнююВложенностьВДереве("ДеревоПодчиненныеДокументы");
	
КонецПроцедуры

// Выводит дерево подчиненности в табличный документ.
&НаСервере
Процедура ВывестиТабличныйДокумент()

	СтруктураПодчиненности.ПолучитьЭлементы().Очистить();
	ТаблицаСтруктураПодчиненности.Очистить();
	
	ВывестиРодительскиеЭлементыДерева(ДеревоРодительскиеДокументы.ПолучитьЭлементы(),ТаблицаСтруктураПодчиненности,1);
	ВывестиТекущийДокумент(ТаблицаСтруктураПодчиненности);
	ВывестиПодчиненныеЭлементыДерева(ДеревоПодчиненныеДокументы.ПолучитьЭлементы(),ТаблицаСтруктураПодчиненности,1)
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРодительскиеДокументы(ТекущийДокумент,ДеревоРодитель)

	УстановитьПривилегированныйРежим(Истина); 
	
	СтрокиДерева = ДеревоРодитель.ПолучитьЭлементы();
	МетаданныеДокумента = ТекущийДокумент.Метаданные();
	СписокРеквизитов    = Новый СписокЗначений;
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		
		Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
			
			Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				
				Если МетаданныеРеквизита <> Неопределено
					И Метаданные.Документы.Содержит(МетаданныеРеквизита)
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					
					ЗначениеРеквизита = ТекущийДокумент[Реквизит.Имя];
					
					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДЛФ=DT"));
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";

		СодержимоеТЧ = ТекущийДокумент[ТЧ.Имя].Выгрузить();

		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл

			Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				
				Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
					
					МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
					
					Если МетаданныеРеквизита<>Неопределено
						И Метаданные.Документы.Содержит(МетаданныеРеквизита)
						И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
						
						СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;

		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл

			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл

				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];

				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения <> Неопределено Тогда

					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И Метаданные.Документы.Содержит(МетаданныеЗначения)
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено
						И ПравоДоступа("Чтение", МетаданныеЗначения) Тогда

							СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизитаОбъекта(ЗначениеРеквизита, "Дата"),"ДЛФ=DT"));

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	СписокРеквизитов.СортироватьПоПредставлению();
	
	УстановитьПривилегированныйРежим(Ложь); //Шамонтьев ERP-1139 21.06.2016
	
	Для каждого ЭлементСписка Из СписокРеквизитов Цикл
		
		Выборка = ПолучитьВыборкуПоРеквизитамДокумента(ЭлементСписка.Значение);
		
		Если Выборка.Следующий() Тогда
			СтрокаДерева = ДобавитьСтрокуВДерево(СтрокиДерева, Выборка);
			Если НЕ ДобавляемыйДокументИмеетсяСредиРодителей(ДеревоРодитель,ЭлементСписка.Значение) Тогда
				ВывестиРодительскиеДокументы(ЭлементСписка.Значение,СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает выборку по реквизитам документа.
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка - документ, значения реквизитов которого получаются запросом.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса
//
&НаСервере
Функция ПолучитьВыборкуПоРеквизитамДокумента(ДокументСсылка)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка,
	|	Проведен,
	|	ПометкаУдаления,
//	|	#Сумма,
//	|	#Валюта,
	|	#Представление
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + "
	|ГДЕ
	|	Ссылка = &Ссылка
	|";
	//ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеДокумента, "#Сумма", ИмяРеквизитаДокумента(МетаданныеДокумента.Имя, "СуммаДокумента"), "СуммаДокумента");
	//ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеДокумента, "#Валюта", ИмяРеквизитаДокумента(МетаданныеДокумента.Имя, "Валюта"), "Валюта");
	
	МассивДопРеквизитов = СтруктураПодчиненностиПереопределяемый_МассивДополнительныхРеквизитовДокумента(МетаданныеДокумента.Имя);
	
	ДополнитьТекстЗапросаПоРеквизитамДокумента(ТекстЗапроса, МассивДопРеквизитов);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПоРеквизитамДокумента = Запрос.Выполнить().Выбрать(); 
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ВыборкаПоРеквизитамДокумента;
	
КонецФункции


&НаСервере
Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент,ДеревоРодитель)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	СтрокиДерева = ДеревоРодитель.ПолучитьЭлементы();
	Таблица      = ПолучитьСписокДокументовПоКритериюОтбора(ТекущийДокумент);
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КэшПоТипамДокументов   = Новый Соответствие;
	КэшРеквизитовДокумента = Новый Соответствие;

	Для Каждого СтрокаТаблицы Из Таблица Цикл

		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;

		ИмяДокумента = МетаданныеДокумента.Имя;
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента,КэшРеквизитовДокумента);

		МассивСсылок = КэшПоТипамДокументов[ИмяДокумента];
		Если МассивСсылок = Неопределено Тогда

			МассивСсылок = Новый Массив;
			КэшПоТипамДокументов.Вставить(ИмяДокумента, МассивСсылок);

		КонецЕсли;

		МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);

	КонецЦикла;
	
	Если КэшПоТипамДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";

	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Для Каждого КлючИЗначение Из КэшПоТипамДокументов Цикл

		ТекстПоТипуДокумента = "
		|	Дата,
		|	Ссылка,
		|	Проведен,
		|	ПометкаУдаления,
		|" + КэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"] + " КАК СуммаДокумента,
		|" + КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Валюта"] + "         КАК Валюта,
		|	#Представление
		|ИЗ
		|	Документ." + КлючИЗначение.Ключ + "
		|ГДЕ
		|	Ссылка В (&" + КлючИЗначение.Ключ + ")";
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
		МассивДопРеквизитов = СтруктураПодчиненностиПереопределяемый_МассивДополнительныхРеквизитовДокумента(КлючИЗначение.Ключ);
		ДополнитьТекстЗапросаПоРеквизитамДокумента(ТекстПоТипуДокумента, МассивДопРеквизитов);
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", " ВЫБРАТЬ ", " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + ТекстПоТипуДокумента;

	КонецЦикла;

	Запрос.Текст = ТекстЗапросаНачало + ТекстЗапроса + ТекстЗапросаКонец;
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь); 

	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДобавитьСтрокуВДерево(СтрокиДерева, Выборка);
		Если НЕ ДобавляемыйДокументИмеетсяСредиРодителей(ДеревоРодитель,Выборка.Ссылка) Тогда
			ВывестиПодчиненныеДокументы(Выборка.Ссылка,НоваяСтрока)
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДокументовПоКритериюОтбора(ЗначениеКритерияОтбора)
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СвязанныеДокументы.Ссылка
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
		
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора",ЗначениеКритерияОтбора);
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Определяет наличие документа среди родителей строки дерева, которая возможно будет добавлена.
//
// Параметры:
//  СтрокаРодитель  - ДанныеФормыДерево,ДанныеФормыЭлементДерева - родитель, для 
//                 которого предполагается добавить строку дерева.
//  ДокументСсылка  - Документ - документ, на наличие которого выполняется проверка.
//
// Возвращаемое значение:
//   Булево   - Истина если найден, Ложь в обратном случае.
//
Функция ДобавляемыйДокументИмеетсяСредиРодителей(СтрокаРодитель,ИскомыйДокумент)
	
	Если ИскомыйДокумент = ДокументСсылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаРодитель) = Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	ТекущийРодитель = СтрокаРодитель;
	Пока ТекущийРодитель <> Неопределено Цикл
		Если ТекущийРодитель.Ссылка = ИскомыйДокумент Тогда
		    Возврат Истина;
		КонецЕсли;
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДобавитьСтрокуВДерево(СтрокиДерева, Выборка)

	НоваяСтрока = СтрокиДерева.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Ссылка, Представление,  Проведен, ПометкаУдаления");
	
	ПереопределенноеПредставление = СтруктураПодчиненностиПереопределяемый_ПолучитьПредставлениеДокументаДляПечати(Выборка);
	Если ПереопределенноеПредставление <> Неопределено Тогда
		//НоваяСтрока.Представление = ПереопределенноеПредставление;
		НоваяСтрока.Представление = ПереопределенноеПредставление.ПредставлениеДокумента;
		НоваяСтрока.ппк_Недоступен = ПереопределенноеПредставление.НетПравНаЧтение;
	Иначе
		НоваяСтрока.Представление = ПолучитьПредставлениеДокументаДляПечати(Выборка);
	КонецЕсли;
	
	Возврат НоваяСтрока;

КонецФункции

&НаСервере
Процедура ДополнитьТекстЗапросаПоРеквизитамДокумента(ТекстЗапроса, МассивРеквизитов)
	
	ТекстПредставление = "Представление КАК Представление";
	
	Для Инд = 1 По 3 Цикл
		
		ТекстПредставление = ТекстПредставление + ",
			|	" + ?(МассивРеквизитов.Количество() >= Инд,МассивРеквизитов[инд - 1],"NULL") + " Как ДополнительныйРеквизит" + Инд;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Представление", ТекстПредставление);
	
КонецПроцедуры

Функция ИмяРеквизитаДокумента(ИмяДокумента, Реквизит) 
	
	ИмяРеквизитаДокумента = СтруктураПодчиненностиПереопределяемый_ИмяРеквизитаДокумента(ИмяДокумента, Реквизит); 
	
	Если Реквизит = "СуммаДокумента" Тогда
		Возврат ?(ИмяРеквизитаДокумента = Неопределено,"СуммаДокумента",ИмяРеквизитаДокумента);
	ИначеЕсли Реквизит = "Валюта" Тогда
		Возврат ?(ИмяРеквизитаДокумента = Неопределено,"Валюта",ИмяРеквизитаДокумента);
	Иначе
		Возврат Неопределено; //TODO что нужно возвращать?
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента,КэшРеквизитовДокумента)

	РеквизитыДокумента = КэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		
		РеквизитыДокумента = Новый Соответствие;
		
		ИмяРеквизитаСуммаДокумента = ИмяРеквизитаДокумента(МетаданныеДокумента.Имя, "СуммаДокумента");
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизитаСуммаДокумента) <> Неопределено Тогда
			РеквизитыДокумента.Вставить("СуммаДокумента", ИмяРеквизитаСуммаДокумента);
		Иначе
			РеквизитыДокумента.Вставить("СуммаДокумента", "NULL");
		КонецЕсли;
		
		ИмяРеквизитаВалюта = ИмяРеквизитаДокумента(МетаданныеДокумента.Имя, "Валюта");
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизитаВалюта) <> Неопределено Тогда
			РеквизитыДокумента.Вставить("Валюта", ИмяРеквизитаВалюта);
		Иначе
			РеквизитыДокумента.Вставить("Валюта", "NULL");
		КонецЕсли;

		КэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);

	КонецЕсли;
	
КонецПроцедуры

// Формирует представление документа для вывода в табличный документ.
//
// Параметры:
//  Выборка  - ВыборкаИзРезультатаЗапроса или ДанныеФормыЭлементДерева - набор данных
//             на основании которого формируется представление.
//
// Возвращаемое значение:
//   Строка   - сформированное представление.
//
&НаСервере
Функция ПолучитьПредставлениеДокументаДляПечати(Выборка)
	
	ПредставлениеДокумента = Выборка.Представление;
//	Если (Выборка.СуммаДокумента <> 0) И (Выборка.СуммаДокумента <> NULL) Тогда
//		ПредставлениеДокумента = ПредставлениеДокумента + " " + НСтр("ru='на сумму'") + " " + Выборка.СуммаДокумента + " " + Выборка.Валюта;
//	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции


&НаСервере
Процедура УдалитьЛишнююВложенностьВДереве(ИмяДерева) 
	
	Дерево = РеквизитФормыВЗначение(ИмяДерева, Тип("ДеревоЗначений"));
	УдалитьЛишнююВложенность(Дерево, Дерево.Строки);
	ЗначениеВРеквизитФормы(Дерево, ИмяДерева);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЛишнююВложенность(Дерево, СтрокиДерева)
	
	ВсегоСтрок = СтрокиДерева.Количество() - 1;
	Для ИндексСтроки=0 По ВсегоСтрок Цикл
		СтрокаМаксимальногоУровня = Неопределено;
		МаксимальныйУровень = -1;
		
		ТекущаяСтрока = СтрокиДерева[ВсегоСтрок-ИндексСтроки];
		СтрокиПоСсылке = Дерево.Строки.НайтиСтроки(Новый Структура("Ссылка", ТекущаяСтрока.Ссылка), Истина);

		Для Каждого СтрокаПоСсылке Из СтрокиПоСсылке Цикл
			ТекущийУровень = СтрокаПоСсылке.Уровень();
			Если ТекущийУровень>=МаксимальныйУровень Тогда
				МаксимальныйУровень = ТекущийУровень;
				
				Если СтрокаМаксимальногоУровня<>Неопределено Тогда
					Родитель = СтрокаМаксимальногоУровня.Родитель;
					Если Родитель=Неопределено Тогда
						Родитель = Дерево;
					КонецЕсли;
					Родитель.Строки.Удалить(СтрокаМаксимальногоУровня);
				КонецЕсли;
				СтрокаМаксимальногоУровня = СтрокаПоСсылке;
				
			Иначе
				
				Родитель = СтрокаПоСсылке.Родитель;
				Если Родитель=Неопределено Тогда
					Родитель = Дерево;
				КонецЕсли;
				Родитель.Строки.Удалить(СтрокаПоСсылке);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл //это уже те строки, которые точно остались
		УдалитьЛишнююВложенность(Дерево, СтрокаДерева.Строки);
	КонецЦикла;
	
КонецПроцедуры



&НаСервере
Процедура ВывестиРодительскиеЭлементыДерева(СтрокиДерева,Таблица,УровеньРекурсии)
	
	Счетчик =  СтрокиДерева.Количество();
	Пока Счетчик >0 Цикл
		
		ТекущаяСтрокаДерева = СтрокиДерева.Получить(Счетчик -1);
		ПодчиненныеЭлементыСтрокиДерева = ТекущаяСтрокаДерева.ПолучитьЭлементы();
		ВывестиРодительскиеЭлементыДерева(ПодчиненныеЭлементыСтрокиДерева,Таблица,УровеньРекурсии + 1);

		ВывестиДокументИКартинку(ТекущаяСтрокаДерева,Таблица,УровеньРекурсии+1,Ложь,Ложь);

		Счетчик = Счетчик - 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТекущийДокумент(Таблица)
	
	Выборка = ПолучитьВыборкуПоРеквизитамДокумента(ДокументСсылка);
	Если Выборка.Следующий() Тогда
		
		ПереопределяемоеПредставление = СтруктураПодчиненностиПереопределяемый_ПолучитьПредставлениеДокументаДляПечати(Выборка);
		
		Если ПереопределяемоеПредставление <> Неопределено Тогда
			СтруктураРеквизитов = СтрокаТаблицыЗначенийВСтруктуру(Выборка.Владелец().Выгрузить()[0]);

			СтруктураРеквизитов.Представление = ПереопределяемоеПредставление.ПредставлениеДокумента;
			ВывестиДокументИКартинку(СтруктураРеквизитов,Таблица,0,Истина,,ПереопределяемоеПредставление.НетПравНаЧтение);
		Иначе
			СтруктураРеквизитов = СтрокаТаблицыЗначенийВСтруктуру(Выборка.Владелец().Выгрузить()[0]);
			СтруктураРеквизитов.Представление = ПолучитьПредставлениеДокументаДляПечати(СтруктураРеквизитов);
			ВывестиДокументИКартинку(СтруктураРеквизитов,Таблица,0,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПодчиненныеЭлементыДерева(СтрокиДерева,Таблица,УровеньРекурсии)

	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ЭтоТекущийДокумент = (СтрокаДерева.Ссылка = ДокументСсылка);
		ЭтоИсходныйДокумент = (СтрокаДерева.Ссылка = ИсходныйДокумент);
		ПодчиненныеЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		
		ВывестиДокументИКартинку(СтрокаДерева,Таблица,УровеньРекурсии+1,Ложь,Истина);
		
		// Вывод подчиненных элементов дерева.
		ВывестиПодчиненныеЭлементыДерева(ПодчиненныеЭлементыДерева,Таблица,УровеньРекурсии + 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументИКартинку(СтрокаДерева,Таблица,Отступ,ЭтоТекущийДокумент = Ложь,ЭтоПодчиненный = Неопределено, ЭтоНедоступныйПоПравам=Ложь)
	ПредставлениеОтступа = "";
	Если Отступ<>0 Тогда
		Для стр=0 по Отступ Цикл
			ПредставлениеОтступа = ПредставлениеОтступа+"...";
		КонецЦикла;
	КонецЕсли;
	стр_н =Таблица.Добавить();
	стр_н.Ссылка =  СтрокаДерева.Ссылка;
	стр_н.ПредставлениеОтступа = ПредставлениеОтступа;
	стр_н.Представление = СтрокаДерева.Представление;
	стр_н.Проведен =  СтрокаДерева.Проведен;
	стр_н.ПометкаУдаления =  СтрокаДерева.ПометкаУдаления;
	Если стр_н.Ссылка = ДокументСсылка Тогда
		стр_н.ВыбранныйЭлемент = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для каждого стр из ТаблицаСтруктураПодчиненности Цикл
		стр.Выбрана = Истина;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для каждого стр из ТаблицаСтруктураПодчиненности Цикл
		стр.Выбрана = Ложь;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура КорзинаСсылокПриИзменении(Элемент)
	ИзменитьЗаголовокПоместитьВКорзину();
КонецПроцедуры


&НаКлиенте
Процедура ДокументСсылкаПриИзменении(Элемент)
	ВывестиСтруктуруПодчиненности();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяНазад(Команда)
	Если ЛогТекущихПорядкаВыбораСсылок.Количество()>0 Тогда
		стр = ЛогТекущихПорядкаВыбораСсылок[ЛогТекущихПорядкаВыбораСсылок.Количество()-1];
		Если ДокументСсылка=стр.Ссылка Тогда
			Если ЛогТекущихПорядкаВыбораСсылок.Количество()>=2 Тогда
				ЛогТекущихПорядкаВыбораСсылок.Удалить(стр);
				стр2 = ЛогТекущихПорядкаВыбораСсылок[ЛогТекущихПорядкаВыбораСсылок.Количество()-1];
				ДокументСсылка = стр2.Ссылка;
			КонецЕсли;
		Иначе
			ДокументСсылка = стр.Ссылка;
			Если ЛогТекущихПорядкаВыбораСсылок.Количество()>1 Тогда
				ЛогТекущихПорядкаВыбораСсылок.Удалить(стр);
			КонецЕсли;			
		КонецЕсли;
		
		
		ТипДокументСсылка = ПолучитьОписаниеТипМетаданныхПоСсылке(ДокументСсылка);
		Элементы.ДокументСсылка.ОграничениеТипа = ТипДокументСсылка;		
		
		ОбновитьДеревоСтруктурыПодчиненности(Истина);
		
		Если ЛогТекущихПорядкаВыбораСсылок.Количество()<=1 Тогда
			Элементы.ФормаВернутьсяНазад.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Сообщить("Достигли начала истории!");
	КонецЕсли	
КонецПроцедуры

#КонецОбласти

#область ФункцииДляСовместимости

&НаСервере
Функция СтруктураПодчиненностиПереопределяемый_МассивДополнительныхРеквизитовДокумента(ИмяДокумента) Экспорт
	
	МассивДопРеквизитов = Новый Массив;
	
	
	
	Возврат МассивДопРеквизитов
	
КонецФункции

&НаСервере
Функция СтруктураПодчиненностиПереопределяемый_ПолучитьПредставлениеДокументаДляПечати(Выборка) Экспорт
	
	СтруктураПодчиненностиПереопределяемый_СнятьПривилегированныйРежим();
	
	Если Не ПравоДоступа("Чтение", Выборка.Ссылка.Метаданные()) Или Не СтруктураПодчиненностиПереопределяемый_ПроверитьДоступностьОбъектаПоРЛС(Выборка.Ссылка) Тогда
		//нет прав на чтение документа
		Возврат Новый Структура("ПредставлениеДокумента,НетПравНаЧтение", Выборка.Представление, Истина);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СтруктураПодчиненностиПереопределяемый_ИмяРеквизитаДокумента(ИмяДокумента, Реквизит) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.Найти(ИмяДокумента);
	
	Если Реквизит = "СуммаДокумента" Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Возврат "СуммаДокумента";
		КонецЕсли;
	ИначеЕсли Реквизит = "Валюта" Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("Валюта") <> Неопределено Тогда
			Возврат "Валюта";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СтруктураПодчиненностиПереопределяемый_ПроверитьДоступностьОбъектаПоРЛС(СсылкаНаОбъект) Экспорт
	
	СтруктураПодчиненностиПереопределяемый_СнятьПривилегированныйРежим();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА
	|ИЗ
	|	" + СсылкаНаОбъект.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &СсылкаНаОбъект");
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);

	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция СтруктураПодчиненностиПереопределяемый_СнятьПривилегированныйРежим() Экспорт
	
	КоличествоОтмен = 0;
	
	Пока ПривилегированныйРежим() Цикл
		УстановитьПривилегированныйРежим(Ложь);
		КоличествоОтмен = КоличествоОтмен + 1;
	КонецЦикла;
	
	Возврат КоличествоОтмен;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено для всех реквизитов.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то все реквизиты вернутся со значением Неопределено;
//                                если Ложь, то возникнет исключение при отсутствии прав на любой из реквизитов.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//  ИмяРеквизита - Строка - имя получаемого реквизита.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то вернется значение Неопределено.
// 
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает значения реквизитов, прочитанные из информационной базы
// для нескольких объектов.
// 
//  Если доступа к одному из реквизитов какого-либо объекта нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет
//  исключение прав доступа, а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено для всех
//  реквизитов этого объекта.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  МассивСсылок - Массив - массив ссылок на объекты одного типа.
//                 ВАЖНО! Значения массива должны быть ссылками на объекты ОДНОГО типа!
//  ИменаРеквизитов - Строка - имена реквизитов перечисленные через запятую, в формате требований к свойствам структуры.
//                             Например, "Код, Наименование, Родитель".
// 
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя, и в случае,
//                                если какой-либо объект будет исключен из выборки по правам, то все реквизиты этого объекта
//                                вернутся со значением Неопределено;
//                                если Ложь, то возникнет исключение при отсутствии прав на любой из реквизитов любого
//                                из объектов.
// Возвращаемое значение:
//  Соответствие - список объектов и значений их реквизитов:
//   * Ключ - ЛюбаяСсылка - ссылка на объект;
//   * Значение - Структура - значения реквизитов:
//    ** Ключ - Строка - имя реквизита;
//    ** Значение - Произвольный - значение реквизита.
// 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов, ВыбратьРазрешенные = Ложь) Экспорт
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Ссылка КАК Ссылка, " + ИменаРеквизитов + "
		|ИЗ
		|	" + МассивСсылок[0].Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		ЗначенияРеквизитов.Вставить(Ссылка, Новый Структура(ИменаРеквизитов));
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов[Выборка.Ссылка], Выборка);
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Преобразует строку таблицы значений в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений - строка таблицы значений.
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
//                           например, "%1 пошел в %2");
//  Параметр<n>   - Строка - значение подставляемого параметра.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел
//  в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%") > 0
		Или Найти(Параметр2, "%") > 0
		Или Найти(Параметр3, "%") > 0
		Или Найти(Параметр4, "%") > 0
		Или Найти(Параметр5, "%") > 0
		Или Найти(Параметр6, "%") > 0
		Или Найти(Параметр7, "%") > 0
		Или Найти(Параметр8, "%") > 0
		Или Найти(Параметр9, "%") > 0;
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти
