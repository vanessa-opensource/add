/////////////////////////////////////////////////////////////////////////////////////////////////
// Сергей Долинин imhunter74@gmail.com, ноя 2018.
// Плагин ИтераторМетаданных служит для получения информации о метаданных конфигурации.
// Может применяться для написания дымовых тестов, отслеживающих какие-то параметры конфигурации.
//

Перем КонтекстЯдра;

// { Plugin interface
Функция ОписаниеПлагина(КонтекстЯдра, ВозможныеТипыПлагинов) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", Метаданные().Представление());
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	ДопустимыеМетаданные.Очистить();
	ИсключаемыеМетаданные.Очистить();
	ДополнятьЗависимымиОбъектами = Ложь;
	
КонецПроцедуры

// Процедура - Перечислить
// Строим дерево всех проверяемых объектов метаданных и проходим по нему с вызовом процедур-обработчиков событий
// Параметры:
//  Источник						 - ОбработкаОбъект	 - Модуль, в котором будут вызываться процедуры-обработчики событий.
//  ПриСледующемОбъектеМетаданных	 - Строка	 - Имя процедуры-обработчика при переходе на следующий объект метаданных.
//  ПриСледующемТипеМетаданных		 - Строка, Неопределено	 - Имя процедуры-обработчика при переходе на следующий тип объектов метаданных.
//  Интерфейс обработчиков - ПроцедураОбработчик(ОбъектМетаданных) или ПроцедураОбработчик(ОбъектМетаданных, Родитель)
Процедура Перечислить(Источник, ПриСледующемОбъектеМетаданных, ПриСледующемТипеМетаданных = Неопределено) Экспорт
	
	Дерево = ДеревоМетаданных();
	
	Для Каждого ТекСтрокаТипа Из Дерево.Строки Цикл 
		ВыполнитьПроцедуруСобытия(Источник, ПриСледующемТипеМетаданных, ТекСтрокаТипа.ОбъектМетаданных);
		Для Каждого ДочерняяСтрока Из ТекСтрокаТипа.Строки Цикл 
			ВыполнитьПроцедуруСобытия(Источник, ПриСледующемОбъектеМетаданных, ДочерняяСтрока.ОбъектМетаданных);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ДеревоМетаданных() Экспорт 
	
	ОбъектыМетаданных = ?(ЗначениеЗаполнено(ДопустимыеМетаданные), 
		ОбъектыМетаданныхРазвернутые(ДопустимыеМетаданные.ВыгрузитьЗначения()), ОбъектыМетаданныхРазвернутые(ВсеКоллекцииМетаданных())
	);
	
	Если ДополнятьЗависимымиОбъектами Тогда 
		ЗависимыеОбъекты = ОбъектыМетаданныхЗависимые(ОбъектыМетаданных);
		ДополнитьМассив(ОбъектыМетаданных, ЗависимыеОбъекты, Истина);
	КонецЕсли;
	
	ОбъектыМетаданных = РазностьМассивов(ОбъектыМетаданных, ОбъектыМетаданныхРазвернутые(ИсключаемыеМетаданные.ВыгрузитьЗначения()));
	
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("Объект");
	ТаблицаМетаданных.Колонки.Добавить("Тип");
	ТаблицаМетаданных.Индексы.Добавить("Тип, Объект");
	
	Для Каждого Элемент Из ОбъектыМетаданных Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаМетаданных.Добавить(), Новый Структура("Объект, Тип", Элемент, ТипОбъектаМетаданных(Элемент)));
	КонецЦикла;
	ТаблицаМетаданных.Свернуть("Тип, Объект");
	ТаблицаМетаданных.Сортировать("Тип, Объект");
	
	ТекРодитель = Неопределено; 
	ТекТип = Неопределено;
	ТекКорневаяСтрока = Неопределено;
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("ОбъектМетаданных");
	
	Для Каждого Строка Из ТаблицаМетаданных Цикл 
		
		ТипОбъекта = Строка.Объект.ПолноеИмя();
		ТипОбъекта = Лев(ТипОбъекта, Найти(ТипОбъекта, ".") - 1);
		
		Если ТекТип <> ТипОбъекта Тогда 
			
			ТекТип = ТипОбъекта;
			ТекРодитель = Результат.Строки.Добавить();
			ТекРодитель.ОбъектМетаданных = ТипОбъекта;			
			
		КонецЕсли;
		
		ТекЭлементДерева = ТекРодитель.Строки.Добавить();
		ТекЭлементДерева.ОбъектМетаданных = Строка.Объект;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// } Plugin interface

Функция ВсеКоллекцииМетаданных()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Метаданные.HTTPСервисы);
	Результат.Добавить(Метаданные.WebСервисы);
	Результат.Добавить(Метаданные.WSСсылки);
	Результат.Добавить(Метаданные.БизнесПроцессы);
	Результат.Добавить(Метаданные.ВнешниеИсточникиДанных);
	Результат.Добавить(Метаданные.Документы);
	Результат.Добавить(Метаданные.ЖурналыДокументов);
	Результат.Добавить(Метаданные.Задачи);
	Результат.Добавить(Метаданные.Константы);
	Результат.Добавить(Метаданные.КритерииОтбора);
	Результат.Добавить(Метаданные.НумераторыДокументов);
	Результат.Добавить(Метаданные.Обработки);
	Результат.Добавить(Метаданные.ОбщиеРеквизиты);
	Результат.Добавить(Метаданные.Перечисления);
	Результат.Добавить(Метаданные.ПланыВидовРасчета);
	Результат.Добавить(Метаданные.ПланыВидовХарактеристик);
	Результат.Добавить(Метаданные.ПланыОбмена);
	Результат.Добавить(Метаданные.ПланыСчетов);
	Результат.Добавить(Метаданные.Последовательности);
	Результат.Добавить(Метаданные.РегистрыБухгалтерии);
	Результат.Добавить(Метаданные.РегистрыНакопления);
	Результат.Добавить(Метаданные.РегистрыРасчета);
	Результат.Добавить(Метаданные.РегистрыСведений);
	Результат.Добавить(Метаданные.Справочники);
	//Результат.Добавить(Метаданные.);
	//Результат.Добавить(Метаданные.);
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектыМетаданныхРазвернутые(МассивМетаданных)
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(МассивМетаданных) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ТипКоллекцияМД = Тип("КоллекцияОбъектовМетаданных");
	ТипКонфигурация = Тип("ОбъектМетаданныхКонфигурация");
	Для Каждого Элемент Из МассивМетаданных Цикл 
		Если ТипЗнч(Элемент) = ТипКоллекцияМД Тогда 
			Для Каждого Дочерний Из Элемент Цикл 
				Результат.Добавить(Дочерний);
			КонецЦикла;
		Иначе 
			Попытка
				РодительЭлемента = Элемент.Родитель();
				Если ТипЗнч(РодительЭлемента) <> ТипКонфигурация Тогда 
					Продолжить;
				КонецЕсли;
			Исключение
				Продолжить;
			КонецПопытки;
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектыМетаданныхЗависимые(МассивОбъектовМетаданных)
	
	ДобавляемыеТипы = Новый Соответствие;
	ЗависимыеРеквизиты = Новый Массив;
	
	Результат = Новый Массив;
	
	Для Каждого ОбъектМД Из МассивОбъектовМетаданных Цикл 
		
		ДополнитьМассивРеквизитов(ЗависимыеРеквизиты, ОбъектМД);
		
		Попытка
			ТабЧасти = ОбъектМД.ТабличныеЧасти;
		Исключение
			ТабЧасти = Новый Массив;
		КонецПопытки;
		Для Каждого ТекТабЧасть Из ТабЧасти Цикл 
			ДополнитьМассивРеквизитов(ЗависимыеРеквизиты, ТекТабЧасть);
		КонецЦикла;
		
		Попытка
			Движения = ОбъектМД.Движения;
		Исключение
			Движения = Новый Массив;
		КонецПопытки;
		Для Каждого ТекДвижение Из Движения Цикл 
			Результат.Добавить(ТекДвижение);
			//ДополнитьМассивРеквизитов(ЗависимыеРеквизиты, ТекДвижение);
		КонецЦикла;
		
	КонецЦикла;
		
	Для Каждого ТекРеквизит Из ЗависимыеРеквизиты Цикл 
		ОписаниеТиповРеквизита = ТекРеквизит.Тип;
		#Если Сервер И Не Сервер Тогда 
			ОписаниеТиповРеквизита = Новый ОписаниеТипов();
		#КонецЕсли
		Для Каждого ТекТипРеквизита Из ОписаниеТиповРеквизита.Типы() Цикл 
			ДобавляемыеТипы.Вставить(ТекТипРеквизита);
		КонецЦикла;
	КонецЦикла;
	ЗависимыеРеквизиты.Очистить();
		
	Для Каждого Эл Из ДобавляемыеТипы Цикл 
		Попытка
			ОбъектПоТипу = Метаданные.НайтиПоТипу(Эл.Ключ);
		Исключение
			ОбъектПоТипу = Неопределено;
		КонецПопытки;
		Если ОбъектПоТипу <> Неопределено Тогда 
			Результат.Добавить(ОбъектПоТипу);
		КонецЕсли;
	КонецЦикла;
	ДобавляемыеТипы.Очистить();
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьМассивРеквизитов(МассивРеквизитов, ОбъектМетаданных)
	
	Попытка
		КоллекцияРеквизитов = ОбъектМетаданных.Реквизиты;
	Исключение
		Возврат;
	КонецПопытки;
	
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл 
		МассивРеквизитов.Добавить(Реквизит);
	КонецЦикла;
	
КонецПроцедуры
// Копипаст из БСП. Вычисляет разность массивов. Разностью массивов А и В является массив, содержащий
// все элементы массива А не существующие в массиве В.
//
// Параметры:
//  Массив - Массив - массив элементов, из которого необходимо выполнить вычитание;
//  МассивВычитания - Массив - массив элементов, который будет вычитаться.
// 
// Возвращаемое значение:
//  Массив - дополнение массива В до А.
//
// Пример:
//	//А = [1, 3, 5, 7];
//	//В = [3, 7, 9];
//	Результат = РазностьМассивов(А, В);
//	//Результат = [1, 5];
//
Функция РазностьМассивов(Массив, МассивВычитания)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если МассивВычитания.Найти(Элемент) = Неопределено Тогда
			
			Результат.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Копипаст из БСП. Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроцедуруСобытия(Объект, ИмяПроцедуры, ОбъектМетаданных)
	
	Если ПустаяСтрока(ИмяПроцедуры) Тогда 
		Возврат;
	КонецЕсли;
		
	ЭтоКоллекция = ТипЗнч(ОбъектМетаданных) = Тип("Строка");
	Если ЭтоКоллекция Тогда 
		СтрокаИсполнения = "Объект." + ИмяПроцедуры + "(ОбъектМетаданных, Неопределено)";
	Иначе 
		ТипОбъектаМетаданных = ТипОбъектаМетаданных(ОбъектМетаданных);
		СтрокаИсполнения = "Объект." + ИмяПроцедуры + "(ОбъектМетаданных, ТипОбъектаМетаданных)";
	КонецЕсли;
	
	Попытка
		Выполнить(СтрокаИсполнения);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		СтрокаИсполнения = "Объект." + ИмяПроцедуры + "(ОбъектМетаданных)";
		Попытка
			Выполнить(СтрокаИсполнения);
		Исключение
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

Функция ТипОбъектаМетаданных(ОбъектПараметр)
	
	ТипОбъекта = ОбъектПараметр.ПолноеИмя();
	ТипОбъекта = Лев(ТипОбъекта, Найти(ТипОбъекта, ".") - 1);
	
	Возврат ТипОбъекта;
	
КонецФункции
