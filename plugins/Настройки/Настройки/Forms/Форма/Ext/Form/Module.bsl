#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем КоллекцияИсключаемыхКлючей;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсПлагина

// { Plugin interface

&НаКлиенте
Функция ОписаниеПлагина(КонтекстЯдра, ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
КонецПроцедуры

// } Plugin interface
#КонецОбласти

#Область Настройки
// { Settings interface

// Функция - Получить настройки
//
// Возвращаемое значение:
//   Структура - 
//
&НаКлиенте
Функция ПолучитьНастройки() Экспорт
	ИмяКлючаФайлаНастройки = "configpath";

	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		ПутьФайлаНастроек = КонтекстЯдра.ПутьФайлаНастроек();
		ФайлНастройки = Новый Файл(ПутьФайлаНастроек);
		СоздатьКоллекцияИсключаемыхКлючей();

		Настройки = ПрочитатьНастройкиИзФайлаJSon(ПутьФайлаНастроек);
		Настройки = ДобавитьВНастройкиДанныеИзВложенныхФайловНастроек(Настройки, ИмяКлючаФайлаНастройки, 
			ФайлНастройки.Путь);
		Объект.Настройки = Новый ФиксированнаяСтруктура(Настройки);

		Если Объект.Настройки.Свойство("Отладка") Тогда
			ЕстьФлагОтладки = Объект.Настройки.Отладка;

			Если ЕстьСвойство(КонтекстЯдра.Объект, "ФлагОтладки") Тогда
				КонтекстЯдра.Объект.ФлагОтладки  = ЕстьФлагОтладки;
				КонтекстЯдра.Отладка(КонтекстЯдра.СтрШаблон_("НовоеЗначение КонтекстЯдра.Объект.ФлагОтладки %1", 
					КонтекстЯдра.Объект.ФлагОтладки));
			КонецЕсли;
			Если ЕстьСвойство(КонтекстЯдра.Объект, "DebugLog") Тогда
				КонтекстЯдра.Объект.DebugLog  = ЕстьФлагОтладки;
				КонтекстЯдра.Отладка(КонтекстЯдра.СтрШаблон_("НовоеЗначение КонтекстЯдра.Объект.DebugLog %1", 
					КонтекстЯдра.Объект.DebugLog));
			КонецЕсли;

			КонтекстЯдра.Отладка(КонтекстЯдра.СтрШаблон_("Объект.Настройки.Отладка %1", Объект.Настройки.Отладка));
			КонтекстЯдра.Отладка(КонтекстЯдра.СтрШаблон_("ЕстьСвойство(КонтекстЯдра.Объект, ФлагОтладки) %1", 
				ЕстьСвойство(КонтекстЯдра.Объект, "ФлагОтладки")));
			КонтекстЯдра.Отладка(КонтекстЯдра.СтрШаблон_("КонтекстЯдра.Объект.ФлагОтладки %1", 
				КонтекстЯдра.Объект.ФлагОтладки));

			Если ЕстьФлагОтладки Тогда
				КонтекстЯдра.Отладка("");
				КонтекстЯдра.Отладка("Файл настроек <" + ПутьФайлаНастроек + ">");
				КонтекстЯдра.Отладка("Переданные настройки:");
				ПоказатьСвойстваВРежимеОтладки(Объект.Настройки);
				КонтекстЯдра.Отладка("");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	Возврат Объект.Настройки;
КонецФункции

// Функция - Получить настройку
//
// Параметры:
//  КлючНастройки	 - 	 -
//
// Возвращаемое значение:
//   -
//
&НаКлиенте
Функция ПолучитьНастройку(Знач КлючНастройки) Экспорт

	ПолучитьНастройки();

	Результат = Неопределено;
	Объект.Настройки.Свойство(КлючНастройки, Результат);
	Возврат Результат;

КонецФункции

// Функция - Получить настройку теста
//
// Параметры:
//  КлючНастройки	 - Строка - Ключ настройки
//
// Возвращаемое значение:
//   Структура - Настройки теста
//
&НаКлиенте
Функция ПолучитьНастройкиТеста(Знач КлючНастройки) Экспорт

	ПолучитьНастройки();

	НастройкиТеста = Неопределено;
	Объект.Настройки.Свойство(КлючНастройки, НастройкиТеста);
	
	НастройкиТестовПоУмолчанию = Неопределено;
	Объект.Настройки.Свойство("Тесты", НастройкиТестовПоУмолчанию);
	
	Если ТипЗнч(НастройкиТестовПоУмолчанию) = Тип("Структура") И НастройкиТестовПоУмолчанию.Количество() > 0 Тогда
		
		Если НастройкиТеста = Неопределено Тогда
			НастройкиТеста = Новый Структура;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из НастройкиТестовПоУмолчанию Цикл
			
			Если Не НастройкиТеста.Свойство(КлючЗначение.Ключ) Тогда
				НастройкиТеста.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НастройкиТеста;

КонецФункции

// Позволяет проверить существование настройки по пути из ключей, как 
//    строка объединенная точкой.
//
// Параметры:
//  ПутьНастроек		 - Строка	 - Путь или ключ настроек
//  СтруктураНастроек	 - Структура, Неопределено - структура, которая содержит
//    значение искомой настройки
//
// Возвращаемое значение:
//   Булево - Истина, если ключ/путь найден, иначе Ложь
//
// Пример:
// 		Структура = Новый Структура("Ключ1", Новый Структура("Ключ2", Новый Структура("Ключ3", 42)));
// 		Настройки.ДобавитьНастройки(Структура);
//		РезультатПроверки = Настройки.ЕстьНастройка("Ключ1.Ключ2.Ключ3");
// В результате получим Истина
//
&НаКлиенте
Функция ЕстьНастройка(Знач ПутьНастроек, СтруктураНастроек = Неопределено) Экспорт
	Перем ЗначениеНастройки, бРезультат;
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПолучитьНастройки();
	КонецЕсли;

	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Или ТипЗнч(СтруктураНастроек) = Тип("ФиксированнаяСтруктура") Тогда

		ПозТочки = Найти(ПутьНастроек, ".");

		Если ПозТочки = 0 Тогда
			Возврат СтруктураНастроек.Свойство(ПутьНастроек);
		Иначе
			ИмяТекущегоСвойства = Лев(ПутьНастроек, ПозТочки - 1);
			ОстатокПути = Сред(ПутьНастроек, ПозТочки + 1);
			Если СтруктураНастроек.Свойство(ИмяТекущегоСвойства) Тогда
				Возврат ЕстьНастройка(ОстатокПути, СтруктураНастроек[ИмяТекущегоСвойства]);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Процедура - Обновить
//
&НаКлиенте
Процедура Обновить() Экспорт
	Объект.Настройки = Неопределено;
	ПолучитьНастройки();
КонецПроцедуры

&НаКлиенте
// Добавить настройку к текущим настройкам
//
// Параметры:
//  Ключ	 - Строка	 - Наименование настройки
//  Значение - Произвольное	 - Значение настройки
//
Процедура ДобавитьНастройку(Знач Ключ, Знач Значение) Экспорт
	Перем НовыеНастройки, элементНастройки;
	
	ПолучитьНастройки();
	
	НовыеНастройки = Новый Структура();
	Для каждого элементНастройки Из Объект.Настройки Цикл
		НовыеНастройки.Вставить(элементНастройки.Ключ, элементНастройки.Значение);
	КонецЦикла;
	
	Если ТипЗнч(Ключ) = Тип("Строка") И НЕ ПустаяСтрока(Ключ) Тогда
		НовыеНастройки.Вставить(Ключ, Значение);
	КонецЕсли;
	
	Объект.Настройки = Новый ФиксированнаяСтруктура(НовыеНастройки);
	
КонецПроцедуры

&НаКлиенте
// Добавить настройки к текущим настройкам
//
// Параметры:
//  ИсточникНастроек - Структура | Фиксированная структура	 - новые настройки, которые нужно добавить к текущим
//
Процедура ДобавитьНастройки(Знач ИсточникНастроек) Экспорт
	Перем НовыеНастройки, элементНастройки;
	
	ПолучитьНастройки();
	
	НовыеНастройки = Новый Структура();
	Для каждого элементНастройки Из Объект.Настройки Цикл
		НовыеНастройки.Вставить(элементНастройки.Ключ, элементНастройки.Значение);
	КонецЦикла;
	
	Если ТипЗнч(ИсточникНастроек) = Тип("Структура") ИЛИ ТипЗнч(ИсточникНастроек) = Тип("ФиксированнаяСтруктура") Тогда
		Для каждого элементНастройки Из ИсточникНастроек Цикл
			НовыеНастройки.Вставить(элементНастройки.Ключ, элементНастройки.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Объект.Настройки = Новый ФиксированнаяСтруктура(НовыеНастройки);

КонецПроцедуры

// Получает значение настройки по указанному имени или пути, а также проверяет,
// имеется ли настройка по указанному пути.
//
// Параметры:
//  ПутьНастроек		 - Строка	 - Путь из ключей настройки разделенных точкой,
//    Например: "Ключ2.Ключ21"
//  ЗначениеНастройки	 - 	Произвольный - найденное значение настройки, если ключа
//    или пути из ключей нет в настройках, то возвращается Неопределено.
// 
// Возвращаемое значение:
//  Булево - признак того, что настройка найдена
//
&НаКлиенте
Функция ЕстьЗначениеНастройки(Знач ПутьНастроек, ЗначениеНастройки) Экспорт
	Перем бЕстьНастройка, мЭлементыПути, стНастройки, элементКоллекции;
	
	ЗначениеНастройки = Неопределено;
	бЕстьНастройка = Ложь;
	
	Если ТипЗнч(ПутьНастроек) <> Тип("Строка") ИЛИ ПустаяСтрока(ПутьНастроек) Тогда
		Возврат бЕстьНастройка;
	КонецЕсли;
	
	мЭлементыПути = СтрРазделить(ПутьНастроек, ".", Ложь);
	Если мЭлементыПути.Количество() = 0 Тогда
		Возврат бЕстьНастройка;
	КонецЕсли;
	
	стНастройки = ПолучитьНастройки();
	
	Пока мЭлементыПути.Количество() > 0 Цикл
		
		элементКоллекции = Неопределено;
		Если НЕ стНастройки.Свойство(мЭлементыПути[0], элементКоллекции) Тогда
			Возврат бЕстьНастройка;
		КонецЕсли;
		
		Если мЭлементыПути.Количество() = 1 Тогда
			ЗначениеНастройки = элементКоллекции;
			бЕстьНастройка = Истина;
			Возврат бЕстьНастройка;
		КонецЕсли;
		
		Если НЕ(ТипЗнч(элементКоллекции) = Тип("Структура") ИЛИ ТипЗнч(элементКоллекции) = Тип("ФиксированнаяСтруктура")) Тогда
			Возврат бЕстьНастройка;
		КонецЕсли;
		
		стНастройки = элементКоллекции;
		мЭлементыПути.Удалить(0);
	КонецЦикла;
	
	Возврат бЕстьНастройка;
КонецФункции

// Процедура - Показать свойства в режиме отладки
//
// Параметры:
//  ПараметрыПараметр	 - 	 -
//  Отступ				 - 	 -
//
&НаКлиенте
Процедура ПоказатьСвойстваВРежимеОтладки(Знач ПараметрыПараметр, Знач Отступ = "") Экспорт
	ТипПараметра = ТипЗнч(ПараметрыПараметр);
	
	Если ТипПараметра = Тип("ФиксированныйМассив") Тогда
		Для Каждого Значение Из ПараметрыПараметр Цикл
			ТипЗнчЗначение = ТипЗнч(Значение);
			Если ТипЗнчЗначение = Тип("ФиксированныйМассив") Или
				ТипЗнчЗначение = Тип("Структура") Или
				ТипЗнчЗначение = Тип("ФиксированнаяСтруктура") Тогда

					КонтекстЯдра.Отладка(СтрШаблон("%1тип %2, количество = <%3>", Отступ, ТипЗнчЗначение, Значение.Количество()));
					ПоказатьСвойстваВРежимеОтладки(Значение, Отступ + "   ");
			Иначе
					КонтекстЯдра.Отладка(Отступ + "Значение = <" + Значение + ">");
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если (ТипПараметра = Тип("Структура") ИЛИ ТипПараметра = Тип("ФиксированнаяСтруктура")) Тогда
			Для Каждого КлючЗначение Из ПараметрыПараметр Цикл
				Значение = КлючЗначение.Значение;
				ТипЗнчЗначение = ТипЗнч(Значение);
				Если ТипЗнчЗначение = Тип("ФиксированныйМассив") Или
					ТипЗнчЗначение = Тип("Структура") Или
					ТипЗнчЗначение = Тип("ФиксированнаяСтруктура") Тогда

						КонтекстЯдра.Отладка(СтрШаблон("%1Ключ <%2>, тип %3, количество = <%4>", Отступ, КлючЗначение.Ключ, ТипЗнчЗначение, Значение.Количество()));
						ПоказатьСвойстваВРежимеОтладки(Значение, Отступ + "   ");
				Иначе
						КонтекстЯдра.Отладка(Отступ + "Ключ <" + КлючЗначение.Ключ + ">, Значение = <" + Значение + ">");
				КонецЕсли;
			КонецЦикла;
		Иначе
			КонтекстЯдра.Отладка(Отступ + "Значение = <" + ТипПараметра + ">");
		КонецЕсли;
	КонецЕсли;
	КонтекстЯдра.Отладка(Отступ + "");

КонецПроцедуры

// } Settings interface
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

// } Settings interface

&НаКлиенте
Функция ДобавитьВНастройкиДанныеИзВложенныхФайловНастроек(Знач Настройки, Знач ИмяКлючаФайлаНастройки,
					Знач КаталогРодительскойНастройки)

	Результат = Новый Структура;
	Для каждого Настройка Из Настройки Цикл
		Значение = Настройка.Значение;
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			ПутьДопФайлаНастроек = Неопределено;
			Если Значение.Свойство(ИмяКлючаФайлаНастройки, ПутьДопФайлаНастроек) Тогда
				Значение = ПрочитатьНастройкиИзФайлаJSon(КаталогРодительскойНастройки + "/" + ПутьДопФайлаНастроек);
			Иначе
				Значение = ДобавитьВНастройкиДанныеИзВложенныхФайловНастроек(Значение, ИмяКлючаФайлаНастройки,
					КаталогРодительскойНастройки);
			КонецЕсли;
		КонецЕсли;

		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = Заменить_workspaceRoot_на_РабочийКаталогПроекта(Значение); // TODO доп.функция, которой нет в названии метода!
		КонецЕсли;

		Результат.Вставить(Настройка.Ключ, Значение);
	КонецЦикла;
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПрочитатьНастройкиИзФайлаJSon(Знач ПутьФайлаНастроек)
	Результат = Новый Структура();
	ФайлНастроек = Новый Файл(ПутьФайлаНастроек);
	ФайлНастроекСуществует = Не ПустаяСтрока(ПутьФайлаНастроек) И
		(КонтекстЯдра.ЕстьПоддержкаАсинхронныхВызовов Или ФайлНастроек.Существует());

	Если ФайлНастроекСуществует Тогда
		Соответствие = ПрочитатьФайлJSON(ПутьФайлаНастроек, Истина);

		Результат = ПреобразоватьСоответствиеВСтруктуру(Соответствие, КоллекцияИсключаемыхКлючей);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПрочитатьФайлJSON(Знач ИмяФайла, Знач ЧитатьВСоответствие = Ложь) //Экспорт
	ФайлСуществующий = Новый Файл(ИмяФайла);

	JsonСтрока = ПрочитатьФайл(ИмяФайла);
	JsonСтрока = УбратьКомментарииИзJsonСтроки(JsonСтрока);

	Результат = Неопределено;
	ЧтениеJSON = Вычислить("Новый ЧтениеJSON");
	ЧтениеJSON.УстановитьСтроку(JsonСтрока);
	Выполнить("Результат = ПрочитатьJSON(ЧтениеJSON, ЧитатьВСоответствие)");

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПрочитатьФайл(Знач ИмяФайла, Знач Кодировка = Неопределено) //Экспорт
	Если Не ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = КодировкаТекста.UTF8;
	КонецЕсли;

	Результат = "";
	Попытка
		Чтение = Новый ЧтениеТекста(ИмяФайла, Кодировка, , , Ложь);
		Результат  = Чтение.Прочитать();
		Чтение.Закрыть();
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		// TODO проверить и исправить на английском интерфейсе
		Если Найти(ИнфоОшибки.Описание, "Неправильный путь к файлу") = 0 Тогда 

			СообщениеОшибки = СтрШаблон_("Не удалось прочитать файл %1
			|
			|Ошибка: %2" + КраткоеПредставлениеОшибки(ИнфоОшибки), ИмяФайла);

			ВызватьИсключение СообщениеОшибки;
		КонецЕсли;
	КонецПопытки;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция УбратьКомментарииИзJsonСтроки(Знач JsonСтрока)
	Результат = Новый ТекстовыйДокумент;
	ПРИЗНАК_КОММЕНТАРИЯ = "//";
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(JsonСтрока);
	Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
		Если Лев(СокрЛП(Строка), 2) = ПРИЗНАК_КОММЕНТАРИЯ Тогда
			Продолжить;
		КонецЕсли;
		Результат.ДобавитьСтроку(Строка);
	КонецЦикла;
	Возврат Результат.ПолучитьТекст();
КонецФункции

&НаКлиенте
Функция ПреобразоватьСоответствиеВСтруктуру(Знач Соответствие, Знач КоллекцияИсключаемыхКлючей)
	Результат = Новый Структура;
	Для каждого КлючЗначение Из Соответствие Цикл
		Если КоллекцияИсключаемыхКлючей.Получить(КлючЗначение.Ключ) = Неопределено Тогда
			Значение = КлючЗначение.Значение;
			Если ТипЗнч(Значение) = Тип("Соответствие") Тогда
				Значение = ПреобразоватьСоответствиеВСтруктуру(Значение, КоллекцияИсключаемыхКлючей);
			КонецЕсли;

			Попытка

				Результат.Вставить(КлючЗначение.Ключ, Значение);

			Исключение
				Инфо = ИнформацияОбОшибке();
				ОписаниеОшибки = "Ошибка загрузки настроек. Неверный ключ
				|" + КлючЗначение.Ключ + "
				|" + ПодробноеПредставлениеОшибки(Инфо);

				КонтекстЯдра.ЗафиксироватьОшибкуВЖурналеРегистрации("Настройки", ОписаниеОшибки);

				КонтекстЯдра.ВывестиСообщение(ОписаниеОшибки, СтатусСообщения.ОченьВажное);

				ВызватьИсключение;

			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СоздатьКоллекцияИсключаемыхКлючей()
	КоллекцияИсключаемыхКлючей = Новый Соответствие;
	КоллекцияИсключаемыхКлючей.Вставить("$schema", "$schema");
КонецПроцедуры

&НаКлиенте
Функция Заменить_workspaceRoot_на_РабочийКаталогПроекта(Знач ИсходнаяСтрока)
	Возврат СтрЗаменить(ИсходнаяСтрока, "$workspaceRoot", КонтекстЯдра.Объект.КаталогПроекта);
КонецФункции

// Универсальная функция для проверки наличия свойств у значения любого типа данных
//
// Параметры:
//   Объект - Любой - Коллекция любого типа, для которой необходимо проверить наличие свойства
//   ИмяСвойства - Строка - имя проверяемого свойства
//
//  Возвращаемое значение:
//   Булево - Истина, если свойство существует
//
&НаКлиенте
Функция ЕстьСвойство(Знач Объект, Знач ИмяСвойства) Экспорт
    НачальноеЗНачение = Новый УникальныйИдентификатор();
    ЗначениеРеквизита = Новый Структура(ИмяСвойства, НачальноеЗНачение);
    ЗаполнитьЗначенияСвойств(ЗначениеРеквизита, Объект);
    Если ЗначениеРеквизита[ИмяСвойства] <> НачальноеЗНачение Тогда
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

Функция СтрШаблон_(Знач СтрокаШаблон, Знач Парам1 = Неопределено, Знач Парам2 = Неопределено, 
		Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено) Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Парам1);
	МассивПараметров.Добавить(Парам2);
	МассивПараметров.Добавить(Парам3);
	МассивПараметров.Добавить(Парам4);
	МассивПараметров.Добавить(Парам5);

	Для Сч = 1 По МассивПараметров.Количество() Цикл
		ТекЗначение = МассивПараметров[Сч-1];
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, "%"+Сч, Строка(ТекЗначение));
	КонецЦикла;

	Возврат СтрокаШаблон;

КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	КонтекстЯдраНаСервере = ВнешниеОбработки.Создать("xddTestRunner");
	Возврат Объект().ОписаниеПлагина(КонтекстЯдраНаСервере, ВозможныеТипыПлагинов);
КонецФункции

#КонецОбласти
