&НаКлиенте
Перем КонтекстЯдра;

&НаКлиенте
Перем Ожидаем;

&НаКлиенте
Перем ЭтоLinux;

&НаКлиенте
Перем КлючиСоСпециальнойОбработкой;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(КонтекстЯдра, ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	КонтекстЯдраНаСервере = ВнешниеОбработки.Создать("xddTestRunner");
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(КонтекстЯдраНаСервере, ВозможныеТипыПлагинов);
КонецФункции

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт

	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux") > 0 Тогда
		ЭтоLinux = Истина;
	КонецЕсли;

	КонтекстЯдра = КонтекстЯдраПараметр;
	ВерсияВБКлиент = КонтекстЯдраПараметр.ПолучитьВерсиюОбработкиКлиент();

	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");

КонецПроцедуры

// } Plugin interface

// { API

// Проверяет, является ли указанное значение простым типом данных.
//
// Параметры:
// 	Значение - Произвольный - Проверяемое значение.
//
// Возвращаемое значение:
//	Булево - Истина, если значение простого типа, иначе Ложь.
//
//&НаКлиентеНаСервереБезКонтекста
&НаКлиенте
Функция ПростойТип(Значение) Экспорт

	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");

	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));

КонецФункции


&НаКлиенте
Функция ПолучитьСтруктуруПараметров(Стр) Экспорт
	Результат = Новый Структура;

	Массив = КонтекстЯдра.РазложитьСтрокуВМассивПодстрокКлиент(Стр, ";");
	Для каждого Элем Из Массив Цикл
		Поз = Найти(Элем, "=");
		Если Поз > 0 Тогда
			Ключ     = Лев(Элем, Поз - 1);
			Значение = Сред(Элем, Поз + 1);
			Попытка
				Результат.Вставить(Ключ, Значение);
			Исключение
				Сообщить("Не смог получить значение из строки запуска: " + Ключ);
			КонецПопытки;
		Иначе
			Если НЕ ПустаяСтрока(Элем) Тогда
				Попытка
					Результат.Вставить(Элем, Истина);
				Исключение
					Сообщить("Не смог получить значение из строки запуска: " + Элем);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначение(СтруктураПараметров, ИмяПараметра) Экспорт
	Если СтруктураПараметров.Свойство(ИмяПараметра) Тогда
		Возврат СтруктураПараметров[ИмяПараметра];
	ИначеЕсли СтруктураПараметров.Свойство(Врег(ИмяПараметра)) Тогда
		Возврат СтруктураПараметров[ВРег(ИмяПараметра)];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройки(КонтекстЯдра) Экспорт

	ОбъектЗагрузки = КонтекстЯдра.Объект;

	РежимСамотестирования = ОбъектЗагрузки.РежимСамотестирования;
	Настройки = НастройкиСервер(ЭтоLinux);

	Для каждого Элемент Из Настройки Цикл

		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;

		Если (Ключ = "ДействиеСброситьКешИзвестныхStepDefinitionСервер"
					Или Ключ = "СброситьКешИзвестныхШагов")
				И Значение Тогда
			КонтекстЯдра.СброситьКешИзвестныхStepDefinition(Неопределено);
			Продолжить;
		КонецЕсли;

		Если Ключ = "ДанныеАллюрМеток" И ТипЗнч(Значение) = Тип("Массив") Тогда
			Для Каждого Элемент Из Значение Цикл
				ЗаполнитьЗначенияСвойств(ОбъектЗагрузки[Ключ].Добавить(), Элемент);
			КонецЦикла;
			Продолжить;
		КонецЕсли;


		Если ОбъектЗагрузки.Свойство(Ключ) Тогда
			ОбъектЗагрузки[Ключ] = Значение;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьВПростойТип(Ключ, Значение)
	Перем Результат;
	Если ПростойТип(Значение) Тогда
		Возврат Значение;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") И Ключ = "ДанныеАллюрМеток" Тогда
		Таблица = Новый Массив;

		Для Каждого Элемент Из Значение Цикл

			СтрокаТаблицы = Новый Структура("РегулярноеВыражение, ИмяМетки, Значение");

			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
			//Для каждого Колонка из Значение.Колонки Цикл
			//	СтрокаТаблицы.Вставить(Колонка.Имя, Элемент[Колонка.Имя]);
			//КонецЦикла;



			Таблица.Добавить(СтрокаТаблицы);

		КонецЦикла;
		Результат = Таблица;
	Иначе
		Результат = Значение;
	КонецЕсли;

	Возврат Результат;

КонецФункции


&НаКлиенте
Процедура СохранитьНастройки(ОбъектВыгрузки) Экспорт

	Если ОбъектВыгрузки.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;

	ИнтерактивныеКлючиНастроек = СоздатьСтруктуруПараметровЗапускаПоФильтру(ЭтоLinux, ТипыЗапуска().Интерактивный);

	Настройки = Новый Структура;
	Для каждого КлючЗначение Из ИнтерактивныеКлючиНастроек Цикл
		Ключ = КлючЗначение.Ключ;

		Настройки.Вставить(Ключ, ПреобразоватьВПростойТип(Ключ, ОбъектВыгрузки[Ключ]));
	КонецЦикла;

	СохранитьНастройкиСервер(Настройки, ПолучитьИДДляОбщегоСохраненияНастроек());

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиВРежимеКоманднойСтроки(ОбъектЯдра, СтруктураДействий) Экспорт

	СтрЗапуска = СокрЛП(ПараметрЗапуска);

	СтруктураПараметров = ПолучитьСтруктуруПараметров(СтрЗапуска);
	ПараметрыЭталон = СоздатьСтруктуруПараметровЗапуска(ЭтоLinux);
	ПеременныеСреды = ПрочитатьПеременныеСреды();

	КаталогПроекта = ПолучитьЗначение(СтруктураПараметров, "workspaceRoot");
	КаталогПроекта = ?(КаталогПроекта = Неопределено, ПолучитьЗначение(ПеременныеСреды, "workspaceRoot"),
		КаталогПроекта);

	Если НЕ ПустаяСтрока(КаталогПроекта) Тогда
		ОбъектЯдра.КаталогПроекта = КаталогПроекта;
	КонецЕсли;

	ПутьКRunSikulix = ПолучитьЗначение(СтруктураПараметров, "runsikulixpath");
	ПутьКRunSikulix = ?(ПутьКRunSikulix = Неопределено, ПолучитьЗначение(ПеременныеСреды, "runsikulixpath"),
		ПутьКRunSikulix);

	Если Не ПустаяСтрока(ПутьКRunSikulix) Тогда
		ОбъектЯдра.ПутьКRunSikulix = ПутьКRunSikulix;
	КонецЕсли;

	АдресПользовательскихНастроек = ПолучитьЗначение(СтруктураПараметров, "usersettingspath");
	АдресПользовательскихНастроек = ?(АдресПользовательскихНастроек = Неопределено,
		ПолучитьЗначение(ПеременныеСреды, "usersettingspath"), АдресПользовательскихНастроек);

	Если Не ПустаяСтрока(АдресПользовательскихНастроек) Тогда
		ОбъектЯдра.АдресПользовательскихНастроек = АдресПользовательскихНастроек;
	КонецЕсли;

	ПоставщикПользовательскихНастроек = ПолучитьЗначение(СтруктураПараметров, "usersettingsprovider");
	ПоставщикПользовательскихНастроек = ?(ПоставщикПользовательскихНастроек = Неопределено,
		ПолучитьЗначение(ПеременныеСреды, "usersettingsprovider"), ПоставщикПользовательскихНастроек);

	Если Не ПустаяСтрока(ПоставщикПользовательскихНастроек) Тогда
		ОбъектЯдра.ПоставщикПользовательскихНастроек = ПоставщикПользовательскихНастроек;
	КонецЕсли;

	StartFeaturePlayer = ПолучитьЗначение(СтруктураПараметров, "StartFeaturePlayer") = Истина
		Или ПолучитьЗначение(ПеременныеСреды, "StartFeaturePlayer") = Истина;
	Если Не StartFeaturePlayer Тогда
		Возврат;
	КонецЕсли;

	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров);

	ОбъектЯдра.ЗапускИзКоманднойСтроки = Истина;
	ОбъектЯдра.СохранятьКонтекстыПередВыполнениемШагов = Ложь;

	VBParams = ПолучитьЗначение(СтруктураПараметров, "VBParams");
	Если VBParams = Неопределено Тогда
		КонтекстЯдра.СделатьСообщение("Не указан JSON-файл с настройками (параметр VBParams). Используются значения параметров по умолчанию для запуска в режиме командной строки.");
		ПараметрыФайла = СоздатьСтруктуруПараметровЗапуска(ЭтоLinux);
	Иначе
		ПараметрыФайла = КонтекстЯдра.ПрочитатьСоответствиеИзJSONФайлаКлиент(VBParams);
		Если ПараметрыФайла = Неопределено Тогда
			КонтекстЯдра.СделатьСообщение("Ошибка чтения структуры JSON пропускаем чтение");
		КонецЕсли;
	КонецЕсли;
	
	ТегиИгнорирования = ПолучитьЗначение(СтруктураПараметров, "TagsIgnore");
	ТегиФильтр        = ПолучитьЗначение(СтруктураПараметров, "TagsFilter");
	Если ТегиИгнорирования <> Неопределено Тогда
		
		ПараметрыФайла.Вставить("СписокТеговИсключение", КонтекстЯдра.РазложитьСтрокуВМассивПодстрокКлиент(ТегиИгнорирования, ","));
		
	КонецЕсли;
	
	Если ТегиФильтр <> Неопределено Тогда
		
		ПараметрыФайла.Вставить("СписокТеговОтбор", КонтекстЯдра.РазложитьСтрокуВМассивПодстрокКлиент(ТегиФильтр, ","));
		
	КонецЕсли;

	СтруктураJSON = ОбъединитьПараметрыСУчетомПриоритета(ПараметрыЭталон, ПеременныеСреды, ПараметрыФайла);

	Если СтруктураJSON = Неопределено Тогда
		КонтекстЯдра.СделатьСообщение("Ошибка чтения структуры JSON.");
		Возврат;
	КонецЕсли;

	ПромСтр = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПолучитьЗначение(СтруктураJSON, "КаталогФич"));
	Если ПромСтр = Неопределено Тогда
		КонтекстЯдра.СделатьСообщение("В параметрах JSON не найден каталог Фич!");
		Возврат;
	КонецЕсли;

	ОбъектЯдра.КаталогФич = ПромСтр;

	ЗагрузитьНастройки(СтруктураJSON, КонтекстЯдра, ОбъектЯдра);

	СтруктураДействий.Вставить("ВыгрузитьPIDTestManager", ПолучитьЗначение(СтруктураJSON, "ВыгрузитьPIDTestManager"));
	СтруктураДействий.Вставить("ИмяФайлаPIDTestManager", ПолучитьЗначение(СтруктураJSON, "ИмяФайлаPIDTestManager"));

	ЗнКаталогПроекта = ПолучитьЗначение(СтруктураJSON, "КаталогПроекта");
	Если ЗначениеЗаполнено(ЗнКаталогПроекта) И Найти(ЗнКаталогПроекта, "$workspaceRoot") = 0 Тогда
		ОбъектЯдра.КаталогПроекта = ЗнКаталогПроекта;
	КонецЕсли;

	//добавим базовые библиотеки, если они не указаны
	Если ОбъектЯдра.КаталогиБиблиотек.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ОбъектЯдра.КаталогИнструментов) Тогда
			ОбъектЯдра.КаталогиБиблиотек.Добавить(ПутьБиблиотекПродукта());
		КонецЕсли;
	КонецЕсли;

	ЗнКлиентыТестирования = ПолучитьЗначение(СтруктураJSON, "КлиентыТестирования");
	Если ЗначениеЗаполнено(ЗнКлиентыТестирования) Тогда
		Для Каждого ПараметрыКлиентаТестирования Из ЗнКлиентыТестирования Цикл
			ИмяКлиентаТестирования = Неопределено;
			Если ТипЗнч(ПараметрыКлиентаТестирования) = Тип("Структура") Тогда
				ПараметрыКлиентаТестирования.Свойство("Имя", ИмяКлиентаТестирования);
			ИначеЕсли ТипЗнч(ПараметрыКлиентаТестирования) = Тип("Соответствие") Тогда
				ИмяКлиентаТестирования = ПараметрыКлиентаТестирования.Получить("Имя");
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ИмяКлиентаТестирования) Тогда
				Продолжить;
			КонецЕсли;

			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Имя", ИмяКлиентаТестирования);

			НайденныеСтроки = КонтекстЯдра.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаДанныеКлиентовТестирования = НайденныеСтроки[0];
			Иначе
				СтрокаДанныеКлиентовТестирования     = КонтекстЯдра.ДанныеКлиентовТестирования.Добавить();
				СтрокаДанныеКлиентовТестирования.Имя = ИмяКлиентаТестирования;
			КонецЕсли;


			СтрокаДанныеКлиентовТестирования.ПутьКИнфобазе          = ПараметрыКлиентаТестирования["ПутьКИнфобазе"];
			СтрокаДанныеКлиентовТестирования.ДопПараметры           = ПараметрыКлиентаТестирования["ДопПараметры"];
			СтрокаДанныеКлиентовТестирования.ТипКлиента             = ПараметрыКлиентаТестирования["ТипКлиента"];
			СтрокаДанныеКлиентовТестирования.ИмяКомпьютера          = ПараметрыКлиентаТестирования["ИмяКомпьютера"];
			СтрокаДанныеКлиентовТестирования.ПортЗапускаТестКлиента =
			ПараметрыКлиентаТестирования["ПортЗапускаТестКлиента"];
			Если (ТипЗнч(ПараметрыКлиентаТестирования) = Тип("Структура")
					И ПараметрыКлиентаТестирования.Свойство("Синоним"))
				ИЛИ ( ТипЗнч(ПараметрыКлиентаТестирования) = Тип("Соответствие")
					И ЗначениеЗаполнено(ПараметрыКлиентаТестирования.Получить("Синоним")))  Тогда
				СтрокаДанныеКлиентовТестирования.Синоним = ПараметрыКлиентаТестирования["Синоним"];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ЗнДанныеАллюрМеток = ПолучитьЗначение(СтруктураJSON, "ДанныеАллюрМеток");
	Если ЗначениеЗаполнено(ЗнДанныеАллюрМеток) Тогда
		ОбъектЯдра.ДанныеАллюрМеток.Очистить();
		Для Каждого СтрокаТаблицы Из ЗнДанныеАллюрМеток Цикл
			ЗаполнитьЗначенияСвойств(
				ОбъектЯдра.ДанныеАллюрМеток.Добавить(),
				СтруктураИзСоответствия(СтрокаТаблицы));
		КонецЦикла;
	КонецЕсли;


	ЗнДополнительныеПараметры = ПолучитьЗначение(СтруктураJSON, "ДополнительныеПараметры");
	Если ЗначениеЗаполнено(ЗнДополнительныеПараметры) Тогда
		Для Каждого Элем Из ЗнДополнительныеПараметры Цикл
			ЗнДополнительныеПараметры.Вставить(Элем.Ключ,
				КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(Элем.Значение));
		КонецЦикла;
		ОбъектЯдра.ДополнительныеПараметры = ЗнДополнительныеПараметры;
	КонецЕсли;

	Попытка
		ЗнТаймаутЗапуска1С = ПолучитьЗначение(СтруктураJSON, "ТаймаутЗапуска1С");
		ТаймаутЗапуска1С = Число(ЗнТаймаутЗапуска1С);
	Исключение
		ТаймаутЗапуска1С = 25;
		Стр = "Не удалось получить таймаут для запуска TestClient из значения " + ЗнТаймаутЗапуска1С
			+ ". Используется значение по умолчанию: 5";
		КонтекстЯдра.СделатьСообщение(Стр);
		ЗаписатьЛогВЖРОшибка("VanessaADD.ЗапускВРежимеКоманднойСтроки", Стр);
	КонецПопытки;
	ОбъектЯдра.ТаймаутЗапуска1С = ТаймаутЗапуска1С;

	//по записи видео - начало

	ЗнЗаписьВидеоСловарьЗамен = ПолучитьЗначение(СтруктураJSON, "ЗаписьВидеоСловарьЗамен");
	Если ЗначениеЗаполнено(ЗнЗаписьВидеоСловарьЗамен) Тогда
		ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Очистить();
		ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Добавить(
			КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнЗаписьВидеоСловарьЗамен));
	КонецЕсли;

	ЗнЗаписьВидеоСловарьЗаменСписок = ПолучитьЗначение(СтруктураJSON, "ЗаписьВидеоСловарьЗаменСписок");
	Если ЗначениеЗаполнено(ЗнЗаписьВидеоСловарьЗаменСписок) Тогда
		Если ТипЗнч(ЗнЗаписьВидеоСловарьЗаменСписок) = Тип("Массив") Тогда
			ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Очистить();
			Для Каждого Элем Из ЗнЗаписьВидеоСловарьЗаменСписок Цикл
				ОбъектЯдра.ЗаписьВидеоСловарьЗамен.Добавить(
					КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(Элем));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	//по записи видео - окончание

	ОбъектЯдра.ИмяТекущейСборки = ПолучитьЗначение(СтруктураJSON, "ИмяСборки");

	//для отчета jUnit
	Если ОбъектЯдра.ДелатьОтчетВФорматеjUnit Тогда

		ОпределилиКаталогjUnit = Ложь;
		ЗнКаталогOutputjUnit   = ПолучитьЗначение(СтруктураJSON, "КаталогOutputjUnit");
		Если ЗначениеЗаполнено(ЗнКаталогOutputjUnit) Тогда
			Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit));
			Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputjUnit") Тогда
				КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
				ФайлПроверкаСуществования = Новый Файл(
					КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputjUnit));
				Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
					Стр = "Не смог создать каталог для отчета jUnit: " + ЗнКаталогOutputjUnit;
					КонтекстЯдра.СделатьСообщение(Стр);
					ЗаписатьЛогВЖРОшибка("VanessaADD.ЗапускВРежимеКоманднойСтроки", Стр);
					Возврат;
				КонецЕсли;

			КонецЕсли;
			ОбъектЯдра.КаталогOutputjUnit       = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(
				ЗнКаталогOutputjUnit);
			ОпределилиКаталогjUnit          = Истина;
		КонецЕсли;

		Если НЕ ОпределилиКаталогjUnit Тогда
			КонтекстЯдра.СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета jUnit!");
			Возврат;
		КонецЕсли;
	КонецЕсли;


	//для отчета CucumberJson
	Если ОбъектЯдра.ДелатьОтчетВФорматеCucumberJson Тогда

		ОпределилиКаталогCucumberJson = Ложь;
		ЗнКаталогOutputCucumberJson   = ПолучитьЗначение(СтруктураJSON, "КаталогOutputCucumberJson");
		Если ЗначениеЗаполнено(ЗнКаталогOutputCucumberJson) Тогда
			Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson));
			Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputCucumberJson") Тогда
				КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
				ФайлПроверкаСуществования = Новый Файл(
					КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputCucumberJson));
				Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя) Тогда
					Стр = "Не смог создать каталог для отчета CucumberJson: " + ЗнКаталогOutputCucumberJson;
					КонтекстЯдра.СделатьСообщение(Стр);
					ЗаписатьЛогВЖРОшибка("VanessaADD.ЗапускВРежимеКоманднойСтроки", Стр);
					Возврат;
				КонецЕсли;

			КонецЕсли;
			ОбъектЯдра.КаталогOutputCucumberJson       = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(
				ЗнКаталогOutputCucumberJson);
			ОпределилиКаталогCucumberJson          = Истина;
		КонецЕсли;

		Если НЕ ОпределилиКаталогCucumberJson Тогда
			КонтекстЯдра.СделатьСообщение(
				"Не смог из переданных параметров JSON определить каталог отчета CucumberJson!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ОпределилиКаталогAllure = Ложь;
	ЗнКаталогOutputAllure = ПолучитьЗначение(СтруктураJSON, "КаталогOutputAllure");
	Если ЗначениеЗаполнено(ЗнКаталогOutputAllure) Тогда
		КонтекстЯдра.УдалитьКаталогКомандаСистемы(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(
			ЗнКаталогOutputAllure));
		Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllure));
		Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "КаталогOutputAllure") Тогда
			КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
		КонецЕсли;
		ОбъектЯдра.КаталогOutputAllure      = ЗнКаталогOutputAllure;
		ОпределилиКаталогAllure         = Истина;
	КонецЕсли;

	ЗнКаталогOutputAllureБазовый = ПолучитьЗначение(СтруктураJSON, "КаталогOutputAllureБазовый");
	Если ЗначениеЗаполнено(ЗнКаталогOutputAllureБазовый) Тогда
		Файл = Новый Файл(КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllureБазовый));
		Если Не КонтекстЯдра.ФайлСуществуетКомандаСистемы(Файл.ПолноеИмя, "ЗнКаталогOutputAllureБазовый1") Тогда
			КонтекстЯдра.СоздатьКаталогКомандаСистемы(Файл.ПолноеИмя);
		КонецЕсли;

		Если ПолучитьЗначение(СтруктураJSON, "СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки") = Истина Тогда
			ЗнКаталогOutputAllureБазовый = КонтекстЯдра.ДополнитьСлешВПуть(
				КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ЗнКаталогOutputAllureБазовый))
				+ ПолучитьЗначение(СтруктураJSON, "ИмяСборки");
			Файл = Новый Файл(ЗнКаталогOutputAllureБазовый);
		КонецЕсли;

		//ОчиститьСодержимоеКаталога(Файл.ПолноеИмя,"*.xml");
		ФайлПроверкаСуществования = Новый Файл(Файл.ПолноеИмя);
		Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя,
				"ЗнКаталогOutputAllureБазовый2") Тогда
			КонтекстЯдра.СоздатьКаталогКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя);
			ФайлПроверкаСуществования = Новый Файл(ФайлПроверкаСуществования.ПолноеИмя);
			Если НЕ КонтекстЯдра.ФайлСуществуетКомандаСистемы(ФайлПроверкаСуществования.ПолноеИмя,
					"ЗнКаталогOutputAllureБазовый3") Тогда
				КонтекстЯдра.СделатьСообщение("Не смог создать каталог для отчета Allure: "
					+ ЗнКаталогOutputAllureБазовый);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		ОбъектЯдра.КаталогOutputAllure      = ЗнКаталогOutputAllureБазовый;
		ОпределилиКаталогAllure         = Истина;
	КонецЕсли;

	Если ОбъектЯдра.ДелатьОтчетВФорматеАллюр Тогда
		Если НЕ ОпределилиКаталогAllure Тогда
			КонтекстЯдра.СделатьСообщение("Не смог из переданных параметров JSON определить каталог отчета Allure!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СтруктураДействий["ВыполнитьСценарии"] = ПолучитьЗначение(СтруктураJSON, "ВыполнитьСценарии");
	СтруктураДействий["ВыполнитьСценарииСТекущегоШага"] = ПолучитьЗначение(СтруктураJSON,
		"ВыполнитьСценарииСТекущегоШага");
	СтруктураДействий["ЗавершитьРаботуСистемы"] = ПолучитьЗначение(СтруктураJSON, "ЗавершитьРаботуСистемы");
	СтруктураДействий["НомерСтрокиДляЗапускаСТекущегоШагаСценария"] = ПолучитьЗначение(СтруктураJSON,
		"НомерСтрокиДляЗапускаСТекущегоШагаСценария");
	СтруктураДействий["ЗагрузитьСценарии"] = ПолучитьЗначение(СтруктураJSON, "ЗагрузитьСценарии");

КонецПроцедуры

// } API

// { Helpers

&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция ЗагрузитьНастройки(Знач СтруктураJSON, Знач КонтекстЯдра, ОбъектЯдра)
	Если СтруктураJSON = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	КоллекцияКомандЗапуска = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);

	Для каждого КлючЗначение Из КоллекцияКомандЗапуска Цикл
		Ключ = КлючЗначение.Ключ;
		ПараметрыКлюча = КлючЗначение.Значение;

		ПредварительноеЗначение = ПолучитьЗначение(СтруктураJSON, Ключ);

		УстановитьЗначениеВОбъектЯдра(Ключ, ПараметрыКлюча, ПредварительноеЗначение, КонтекстЯдра, ОбъектЯдра);
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеВОбъектЯдра(Знач Ключ, Знач ПараметрыКлюча, Знач ПредварительноеЗначение,
		Знач КонтекстЯдра, ОбъектЯдра)
	ЗначениеДляУстановки = Неопределено;

	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиЗаполнено,
		СтрШаблон_("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиЗаполнено
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиИстина,
		СтрШаблон_("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.УстанавливатьЕслиИстина
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.УстанавливатьЕслиЗаполнено И ПараметрыКлюча.УстанавливатьЕслиИстина,
		СтрШаблон_("неверно одновременно стоит ПараметрыКлюча.УстанавливатьЕслиЗаполнено И ПараметрыКлюча.УстанавливатьЕслиИстина
		|- ключ %1", Ключ))
		.ЭтоЛожь();
	Ожидаем.Что(ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть,
		СтрШаблон_("неверно одновременно стоит ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	Если КлючиСоСпециальнойОбработкой().Найти(Ключ) <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	// ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить

	Ожидаем.Что(ПараметрыКлюча.ЭтоМассив
		И (ПараметрыКлюча.УстанавливатьЕслиЗаполнено
			Или ПараметрыКлюча.ПростоУстановить
			Или ПараметрыКлюча.УстанавливатьЕслиИстина ),
			// Или ПараметрыКлюча.ПреобразоватьПуть),
		СтрШаблон_("неверно одновременно стоит ЭтоМассив и другой ключ установки
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	РазрешаюшийКлюч = ПараметрыКлюча.РазрешаюшийКлюч;
	Если ЗначениеЗаполнено(РазрешаюшийКлюч)
		И Не ОбъектЯдра[РазрешаюшийКлюч] Тогда

		Возврат;
	КонецЕсли;

	Если ПараметрыКлюча.ПреобразоватьПуть И НЕ ПараметрыКлюча.ЭтоМассив Тогда
		ПредварительноеЗначение = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(ПредварительноеЗначение);
	КонецЕсли;

	Ожидаем.Что(НЕ ПараметрыКлюча.ЭтоМассив
			И НЕ ПараметрыКлюча.УстанавливатьЕслиЗаполнено
			И НЕ ПараметрыКлюча.ПростоУстановить
			И НЕ ПараметрыКлюча.УстанавливатьЕслиИстина
			И НЕ ПараметрыКлюча.ПреобразоватьПуть,
		СтрШаблон_("не задан ни один из флагов установки
		|- ключ %1", Ключ))
		.ЭтоЛожь();

	Если ПараметрыКлюча.УстанавливатьЕслиЗаполнено Тогда
		Если ЗначениеЗаполнено(ПредварительноеЗначение) Тогда
			ЗначениеДляУстановки = ПредварительноеЗначение;
		КонецЕсли;

	ИначеЕсли ПараметрыКлюча.ПростоУстановить Тогда
		ЗначениеДляУстановки = ПредварительноеЗначение;

	ИначеЕсли ПараметрыКлюча.УстанавливатьЕслиИстина Тогда
		Если ПредварительноеЗначение = Истина Тогда
			ЗначениеДляУстановки = ПредварительноеЗначение;
		КонецЕсли;

	ИначеЕсли ПараметрыКлюча.ЭтоМассив Тогда
		ОбъектЯдра[Ключ].Очистить();
		Если ТипЗнч(ПредварительноеЗначение) = Тип("Массив") Тогда
			Если ПараметрыКлюча.ПреобразоватьПуть Тогда
				Для Ккк = 0 По ПредварительноеЗначение.Количество() - 1 Цикл
					ПредварительноеЗначение[Ккк] = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(
						ПредварительноеЗначение[Ккк]);
				КонецЦикла;
			КонецЕсли;
			ОбъектЯдра[Ключ].ЗагрузитьЗначения(ПредварительноеЗначение);
		КонецЕсли;

	ИначеЕсли Не ПараметрыКлюча.ПростоУстановить И ПараметрыКлюча.ПреобразоватьПуть Тогда
		ЗначениеДляУстановки = ПредварительноеЗначение;

	Иначе
		ПредварительноеЗначение = Неопределено;
	КонецЕсли;

	Если ЗначениеДляУстановки <> Неопределено Тогда
		ОбъектЯдра[Ключ] = ЗначениеДляУстановки;
	КонецЕсли;
КонецПроцедуры

Функция НастройкиИзОбъектаЯдра(ОбъектЯдра, ЭтоLinux)
	КоллекцияПараметров = СоздатьСтруктуруПараметровЗапуска(ЭтоLinux);

	Рез = Новый Структура;

	Для каждого КлючЗначение Из КоллекцияПараметров Цикл
		Ключ = КлючЗначение.Ключ;
		Рез.Вставить(Ключ, ОбъектЯдра[Ключ]);
	КонецЦикла;

	Возврат Рез;
КонецФункции

&НаКлиенте
Функция КлючиСоСпециальнойОбработкой()

	Если Не ЗначениеЗаполнено(КлючиСоСпециальнойОбработкой) Тогда
		Рез = Новый Массив;

		Рез.Добавить("StartFeaturePlayer" );
		Рез.Добавить("КаталогФич" );
		Рез.Добавить("КаталогПроекта");

		Рез.Добавить("ВыгрузитьPIDTestManager");
		Рез.Добавить("ИмяФайлаPIDTestManager");

		Рез.Добавить("КаталогOutputAllure" );
		Рез.Добавить("КаталогOutputAllureБазовый");
		Рез.Добавить("КаталогOutputjUnit" );
		Рез.Добавить("КаталогOutputCucumberJson" );
		Рез.Добавить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки" );
		Рез.Добавить("ВыполнитьСценарии" );
		Рез.Добавить("ВыполнитьСценарииСТекущегоШага" );
		Рез.Добавить("НомерСтрокиДляЗапускаСТекущегоШагаСценария" );
		Рез.Добавить("ЗагрузитьСценарии" );
		Рез.Добавить("ЗавершитьРаботуСистемы" );
		Рез.Добавить("ИмяСборки" );
		Рез.Добавить("ЗаписьВидеоСловарьЗамен" );
		Рез.Добавить("ЗаписьВидеоСловарьЗаменСписок");
		Рез.Добавить("ДополнительныеПараметры");
		Рез.Добавить("КлиентыТестирования");
		Рез.Добавить("ДанныеАллюрМеток");
		Рез.Добавить("ТаймаутЗапуска1С");

		КлючиСоСпециальнойОбработкой = Новый ФиксированныйМассив(Рез);
	КонецЕсли;

	Возврат КлючиСоСпециальнойОбработкой;
КонецФункции

&НаСервере
Функция ПолучитьИДДляОбщегоСохраненияНастроек()
	Стр = "VanessaADDUF";
	Если РежимСамотестирования Тогда
		Стр = "VanessaADDUF_autotest";
	КонецЕсли;
	Возврат Стр;

КонецФункции

&НаСервере
Процедура СкопироватьЗначениеСтруктуры(Знач ИмяКлюча, Знач Источник, Знач Приемник, Знач ИмяКлючаВПриемнике = "")

	Если Не ЗначениеЗаполнено(ИмяКлючаВПриемнике) Тогда
		ИмяКлючаВПриемнике = ИмяКлюча;
	КонецЕсли;
	Значение = Неопределено;
	Если Источник.Свойство(ИмяКлюча, Значение) Тогда
		Приемник.Вставить(ИмяКлючаВПриемнике, Значение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НастройкиСервер(ЭтоLinux)
	Перем НастройкиРезультат;

	НастройкиРезультат = Новый Структура;
	НадоСохранитьНастройки = Ложь;

	Настройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьИДДляОбщегоСохраненияНастроек());
	Успешно = ТипЗнч(Настройки) = Тип("Структура");
	Если Не Успешно И Не РежимСамотестирования Тогда
		Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBehaviorUF");
	КонецЕсли;

	Если ТипЗнч(Настройки) = Тип("Структура") Тогда

		ИнтерактивныеКлючиНастроек = СоздатьСтруктуруПараметровЗапускаПоФильтру(ЭтоLinux, ТипыЗапуска().Интерактивный);

		Для каждого КлючЗначение Из ИнтерактивныеКлючиНастроек Цикл
			Ключ = КлючЗначение.Ключ;
			Описание = КлючЗначение.Значение;

			КлючВНастройках = Неопределено;
			Если Не Описание.Свойство("КлючВНастройкахДляСовместимости", КлючВНастройках)
					Или Не Настройки.Свойство(КлючВНастройках) Тогда

				КлючВНастройках = Ключ;
			КонецЕсли;
			//если в ADD добавили новый ключ, который еще не сохранялся в настройках, или для ключа есть спец.указание
			ЭтоНовыйКлючПродукта = Не Настройки.Свойство(Ключ);
			Если ЭтоНовыйКлючПродукта
					Или (
						Описание.Свойство("ЗаполнятьПоУмолчаниюВместоПустойНастройки")
						И Не ЗначениеЗаполнено(Настройки[Ключ])
					) Тогда

				Настройки.Вставить(Ключ, Описание.ПоУмолчанию);

				НадоСохранитьНастройки = Истина;
			КонецЕсли;

			СкопироватьЗначениеСтруктуры(КлючВНастройках, Настройки, НастройкиРезультат, Ключ);
		КонецЦикла;

		ВерсияVanessaADD = Неопределено;
		НастройкиРезультат.Свойство("ВерсияVanessaADD", ВерсияVanessaADD);
		ВерсияVB = Неопределено;
		НастройкиРезультат.Свойство("ВерсияVB", ВерсияVB); //для совместимости
		Если НЕ ЗначениеЗаполнено(ВерсияVanessaADD) И НЕ ЗначениеЗаполнено(ВерсияVB) Тогда
			НастройкиРезультат.Вставить("ВерсияVanessaADD", ВерсияВБКлиент);
			НастройкиРезультат.Вставить("ДействиеСброситьКешИзвестныхStepDefinitionСервер", Истина);

			НадоСохранитьНастройки = Истина;
		КонецЕсли;

	Иначе	//значит это первый запуск VB
		НастройкиРезультат = СоздатьСтруктуруПараметровЗапуска(ЭтоLinux);

	КонецЕсли;

	Если НадоСохранитьНастройки Тогда
		СохранитьНастройкиСервер(НастройкиРезультат, ПолучитьИДДляОбщегоСохраненияНастроек());
	КонецЕсли;

	Возврат Новый ФиксированнаяСтруктура(НастройкиРезультат);

КонецФункции

// { Настройки из файла json, переменных окружения.
&НаКлиенте
Функция ПрочитатьПеременныеСреды()
	СоответствиеПеременныхПути = Новый Соответствие;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
        Если ЭтоLinux Тогда
            КомандаСистемы("sh -c 'env > " + ИмяВременногоФайла + "'");
        Иначе
            КонтекстЯдра.ВыполнитьКомандуОСБезПоказаЧерногоОкна("set > """ + ИмяВременногоФайла + """");
        КонецЕсли;
    Исключение
        Сообщить("ПрочитатьПеременныеСреды:" + ОписаниеОшибки());
    КонецПопытки;

	Попытка
		Чтение = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
		Стр = Чтение.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл
			//Найдем ключ и значение
			Индекс = Найти(Стр, "=");
			Если Индекс > 0 Тогда
				Ключ = Нрег(Лев(Стр, Индекс - 1));
				Если ВРег(Лев(Ключ, 8)) = "VANESSA_" Тогда
					Ключ = Сред(Ключ, 9);
					Значение = Сред(Стр, Индекс + 1);
					СоответствиеПеременныхПути.Вставить(Ключ, Значение);
				КонецЕсли;
			КонецЕсли;
			Стр = Чтение.ПрочитатьСтроку();
		КонецЦикла;
	Исключение
	КонецПопытки;

	КоллекцияКоммандЗапуска = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);
	СтруктураПараметров = Новый Структура;
	Для каждого ЭлементСтруктуры Из КоллекцияКоммандЗапуска Цикл
		Для каждого ЭлементПеременных Из СоответствиеПеременныхПути Цикл
			Попытка
				Если НайтиКоманду(ЭлементСтруктуры.Значение, ЭлементПеременных.Ключ) Тогда
					СтруктураПараметров.Вставить(ЭлементСтруктуры.Ключ, ЭлементПеременных.Значение);
					Прервать;
				КонецЕсли;
			Исключение
				ИнфоОшибки = ИнформацияОбОшибке();
				Сообщить("Ошибка команды " + ЭлементСтруктуры.Ключ + " для поиска в переменной среды "
					+ ЭлементПеременных.Ключ);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	Возврат СтруктураПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьСтруктуруПараметровЗапуска(Знач ЭтоLinux, Знач ТипЗапуска = Неопределено)
	Коллекция = СоздатьСтруктуруПараметровЗапускаПоФильтру(ЭтоLinux, ТипЗапуска);

	Рез = Новый Структура;
	Для каждого КлючЗначение Из Коллекция Цикл

		Описание = КлючЗначение.Значение;
		Рез.Вставить(КлючЗначение.Ключ, Описание.ПоУмолчанию);

	КонецЦикла;

	Возврат Рез;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьСтруктуруПараметровЗапускаПоФильтру(Знач ЭтоLinux, Знач ТипЗапуска = Неопределено)
	Коллекция = СоздатьОбщуюКоллекциюКомандЗапуска(ЭтоLinux);

	ТипыЗапуска = ТипыЗапуска();

	Рез = Новый Структура;
	Для каждого КлючЗначение Из Коллекция Цикл

		Описание = КлючЗначение.Значение;

		Если ТипЗапуска = Неопределено Или Описание.ТипЗапуска = ТипЗапуска
				Или Описание.ТипЗапуска = ТипыЗапуска.ВсеВиды Тогда

			Рез.Вставить(КлючЗначение.Ключ, Описание);

		КонецЕсли;

	КонецЦикла;

	Возврат Рез;
КонецФункции

// Создать общую коллекцию команд запуска
//
// Создается коллекция параметров, где ключом выступает имя параметра, а значение - это специальная структура-описатель ключа
// в которой есть обязательные и необязательные ключи
//	Обязательные ключи "Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч"
// 	Необязательные ключи "ЗаполнятьПоУмолчаниюВместоПустойНастройки, КлючВНастройкахДляСовместимости"
//
// Параметры:
//  ЭтоLinux - Булево - признак операционной системы для указания команд выполнения некоторых программ
//
// Возвращаемое значение:
//  Структура - коллекция параметров, где ключом выступает имя параметра, а значение - это специальная структура-описатель ключа
//
&НаКлиентеНаСервереБезКонтекста
Функция СоздатьОбщуюКоллекциюКомандЗапуска(Знач ЭтоLinux)

	Рез = Новый Структура;
	ТипыЗапуска = ТипыЗапуска();


	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"StartFeaturePlayer", "startfeatureplayer", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("StartFeaturePlayer", Описание);


	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогФич", "featurepath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогФич", Описание);

	СписокКаталогиБиблиотекПоУмолчанию = Новый СписокЗначений;
	СписокКаталогиБиблиотекПоУмолчанию.Добавить(ПутьБиблиотекПродукта());


	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогиБиблиотек", "librarycatalogs", СписокКаталогиБиблиотекПоУмолчанию, Ложь, Истина, Ложь, Истина, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Описание.Вставить("ЗаполнятьПоУмолчаниюВместоПустойНастройки", Истина);
	Рез.Вставить("КаталогиБиблиотек", Описание);

	СписокТеговИсключениеПоУмолчанию = Новый СписокЗначений;
	СписокТеговИсключениеПоУмолчанию.Добавить("IgnoreOnCIMainBuild");


	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СписокТеговИсключение", "ignoretags", СписокТеговИсключениеПоУмолчанию, Ложь, Истина, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("СписокТеговИсключение", Описание);


	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СписокТеговОтбор", "filtertags", Новый СписокЗначений, Ложь, Истина, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("СписокТеговОтбор", Описание);
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СписокСценариевДляВыполнения", "scenariofilter", Новый СписокЗначений, Ложь, Истина, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("СписокСценариевДляВыполнения", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ВыгрузитьPIDTestManager", "returnpidoftestmanager", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ВыгрузитьPIDTestManager", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ИмяФайлаPIDTestManager", "filenamepidtestmanager", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ИмяФайлаPIDTestManager", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ИмяФайлаВнешнихКомандФреймворка", "fileofcommand", "", Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ИмяФайлаВнешнихКомандФреймворка", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ПриравниватьPendingКFailed", "pendingequalfailed", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ПриравниватьPendingКFailed", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ОстановкаПриВозникновенииОшибки", "stoponerror", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ОстановкаПриВозникновенииОшибки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДелатьСообщенияТранслитом", "translatemassage", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ДелатьСообщенияТранслитом", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СоздаватьИнструкциюHTML", "htmlcreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("СоздаватьИнструкциюHTML", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СоздаватьИнструкциюMarkdown", "markdowncreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("СоздаватьИнструкциюMarkdown", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СоздаватьИнструкциюВидео", "videcreate", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("СоздаватьИнструкциюВидео", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДелатьЛогВыполненияСценариевВЖР", "logtogr", Истина, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДелатьЛогВыполненияСценариевВЖР", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДелатьЛогВыполненияСценариевВТекстовыйФайл", "logtotext", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДелатьЛогВыполненияСценариевВТекстовыйФайл", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ИмяФайлаЛогВыполненияСценариев", "textlogname", "", Ложь, Ложь, Ложь, Истина, Ложь, "ДелатьЛогВыполненияСценариевВТекстовыйФайл");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ИмяФайлаЛогВыполненияСценариев", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗакрытьTestClientПослеЗапускаСценариев", "closetestclient", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ЗакрытьTestClientПослеЗапускаСценариев", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогOutputИнструкцияHTML", "htmlpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюHTML");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогOutputИнструкцияHTML", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогOutputИнструкцияMarkdown", "markdownpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюMarkdown");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогOutputИнструкцияMarkdown", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогOutputИнструкцияВидео", "videopath", "", Ложь, Ложь, Ложь, Истина, Ложь, "СоздаватьИнструкциюВидео");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогOutputИнструкцияВидео", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДелатьОтчетВоВнутреннемФормате", "simplereport", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДелатьОтчетВоВнутреннемФормате", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДелатьОтчетВФорматеАллюр", "allurecreatereport", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДелатьОтчетВФорматеАллюр", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ОтображатьОтчетAllureВБраузере", "allureautoshow", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ОтображатьОтчетAllureВБраузере", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогИнструментов", "instrpath", "", Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("КаталогИнструментов", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогПроекта", "projectpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогПроекта", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогOutputAllure", "allurepath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогOutputAllure", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогOutputAllureБазовый", "allurepathbase", "", Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("КаталогOutputAllureБазовый", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДелатьОтчетВФорматеjUnit", "junitcreatereport", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДелатьОтчетВФорматеjUnit", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогOutputjUnit", "junitpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "ДелатьОтчетВФорматеjUnit");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогOutputjUnit", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДелатьОтчетВФорматеCucumberJson", "cucumbercreatereport", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДелатьОтчетВФорматеCucumberJson", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогOutputCucumberJson", "cucumberreportpath", "", Ложь, Ложь, Ложь, Ложь, Ложь, "ДелатьОтчетВФорматеCucumberJson");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогOutputCucumberJson", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДобавлятьКИмениСценарияУсловияВыгрузки", "addtofeaturefilter", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ДобавлятьКИмениСценарияУсловияВыгрузки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", "createsubfolderforbuild", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ВыгружатьСтатусВыполненияСценариевВФайл", "createlogs", Истина, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ВыгружатьСтатусВыполненияСценариевВФайл", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", "logpath", "$workspaceRoot/build/buildstatus.log", Истина, Ложь, Ложь, Истина, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ВыполнитьСценарии", "vanessarun", Истина, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ВыполнитьСценарии", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ВыполнитьСценарии", "vanessarunfromthisstep", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ВыполнитьСценарииСТекущегоШага", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"НомерСтрокиДляЗапускаСТекущегоШагаСценария", "stepnumber", "", Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗагрузитьСценарии", "loadscenarios", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ЗагрузитьСценарии", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗавершитьРаботуСистемы", "vanessashutdown", Истина, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ЗавершитьРаботуСистемы", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ИмяСборки", "buildname", "", Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ИмяСборки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДелатьСкриншотПриВозникновенииОшибки", "onerrorscreenshot", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДелатьСкриншотПриВозникновенииОшибки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СниматьСкриншотКаждогоОкна1С", "onerrorscreenshoteverywindow", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("СниматьСкриншотКаждогоОкна1С", Описание);

	Если ЭтоLinux Тогда
		СтрокаКомандаСделатьСкриншот = "import -window root ";
	Иначе
		СтрокаКомандаСделатьСкриншот = """C:\Program Files (x86)\IrfanView\i_view32.exe"" /capture=1 /convert=";
	КонецЕсли;


	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КомандаСделатьСкриншот", "commandscreenshot", СтрокаКомандаСделатьСкриншот, Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КомандаСделатьСкриншот", Описание);


	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КаталогOutputСкриншоты", "outputscreenshot", "", Истина, Ложь, Ложь, Истина, Ложь, "ДелатьСкриншотПриВозникновенииОшибки");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КаталогOutputСкриншоты", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗапускатьТестКлиентВРежимеОтладки", "testclientdebug", Ложь, Ложь, Ложь, Истина, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗапускатьТестКлиентВРежимеОтладки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КлючиОтладки", "testclientdebugkeys", "", Ложь, Ложь, Ложь, Ложь, Истина, "ЗапускатьТестКлиентВРежимеОтладки");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("КлючиОтладки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"АдресОтладчика", "testclientdebugaddress", "", Ложь, Ложь, Ложь, Ложь, Истина, "ЗапускатьТестКлиентВРежимеОтладки");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("АдресОтладчика", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ВыполнятьШагиАссинхронно", "makestepsasync", Ложь, Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ВыполнятьШагиАссинхронно", Описание);

	КомандаНачалаЗаписиВидео = """C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"" screen://  -I rc --rc-quiet --rc-host=127.0.0.1:8082 --nommx :screen-mouse-image=""<screenmouseimage>"" :screen-fps=<fps> :screen-width=<screenwidth> :screen-height=<screenheight> :screen-top=0 :screen-left=0 :screen-caching=100 :sout=#transcode{vcodec=mp4v,vb=400,fps=<fps>,scale=1,width=<screenwidth>,height=<screenheight>,acodec=none}:duplicate{dst=std{access=file,mux=mp4,dst=<dst>}}";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоКомандаНачатьЗаписьВидео", "commandrecvideo", КомандаНачалаЗаписиВидео, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоКомандаНачатьЗаписьВидео", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоФайлКурсораМышки", "mousecurfile", "", Ложь, Ложь, Ложь, Истина, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоФайлКурсораМышки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоКаталогДляВременныхФайлов", "tempfolderforvideo", "", Ложь, Ложь, Ложь, Истина, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоКаталогДляВременныхФайлов", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоФайлВодянойЗнак", "watermarkfile", "", Ложь, Ложь, Ложь, Истина, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоФайлВодянойЗнак", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоКомандаFfmpeg", "ffmpegcommand", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоКомандаFfmpeg", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоКомандаConvert", "convertcommand", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоКомандаConvert", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоКаталогМузыки", "musicpath", "", Ложь, Ложь, Ложь, Истина, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоКаталогМузыки", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоДелатьНаложениеTTS", "dotts", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоДелатьНаложениеTTS", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоПутьКДвижкуTTS", "audioenginetts", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоПутьКДвижкуTTS", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоИмяTTS", "ttsvoice", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоИмяTTS", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоСловарьЗамен", "changewordslib", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоСловарьЗамен", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоСловарьЗаменСписок", "changewordsliblist", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ЗаписьВидеоСловарьЗаменСписок", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоЭкранШирина", "screenwidth", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоЭкранШирина", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоЭкранВысота", "screenheight", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоЭкранВысота", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоКоличествоКадров", "fps", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоКоличествоКадров", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", "showframe", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоПодсвечиватьАктивныеЭлементыФорм", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", "movemouse", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗаписьВидеоПеремещатьКурсорМышкиКАктивномуЭлементуФормы", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ВерсияПлатформыДляГенерацииEPF", "platformversiongenerateepf", "", Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ВерсияПлатформыДляГенерацииEPF", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДополнительныеПараметры", "dopparams", Новый Структура, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДополнительныеПараметры", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"КлиентыТестирования", "testclienttable", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("КлиентыТестирования", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДанныеАллюрМеток", "allurelabelstable", Новый Массив, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДанныеАллюрМеток", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ТаймаутЗапуска1С", "testclienttimeout", 25, Ложь, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ТаймаутЗапуска1С", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ДиапазонПортовTestclient", "testclientports", "", Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ДиапазонПортовTestclient", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"СоздаватьОбластиПриГенерацииКода", "generateareaforsteps", Истина, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("СоздаватьОбластиПриГенерацииКода", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ГенерироватьУФ", "ufgenerate", Истина, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ГенерироватьУФ", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЗагрузкаФичПриОткрытии", "loadfeaturesforopen", "Загружать", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ЗагрузкаФичПриОткрытии", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ТаймаутДляАсинхронныхШагов", "timeoutforasynchronoussteps", 0, Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Авто);
	Рез.Вставить("ТаймаутДляАсинхронныхШагов", Описание);

	Ключ = "DebugLog";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	Ключ, Ключ, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);

	Рез.Вставить(Ключ, Описание);

	Ключ = "текЗначениеОперации";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "currentvalueofoperation", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "gencommentcodefordoubleusedprocedures", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "ПодключитьВнешниеОбработкиДляОтладки";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "СохранятьКонтекстыПередВыполнениемШагов";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "ВыводитьТекстМодуляВместоПерегенерацииEPF";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "ИнтервалВыполненияШагаЗаданныйПользователем";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "stepexecperiodfromuser", 0.1, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "СгенерированныйXML";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "generatedxml", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "СгенерированныйКод";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "generatedcode", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "СгенерированныйСценарий";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "generatedstory", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "СгенерированныйСценарийКод";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "generatedcodeofstory", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Ключ = "ВерсияVanessaADD";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "frameworkversion", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Рез.Вставить(Ключ, Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	"ЯзыкГенератораGherkin", "mainlanguage", "ru", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Описание.Вставить("КлючВНастройкахДляСовместимости", "ОсновнойЯзык");

	Рез.Вставить("ЯзыкГенератораGherkin", Описание);

	Если ЭтоLinux Тогда
		КоманднаяСтрокаРедактированияФичи = "sh -c 'code -g %FeatureFile%:%FeatureLine%'";
	Иначе
		КоманднаяСтрокаРедактированияФичи = "cmd /c code -g %FeatureFile%:%FeatureLine%";
	КонецЕсли;

	Ключ = "КоманднаяСтрокаРедактированияФичи";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	    Ключ, "CmdLineForFeatureEdit", КоманднаяСтрокаРедактированияФичи, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.Интерактивный);
	Описание.Вставить("ЗаполнятьПоУмолчаниюВместоПустойНастройки", Истина);
	Рез.Вставить(Ключ, Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
		"ПутьКRunSikulix", "runsikulixpath",
		"C:\Program Files (x86)\Java\jre6\bin\java.exe"" -Xms64M -Xmx512M -Dfile.encoding=UTF-8 -Dpython.path=""C:\Program Files (x86)\Sikuli X\sikuli-script.jar/"" -jar ""C:\Program Files (x86)\Sikuli X\sikuli-ide.jar",
		Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ПутьКRunSikulix", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
		"usersettingspath", "usersettingspath", "", Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("АдресПользовательскихНастроек", Описание);

	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
		"usersettingsprovider", "usersettingsprovider", "", Истина, Ложь, Ложь, Ложь, Ложь, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить("ПоставщикПользовательскихНастроек", Описание);

	Ключ = "ВыводитьВЛогВыполнениеШагов";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	Ключ, "ShowStepsExecutionInLog", Ложь, Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить(Ключ, Описание);

	Ключ = "КаталогВнешнихОбработокEDT";
	Описание = Новый Структура("Р, А, ПоУмолчанию, УстанавливатьЕслиЗаполнено, ЭтоМассив, УстанавливатьЕслиИстина, ПреобразоватьПуть, ПростоУстановить, РазрешаюшийКлюч",
	Ключ, "ExternalProcessingCatalogEDT", "", Ложь, Ложь, Ложь, Ложь, Истина, "");
	Описание.Вставить("ТипЗапуска", ТипыЗапуска.ВсеВиды);
	Рез.Вставить(Ключ, Описание);

	Возврат Рез;
КонецФункции

&НаКлиенте
Функция НайтиКоманду(КоллекцияКоманды, КомандаЗапускаНРег)
	Если ТипЗнч(КоллекцияКоманды) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из КоллекцияКоманды Цикл
			Если НРег(КлючЗначение.Значение) = НРег(КомандаЗапускаНРег) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ОбъединитьПараметрыСУчетомПриоритета(ПараметрыЭталон, ПараметрыПриоритет, Параметры)
	СтруктутраПараметров = Новый Структура;
	Для каждого ключЗначение Из ПараметрыЭталон Цикл
		Значение = Неопределено;
		Если ТипЗнч(ПараметрыПриоритет) = Тип("Соответствие") Тогда
			Если ПараметрыПриоритет.Получить(ключЗначение.Ключ) <> Неопределено Тогда
				Значение = ПараметрыПриоритет.Получить(ключЗначение.Ключ);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыПриоритет) = Тип("Структура") Тогда
			ПараметрыПриоритет.Свойство(ключЗначение.Ключ, Значение);
		КонецЕсли;

		Если Значение = Неопределено Тогда
			Если ТипЗнч(Параметры) = Тип("Соответствие") Тогда
				ЗначениеИзСоответствия = Параметры.Получить(ключЗначение.Ключ);
				Если ЗначениеИзСоответствия <> Неопределено Тогда
					Значение = ЗначениеИзСоответствия;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Параметры) = Тип("Структура") Тогда
				Параметры.Свойство(ключЗначение.Ключ, Значение);
			КонецЕсли;
		КонецЕсли;

		ключЗначениеЗначение = Неопределено;
		Если Значение <> Неопределено Тогда
			Если ТипЗнч(ключЗначение.Значение) = Тип("Булево") Тогда
				Если ТипЗнч(Значение) = Тип("Булево") Тогда
					ключЗначениеЗначение = Значение;
				ИначеЕсли НРег(Значение) = "истина" Тогда
					ключЗначениеЗначение = Истина;
				ИначеЕсли НРег(Значение) = "ложь" Тогда
					ключЗначениеЗначение = Ложь;
				ИначеЕсли Значение = "1" Тогда
					ключЗначениеЗначение = Истина;
				ИначеЕсли Значение = "0" Тогда
					ключЗначениеЗначение = Ложь;
				ИначеЕсли НРег(Значение) = "true" Тогда
					ключЗначениеЗначение = Истина;
				ИначеЕсли НРег(Значение) = "false" Тогда
					ключЗначениеЗначение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
				ключЗначениеЗначение = Значение;
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
				ключЗначениеЗначение = Значение;
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Массив") Тогда
				МассивПараметров = Новый Массив;
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					МассивПараметров = КонтекстЯдра.РазложитьСтрокуВМассивПодстрокКлиент(Значение, ",");
				ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
					МассивПараметров = Значение;
				КонецЕсли;
				ключЗначениеЗначение = МассивПараметров;
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Строка") Тогда
				ключЗначениеЗначение = Строка(Значение);
			ИначеЕсли ТипЗнч(ключЗначение.Значение) = Тип("Число") Тогда
				ключЗначениеЗначение = Число(Значение);
			КонецЕсли;
		КонецЕсли;
		СтруктутраПараметров.Вставить(ключЗначение.Ключ,
			?(ключЗначениеЗначение = Неопределено, ключЗначение.Значение, ключЗначениеЗначение));
	КонецЦикла;

	Возврат СтруктутраПараметров;

КонецФункции

&НаКлиенте
Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров)
	МассивКлючей = Новый Массив;

	Для каждого ПараметрСборки Из СтруктураПараметров Цикл

		Если Лев(ПараметрСборки.Значение, 1) = "." Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		ИначеЕсли Найти(ПараметрСборки.Значение, "$workspaceRoot") > 0
				ИЛИ Найти(ПараметрСборки.Значение, "$instrumentsRoot") > 0 Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;
	КонецЦикла;

	Для каждого Ключ Из МассивКлючей Цикл
		Было  = СтруктураПараметров[Ключ];
		Стало = КонтекстЯдра.ПреобразоватьПутьСТочкамиКНормальномуПути(СтруктураПараметров[Ключ]);

		СтруктураПараметров.Вставить(Ключ, Стало);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЛогВЖРОшибка(ИмяСобытия, Стр)
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Стр);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиСервер(СтруктураНастроек, ИДОбщегоСохраненияНастроек)

	ХранилищеОбщихНастроек.Сохранить(ИДОбщегоСохраненияНастроек, , СтруктураНастроек);

КонецПроцедуры

// } Настройки из файла json, переменных окружения.

&НаКлиентеНаСервереБезКонтекста
Функция ТипыЗапуска()
	Результат = Новый Структура;
	Результат.Вставить("Интерактивный", "Интерактивный запуск");
	Результат.Вставить("Авто", "Автоматический запуск из командной строки");
	Результат.Вставить("ВсеВиды", "Интерактивный запуск и запуск из командной строки");
	Результат = Новый ФиксированнаяСтруктура(Результат);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураИзСоответствия(Знач Данные)

	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Возврат Данные;
	КонецЕсли;

	Результат = Новый Структура;

	Если ТипЗнч(Данные) = Тип("Соответствие") Тогда
		Для Каждого КлючИЗначение Из Данные Цикл
			Если ТипЗнч(КлючИЗначение.Ключ) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// } Helpers

&НаКлиенте
Функция СтрШаблон_(Знач СтрокаШаблон, Знач Парам1 = Неопределено, Знач Парам2 = Неопределено,
	Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено) Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Парам1);
	МассивПараметров.Добавить(Парам2);
	МассивПараметров.Добавить(Парам3);
	МассивПараметров.Добавить(Парам4);
	МассивПараметров.Добавить(Парам5);

	Для Сч = 1 По МассивПараметров.Количество() Цикл
		ТекЗначение = МассивПараметров[Сч - 1];
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, "%" +Сч, Строка(ТекЗначение));
	КонецЦикла;

	Возврат СтрокаШаблон;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПутьБиблиотекПродукта()
	 Возврат "$instrumentsRoot/features/libraries";
КонецФункции
