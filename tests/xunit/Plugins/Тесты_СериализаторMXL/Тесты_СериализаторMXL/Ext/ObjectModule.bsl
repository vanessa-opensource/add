Перем ПутьКФайлуПолный Экспорт;// в эту переменную будет установлен правильный клиентский путь к текущему файлу

Перем КонтекстЯдра;
Перем Утверждения;
Перем СериализаторMXL;

Перем _ГуидНовогоСправочника;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	СериализаторMXL = КонтекстЯдра.Плагин("СериализаторMXL");
КонецПроцедуры

Функция ПолучитьСписокТестов() Экспорт
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_ПроверитьУстановкуПредопределенногоСправочникаПоГуид");

	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочник");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочник_ПустыеСтроки");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочникЧерезМетод_СоздатьДанныеПоМакетам");
	ВсеТесты.Добавить("ТестДолжен_УбедитьсяЧтоНельзяСоздатьПростойСправочникСЗапрещеннымНаименованием");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочникВРежимеОбменДаннымиЗагрузка");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочникВРежимеОбменДаннымиЗагрузка_ТЧ");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочник_РежимВыражение");
	ВсеТесты.Добавить("ТестДолжен_СоздатьИерархическийСправочникСПомощьюДополнительныхСвойств");
	ВсеТесты.Добавить("ТестДолжен_СоздатьИерархическийСправочникСПомощьюДополнительныхСвойствПоНаименованию");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочник2_СРеквизитом_ПланСчетов");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЕщеНеЗаписанныйОбъектПростогоСправочника");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьИзменениеПредопределенногоСправочника");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьНаличиеОбъектаИБ");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДваПростыхСправочника");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДваПростыхСправочника_с_ОдинаковымИменемПеременной");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСвязанныеСправочники");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочникСРеквизитомПустаяСсылка");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа_и_ПустойСсылкойПеречисление");

	ВсеТесты.Добавить("ТестДолжен_СоздатьГруппуДляПроверкиИсключенияОшибкиЗагрузкиГруппы");
	ВсеТесты.Добавить("ТестДолжен_СоздатьГруппуСправочникаИДочернийЭлемент");
	ВсеТесты.Добавить("ТестДолжен_СоздатьГруппуСЭлементамиТолькоДляГруппы");

	ВсеТесты.Добавить("ТестДолжен_СоздатьОбъектСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("ТестДолжен_СоздатьОбъектСЗаполненымРеквизитомТипаПеречисление");
	ВсеТесты.Добавить("ТестДолжен_СоздатьОбъектСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДокументСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДокументНаТекущуюДату");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДокумент_РежимЗаписи_Проведение");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочникПослеДокументаСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДвеЗаписиВРегистреСведений");
	ВсеТесты.Добавить("Тест_НеДолженСоздатьДвеЗаписиСРазнымиИзмерениямиВРегистреСведенийЧерезНаборЗаписей");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДваНабораЗаписейВРегистреСведенийЧерезНаборЗаписей");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДвеЗаписиВРегистреСведений_ВыполнивПоискЭлементаПоНаименованию");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПользователяИБ_ВКоде");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПользователяИБ_ПоМакету");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЭлементИЗаполнитьРеквизитНайденныйПоКоду");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЭлементИЗаполнитьРеквизитНайденныйПоНаименованию");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЭлементИЗаполнитьРеквизитПоискомПоГУИДу");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочникПоискомПоГуидуСсылки");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочникПоискомПоГуид");
	ВсеТесты.Добавить("ТестДолжен_НайтиИПерезаполнитьПростойСправочникПоискомПоГуидуСсылки");
	ВсеТесты.Добавить("ТестДолжен_УдалитьСозданныеДанные_ПростойСправочник");
	ВсеТесты.Добавить("ТестДолжен_УдалитьСозданныеДанные_ДваПростыхСправочника");
	ВсеТесты.Добавить("ТестДолжен_СоздатьИзДвухМакетовДваПростыхСправочника");
	ВсеТесты.Добавить("ТестДолжен_СоздатьИзДвухМакетовСвязанныеСправочники");
	ВсеТесты.Добавить("ТестДолжен_СоздатьИзДвухМакетовСвязанныеСправочникиЧерезМетод_СоздатьДанныеПоМакетам");
	ВсеТесты.Добавить("ТестДолжен_СоздатьОднуЗаписьРегистраНакопления");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДвеЗаписиРегистраНакопления");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДвеЗаписиРегистраНакопленияУКоторыхЯвноЗаданВидДвижения");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДвеЗаписиРегистраСведенийПодчиненномРегистратору");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойБизнесПроцесс");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьИсключениеНеверныйРежимПоиска");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа_и_ПустойСсылкой");
	ВсеТесты.Добавить("ТестДолжен_СоздатьОднуЗаписьРегистраНакопленияСПоискомДокументаПоНомеру");
	ВсеТесты.Добавить("ТестДолжен_СоздатьОднуЗаписьРегистраБухгалтерии");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДвеЗаписиРегистраБухгалтерии");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочникСоСсылкойНаСамогоСебя");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочникиОбразующиеЦиклическуюЗависимость");
	ВсеТесты.Добавить("ТестДолжен_ЗагрузитьВсеДанныеВРежиме_ОбменДанными_Загрузка");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьНайтиИОбновитьСуществующийЭлемент");
	ВсеТесты.Добавить("ТестДолжен_СоздатьУзелПланаОбмена");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПВХ");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПредопределеннуюГруппуПВХ");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСчет");
	ВсеТесты.Добавить("ТестДолжен_СоздатьВидРасчета");

	ВсеТесты.Добавить("ТестДолжен_ПолностьюПерезаполнитьСуществующийЭлементПростогоСправочника");
	ВсеТесты.Добавить("ТестДолжен_ПолностьюПерезаполнитьСуществующийДокумент");
	ВсеТесты.Добавить("ТестДолжен_ПолностьюПерезаполнитьСуществующийЭлементПВХ");
	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочник_ИЗJSON");

	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочник3_с_РеквизитомСоставногоТипаТочкиМаршрута");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСозданиеМакетаСправочника3_с_РеквизитамиСоставногоТипаТочкиМаршрута");

	ВсеТесты.Добавить("ТестДолжен_СоздатьОднуЗаписьРегистраНакопленияИзJson");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();

	_ГуидНовогоСправочника = "a72ec81b-d17d-4d2f-9a47-2ffb2e3234c4";

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочник() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	ПроверитьСозданиеПростогоСправочника(ТестовыеДанные);
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочник_ИЗJSON() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаJSON");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	ПроверитьСозданиеПростогоСправочника(ТестовыеДанные);
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочник_ПустыеСтроки() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника_ПустыеСтроки");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	ПроверитьСозданиеПростогоСправочника(ТестовыеДанные);
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочникЧерезМетод_СоздатьДанныеПоМакетам() Экспорт
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоМакетам(ЭтотОбъект, "СозданиеПростогоСправочника");

	ПроверитьСозданиеПростогоСправочника(ТестовыеДанные);
КонецПроцедуры

Процедура ПроверитьСозданиеПростогоСправочника(ТестовыеДанные)

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	Утверждения.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура ТестДолжен_ПолностьюПерезаполнитьСуществующийЭлементПростогоСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаПоГуидСсылки");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Ожидали Истину для ТестовыеДанные");

	Макет2 = ПолучитьМакет("СозданиеПростогоСправочника_НеЗаданРеквизитБулево");
	ТестовыеДанные2 = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет2);

	Утверждения.ПроверитьРавенство(Ложь, ТестовыеДанные2.ПростойСправочник.РеквизитБулево, "Ожидали Ложь для ТестовыеДанные2");
	Утверждения.ПроверитьРавенство(Перечисления.Перечисление1.ПустаяСсылка(),
		ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "Ожидали пустое значение реквизита РеквизитПеречисление");
КонецПроцедуры

Процедура ТестДолжен_УбедитьсяЧтоНельзяСоздатьПростойСправочникСЗапрещеннымНаименованием() Экспорт

	ЗапрещенноеНаименование = Справочники.ПростойСправочник.ПолучитьЗапрещенноеНаименование(0);
	КоллекцияПараметров = Новый Структура("Наименование,РеквизитПеречисление", ЗапрещенноеНаименование, "ЗначениеПеречисления1" );
	Макет = ПолучитьМакетДанныхДоступа("СозданиеПростогоСправочника_Параметры", КоллекцияПараметров);

	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Макет);
	Утверждения.ПроверитьМетодНеВыполнился(СериализаторMXL, "СоздатьДанныеПоТабличномуДокументу", ПараметрыМетода, "Не удалось записать: ""Простой справочник""");
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочникВРежимеОбменДаннымиЗагрузка() Экспорт
	ЗапрещенноеНаименование = Справочники.ПростойСправочник.ПолучитьЗапрещенноеНаименование(0);

	КоллекцияПараметров = Новый Структура("Наименование", ЗапрещенноеНаименование);
	НовыйТабДок = ПолучитьМакетДанныхДоступа("СозданиеСправочникаСПомощьюОбменДаннымиЗагрузка", КоллекцияПараметров);

	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(НовыйТабДок);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	//Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	//Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	Утверждения.ПроверитьРавенство(ЗапрещенноеНаименование, ТестовыеДанные.ПростойСправочник.Наименование);
	//Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	//Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочникВРежимеОбменДаннымиЗагрузка_ТЧ() Экспорт
	ЗапрещенноеНаименование = Справочники.ПростойСправочник.ПолучитьЗапрещенноеНаименование(0);

	КоллекцияПараметров = Новый Структура("Наименование", ЗапрещенноеНаименование);
	НовыйТабДок = ПолучитьМакетДанныхДоступа("СозданиеСправочникаСПомощьюТЧ_ОбменДаннымиЗагрузка", КоллекцияПараметров);

	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(НовыйТабДок);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	//Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	//Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	Утверждения.ПроверитьРавенство(ЗапрещенноеНаименование, ТестовыеДанные.ПростойСправочник.Наименование);
	//Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	//Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочник_РежимВыражение() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника_РежимВыражение");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	ПроверитьСозданиеПростогоСправочника(ТестовыеДанные);
КонецПроцедуры

Процедура ТестДолжен_СоздатьИерархическийСправочникСПомощьюДополнительныхСвойств() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСПомощьюДополнительныхСвойств");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура ТестДолжен_СоздатьИерархическийСправочникСПомощьюДополнительныхСвойствПоНаименованию() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСПомощьюДополнительныхСвойствПоНаименованию");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура ТестДолжен_СоздатьСправочник2_СРеквизитом_ПланСчетов() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСРеквизитом_ПланСчетов");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник2"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник2, "СправочникСсылка.ПростойСправочник2");
	Утверждения.ПроверитьРавенство("Тест", ТестовыеДанные.ПростойСправочник2.Наименование);
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник2.Счет, "ПланСчетовСсылка.ПланСчетов1");
	Утверждения.ПроверитьРавенство(ПланыСчетов.ПланСчетов1.Счет01, ТестовыеДанные.ПростойСправочник2.Счет, "ПланыСчетов.ПланСчетов1.Счет01, ТестовыеДанные.ПростойСправочник2.Счет");
КонецПроцедуры

Процедура ТестДолжен_СоздатьЕщеНеЗаписанныйОбъектПростогоСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеЕщеНеЗаписанногоОбъектаПростогоСправочника");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникОбъект.ПростойСправочник");
	Утверждения.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИзменениеПредопределенногоСправочника() Экспорт
	КонтекстЯдра.ПропуститьТест("Тест временно отключен");

	ЗадатьГуидПредопределенногоЭлемент_ПростойСправочник();

	Макет = ПолучитьМакет("ИзменениеПредопределенногоСправочника");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.ПростойСправочник);
	Утверждения.ПроверитьРавенство("Новое значение", ТестовыеДанные.ПростойСправочник.Наименование);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуПредопределенногоСправочникаПоГуид() Экспорт
	КонтекстЯдра.ПропуститьТест("Тест временно отключен");

	ЗадатьГуидПредопределенногоЭлемент_ПростойСправочник();
КонецПроцедуры

Процедура ЗадатьГуидПредопределенногоЭлемент_ПростойСправочник()
	Макет = ПолучитьМакет("ИзменениеПредопределенногоСправочникаПоГуид");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.ПростойСправочник);
	Утверждения.ПроверитьРавенство("Новое значение", ТестовыеДанные.ПростойСправочник.Наименование);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНаличиеОбъектаИБ() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	лСсылка = ТестовыеДанные.ПростойСправочник;
		Утверждения.ПроверитьНаличиеОбъектаИБ(лСсылка, "ТестовыеДанные.ПростойСправочник");
	лОбъект = лСсылка.ПолучитьОбъект();
	лОбъект.Удалить();

	стрОшибка = "";
	Попытка
		Утверждения.ПроверитьНаличиеОбъектаИБ(лСсылка, "ТестовыеДанные.ПростойСправочник после удаления");
		былоИсключение = Ложь;
	Исключение
		былоИсключение = Истина;
		стрОшибка = ОписаниеОшибки();
	КонецПопытки;
		Утверждения.ПроверитьИстину(былоИсключение, "Ожидал исключение, а его не было");
		Утверждения.ПроверитьВхождение(стрОшибка, "Ожидали существование объекта в ИБ, а получили объект не найден <<Объект не найден>");
КонецПроцедуры

Процедура ТестДолжен_СоздатьДваПростыхСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	Утверждения.ПроверитьРавенство("Тестовая группа товаров", ТестовыеДанные.ПростойСправочник.Наименование);
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	Утверждения.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник.РеквизитБулево);

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник2"), "Ожидали, что есть переменная 'ПростойСправочник2'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник2, "СправочникСсылка.ПростойСправочник2");
	Утверждения.ПроверитьРавенство("Тест", ТестовыеДанные.ПростойСправочник2.Наименование);
КонецПроцедуры

Процедура ТестДолжен_СоздатьДваПростыхСправочника_с_ОдинаковымИменемПеременной() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников_с_ОдинаковымИменемПеременной");
	Попытка
		ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		Возврат;
	КонецПопытки;
	ВызватьИсключение "Должны были получить исключение, а его не было";
КонецПроцедуры

Процедура ТестДолжен_СоздатьСвязанныеСправочники() Экспорт
	Макет = ПолучитьМакет("СозданиеСвязанныхСправочников");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура ТестДолжен_СоздатьСправочникСРеквизитомПустаяСсылка() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСРеквизитомПустаяСсылка");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());

	//Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник.ПустаяСсылка(), ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура ТестДолжен_СоздатьГруппуСправочникаИДочернийЭлемент() Экспорт
	Макет = ПолучитьМакет("СозданиеГруппыСправочникаИДочернегоЭлемента");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Группа"), "Ожидали, что есть переменная 'Группа'");
	Утверждения.ПроверитьИстину(ТестовыеДанные.Группа.ЭтоГруппа, "Ожидали, что созданный элемент является группой");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Элемент"), "Ожидали, что есть переменная 'Элемент'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Группа, ТестовыеДанные.Элемент.Родитель);
КонецПроцедуры

Процедура ТестДолжен_СоздатьГруппуСЭлементамиТолькоДляГруппы() Экспорт
	Макет = ПолучитьМакет("СозданиеГруппыСЭлементамиТолькоДляГруппы");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(3, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Группа"), "Ожидали, что есть переменная 'Группа'");
	Утверждения.ПроверитьИстину(ТестовыеДанные.Группа.ЭтоГруппа, "Ожидали, что созданный элемент является группой");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Группа.ТабличнаяЧастьДляГруппы.Количество(), "Ожидали, что ТестовыеДанные.Группа.ТабличнаяЧастьДляГруппы.Количество() = 1");
КонецПроцедуры

Процедура ТестДолжен_СоздатьГруппуДляПроверкиИсключенияОшибкиЗагрузкиГруппы() Экспорт
	Макет = ПолучитьМакет("СозданиеГруппы");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Группа1"), "Ожидали, что есть переменная 'Группа1'");
	Утверждения.ПроверитьИстину(ТестовыеДанные.Группа1.ЭтоГруппа, "Ожидали, что созданный элемент является группой");
КонецПроцедуры

Процедура ТестДолжен_СоздатьОбъектСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(4, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("СправочникСТабЧастью"), "Ожидали, что есть переменная 'СправочникСТабЧастью'");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.СправочникСТабЧастью.Состав.Количество());

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.СправочникСТабЧастью.Состав[0].ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник2_1, ТестовыеДанные.СправочникСТабЧастью.Состав[0].ПростойСправочник2);
	Утверждения.ПроверитьИстину(ТестовыеДанные.СправочникСТабЧастью.Состав[0].РеквизитБулево);

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.СправочникСТабЧастью.Состав[1].ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник2_2, ТестовыеДанные.СправочникСТабЧастью.Состав[1].ПростойСправочник2);
	Утверждения.ПроверитьЛожь(ТестовыеДанные.СправочникСТабЧастью.Состав[1].РеквизитБулево);
КонецПроцедуры

Процедура ТестДолжен_СоздатьОбъектСЗаполненымРеквизитомТипаПеречисление() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСЗаполненымРеквизитомТипаПеречисление");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления1, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление);
КонецПроцедуры

Процедура ТестДолжен_СоздатьОбъектСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Элемент"), "Ожидали, что есть переменная 'Элемент'");
	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.Элемент.ПростойСправочник);
КонецПроцедуры

Процедура ТестДолжен_СоздатьДокументСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеДокументаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(4, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	Утверждения.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	Утверждения.ПроверитьРавенство(Дата("20130801"), ТестовыеДанные.Документ.Дата);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.Документ.ПростойСправочник);
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Документ.Состав.Количество());

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.Документ.Состав[0].ПростойСправочник2);
	Утверждения.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);
	Утверждения.ПроверитьЛожь(ТестовыеДанные.Документ.Состав[0].РеквизитБулево);

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.Документ.Состав[1].ПростойСправочник2);
	Утверждения.ПроверитьРавенство(0, ТестовыеДанные.Документ.Состав[1].РеквизитЧисло);
	Утверждения.ПроверитьИстину(ТестовыеДанные.Документ.Состав[1].РеквизитБулево);
КонецПроцедуры

Процедура ТестДолжен_СоздатьДокументНаТекущуюДату() Экспорт
	Макет = ПолучитьМакет("СозданиеДокументаНаТекущуюДату");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	Утверждения.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТекущаяДата(), ТестовыеДанные.Документ.Дата, "Разница между ТекущаяДата() и ТестовыеДанные.Документ.Дата должна быть менее 2 секунд");
КонецПроцедуры

Процедура ТестДолжен_СоздатьДокумент_РежимЗаписи_Проведение() Экспорт
	Макет = ПолучитьМакет("СозданиеДокумента_РежимЗаписи_Проведение");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	Утверждения.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	Утверждения.Проверить(ТестовыеДанные.Документ.Проведен, "ТестовыеДанные.Документ.Проведен");

	Утверждения.Проверить(ТестовыеДанные.Документ2.Проведен, "ТестовыеДанные2.Документ.Проведен");
КонецПроцедуры

Процедура ТестДолжен_СоздатьСправочникПослеДокументаСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаПослеДокументаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(5, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	Утверждения.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	Утверждения.ПроверитьРавенство(Дата("20130801"), ТестовыеДанные.Документ.Дата);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.Документ.ПростойСправочник);
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Документ.Состав.Количество());

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.Документ.Состав[0].ПростойСправочник2);
	Утверждения.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);
	Утверждения.ПроверитьЛожь(ТестовыеДанные.Документ.Состав[0].РеквизитБулево);

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.Документ.Состав[1].ПростойСправочник2);
	Утверждения.ПроверитьРавенство(0, ТестовыеДанные.Документ.Состав[1].РеквизитЧисло);
	Утверждения.ПроверитьИстину(ТестовыеДанные.Документ.Состав[1].РеквизитБулево);

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник23"), "Ожидали, что есть переменная 'ПростойСправочник23'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник23, "СправочникСсылка.ПростойСправочник2");
	Утверждения.ПроверитьРавенство("Тест3", ТестовыеДанные.ПростойСправочник23.Наименование);
КонецПроцедуры

Процедура ТестДолжен_ПолностьюПерезаполнитьСуществующийДокумент() Экспорт
	Макет0 = ПолучитьМакет("СозданиеДокументаПоГуид");
	ТестовыеДанные0 = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет0);

	Макет = ПолучитьМакет("ПерезаполнениеДокументаПоГуид");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(Дата("20180601"), ТестовыеДанные.Документ.Дата);
	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник.ПустаяСсылка(),
		ТестовыеДанные.Документ.ПростойСправочник, "Реквизит Документ.ПростойСправочник");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Документ.Состав.Количество(), "Количество строк");

	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло,
		"Реквизит Документ.Состав[0].РеквизитЧисло");
	Утверждения.ПроверитьЛожь(ТестовыеДанные.Документ.Состав[0].РеквизитБулево, "Реквизит Документ.Состав[0].РеквизитБулево");
	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник2.ПустаяСсылка(),
		ТестовыеДанные.Документ.Состав[0].ПростойСправочник2, "Реквизит Документ.Состав[0].ПростойСправочник2");
КонецПроцедуры

Процедура ТестДолжен_СоздатьДвеЗаписиВРегистреСведений() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведений");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(5, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра1"), "Ожидали, что есть переменная 'ЗаписьРегистра1'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник2);
	Утверждения.ПроверитьРавенство(300, ТестовыеДанные.ЗаписьРегистра1.РесурсЧисло);
	Утверждения.ПроверитьЛожь(ТестовыеДанные.ЗаписьРегистра1.РесурсБулево);

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра2"), "Ожидали, что есть переменная 'ЗаписьРегистра2'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник2);
	Утверждения.ПроверитьРавенство(400, ТестовыеДанные.ЗаписьРегистра2.РесурсЧисло);
	Утверждения.ПроверитьИстину(ТестовыеДанные.ЗаписьРегистра2.РесурсБулево);
КонецПроцедуры

Процедура Тест_НеДолженСоздатьДвеЗаписиСРазнымиИзмерениямиВРегистреСведенийЧерезНаборЗаписей() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведенийЧерезНаборЗаписей");
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Макет);
	Утверждения.ПроверитьМетодНеВыполнился(СериализаторMXL, "СоздатьДанныеПоТабличномуДокументу", МассивПараметров, "Запись не верна! Значение поля не соответствует установленному отбору: Регистр сведений1:");
КонецПроцедуры

Процедура ТестДолжен_СоздатьДваНабораЗаписейВРегистреСведенийЧерезНаборЗаписей() Экспорт
	ТипМетаданного = "РегистрСведений";
	ВидМетаданного = "РегистрСведений1";
	КоличествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору(ТипМетаданного, ВидМетаданного);

	Макет = ПолучитьМакет("СозданиеДвухНаборовЗаписейВРегистреСведений");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(5, ТестовыеДанные.Количество());

	КоличествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору(ТипМетаданного, ВидМетаданного);
	Утверждения.ПроверитьРавенство(КоличествоДо + 2, КоличествоПосле, "КоличествоДо + 2, КоличествоПосле");

	//Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра1"), "Ожидали, что есть переменная 'ЗаписьРегистра1'");
	//Утверждения.Проверить(ТестовыеДанные.ЗаписьРегистра1.Выбран(), "Ожидали, что ЗаписьРегистра1.Выбран() вернет Ложь, а вернулась Истина");
	//Утверждения.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрСведенийНаборЗаписей.РегистрСведений1");
	//Утверждения.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");
	//
	//запись = ТестовыеДанные.ЗаписьРегистра1[0];
	//Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	//Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);
	//Утверждения.ПроверитьРавенство(300, запись.РесурсЧисло);
	//Утверждения.ПроверитьЛожь(запись.РесурсБулево);
	//
	//запись = ТестовыеДанные.ЗаписьРегистра1[1];
	////Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра2"), "Ожидали, что есть переменная 'ЗаписьРегистра2'");
	//Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	//Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2);
	//Утверждения.ПроверитьРавенство(400, запись.РесурсЧисло);
	//Утверждения.ПроверитьИстину(запись.РесурсБулево);
КонецПроцедуры

Процедура ТестДолжен_СоздатьДвеЗаписиВРегистреСведений_ВыполнивПоискЭлементаПоНаименованию() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведений_ПоискЭлементаПоНаименованию");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(5, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра1"), "Ожидали, что есть переменная 'ЗаписьРегистра1'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник2);
	Утверждения.ПроверитьРавенство(300, ТестовыеДанные.ЗаписьРегистра1.РесурсЧисло);
	Утверждения.ПроверитьЛожь(ТестовыеДанные.ЗаписьРегистра1.РесурсБулево);

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра2"), "Ожидали, что есть переменная 'ЗаписьРегистра2'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник2);
	Утверждения.ПроверитьРавенство(400, ТестовыеДанные.ЗаписьРегистра2.РесурсЧисло);
	Утверждения.ПроверитьИстину(ТестовыеДанные.ЗаписьРегистра2.РесурсБулево);
КонецПроцедуры

Процедура ТестДолжен_СоздатьПользователяИБ_ВКоде() Экспорт
	лИмяПользователя = "ТестИмя";
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоДо = массивПользователей.Количество();

	параметрыПользователя = Новый Структура;
	параметрыПользователя.Вставить("Имя", лИмяПользователя);
	параметрыПользователя.Вставить("ПолноеИмя", лИмяПользователя);
	параметрыПользователя.Вставить("АутентификацияСтандартная", Истина);
	параметрыПользователя.Вставить("ОсновнойИнтерфейс", ""); //Метаданные.Интерфейсы.Администратор);
	//параметрыПользователя.Вставить("Пароль", "пароль");
	параметрыПользователя.Вставить("ПоказыватьВСпискеВыбора", Истина);
	//параметрыПользователя.Вставить("Язык", Метаданные.Языки.Русский);
	массивРолей = Новый Массив;
	массивРолей.Добавить(Метаданные.Роли.Роль1);
	параметрыПользователя.Вставить("Роли", массивРолей);

	лПользователь = СериализаторMXL.СоздатьПользователяИБ(параметрыПользователя);
		Утверждения.ПроверитьТип(лПользователь, "ПользовательИнформационнойБазы", "лПользователь");
		Утверждения.ПроверитьИстину(лПользователь.Роли.Содержит(Метаданные.Роли.Роль1), "лПользователь.РолиПользователя.Содержить");

	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоПосле = массивПользователей.Количество();
		Утверждения.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количествоДо + 1, количествоПосле");

	//лПользователь.Удалить();
КонецПроцедуры

Процедура ТестДолжен_СоздатьПользователяИБ_ПоМакету() Экспорт
	ИмяПеременнойПользователь = "Пользователь1";
	лИмяПользователя = "ТестИмя";
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоДо = массивПользователей.Количество();

	КоллекцияПараметров = Новый Структура("ИмяПеременнойПользователь, ПользовательИмя", ИмяПеременнойПользователь, лИмяПользователя);
	НовыйТабДок = ПолучитьМакетДанныхДоступа("СозданиеОдногоПользователяИБ", КоллекцияПараметров);
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(НовыйТабДок);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство(ИмяПеременнойПользователь), "Ожидали, что есть переменная '"+ИмяПеременнойПользователь+"'");
	ИмяПользователя = ТестовыеДанные.Пользователь1;
	Утверждения.ПроверитьТип(ИмяПользователя, "Строка");

	НовыйПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Утверждения.ПроверитьТип(НовыйПользователь, "ПользовательИнформационнойБазы");
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Утверждения.ПроверитьРавенство(лИмяПользователя, НовыйПользователь.Имя);
	Утверждения.ПроверитьРавенство(НовыйПользователь.РежимЗапуска, РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение);
	Утверждения.ПроверитьИстину(НовыйПользователь.Роли.Содержит(Метаданные.Роли.Роль1), "лПользователь.РолиПользователя.Содержит");
	Утверждения.ПроверитьИстину(НовыйПользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава), "лПользователь.ПолныеПрава.Содержит");

	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоПосле = массивПользователей.Количество();
		Утверждения.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количествоДо + 1, количествоПосле");

	лПользователь = ТестовыеДанные.Пользователь1;
	//лПользователь.Удалить();
КонецПроцедуры

Процедура ТестДолжен_СоздатьЭлементИЗаполнитьРеквизитНайденныйПоКоду() Экспорт
	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоКоду");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура ТестДолжен_СоздатьЭлементИЗаполнитьРеквизитНайденныйПоНаименованию() Экспорт
	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоНаименованию");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура ТестДолжен_СоздатьЭлементИЗаполнитьРеквизитПоискомПоГУИДу() Экспорт
	ЗадатьГуидПредопределенногоЭлемент_ПростойСправочник();

	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоГУИДу");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник, "Справочники.ПростойСправочник.ПредопределенноеЗначение1");
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочникПоискомПоГуидуСсылки() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаПоГуидСсылки");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	Утверждения.ПроверитьРавенство(Новый УникальныйИдентификатор(_ГуидНовогоСправочника), ТестовыеДанные.ПростойСправочник.УникальныйИдентификатор());
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево, "ТестовыеДанные.ПростойСправочник.РеквизитБулево");

	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ПеречислениеСсылка.Перечисление1");
	Утверждения.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления1, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ТестовыеДанные.ПростойСправочник.РеквизитПеречисление");
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойСправочникПоискомПоГуид() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаПоГуид");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	Утверждения.ПроверитьРавенство(Новый УникальныйИдентификатор(_ГуидНовогоСправочника), ТестовыеДанные.ПростойСправочник.УникальныйИдентификатор());
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево, "ТестовыеДанные.ПростойСправочник.РеквизитБулево");

	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ПеречислениеСсылка.Перечисление1");
	Утверждения.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления1, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ТестовыеДанные.ПростойСправочник.РеквизитПеречисление");
КонецПроцедуры

Процедура ТестДолжен_НайтиИПерезаполнитьПростойСправочникПоискомПоГуидуСсылки() Экспорт
	ГуидСправочника = Новый УникальныйИдентификатор;
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаПоГуидСсылки");
	Макет.НайтиТекст(_ГуидНовогоСправочника).Текст = Строка(ГуидСправочника);
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);
	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник.ПолучитьСсылку(ГуидСправочника), ТестовыеДанные.ПростойСправочник, "Справочники.ПростойСправочник.ПолучитьСсылку(ГуидСправочника), ТестовыеДанные.ПростойСправочник)");

	Макет = ПолучитьМакет("НайтиИПерезаполнитьПростойСправочникПоГуидСсылки");
	Макет.НайтиТекст(_ГуидНовогоСправочника).Текст = Строка(ГуидСправочника);
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");

	Утверждения.ПроверитьРавенство(ГуидСправочника, ТестовыеДанные.ПростойСправочник.УникальныйИдентификатор());
	Утверждения.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник.РеквизитБулево, "ТестовыеДанные.ПростойСправочник.РеквизитБулево");
	Утверждения.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления2, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ТестовыеДанные.ПростойСправочник.РеквизитПеречисление");
КонецПроцедуры

Процедура ТестДолжен_УдалитьСозданныеДанные_ПростойСправочник() Экспорт
	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник");

	Макет = ПолучитьМакет("СозданиеПростогоСправочника");

	количествоСозданныхОбъектов = 1;

	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	количествоУдаленныхОбъектов = СериализаторMXL.УдалитьСозданныеДанные(тестовыеДанные);

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник");
		Утверждения.ПроверитьРавенство(количествоПосле, количествоДо, "количествоПосле, количествоДо");

		Утверждения.ПроверитьРавенство(количествоУдаленныхОбъектов, количествоСозданныхОбъектов, "количествоУдаленныхОбъектов, количествоСозданныхОбъектов");
КонецПроцедуры

Процедура ТестДолжен_УдалитьСозданныеДанные_ДваПростыхСправочника() Экспорт
	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник") + СериализаторMXL.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2");

	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников");

	количествоСозданныхОбъектов = 2;

	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);
	//количествоСозданныхОбъектов = 0;
	//ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет, количествоСозданныхОбъектов);
	//	Утверждения.ПроверитьРавенство(количествоСозданныхОбъектов, 2, "количествоСозданныхОбъектов");

	количествоУдаленныхОбъектов = СериализаторMXL.УдалитьСозданныеДанные(тестовыеДанные);

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник") + СериализаторMXL.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2");
		Утверждения.ПроверитьРавенство(количествоПосле, количествоДо, "количествоПосле, количествоДо");

		Утверждения.ПроверитьРавенство(количествоУдаленныхОбъектов, количествоСозданныхОбъектов, "количествоУдаленныхОбъектов, количествоСозданныхОбъектов");
КонецПроцедуры

Процедура ТестДолжен_СоздатьИзДвухМакетовДваПростыхСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	КоллекцияПараметров = Новый Структура("Наименование", "Тест");
	Макет2 = ПолучитьМакетДанныхДоступа("СозданиеПростогоСправочника2", КоллекцияПараметров);

	МассивМакетов = Новый Массив();
	МассивМакетов.Добавить(Макет);
	МассивМакетов.Добавить(Макет2);
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	Утверждения.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник2"), "Ожидали, что есть переменная 'ПростойСправочник2'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник2, "СправочникСсылка.ПростойСправочник2");
	Утверждения.ПроверитьРавенство("Тест", ТестовыеДанные.ПростойСправочник2.Наименование);
	Утверждения.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник2.РеквизитБулево);
КонецПроцедуры

Процедура ТестДолжен_СоздатьИзДвухМакетовСвязанныеСправочники() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	Макет2 = ПолучитьМакет("СозданиеОдногоСправочникаВладельцаБезПодчиненногоСправочника");

	МассивМакетов = Новый Массив();
	МассивМакетов.Добавить(Макет);
	МассивМакетов.Добавить(Макет2);
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);

	ПроверитьСозданиеИзДвухМакетовСвязанныеСправочники(ТестовыеДанные);
КонецПроцедуры

Процедура ТестДолжен_СоздатьИзДвухМакетовСвязанныеСправочникиЧерезМетод_СоздатьДанныеПоМакетам() Экспорт
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоМакетам(ЭтотОбъект, "СозданиеПростогоСправочника,СозданиеОдногоСправочникаВладельцаБезПодчиненногоСправочника");

	ПроверитьСозданиеИзДвухМакетовСвязанныеСправочники(ТестовыеДанные);
КонецПроцедуры

Процедура ПроверитьСозданиеИзДвухМакетовСвязанныеСправочники(ТестовыеДанные)
	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
	Утверждения.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
КонецПроцедуры

Процедура ТестДолжен_СоздатьОднуЗаписьРегистраНакопления() Экспорт
	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");

	Макет = ПолучитьМакет("СозданиеОднойЗаписиВРегистреНакопления");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(4, ТестовыеДанные.Количество());
	Утверждения.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрНакопленияНаборЗаписей.РегистрНакопления2");

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	Утверждения.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");

	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(1, наборЗаписей.Количество(), "количество записей РН -> 1, наборЗаписей.Количество()");
	запись = наборЗаписей[0];
	Утверждения.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура ТестДолжен_СоздатьДвеЗаписиРегистраНакопления() Экспорт
	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");

	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреНакопления");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(5, ТестовыеДанные.Количество());

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	Утверждения.ПроверитьРавенство(количествоДо + 2, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");

	Утверждения.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрНакопленияНаборЗаписей.РегистрНакопления2");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");

	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РН -> 2, наборЗаписей.Количество()");

	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РН -> 2, наборЗаписей.Количество()");

	запись = наборЗаписей[0];
	Утверждения.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");

	запись = наборЗаписей[1];
	Утверждения.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2);

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[1];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура ТестДолжен_СоздатьДвеЗаписиРегистраНакопленияУКоторыхЯвноЗаданВидДвижения() Экспорт
	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");

	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреНакопленияУКоторыхЯвноЗаданВидДвижения");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(5, ТестовыеДанные.Количество());

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	Утверждения.ПроверитьРавенство(количествоДо + 2, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");

	Утверждения.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрНакопленияНаборЗаписей.РегистрНакопления2");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");

	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РН -> 2, наборЗаписей.Количество()");

	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РН -> 2, наборЗаписей.Количество()");

	запись = наборЗаписей[0];
	Утверждения.ПроверитьРавенство(ВидДвиженияНакопления.Расход, запись.ВидДвижения, "ВидДвиженияНакопления.Расход, запись.ВидДвижения");
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(запись.Период, ТестовыеДанные.Документ.Дата, "запись.Период - ТестовыеДанные.Документ.Дата");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");

	запись = наборЗаписей[1];
	Утверждения.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2);

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[1];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура ТестДолжен_СоздатьДвеЗаписиРегистраСведенийПодчиненномРегистратору() Экспорт
	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрСведений", "РСПодчиненныйРегистратору");

	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведенийПодчиненномРегистратору");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(5, ТестовыеДанные.Количество());

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрСведений", "РСПодчиненныйРегистратору");
	Утверждения.ПроверитьРавенство(количествоДо + 2, количествоПосле, "количество записей РС -> количествоДо + 2, количествоПосле");

	Утверждения.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрСведенийНаборЗаписей.РСПодчиненныйРегистратору");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");

	наборЗаписей = РегистрыСведений.РСПодчиненныйРегистратору.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РС -> 2, наборЗаписей.Количество()");

	наборЗаписей = РегистрыСведений.РСПодчиненныйРегистратору.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РС -> 2, наборЗаписей.Количество()");

	запись = наборЗаписей[0];
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");

	запись = наборЗаписей[1];
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2);

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[1];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура ТестДолжен_СоздатьПростойБизнесПроцесс() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоБизнесПроцесса");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(3, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойБП"), "Ожидали, что есть переменная 'ПростойБП'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойБП, "БизнесПроцессСсылка.БизнесПроцесс1");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойБП.ПростойСправочник, ТестовыеДанные.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойБП, ТестовыеДанные.Действие1.БизнесПроцесс);
	// Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТекущаяДата(), ТестовыеДанные.ПростойБП.Дата, "Разница между ТекущаяДата() и ТестовыеДанные.ПростойБП.Дата должна быть менее 2 секунд");

	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.ПростойБП.ТабличнаяЧасть1.Количество());

	строкаТч = ТестовыеДанные.ПростойБП.ТабличнаяЧасть1[0];
	Утверждения.ПроверитьРавенство("Значение1", строкаТч.Реквизит1, "строкаТч.Реквизит1");
	//Утверждения.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);

	строкаТч = ТестовыеДанные.ПростойБП.ТабличнаяЧасть1[1];
	Утверждения.ПроверитьРавенство("Значение2", строкаТч.Реквизит1, "строкаТч.Реквизит1");
	//Утверждения.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);
КонецПроцедуры

// {Пессимистические тесты
Процедура ТестДолжен_ПолучитьИсключениеНеверныйРежимПоиска() Экспорт
	Макет = ПолучитьМакет("ТестДолжен_ПолучитьИсключениеНеверныйРежимПоиска");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "НеверныйРежимПоиска";
	Попытка
		ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;

	Утверждения.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду() Экспорт
	Макет = ПолучитьМакет("ТестДолжен_ПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "ЗначениеНеНайдено";
	Попытка
		ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;

	Утверждения.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию() Экспорт
	Макет = ПолучитьМакет("ТестДолжен_ПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "ЗначениеНеНайдено";
	Попытка
		ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;

	Утверждения.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

// }

Процедура ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочника2_с_РеквизитомСоставногоТипа");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("СправочникСТабЧастью"), "Ожидали, что есть переменная 'СправочникСТабЧастью'");
	Утверждения.ПроверитьРавенство(0, ТестовыеДанные.СправочникСТабЧастью.Состав.Количество());

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.СправочникСТабЧастью.РеквизитСоставногоТипа);
КонецПроцедуры

Процедура ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа_и_ПустойСсылкой() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочника2_с_РеквизитомСоставногоТипа_и_ПустойСсылкой");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());

	Утверждения.ПроверитьРавенство(Справочники.ПростойСправочник.ПустаяСсылка(), ТестовыеДанные.СправочникСТабЧастью.РеквизитСоставногоТипа);
КонецПроцедуры

Процедура ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа_и_ПустойСсылкойПеречисление() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочника2_с_РеквизитомСоставногоТипа_и_ПустойСсылкойПеречисление");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());

	Утверждения.ПроверитьРавенство(Перечисления.Перечисление1.ПустаяСсылка(), ТестовыеДанные.СправочникСТабЧастью.РеквизитСоставногоТипа);
КонецПроцедуры

Процедура ТестДолжен_СоздатьОднуЗаписьРегистраНакопленияСПоискомДокументаПоНомеру() Экспорт
	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");

	Макет = ПолучитьМакет("РегистрНакопления_ПоискРегистратора");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	Утверждения.ПроверитьТип(ТестовыеДанные.РегистрНакопления2, "РегистрНакопленияНаборЗаписей.РегистрНакопления2");

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	Утверждения.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");

	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(1, наборЗаписей.Количество(), "количество записей РН -> 1, наборЗаписей.Количество()");
	запись = наборЗаписей[0];
	//Утверждения.ПроверитьРавенство(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Документ, запись.Регистратор, "ТестовыеДанные.Документ, запись.Регистратор");
	//Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	//Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);
	//
	//строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	//Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	//Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура ТестДолжен_СоздатьОднуЗаписьРегистраБухгалтерии() Экспорт
	КонтекстЯдра.ПропуститьТест("Тест временно отключен");

	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрБухгалтерии", "РегистрБухгалтерии1");

	Макет = ПолучитьМакет("СозданиеОднойЗаписиВРегистреБухгалтерии");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(4, ТестовыеДанные.Количество());
	Утверждения.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрБухгалтерииНаборЗаписей.РегистрБухгалтерии1");

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрБухгалтерии", "РегистрБухгалтерии1");
	Утверждения.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");

	наборЗаписей = РегистрыБухгалтерии.РегистрБухгалтерии1.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(1, наборЗаписей.Количество(), "количество записей РН -> 1, наборЗаписей.Количество()");
	запись = наборЗаписей[0];

	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2Дт);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2Кт);
	Утверждения.ПроверитьРавенство(ПланыСчетов.ПланСчетов1.Счет01, запись.СчетДт);
	Утверждения.ПроверитьРавенство(ПланыСчетов.ПланСчетов1.Счет02, запись.СчетКт);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.СубконтоДт.Субконто1, "ТестовыеДанные.ПростойСправочник, запись.СубконтоДт.Субконто1");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.СубконтоКт.Субконто2, "ТестовыеДанные.ПростойСправочник21, запись.СубконтоКт.Субконто2");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.СубконтоКт.Субконто1, "ТестовыеДанные.ПростойСправочник, запись.СубконтоКт.Субконто1");

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(10, запись.РесурсЧисло1Дт, "10, запись.РесурсЧисло1Дт");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура ТестДолжен_СоздатьДвеЗаписиРегистраБухгалтерии() Экспорт
	КонтекстЯдра.ПропуститьТест("Тест временно отключен");

	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрБухгалтерии", "РегистрБухгалтерии1");

	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреБухгалтерии");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(6, ТестовыеДанные.Количество());

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрБухгалтерии", "РегистрБухгалтерии1");
	Утверждения.ПроверитьРавенство(количествоДо + 2, количествоПосле, "количество записей РБ -> количествоДо + 2, количествоПосле");

	Утверждения.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрБухгалтерииНаборЗаписей.РегистрБухгалтерии1");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");

	наборЗаписей = РегистрыБухгалтерии.РегистрБухгалтерии1.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РБ -> 2, наборЗаписей.Количество()");

	наборЗаписей = РегистрыБухгалтерии.РегистрБухгалтерии1.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РБ -> 2, наборЗаписей.Количество()");

	запись = наборЗаписей[0];
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2Дт);
	Утверждения.ПроверитьРавенство(ПланыСчетов.ПланСчетов1.Счет01, запись.СчетДт);
	Утверждения.ПроверитьРавенство(ПланыСчетов.ПланСчетов1.Счет02, запись.СчетКт);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.СубконтоДт.Субконто1, "ТестовыеДанные.ПростойСправочник, запись.СубконтоДт.Субконто1");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.СубконтоКт.Субконто2, "ТестовыеДанные.ПростойСправочник21, запись.СубконтоКт.Субконто2");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.СубконтоКт.Субконто1, "ТестовыеДанные.ПростойСправочник, запись.СубконтоКт.Субконто1");

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(10, запись.РесурсЧисло1Дт, "10, запись.РесурсЧисло1Дт");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");

	запись = наборЗаписей[1];
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись1.Период");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2Кт);
	Утверждения.ПроверитьРавенство(ПланыСчетов.ПланСчетов1.Счет02, запись.СчетДт);
	Утверждения.ПроверитьРавенство(ПланыСчетов.ПланСчетов1.Счет01, запись.СчетКт);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.СубконтоДт.Субконто2, "ТестовыеДанные.ПростойСправочник21, запись1.СубконтоДт.Субконто2");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник0, запись.СубконтоДт.Субконто1, "ТестовыеДанные.ПростойСправочник0, запись.СубконтоДт.Субконто1");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.СубконтоКт.Субконто1, "ТестовыеДанные.ПростойСправочник, запись1.СубконтоКт.Субконто1");

	строкаТчДокумента = ТестовыеДанные.Документ.Состав[1];
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	Утверждения.ПроверитьРавенство(20, запись.РесурсЧисло1Кт, "20, запись.РесурсЧисло1Кт");
	Утверждения.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Функция ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров) Экспорт

	Макет = ПолучитьМакет(ИмяМакета);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, КоллекцияПараметров);
		//Если Не КоллекцияПараметров.Свойство("ИмяПользователя") Тогда
		//	Макет.Параметры.ИмяПользователя = ИмяНовогоПользователя;
		//КонецЕсли;

	НовыйТабДок = Новый ТабличныйДокумент;
	НовыйТабДок.Вывести(Макет);

	Возврат НовыйТабДок;
КонецФункции

Процедура ТестДолжен_СоздатьСправочникСоСсылкойНаСамогоСебя() Экспорт

	Макет = ПолучитьМакет("СозданиеСправочникаСоСсылкойНаСамогоСебя");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ЭлементСоСсылкой, ТестовыеДанные.ЭлементСоСсылкой.СправочникСоСсылкойНаСамогоСебя);

КонецПроцедуры

Процедура ТестДолжен_СоздатьСправочникиОбразующиеЦиклическуюЗависимость() Экспорт

	Макет = ПолучитьМакет("СозданиеСправочниковОбразующихЦиклическуюЗависимость");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ЭлементСоСсылкой1.СправочникСоСсылкойНаСамогоСебя, ТестовыеДанные.ЭлементСоСсылкой2);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ЭлементСоСсылкой2.СправочникСоСсылкойНаСамогоСебя, ТестовыеДанные.ЭлементСоСсылкой3);
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ЭлементСоСсылкой3.СправочникСоСсылкойНаСамогоСебя, ТестовыеДанные.ЭлементСоСсылкой1);

КонецПроцедуры

Процедура ТестДолжен_ЗагрузитьВсеДанныеВРежиме_ОбменДанными_Загрузка() Экспорт

	ПараметрыСозданияДанных = Новый Структура("ОбменДанными", Истина);

	ЗапрещенноеНаименование = Справочники.ПростойСправочник.ПолучитьЗапрещенноеНаименование(0);
	КоллекцияПараметров = Новый Структура("Наименование,РеквизитПеречисление", ЗапрещенноеНаименование, "ЗначениеПеречисления1" );

	Макет = ПолучитьМакетДанныхДоступа("СозданиеПростогоСправочника_Параметры", КоллекцияПараметров);
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет, ПараметрыСозданияДанных);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	Утверждения.ПроверитьРавенство(ЗапрещенноеНаименование, ТестовыеДанные.ПростойСправочник.Наименование);
	Утверждения.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);

КонецПроцедуры

Процедура ТестДолжен_ВыполнитьНайтиИОбновитьСуществующийЭлемент() Экспорт

	НаименованиеЭлемента = "Имя146";
	ЗначениеПеречисления = Перечисления.Перечисление1.ЗначениеПеречисления1;
	КоллекцияПараметров = Новый Структура("Наименование,РеквизитПеречисление", НаименованиеЭлемента, "ЗначениеПеречисления1" );

	Макет = ПолучитьМакетДанныхДоступа("СозданиеПростогоСправочника_Параметры", КоллекцияПараметров);
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	//НовоеНаименованиеЭлемента = НаименованиеЭлемента+"-Новое";
	НовоеЗначениеПеречисления = Перечисления.Перечисление1.ЗначениеПеречисления2;
	КоллекцияПараметров = Новый Структура("Наименование,Ключ,РеквизитПеречисление", НаименованиеЭлемента, "Ключ", "ЗначениеПеречисления2");

	Макет = ПолучитьМакетДанныхДоступа("СозданиеПростогоСправочника_Параметры", КоллекцияПараметров);
	ТестовыеДанные2 = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	//Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	//Утверждения.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	//
	//Утверждения.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник", "ТестовыеДанные");
	//Утверждения.ПроверитьТип(ТестовыеДанные2.ПростойСправочник, "СправочникСсылка.ПростойСправочник", "ТестовыеДанные2");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные2.ПростойСправочник, "ТестовыеДанные.ПростойСправочник, ТестовыеДанные2.ПростойСправочник");
	Утверждения.ПроверитьРавенство(НаименованиеЭлемента, ТестовыеДанные.ПростойСправочник.Наименование);
	Утверждения.ПроверитьРавенство(НовоеЗначениеПеречисления, ТестовыеДанные.ПростойСправочник.ПолучитьОбъект().РеквизитПеречисление);

КонецПроцедуры

Процедура ТестДолжен_СоздатьУзелПланаОбмена() Экспорт

	КоллекцияПараметров = Новый Структура("РеквизитПеречисление", "ЗначениеПеречисления2");

	Макет = ПолучитьМакетДанныхДоступа("СозданиеУзлаПланаОбмена", КоллекцияПараметров);
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Количество(), 2, "Количество объектов в тестовых данных отличается от ожидаемого");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("УзелЭтойИБ"), "В тестовых данных не обнаружено нужное свойство");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.УзелЭтойИБ, ПланыОбмена.ПланОбмена1.ЭтотУзел());
	Утверждения.ПроверитьРавенство(ТестовыеДанные.УзелЭтойИБ.Код, "000000001");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.УзелЭтойИБ.Наименование, "Эта информационная база");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Узел1"), "В тестовых данных не обнаружено нужное свойство");
	Утверждения.ПроверитьТип(ТестовыеДанные.Узел1, "ПланОбменаСсылка.ПланОбмена1");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Узел1.Наименование, "Узел обмена 1");

	Утверждения.ПроверитьТип(ТестовыеДанные.Узел1.РеквизитБулево, "Булево");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Узел1.РеквизитБулево, Истина);

	Утверждения.ПроверитьТип(ТестовыеДанные.Узел1.РеквизитПеречисление, "ПеречислениеСсылка.Перечисление1");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Узел1.РеквизитПеречисление, Перечисления.Перечисление1.ЗначениеПеречисления2);

КонецПроцедуры

Процедура ТестДолжен_СоздатьПВХ() Экспорт

	Макет = ПолучитьМакет("СозданиеПВХ");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Количество(), 1, "Количество объектов в тестовых данных отличается от ожидаемого");

КонецПроцедуры

Процедура ТестДолжен_СоздатьПредопределеннуюГруппуПВХ() Экспорт

	Макет = ПолучитьМакет("СозданиеПВХ_ПредопределеннаяГруппа");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Количество(), 1, "Количество объектов в тестовых данных отличается от ожидаемого");

	Утверждения.ПроверитьИстину(ТестовыеДанные.Группа1.ЭтоГруппа, "Ожидали, что будет группа, а это не так");
	Утверждения.ПроверитьИстину(ТестовыеДанные.Группа1.Предопределенный, "Ожидали, что будет предопределенный элемент, а это не так");
КонецПроцедуры

Процедура ТестДолжен_ПолностьюПерезаполнитьСуществующийЭлементПВХ() Экспорт
	Макет0 = ПолучитьМакет("СозданиеПВХ");
	ТестовыеДанные0 = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет0);

	Макет = ПолучитьМакет("ПерезаполнениеПВХ");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьРавенство(ТестовыеДанные.ПВХ1.РеквизитБулево, Ложь, "РеквизитБулево ожидали в Ложь");

КонецПроцедуры

Процедура ТестДолжен_СоздатьСчет() Экспорт
	КонтекстЯдра.ПропуститьТест("Тест временно отключен");

	Макет = ПолучитьМакет("СозданиеСчета");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(ТестовыеДанные.Количество(), 1, "Количество объектов в тестовых данных отличается от ожидаемого");

КонецПроцедуры

Процедура ТестДолжен_СоздатьВидРасчета() Экспорт

	Макет = ПолучитьМакет("СозданиеВидаРасчета");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
    Утверждения.ПроверитьИстину(ТестовыеДанные.Свойство("Оклад"));
    Утверждения.ПроверитьТип(ТестовыеДанные.Оклад, "ПланВидовРасчетаСсылка.ПланВидовРасчета1");
    Утверждения.ПроверитьРавенство(ТестовыеДанные.Количество(), 1, "Количество объектов в тестовых данных отличается от ожидаемого");

КонецПроцедуры

Процедура ТестДолжен_СоздатьСправочник3_с_РеквизитомСоставногоТипаТочкиМаршрута() Экспорт

	Макет = ПолучитьМакет("СозданиеСправочника3_с_РеквизитомСоставногоТипаТочкиМаршрута");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные.ТочкиДвухБП.ТочкаМаршрутаБП1, Тип("ТочкаМаршрутаБизнесПроцессаСсылка.БизнесПроцесс1"));
	Утверждения.ПроверитьТип(ТестовыеДанные.ТочкиДвухБП.ТочкаМаршрутаБП2, Тип("ТочкаМаршрутаБизнесПроцессаСсылка.БизнесПроцесс2"));

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСозданиеМакетаСправочника3_с_РеквизитамиСоставногоТипаТочкиМаршрута() Экспорт

	Макет = ПолучитьМакет("СозданиеСправочника3_с_РеквизитомСоставногоТипаТочкиМаршрута");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	ДанныеКВыгрузке = СериализаторMXL.ТаблицаДанных.Добавить();
	ДанныеКВыгрузке.Ссылка = ТестовыеДанные.ТочкиДвухБП;

	ТабДок = Новый ТабличныйДокумент;
	МакетДанных = СериализаторMXL.СоздатьМакетДанныхПоТаблицеДанных(ТабДок);

	НомерСтроки = 4;
	Утверждения.ПроверитьРавенство(МакетДанных.Область(НомерСтроки,5,НомерСтроки,5).Текст, "ТочкаМаршрутаБП1");
	Утверждения.ПроверитьРавенство(МакетДанных.Область(НомерСтроки,6,НомерСтроки,6).Текст, "Действие1");
	Утверждения.ПроверитьРавенство(МакетДанных.Область(НомерСтроки,7,НомерСтроки,7).Текст, "Предопределенный");
	Утверждения.ПроверитьРавенство(МакетДанных.Область(НомерСтроки,8,НомерСтроки,8).Текст, "ТочкаМаршрутаБизнесПроцессаСсылка.БизнесПроцесс1");

	НомерСтроки = 5;
	Утверждения.ПроверитьРавенство(МакетДанных.Область(НомерСтроки,5,НомерСтроки,5).Текст, "ТочкаМаршрутаБП2");
	Утверждения.ПроверитьРавенство(МакетДанных.Область(НомерСтроки,6,НомерСтроки,6).Текст, "Действие1");
	Утверждения.ПроверитьРавенство(МакетДанных.Область(НомерСтроки,7,НомерСтроки,7).Текст, "Предопределенный");
	Утверждения.ПроверитьРавенство(МакетДанных.Область(НомерСтроки,8,НомерСтроки,8).Текст, "ТочкаМаршрутаБизнесПроцессаСсылка.БизнесПроцесс2");

КонецПроцедуры

Процедура ТестДолжен_СоздатьОднуЗаписьРегистраНакопленияИзJson() Экспорт

	количествоДо = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопленияОстатки");

	Макет = ПолучитьМакет("СозданиеОднойЗаписиВРегистреНакопленияИзJson");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);

	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	Утверждения.ПроверитьТип(ТестовыеДанные.РегистрНакопленияОстатки, "РегистрНакопленияНаборЗаписей.РегистрНакопленияОстатки");

	количествоПосле = СериализаторMXL.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопленияОстатки");
	Утверждения.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количество записей РН -> количествоДо + 1, количествоПосле");

	наборЗаписей = РегистрыНакопления.РегистрНакопленияОстатки.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	Утверждения.ПроверитьРавенство(1, наборЗаписей.Количество(), "количество записей РН -> 1, наборЗаписей.Количество()");
	запись = наборЗаписей[0];
	Утверждения.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	Утверждения.ПроверитьРавенствоДатСТочностью2Секунды(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	Утверждения.ПроверитьРавенство("Тест", запись.Измерение1);
	Утверждения.ПроверитьРавенство(200, запись.РесурсЧисло1);

КонецПроцедуры
