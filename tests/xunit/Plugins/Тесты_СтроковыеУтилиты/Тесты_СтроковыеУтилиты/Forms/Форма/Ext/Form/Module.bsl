&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем СтроковыеУтилиты;

// { интерфейс тестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.НачатьГруппу("Функции парсинга текста и подстановки параметров", Ложь);
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ВставитьПараметрыВСтроку", , "Проверка работы функции ВставитьПараметрыВСтроку");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ИзвлечьТекстИзHTML", , "Проверка работы функции ИзвлечьТекстИзHTML");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_НайтиСимволСКонца", , "Проверка работы функции НайтиСимволСКонца");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтроку", , "Проверка работы функции ПодставитьПараметрыВСтроку");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм", , "Проверка работы функции ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуИзМассива", , "Проверка работы функции ПодставитьПараметрыВСтрокуИзМассива");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПолучитьПараметрыИзСтроки", , "Проверка работы функции ПолучитьПараметрыИзСтроки");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивПодстрок", , "Проверка работы функции РазложитьСтрокуВМассивПодстрок");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивСлов", , "Проверка работы функции РазложитьСтрокуВМассивСлов");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаИзМассиваПодстрок", , "Проверка работы функции СтрокаИзМассиваПодстрок");
	
	НаборТестов.НачатьГруппу("Функции преобразования текста и символов", Ложь);
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ДополнитьСтроку", , "Проверка работы функции ДополнитьСтроку");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЗаменитьОдниСимволыДругими", , "Проверка работы функции ЗаменитьОдниСимволыДругими");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВРимскуюНотацию", , "Проверка работы функции ПреобразоватьЧислоВРимскуюНотацию");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВАрабскуюНотацию", , "Проверка работы функции ПреобразоватьЧислоВАрабскуюНотацию");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СократитьДвойныеКавычки", , "Проверка работы функции СократитьДвойныеКавычки");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаВЧисло", , "Проверка работы функции СтрокаВЧисло");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СтрокаЛатиницей", , "Проверка работы функции СтрокаЛатиницей");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_СформироватьСтрокуСимволов", , "Проверка работы функции СформироватьСтрокуСимволов");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_УдалитьПовторяющиесяСимволы", , "Проверка работы функции УдалитьПовторяющиесяСимволы");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_УдалитьПоследнийСимволВСтроке", , "Проверка работы функции УдалитьПоследнийСимволВСтроке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ФорматированнаяСтрока", , "Проверка работы функции ФорматированнаяСтрока");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЧислоЦифрамиПредметИсчисленияПрописью", , "Проверка работы функции ЧислоЦифрамиПредметИсчисленияПрописью");
	
	НаборТестов.НачатьГруппу("Функции проверки на соответствие критериям", Ложь);
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоКириллицаВСтроке", , "Проверка работы функции ТолькоКириллицаВСтроке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоЛатиницаВСтроке", , "Проверка работы функции ТолькоЛатиницаВСтроке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ТолькоЦифрыВСтроке", , "Проверка работы функции ТолькоЦифрыВСтроке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЭтоРазделительСлов", , "Проверка работы функции ЭтоРазделительСлов");
	НаборТестов.Добавить("ТестДолжен_ПроверитьРаботуФункции_ЭтоУникальныйИдентификатор", , "Проверка работы функции ЭтоУникальныйИдентификатор");
	
	НаборТестов.Добавить("ТестПроверяет_ЕстьВИсключаемойКоллекции", , "Проверка работы функции ЕстьВИсключаемойКоллекции");
	
	НаборТестов.Добавить("ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_Обычный", , "Проверка работы функции ПолучитьСообщениеБезСтекаВызовов_Обычный");
	НаборТестов.Добавить("ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_УправляемаяФорма", , "Проверка работы функции ПолучитьСообщениеБезСтекаВызовов_УправляемаяФорма");
	НаборТестов.Добавить("ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_НетПодходящихИсключений", , "Проверка работы функции ПолучитьСообщениеБезСтекаВызовов_НетПодходящихИсключений");
	НаборТестов.Добавить("ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_ПустаяСтрока", , "Проверка работы функции ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_ПустаяСтрока");
	
КонецПроцедуры

// } интерфейс тестирования


// { блок юнит-тестов - сами тесты

// { Тесты функций парсинга текста и подстановки параметров

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ВставитьПараметрыВСтроку() Экспорт

	// Функция должна возвратить массив из 5 элементов, три из которых - пустые.
	РезультатПодстановки = СтроковыеУтилиты.ВставитьПараметрыВСтроку(
		"Здравствуй, [Имя] [Фамилия].", Новый Структура("Фамилия,Имя", "Пупкин", "Вася"));
	
	Ожидаем.Что(РезультатПодстановки).Равно("Здравствуй, Вася Пупкин.");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ИзвлечьТекстИзHTML() Экспорт

	// Результат должен быть очищен от тегов и возвращать неформатированный текст.
	ТекстHTML = 
	"<html>
	|	<body>
	|    	<script type=""text/javascript"">document.write('Hello, World!');</script>
	|		<div><b><u>Неформатированный текст.</u></b></div>
	|	</body>
	|</html>";
	
	РезультатИзвлечения = СтроковыеУтилиты.ИзвлечьТекстИзHTML(ТекстHTML);	
	Ожидаем.Что(РезультатИзвлечения).Равно("Неформатированный текст.");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_НайтиСимволСКонца() Экспорт

	СтрокаСимволов = "й1ц2_й1ц2";
	
	// Функция должна вернуть позицию символа в строке.
	ПозицияСимвола = СтроковыеУтилиты.НайтиСимволСКонца(СтрокаСимволов, "ц");	
	Ожидаем.Что(ПозицияСимвола).Равно(8);
	
	// Функция должна вернуть 0, если строка не позицию символа в строке.
	ПозицияСимвола = СтроковыеУтилиты.НайтиСимволСКонца(СтрокаСимволов, "я");	
	Ожидаем.Что(ПозицияСимвола).Равно(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтроку() Экспорт

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 пошел в %2", "Вася", "Зоопарк");
	Ожидаем.Что(РезультатПодстановки).Равно("Вася пошел в Зоопарк");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм() Экспорт

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 пошел в %2", "%username%", "Зоопарк");
	Ожидаем.Что(РезультатПодстановки).Равно("%username% пошел в Зоопарк");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ПодставитьПараметрыВСтрокуИзМассива() Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("Вася");
	МассивПараметров.Добавить("Зоопарк");

	РезультатПодстановки = СтроковыеУтилиты.ПодставитьПараметрыВСтрокуИзМассива("%1 пошел в %2", МассивПараметров);
	Ожидаем.Что(РезультатПодстановки).Равно("Вася пошел в Зоопарк");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ПолучитьПараметрыИзСтроки() Экспорт

	ПроверяемыеПараметры = СтроковыеУтилиты.ПолучитьПараметрыИзСтроки("File=""c:\InfoBases\Trade""; Usr=""Director"";");
	Ожидаем.Что(ПроверяемыеПараметры).ИмеетТип("Структура")
		.Что(ПроверяемыеПараметры.Свойство("File")).ЭтоИстина()
		.Что(ПроверяемыеПараметры.File).Равно("c:\InfoBases\Trade");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивПодстрок() Экспорт

	// Функция должна вернуть массив из 5 элементов, три из которых - пустые.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",");
	Ожидаем.Что(МассивСтрок, "Утверждение 1").ИмеетТип("Массив").ИмеетДлину(5);
	
	// Функция должна вернуть массив из двух элементов.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина);
	Ожидаем.Что(МассивСтрок, "Утверждение 2").ИмеетТип("Массив").ИмеетДлину(2);
	
	// Функция должна вернуть пустой массив.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок("");
	Ожидаем.Что(МассивСтрок, "Утверждение 3").ИмеетТип("Массив").ИмеетДлину(0);
	
	// Функция должна вернуть массив с одним пустым элементом.
	МассивСтрок = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок("",, Ложь);
	Ожидаем.Что(МассивСтрок, "Утверждение 4").ИмеетТип("Массив").ИмеетДлину(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_РазложитьСтрокуВМассивСлов() Экспорт

	// Функция должна вернуть массив значений: "один", "два2_", "три".
	МассивСлов = СтроковыеУтилиты.РазложитьСтрокуВМассивСлов("один-@#два2_!три");
	Ожидаем.Что(МассивСлов, "Утверждение 1").ИмеетТип("Массив").ИмеетДлину(3);
	Ожидаем.Что(МассивСлов[0], "Утверждение 1, слово 1").Равно("один");
	Ожидаем.Что(МассивСлов[1], "Утверждение 1, слово 2").Равно("два2_");
	
	// Функция должна вернуть массив значений: "один-", "два2", "три".
	МассивСлов = СтроковыеУтилиты.РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_");
	Ожидаем.Что(МассивСлов, "Утверждение 2").ИмеетТип("Массив").ИмеетДлину(3);
	Ожидаем.Что(МассивСлов[0], "Утверждение 2, слово 1").Равно("один-");
	Ожидаем.Что(МассивСлов[1], "Утверждение 2, слово 2").Равно("два2");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_СтрокаИзМассиваПодстрок() Экспорт

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("Вася");
	МассивСтрок.Добавить("пошел в");
	МассивСтрок.Добавить("Зоопарк.");
	
	// Функция должна объединить строки из массива в строку с разделителями
	РезультатСоединения = СтроковыеУтилиты.СтрокаИзМассиваПодстрок(МассивСтрок, " ");
	Ожидаем.Что(РезультатСоединения).Равно("Вася пошел в Зоопарк.");
	
КонецПроцедуры

// } Тесты функций парсинга текста и подстановки параметров

// { Тесты функций преобразования текста и символов

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ДополнитьСтроку() Экспорт
	
	// Функция должна дополнить строку до 10-ти символов. По умолчанию функция дополняет строку символами "0" (ноль) слева.
	РезультатДополнения = СтроковыеУтилиты.ДополнитьСтроку("1234", 10);
	Ожидаем.Что(РезультатДополнения).Равно("0000001234");
	
	// Функция должна дополнить строку до 10-ти символов, использую символ "#". Незначащие символы слева и справа удаляются.
	РезультатДополнения = СтроковыеУтилиты.ДополнитьСтроку(" 1234  ", 10, "#", "Справа");
	Ожидаем.Что(РезультатДополнения).Равно("1234######");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ЗаменитьОдниСимволыДругими() Экспорт
	
	// Функция должна выполнить замену одних символов в строке на другие.
	РезультатЗамены = СтроковыеУтилиты.ЗаменитьОдниСимволыДругими("ABC","ABCxyz", "АБВ");
	Ожидаем.Что(РезультатЗамены).Равно("АБВxyz");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВРимскуюНотацию() Экспорт
	
	// Функция должна выполнить преобразование арабского числа от 0 до 999 в римское.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВРимскуюНотацию(117, Ложь);
	Ожидаем.Что(РезультатПреобразования).Равно("CXVII");
	
	// То же самое но используя кириллицу.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВРимскуюНотацию(117);
	Ожидаем.Что(РезультатПреобразования).Равно("СХУ11");
	
	// Казус следующей проверки в том, что в римской системе счисления не было нуля.
	// Функция, в данном случае, возвращает пустую строку (по всей видимости, римскую).
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВРимскуюНотацию(0);
	Ожидаем.Что(РезультатПреобразования).Равно("");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ПреобразоватьЧислоВАрабскуюНотацию() Экспорт
	
	// Функция должна выполнить преобразование римского числа в арабское.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВАрабскуюНотацию("CXVII", Ложь);
	Ожидаем.Что(РезультатПреобразования).Равно(117);
	
	// То же самое но используя кириллицу.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВАрабскуюНотацию("СХУ11");
	Ожидаем.Что(РезультатПреобразования).Равно(117);
	
	// Казус следующей проверки в том, что в римской системе счисления не было нуля.
	// Функция, в данном случае, принимает пустую строку и возвращает арабский ноль.
	РезультатПреобразования = СтроковыеУтилиты.ПреобразоватьЧислоВАрабскуюНотацию("");
	Ожидаем.Что(РезультатПреобразования).Равно(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_СократитьДвойныеКавычки() Экспорт
	
	РезультатЗамены = СтроковыеУтилиты.СократитьДвойныеКавычки("""АБВ""""");
	Ожидаем.Что(РезультатЗамены).Равно("АБВ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_СтрокаВЧисло() Экспорт
	
	// Функция должна выполнить преобразование строки в число без вызова исключения.
	РезультатПреобразования = СтроковыеУтилиты.СтрокаВЧисло("- 123 456,789 ");
	Ожидаем.Что(РезультатПреобразования).Равно(-123456.789);
	
	// Функция должна выполнить преобразование строки в число без вызова исключения.
	РезультатПреобразования = СтроковыеУтилиты.СтрокаВЧисло("123а");
	Ожидаем.Что(РезультатПреобразования).Равно(Неопределено);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_СтрокаЛатиницей() Экспорт
	
	// Функция должна выполнить замену одних символов в строке на другие.
	РезультатЗамены = СтроковыеУтилиты.СтрокаЛатиницей("Съешь ещё этих мягких французских булок, да выпей же чаю.");
	Ожидаем.Что(РезультатЗамены).Равно("S""esh eshche etikh myagkikh frantsuzskikh bulok, da vypey zhe chayu.");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_СформироватьСтрокуСимволов() Экспорт
	
	Результат = СтроковыеУтилиты.СформироватьСтрокуСимволов("#", 5);
	Ожидаем.Что(Результат).Равно("#####");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_УдалитьПовторяющиесяСимволы() Экспорт
	
	// Функция должна удалить крайние повторяющиеся символы слева в строке.
	РезультатЗамены = СтроковыеУтилиты.УдалитьПовторяющиесяСимволы("...АБВ...", ".");
	Ожидаем.Что(РезультатЗамены).Равно("АБВ...");
	
	// Функция должна удалить крайние повторяющиеся символы справа в строке.
	РезультатЗамены = СтроковыеУтилиты.УдалитьПовторяющиесяСимволы("...АБВ...", ".", "Справа");
	Ожидаем.Что(РезультатЗамены).Равно("...АБВ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_УдалитьПоследнийСимволВСтроке() Экспорт
	
	СтрокаДляЗамены = "Привет!!!";
	СтроковыеУтилиты.УдалитьПоследнийСимволВСтроке(СтрокаДляЗамены, 2);
	Ожидаем.Что(СтрокаДляЗамены).Равно("Привет!");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ФорматированнаяСтрока() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;

	Если ВерсияПриложения < "8.3.3" Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтроки = Новый Массив;
	Выполнить("МассивСтроки.Добавить(Новый ФорматированнаяСтрока(""1.1"", Новый Шрифт(,,Истина)));");
	МассивСтроки.Добавить(". ");
	Выполнить("МассивСтроки.Добавить(Новый ФорматированнаяСтрока(""Обновите"",,,, ""Обновление""));");
	МассивСтроки.Добавить(" программу.");
	
	РезультатПреобразования = СтроковыеУтилиты.ФорматированнаяСтрока("<b>1.1</b>. <a href = ""Обновление"">Обновите</a> программу.");
	Выполнить("Ожидаем.Что(РезультатПреобразования).Равно(Новый ФорматированнаяСтрока(МассивСтроки));");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ЧислоЦифрамиПредметИсчисленияПрописью() Экспорт
	
	РезультатПреобразования = СтроковыеУтилиты.ЧислоЦифрамиПредметИсчисленияПрописью(21, "минуту,минуты,минут");
	Ожидаем.Что(РезультатПреобразования).Равно("21 минуту");
	
	РезультатПреобразования = СтроковыеУтилиты.ЧислоЦифрамиПредметИсчисленияПрописью(33, "минуту,минуты,минут");
	Ожидаем.Что(РезультатПреобразования).Равно("33 минуты");
	
	РезультатПреобразования = СтроковыеУтилиты.ЧислоЦифрамиПредметИсчисленияПрописью(45, "минуту,минуты,минут");
	Ожидаем.Что(РезультатПреобразования).Равно("45 минут");
	
КонецПроцедуры

// } Тесты функций преобразования текста и символов

// { Тесты функций проверки на соответствие критериям

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ТолькоКириллицаВСтроке() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоКириллицаВСтроке("Съешь ещё этих мягких французских булок, да выпей же чаю.",, " ,.");
	Ожидаем.Что(РезультатПроверки, "В строке только кириллица.").ЭтоИстина();
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоКириллицаВСтроке("АБВ z эюя",, " ");
	Ожидаем.Что(РезультатПроверки, "В строке присутствует не кириллический символ").ЭтоЛожь();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ТолькоЛатиницаВСтроке() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоЛатиницаВСтроке("The quick brown fox jumps over the lazy dog.",, " .");
	Ожидаем.Что(РезультатПроверки, "В строке только латиница.").ЭтоИстина();
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоЛатиницаВСтроке("ABC я xyz",, " ");
	Ожидаем.Что(РезультатПроверки, "В строке присутствует не латинский символ").ЭтоЛожь();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ТолькоЦифрыВСтроке() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ТолькоЦифрыВСтроке("001 234", Ложь, Ложь);
	Ожидаем.Что(РезультатПроверки).ЭтоИстина();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ЭтоРазделительСлов() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола("5"));
	Ожидаем.Что(РезультатПроверки, "Проверка цифрового символа.").ЭтоЛожь();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола("d"));
	Ожидаем.Что(РезультатПроверки, "Проверка латинского символа.").ЭтоЛожь();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола("Ш"));
	Ожидаем.Что(РезультатПроверки, "Проверка кириллического символа.").ЭтоЛожь();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола(" "));
	Ожидаем.Что(РезультатПроверки, "Проверка символа пробел.").ЭтоИстина();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола(","));
	Ожидаем.Что(РезультатПроверки, "Проверка запятой символа.").ЭтоИстина();
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоРазделительСлов(КодСимвола("$"), "$");
	Ожидаем.Что(РезультатПроверки, "Проверка собственного символа.").ЭтоИстина();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРаботуФункции_ЭтоУникальныйИдентификатор() Экспорт
	
	РезультатПроверки = СтроковыеУтилиты.ЭтоУникальныйИдентификатор(Новый УникальныйИдентификатор);
	Ожидаем.Что(РезультатПроверки).ЭтоИстина();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестПроверяет_ЕстьВИсключаемойКоллекции() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("ПерваяСтрока");
	Массив.Добавить("Исключение");
	Массив.Добавить("ПоследняяСтрока");

	Нашли = СтроковыеУтилиты.ЕстьВИсключаемойКоллекции("Исключение", Массив);
	Массив[1] = "*ключение";

	Нашли = СтроковыеУтилиты.ЕстьВИсключаемойКоллекции("Исключение", Массив);
	Массив[1] = "Исключ*";

	Нашли = СтроковыеУтилиты.ЕстьВИсключаемойКоллекции("Исключение", Массив);
	Массив[1] = "*ключен*";

	Нашли = СтроковыеУтилиты.ЕстьВИсключаемойКоллекции("Исключение", Массив);
	Массив[1] = "*кл*чен*";

КонецПроцедуры

&НаКлиенте
Процедура ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_Обычный() Экспорт
	
	МассивНенужныхСтрок = Новый Массив;
	МассивНенужныхСтрок.Добавить("ВнешняяОбработка.xddTestRunner.");
	МассивНенужныхСтрок.Добавить("ExternalDataProcessor.xddTestRunner.");

	СтрокаСоСтекомВызовов = "  ОШИБКА:
	|В клиенте открыт системный диалог для работы с файлами
	|{ВнешняяОбработка.ТестКлиенты.Форма.Форма.Форма(268)}:	ПодчиненныеОбъекты = ТестКлиент.ПолучитьПодчиненныеОбъекты();
	|{ВнешняяОбработка.ТестКлиенты.Форма.Форма.Форма(338)}:	ОкноПредупреждение = ОкноПредупреждение(ТестКлиент);
	|{ВнешняяОбработка.тесты_КомандныйИнтерфейс.Форма.Форма.Форма(193)}:	ПлагинТестКлиенты.ЗакрытьВсеОткрытыеОкна(ТестКлиент);
	|{(1)}:КонтекстВыполнения.ПередЗапускомТеста();
	|{ВнешняяОбработка.xddTestRunner.Форма.МодульАсинк.Форма(773)}:	Выполнить(1 +
	|";
	
	СтрокаБезСтека = СтроковыеУтилиты.ПолучитьСообщениеБезСтекаВызовов(СтрокаСоСтекомВызовов, МассивНенужныхСтрок);
	Ожидаем.Что(СтрЧислоСтрок(СтрокаБезСтека), "СтрЧислоСтрок(СтрокаБезСтека)").Равно(6);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_УправляемаяФорма() Экспорт
	МассивНенужныхСтрок = Новый Массив;
	МассивНенужныхСтрок.Добавить("ВнешняяОбработка.xddTestRunner.");
	МассивНенужныхСтрок.Добавить("ExternalDataProcessor.xddTestRunner.");

	СтрокаСоСтекомВызовов = "1
	|{Обработка.ЗагрузкаПродуктовИзКаталога.МодульОбъекта(106)}:        ВызватьИсключение 1;//TODO
	|{ВнешняяОбработка.ТестРаботыРегистраАктуальныеВерсииПоставок.МодульОбъекта(265)}:  ОписаниеЗагрузки = ОбработкаЗагрузки.ЗагрузитьПродуктПоОписанию(ОписаниеПродукта);
	|{ВнешняяОбработка.ТестРаботыРегистраАктуальныеВерсииПоставок.МодульОбъекта(158)}:  ОписаниеДанных = ЗагрузитьПродукт();
	|{(1)}:КонтекстВыполнения.ТестДолжен_ЗарегистрироватьТретьюВерсиюТолькоДляСервисИнженера();
	|{ВнешняяОбработка.xddTestRunner.МодульОбъекта(338)}:       Выполнить(ИcполняемыйКод);
	|{ВнешняяОбработка.xddTestRunner.МодульОбъекта(262)}:                       ВыполнитьПроцедуруКонтекста(КонтекстВыполнения, ЭлементДереваТестов.ИмяМетода, ЭлементДереваТестов.Параметры);
	|{ВнешняяОбработка.xddTestRunner.Форма.УправляемаяФорма.Форма(963)}:        РезультатТестирования = ОбъектНаСервере.ВыполнитьТестовыйМетод(КонтекстВыполнения, ЭлементДереваТестов);         	|И";
	
	СтрокаБезСтека = СтроковыеУтилиты.ПолучитьСообщениеБезСтекаВызовов(СтрокаСоСтекомВызовов, МассивНенужныхСтрок);
	Ожидаем.Что(СтрЧислоСтрок(СтрокаБезСтека), "СтрЧислоСтрок(СтрокаБезСтека)").Равно(5);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_НетПодходящихИсключений() Экспорт
	МассивНенужныхСтрок = Новый Массив;
	МассивНенужныхСтрок.Добавить("Несуществующее ВнешняяОбработка.xddTestRunner.");
	МассивНенужныхСтрок.Добавить("Несуществующее ExternalDataProcessor.xddTestRunner.");

	СтрокаСоСтекомВызовов = "1
	|{Обработка.ЗагрузкаПродуктовИзКаталога.МодульОбъекта(106)}:        ВызватьИсключение 1;//TODO
	|{ВнешняяОбработка.ТестРаботыРегистраАктуальныеВерсииПоставок.МодульОбъекта(265)}:  ОписаниеЗагрузки = ОбработкаЗагрузки.ЗагрузитьПродуктПоОписанию(ОписаниеПродукта);
	|{ВнешняяОбработка.ТестРаботыРегистраАктуальныеВерсииПоставок.МодульОбъекта(158)}:  ОписаниеДанных = ЗагрузитьПродукт();
	|{(1)}:КонтекстВыполнения.ТестДолжен_ЗарегистрироватьТретьюВерсиюТолькоДляСервисИнженера();
	|{ВнешняяОбработка.xddTestRunner.МодульОбъекта(338)}:       Выполнить(ИcполняемыйКод);
	|{ВнешняяОбработка.xddTestRunner.МодульОбъекта(262)}:                       ВыполнитьПроцедуруКонтекста(КонтекстВыполнения, ЭлементДереваТестов.ИмяМетода, ЭлементДереваТестов.Параметры);
	|{ВнешняяОбработка.xddTestRunner.Форма.УправляемаяФорма.Форма(963)}:        РезультатТестирования = ОбъектНаСервере.ВыполнитьТестовыйМетод(КонтекстВыполнения, ЭлементДереваТестов);         	|И";
	
	СтрокаБезСтека = СтроковыеУтилиты.ПолучитьСообщениеБезСтекаВызовов(СтрокаСоСтекомВызовов, МассивНенужныхСтрок);
	Ожидаем.Что(СтрЧислоСтрок(СтрокаСоСтекомВызовов), "СтрЧислоСтрок()").Равно(СтрЧислоСтрок(СтрокаБезСтека));
	Ожидаем.Что(СтрокаСоСтекомВызовов, "СтрокаБезСтека").Равно(СтрокаБезСтека);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестПроверяет_ПолучитьСообщениеБезСтекаВызовов_ПустаяСтрока() Экспорт
	
	МассивНенужныхСтрок = Новый Массив;
	МассивНенужныхСтрок.Добавить("ВнешняяОбработка.xddTestRunner.");
	МассивНенужныхСтрок.Добавить("ExternalDataProcessor.xddTestRunner.");

	СтрокаСоСтекомВызовов = "";
	
	СтрокаБезСтека = СтроковыеУтилиты.ПолучитьСообщениеБезСтекаВызовов(СтрокаСоСтекомВызовов, МассивНенужныхСтрок);
	Ожидаем.Что(СтрЧислоСтрок(СтрокаСоСтекомВызовов), "СтрЧислоСтрок()").Равно(СтрЧислоСтрок(СтрокаБезСтека));
	Ожидаем.Что(СтрокаСоСтекомВызовов, "СтрокаБезСтека").Равно(СтрокаБезСтека);
	
КонецПроцедуры

// } Тесты функций проверки на соответствие критериям

// } блок юнит-тестов - сами тесты
