#Область ОписаниеПеременных

Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем ЗапросыИзБД;
Перем УтвержденияПроверкаТаблиц;
Перем СтроковыеУтилиты;
Перем Данные;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

//{ основные процедуры для юнит-тестирования xUnitFor1C

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
	Данные = КонтекстЯдра.Плагин("Данные");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	//НаборТестов.НачатьГруппу("Сценарный тест", Истина);
	//НаборТестов.Добавить("ПараметрическийТест", НаборТестов.ПараметрыТеста(5, 7), "Тест должен показать использование представления теста");
		//Тест = НаборТестов.Добавить("ПараметрическийТест2");
		//Тест.Параметры.Добавить(12);
	НаборТестов.Добавить("ТестДолжен_ПроверитьПодменуЧерезМокТестирование");
	НаборТестов.Добавить("ТестДолжен_ПроверитьОтсутствиеПодменыЧерезМокТестирование");
	
	НаборТестов.Добавить("ТестМока_ЧерезТекучийИнтерфейс");
КонецПроцедуры
//}

#КонецОбласти

#Область Тесты

//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли; 
	
	МокТестирование().ОтключитьПодмену(КлючПодменыТеста());
	МокТестирование().ОтключитьПодмену("ПолучитьЗапрещенноеНаименование");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПодменуЧерезМокТестирование() Экспорт
	
	СтрокаВызова = СтрШаблон("
	|Тест = ВнешниеОбработки.Создать(""%1"");
	|Результат = Тест.ОтветСПодменой(МассивПараметров);
	|", ИмяТеста());
	
	МокТестирование().УстановитьПодмену(КлючПодменыТеста(), СтрокаВызова);
	
	СпрОбъект = Справочники.ПростойСправочник.СоздатьЭлемент();
	СпрОбъект.Наименование = "124";
	СпрОбъект.РеквизитБулево = Ложь;
	СпрОбъект.Записать();
	
	Ожидаем.Что(СпрОбъект.РеквизитБулево, "РеквизитБулево должен быть Истина после применения мок")
		.Равно(Истина);
	
КонецПроцедуры

Функция ОтветСПодменой(Знач МассивПараметров) Экспорт
	
	Объект = МассивПараметров[0];
	Объект.РеквизитБулево = Истина;
	
	Отказ = Ложь;
	
	Возврат Отказ;
	
КонецФункции

Процедура ТестДолжен_ПроверитьОтсутствиеПодменыЧерезМокТестирование() Экспорт
	
	МокТестирование().ОтключитьПодмену(КлючПодменыТеста());
		
	СпрОбъект = Справочники.ПростойСправочник.СоздатьЭлемент();
	СпрОбъект.Наименование = "124";
	СпрОбъект.РеквизитБулево = Ложь;
	СпрОбъект.Записать();
	
	Ожидаем.Что(СпрОбъект.РеквизитБулево, "РеквизитБулево должен быть Ложь после отключения мок")
		.Равно(Ложь);
	
КонецПроцедуры

Процедура ТестМока_ЧерезТекучийИнтерфейс() Экспорт
	
	КлючПодмены = "ПолучитьЗапрещенноеНаименование";
	МокТестирование().ОтключитьПодмену(КлючПодмены);
	
	ВозвращаемоеЗначения = "строка из теста";
	
	МокТестирование().Метод(КлючПодмены).ДолженВозвращать(ВозвращаемоеЗначения);
	
	Результат = Справочники.ПростойСправочник.ПолучитьЗапрещенноеНаименование(124);
	
	Ожидаем.Что(Результат, "Результат должен быть ВозвращаемоеЗначения после применения мок")
		.Равно("" + ВозвращаемоеЗначения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючПодменыТеста()
	
	Возврат "ТестМоков.Идентификатор";

КонецФункции

Функция МокТестирование()
	
	Возврат ОбщийМодуль("МокТестирование");

КонецФункции

Функция ОбщийМодуль(Знач ИмяМодуля)
	
	Возврат Вычислить(ИмяМодуля);

КонецФункции

Функция ИмяТеста()
	Возврат Метаданные().Имя;
КонецФункции

#КонецОбласти

//} 

