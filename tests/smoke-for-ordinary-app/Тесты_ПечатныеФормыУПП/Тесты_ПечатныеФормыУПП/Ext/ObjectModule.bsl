//
// 1. Для правильной работы необходима доп.настройка конфигурации -
//	нужно изменить общий модуль УниверсальныеМеханизмы :: метод НапечататьДокумент,
// вставив в начало метода следующий код:
//
//	// начало метода Функция НапечататьДокумент(......) Экспорт
//		
//	// -- Артур -- 05.12.2008 - для возможности тестирования универсальной печати документов/справочников
//		Попытка
//			лПараметрСеанса_глТестированиеЗапущено = глЗначениеПеременной("глТестированиеЗапущено");
//			Если лПараметрСеанса_глТестированиеЗапущено <> Неопределено Тогда
//				Если лПараметрСеанса_глТестированиеЗапущено Тогда
//					глЗначениеПеременнойУстановить("глТестирование_ПоследнийПечатныйДокумент", ПечДокумент);
//					Возврат ПечДокумент;
//				Иначе
//					глЗначениеПеременнойУстановить("глТестирование_ПоследнийПечатныйДокумент", Неопределено);
//				КонецЕсли; 
//			КонецЕсли;		
//		Исключение
//			//ОписаниеОшибки()
//		КонецПопытки;
//	// --завершение

#Область ОписаниеПеременных
Перем КонтекстЯдра;
Перем Утверждения;
Перем Ожидания;

Перем ИмяГлобальнойПеременной_глТестированиеЗапущено;
Перем ИмяГлобальнойПеременной_глТестирование_ПоследнийПечатныйДокумент;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

// Функция - Ключ настройки
// 
// Возвращаемое значение:
//   Строка -  
//
Функция КлючНастройки()
  Возврат ЭтотОбъект.Метаданные().Имя;
КонецФункции

//{ основная процедура для юнит-тестирования xUnitFor1C
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидания = КонтекстЯдра.Плагин("УтвержденияBDD");
	
	ЗагрузитьНастройки();
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
  
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	ЗагрузитьНастройки();
	
	Если Не НужноВыполнятьТест(КонтекстЯдра) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого МетаОбъект Из Метаданные.Документы Цикл
		Если ПравоДоступа("Просмотр", МетаОбъект) Тогда
			ИмяМетаданного = МетаОбъект.Имя;
			
			ФильтрМетаданных = НайтиКоллекциюФильтрМетаданныхИзНастроек("Документы", Настройки, "ПроверятьТолькоИзбранные");
			ЕстьОтборТолькоДляВключенияМетаданных = ЗначениеЗаполнено(ФильтрМетаданных );

			Если ЕстьОтборТолькоДляВключенияМетаданных Тогда
				ВключатьТест = НайтиИмяВКоллекции(ИмяМетаданного, ФильтрМетаданных, КонтекстЯдра);
				Если Не ВключатьТест Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			ДобавитьТестыДляДокумента(НаборТестов, МетаОбъект);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область Тесты

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();

	ИмяГлобальнойПеременной_глТестированиеЗапущено = "глТестированиеЗапущено";
	ИмяГлобальнойПеременной_глТестирование_ПоследнийПечатныйДокумент = "глТестирование_ПоследнийПечатныйДокумент";
	
	глОбщиеЗначения.Вставить(ИмяГлобальнойПеременной_глТестированиеЗапущено, Ложь);
	глОбщиеЗначения.Вставить(ИмяГлобальнойПеременной_глТестирование_ПоследнийПечатныйДокумент, Неопределено);
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	глОбщиеЗначения.Вставить(ИмяГлобальнойПеременной_глТестированиеЗапущено, Ложь);
	глОбщиеЗначения.Вставить(ИмяГлобальнойПеременной_глТестирование_ПоследнийПечатныйДокумент, Неопределено);

	Если ТранзакцияАктивна() Тогда
	    ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура Тест_ПолучитьПечатнуюФорму(МетаИмя, КомандаПечати) Экспорт
	ПлагинНастройки = КонтекстЯдра.Плагин("Настройки");   
	ПропускатьПустыеФормы = Ложь;    
	Пропустить = Настройки.Свойство("ПропускатьПустыеФормы", ПропускатьПустыеФормы) И ПропускатьПустыеФормы;
	
	Идентификатор = КомандаПечати.Идентификатор;
	Расшифровка = КомандаПечати.Расшифровка;
	ЭтоВнешняяФорма = КомандаПечати.ЭтоВнешняяФорма;
	СсылкаНаВнешнююОбработку = КомандаПечати.СсылкаНаВнешнююОбработку;
	
	СсылкаНаОбъектПечати = КомандаПечати.Ссылка;
	ПредставлениеСсылки = КомандаПечати.ПредставлениеСсылки;
	//ЭтоПечатнаяФорма = КомандаПечати.ЭтоПечатнаяФорма;
	
	Если ЭтоВнешняяФорма Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(СсылкаНаОбъектПечати, Расшифровка);
		СообщениеОбОшибке = "Не удалось получить печатную форму объекта из внешней печатной формы для объекта тестирования " + ПредставлениеСсылки;
	Иначе
		ТабДокумент = ПечатныйДокументОтВстроеннойПечати(СсылкаНаОбъектПечати, Расшифровка);
		СообщениеОбОшибке = "Не удалось получить печатную форму объекта. Возможно, что метод УниверсальныеМеханизмы.НапечататьДокумент не изменен или изменен неверно.";
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли; 
	
	Если ТабДокумент = Ложь Тогда
		ВызватьИсключение "Не удалось выполнить печать для объекта тестирования " + ПредставлениеСсылки;
	КонецЕсли; 

	// Высота таб документа = 0 не означает что это ошибка, в типовой форме ПечатьДокументов есть проверка на высоту 
	// и если высота 0, то просто показывается надпись "Печатная форма недоступна."
	// предлагаю пропускать такой тест
	НачалоСообщенияОбОшибке = "Печать документа " + ПредставлениеСсылки + ": ";
	Если ТабДокумент.ВысотаТаблицы = 0 И Пропустить Тогда
		КонтекстЯдра.ПропуститьТест(НСтр("ru = 'Тест пропущен: ВысотаТаблицы равна 0'"));  
	ИначеЕсли Не Пропустить Тогда
		Утверждения.Проверить(ТабДокумент.ВысотаТаблицы > 0, НачалоСообщенияОбОшибке + "Ожидалось, что высота полученного табличного документа будет больше 0!");	
	КонецЕсли;
	
КонецПроцедуры

Процедура Тест_ПропуститьПечатнуюФорму(Знач Сообщение) Экспорт
	КонтекстЯдра.ПропуститьТест(Сообщение);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

Процедура ЗагрузитьНастройки()
	Если ЗначениеЗаполнено(Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПлагинНастройки = КонтекстЯдра.Плагин("Настройки");
    ПлагинНастройки.Инициализация(КонтекстЯдра);
    
	НастройкиПоУмолчанию = НастройкиПоУмолчанию();
    Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройки());   

    Если ТипЗнч(Настройки) <> Тип("Структура") Then
        Настройки = НастройкиПоУмолчанию;
	Иначе
		ЗаполнитьЗначенияСвойств(НастройкиПоУмолчанию, Настройки);
        Настройки = НастройкиПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиПоУмолчанию()
	
	Результат = Новый Структура;
	Результат.Вставить("Используется", Истина);
	Результат.Вставить("КоличествоДокументов", 1);
	//Результат.Вставить("Отбор", Новый Структура); // TODO поправить в коде и задокументировать
	Результат.Вставить("ПропускатьПустыеФормы", Ложь);
	Результат.Вставить("ВыводитьИсключения", Ложь);
	Результат.Вставить("ИсключенияПоИдентификатору", Новый Массив);
	//Результат.Вставить("ИсключенияПоИмени", Новый Массив);
	Результат.Вставить("ИсключенияПоОбъекту", Новый Массив);   
	Результат.Вставить("ПроверятьТолькоИзбранные", Новый Массив);
		
	Возврат Результат;
КонецФункции

Функция НужноВыполнятьТест(КонтекстЯдра)
	
	ЗагрузитьНастройки();
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КлючНастройки = КлючНастройки();
	
	ВыполнятьТест = Истина;
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Используется", ВыполнятьТест) Тогда

			Возврат ВыполнятьТест = Истина;	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция НайтиИмяВКоллекции(Знач ЧтоИщем, Знач КоллекцияДляПоиска, Знач КонтекстЯдра)

	Если Не ЗначениеЗаполнено(КоллекцияДляПоиска) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат КонтекстЯдра.ЕстьВИсключаемойКоллекции(ЧтоИщем, КоллекцияДляПоиска);

КонецФункции

Функция НайтиКоллекциюФильтрМетаданныхИзНастроек(Знач КлючМетаданных, Знач Настройки, Знач ИмяОбщейКоллекции)

	//	 TODO использовать метод плагина Настройки.ЕстьНастройка

	ОбщаяКоллекция = ЗначениеИзСтруктуры(Настройки, ИмяОбщейКоллекции, Новый Структура);

	ЗначениеПоУмолчанию = Новый Массив;

	Если Не ЗначениеЗаполнено(ОбщаяКоллекция) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат ЗначениеИзСтруктуры(ОбщаяКоллекция, КлючМетаданных, ЗначениеПоУмолчанию);

КонецФункции

Функция ЗначениеИзСтруктуры(Знач Структура, Знач ИмяНастройки, Знач ЗначениеПоУмолчанию)

	Результат = Неопределено;

	Если Не Структура.Свойство(ИмяНастройки, Результат) Или Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПечатныеФормыУПП

Процедура ДобавитьТестыДляДокумента(НаборТестов, МетаОбъект)

	ИмяМетаданного = МетаОбъект.Имя;
	
	ОбъектИсключен = Ложь;  
	
	Если КонтекстЯдра.ЕстьВИсключаемойКоллекции(ИмяМетаданного, Настройки.ИсключенияПоОбъекту) Тогда 
		ПредставлениеТеста = "Печатные формы " + ИмяМетаданного;
		Сообщение = "Пропускаем из-за исключения по имени объекта - " + ПредставлениеТеста;
		КонтекстЯдра.Отладка(Сообщение); 
		
		Если Не Настройки.ВыводитьИсключения Тогда
		    Возврат;
		КонецЕсли;	
		
		ОбъектИсключен = Истина;
	КонецЕсли;  
	
	КомандыПечати = ПечатныеФормыУПП(ИмяМетаданного);
	
	Если Не ЗначениеЗаполнено(КомандыПечати) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов = ТаблицаДокументов(МетаОбъект);
	
	Если Не ЗначениеЗаполнено(ТаблицаДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	НаборТестов.НачатьГруппу(СтрШаблон("Печатные формы %1 - Документ.%2 ", МетаОбъект.Синоним, ИмяМетаданного));
	
	Для Каждого ОписаниеПечФормы Из КомандыПечати Цикл

		Идентификатор = ОписаниеПечФормы.Идентификатор;
		Представление = ОписаниеПечФормы.Представление;
		Расшифровка = ОписаниеПечФормы.Расшифровка;
		ЭтоВнешняяФорма = ОписаниеПечФормы.ЭтоВнешняяФорма;
		// TODO можно исключать печатную форму по умолчанию, если Расшифровка = "ПечатьПоУмолчанию" ??
		
		ТипФормы = "Встроенная печатная форма";
		Если ЭтоВнешняяФорма Тогда
			ТипФормы = "Внешняя печатная форма";
		КонецЕсли;
		ПредставлениеТеста = СтрШаблон("%3 %1: %2", ИмяМетаданного, Представление, ТипФормы);
		
		ЭтоИсключение = Ложь; 
		Если КонтекстЯдра.ЕстьВИсключаемойКоллекции(Идентификатор, Настройки.ИсключенияПоИдентификатору) Тогда
			Сообщение = "Пропускаем из-за исключения по идентификатору - " + ПредставлениеТеста;  
			ЭтоИсключение = Истина;
		//ИначеЕсли КонтекстЯдра.ЕстьВИсключаемойКоллекции(ТекущаяКомандаПечати.Представление, Настройки.ИсключенияПоИмени) Тогда
		//	Сообщение = "Пропускаем из-за исключения по имени - " + ПредставлениеТеста;
		//	ЭтоИсключение = Истина;
		ИначеЕсли ОбъектИсключен Тогда
			Сообщение = "Пропускаем из-за исключения по имени объекта - " + ПредставлениеТеста;
			ЭтоИсключение = Истина;
		КонецЕсли;
		
		Если ЭтоИсключение Тогда
			КонтекстЯдра.Отладка(Сообщение); 
			Если Настройки.ВыводитьИсключения Тогда
				ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
				НаборТестов.Добавить("Тест_ПропуститьПечатнуюФорму", ПараметрыТеста, Сообщение);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаДокументов Цикл
			ОписаниеПечФормы.Вставить("Ссылка", Строка.Ссылка);
			ОписаниеПечФормы.Вставить("ПредставлениеСсылки", Строка.Представление);

			ДопИнфо = СтрШаблон("%1;", Строка.Представление); // TODO нужна ссылка на конкретный документ
			ПредставлениеТеста = СтрШаблон("%4 %1: %2: {%3}", ИмяМетаданного, Представление, ДопИнфо, ТипФормы);
			
			ПараметрыТеста = НаборТестов.ПараметрыТеста(ИмяМетаданного, ОписаниеПечФормы);
			НаборТестов.Добавить("Тест_ПолучитьПечатнуюФорму", ПараметрыТеста, ПредставлениеТеста);
			
		КонецЦикла; 
		
	КонецЦикла; 
		
КонецПроцедуры

Функция ПечатныеФормыУПП(Знач ИмяМетаданного)
	Результат = Новый Массив;
	
	ПустойДокумент = Документы[ИмяМетаданного].СоздатьДокумент();
	ПустаяСсылкаНаДокумент = Документы[ИмяМетаданного].ПустаяСсылка();

	Попытка
		СтруктураВнутреннихПечатныхФорм = ПустойДокумент.ПолучитьСтруктуруПечатныхФорм();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонтекстЯдра.Отладка(СтрШаблон("Не удалось получить команды печати для документа %1:
		|%2", ИмяМетаданного, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		
		Возврат Результат;
	КонецПопытки; 
	
	ДеревоМакетовПечати = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(ПустаяСсылкаНаДокумент, СтруктураВнутреннихПечатныхФорм);
	Если ДеревоМакетовПечати.Строки.Количество() <> 0 Тогда
		Для каждого СтрокаДерева Из ДеревоМакетовПечати.Строки Цикл
			Идентификатор = СтрокаДерева.Имя;
			Представление = СокрЛП(СтрокаДерева.Текст);
			Если Представление <> "" Тогда
				Расшифровка = СтрокаДерева.Расшифровка;
				ЭтоВнешняяФорма = ТипЗнч(Расшифровка) = Тип("Структура");
				ЭтоПечатнаяФорма = Не ЭтоВнешняяФорма Или Расшифровка.ВидПечатнойФормы = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;

				Если Не ЭтоПечатнаяФорма Тогда
					Продолжить;
				КонецЕсли;
				
				ОписаниеПечФормы = Новый Структура;
				ОписаниеПечФормы.Вставить("Представление", Представление);
				ОписаниеПечФормы.Вставить("Расшифровка", Расшифровка);
				ОписаниеПечФормы.Вставить("ЭтоВнешняяФорма", ЭтоВнешняяФорма);
				ОписаниеПечФормы.Вставить("ЭтоПечатнаяФорма", ЭтоПечатнаяФорма);
				Если ЭтоВнешняяФорма Тогда
					ОписаниеПечФормы.Вставить("Идентификатор", Представление);
					ОписаниеПечФормы.Вставить("СсылкаНаВнешнююОбработку", Расшифровка.СсылкаНаВнешнююОбработку);
				Иначе
					ОписаниеПечФормы.Вставить("Идентификатор", Идентификатор);
					ОписаниеПечФормы.Вставить("СсылкаНаВнешнююОбработку", Неопределено);
				КонецЕсли;

				Результат.Добавить(ОписаниеПечФормы);
				
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции

Функция ПечатныйДокументОтВстроеннойПечати(СсылкаНаОбъектПечати, Расшифровка)
	глЗначениеПеременнойУстановить(ИмяГлобальнойПеременной_глТестированиеЗапущено, Истина);
	глЗначениеПеременнойУстановить(ИмяГлобальнойПеременной_глТестирование_ПоследнийПечатныйДокумент, Неопределено);
	
	Попытка
		Если Расшифровка = "ПечатьПоУмолчанию" Тогда
			Если НЕ УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(СсылкаНаОбъектПечати) Тогда
				ВызватьИсключение "Не удалось выполнить печать по умолчанию для объекта тестирования " + СсылкаНаОбъектПечати;
			КонецЕсли; 
		Иначе
			СсылкаНаОбъектПечати.ПолучитьОбъект().Печать(Расшифровка);
		КонецЕсли; 
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение "Ошибка тестирования печати объекта: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	глЗначениеПеременнойУстановить(ИмяГлобальнойПеременной_глТестированиеЗапущено, Ложь);
	
	ТабДокумент = глЗначениеПеременной(ИмяГлобальнойПеременной_глТестирование_ПоследнийПечатныйДокумент);
	Если ТабДокумент = Неопределено Тогда
		ВызватьИсключение "Не удалось получить печатную форму объекта. Возможно, что метод УниверсальныеМеханизмы.НапечататьДокумент в конфигурации не изменен или изменен неверно";
	КонецЕсли; 
	
	Возврат ТабДокумент;
КонецФункции

#Область ОтборСуществующихДокументов

Функция ТаблицаДокументов(МетаОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	Представление
	|ИЗ
	|	Документ." + МетаОбъект.Имя + "
	|ГДЕ
	|	Проведен //{Отбор}
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени Убыв";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"ВЫБРАТЬ ПЕРВЫЕ 1", 
		"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Настройки.КоличествоДокументов, "ЧГ=")
	);
	
//	СформироватьОтбор(Запрос, МетаОбъект, Настройки.Отбор, "     // TODO вернуть отбор здесь
	СформироватьОтбор(Запрос, МетаОбъект, Неопределено, "
	|	И ", "//{Отбор}");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

Процедура СформироватьОтбор(Запрос, МетаОбъект, Отбор, Префикс, ЗаменяемыйТекстЗапроса)
	Если Отбор = Неопределено ИЛИ Отбор.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекстЗапроса, "");
		Возврат;
	КонецЕсли;
	
	МассивУсловий = Новый Массив;
	Для Каждого ЭлОтбора Из Отбор Цикл
		ИмяДокумента = ЭлОтбора["ИмяДокумента"];
		Если ИмяДокумента <> Неопределено И НЕ КонтекстЯдра.СтрокаСоответствуетШаблону(МетаОбъект.Имя, ИмяДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлОтб Из ЭлОтбора Цикл
			Если ЭлОтб.Ключ = "ИмяДокумента" Тогда
				Продолжить;
			КонецЕсли;
			
			Рекв = НайтиРеквизит(МетаОбъект, ЭлОтб.Ключ);
			Если Рекв = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Эл Из ЭлОтб.Значение Цикл
				ИмяПрм = "Прм_" + Формат(МассивУсловий.ВГраница()+1, "ЧДЦ=0; ЧН=0; ЧГ=");
				Знч = ПривестиЗначение(Рекв.Тип, Эл.Значение);
				СтрУсл = ПолучитьУсловие(Эл.Ключ);
				
				Запрос.УстановитьПараметр(ИмяПрм, Знч);
				МассивУсловий.Добавить(СтрШаблон("%1 %2 &%3", ЭлОтб.Ключ, СтрУсл, ИмяПрм));
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если МассивУсловий.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекстЗапроса, "");
		Возврат;
	КонецЕсли;
	
	НаЧтоМеняем = Префикс + СтрСоединить(МассивУсловий, "
	|	И ");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекстЗапроса, НаЧтоМеняем);
КонецПроцедуры

Функция НайтиРеквизит(МетаОбъект, Имя)
	Для Каждого Рекв Из МетаОбъект.СтандартныеРеквизиты Цикл
		Если Рекв.Имя = Имя Тогда
			Возврат Рекв;
		КонецЕсли;
	КонецЦикла;
	Возврат МетаОбъект.Реквизиты.Найти(Имя);
КонецФункции

Функция ПривестиЗначение(КТипу, Знч)
	Если КТипу.СодержитТип(Тип("Дата")) И ТипЗнч(Знч) = Тип("Строка") Тогда
		МассивДаты = СтрРазделить(СокрЛП(Знч), "."); 
		Если МассивДаты.Количество() = 3 Тогда
			Возврат Дата(Число(МассивДаты[2]), Число(МассивДаты[1]), Число(МассивДаты[0]));
		КонецЕсли;
		Возврат XMLЗначение(Тип("Дата"), Знч);
	КонецЕсли;
	Возврат КТипу.ПривестиЗначение(Знч);
КонецФункции

Функция ПолучитьУсловие(Текст)
	СтрУсл = НРег(СокрЛП(Текст));
	Если СтрУсл = "lt" Тогда // меньше чем
		Возврат "<";
	ИначеЕсли СтрУсл = "le" Тогда // меньше или равно
		Возврат "<=";
	ИначеЕсли СтрУсл = "eq" Тогда // равно 
		Возврат "=";
	ИначеЕсли СтрУсл = "ne" Тогда // не равно
		Возврат "<>";
	ИначеЕсли СтрУсл = "ge" Тогда // больше или равно
		Возврат ">=";
	ИначеЕсли СтрУсл = "gt" Тогда // больше чем
		Возврат ">";
	ИначеЕсли СтрУсл = "lk" Тогда // на подобии like
		Возврат "ПОДОБНО";
	Иначе
		Возврат СокрЛП(Текст);
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
