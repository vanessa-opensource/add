#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	ЗагрузитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;

	ЗагрузитьНастройки();
	
	Если Не НужноВыполнятьТест() Тогда
		Возврат;
	КонецЕсли;
	
	РазрешенныеСправочники = РазрешенныеОбъектыМетаданных(КонтекстЯдра.Объект);
	
	Для каждого ОбъектМетаданных Из РазрешенныеСправочники Цикл
		ДобавитьТестыДляСправочника(НаборТестов, ОбъектМетаданных);	
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаСервере
Процедура ПередЗапускомТеста() Экспорт
	
	НачатьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗапускаТеста() Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Тест_ЗаписатьГруппуСправочника(СправочникСсылка) Экспорт
	
	ГруппаОбъект = СправочникСсылка.ПолучитьОбъект();
	ГруппаОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПропуститьЗаписьГруппыСправочника(Знач Сообщение) Экспорт
	
	КонтекстЯдра.ПропуститьТест(Сообщение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

&НаКлиенте
Процедура ЗагрузитьНастройки()
	
	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПлагинНастройки = КонтекстЯдра.Плагин("Настройки");
	ПлагинНастройки.Инициализация(КонтекстЯдра);
	
	НастройкиПоУмолчанию = НастройкиПоУмолчанию(); 
	
	Объект.Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройки());
	
	// обратная совместимость с именем ЗаписьГруппСправочников
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройкиУстаревший()); 
	КонецЕсли;  

	// обратная совместимость с именем тесты_ЗаписьГруппСправочников
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройкиУстаревший2()); // обратная совместимость
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Настройки) ИЛИ ТипЗнч(Объект.Настройки) <> Тип("Структура") Тогда
		Объект.Настройки = НастройкиПоУмолчанию;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НастройкиПоУмолчанию, Объект.Настройки);
	
	Объект.Настройки = НастройкиПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Функция КлючНастройки()
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = ИмяТеста();
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;
КонецФункции   

&НаКлиенте
Функция КлючНастройкиУстаревший()
	Возврат "ЗаписьГруппСправочников";
КонецФункции

&НаКлиенте
Функция КлючНастройкиУстаревший2()
	Возврат "тесты_ЗаписьГруппСправочников";
КонецФункции 

&НаКлиенте
Функция НастройкиПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Используется", Истина);
	Результат.Вставить("КоличествоПервыхГрупп", 2);
	Результат.Вставить("КоличествоПоследнихГрупп", 2);
	Результат.Вставить("ВыводитьИсключения", Ложь);
	Результат.Вставить("Исключения", Новый Массив);
	Результат.Вставить("Префикс", "");
	Результат.Вставить("ОтборПоПрефиксу", Ложь);
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Функция НужноВыполнятьТест()
	
	ЗагрузитьНастройки();
	
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыполнятьТест = Истина; 
	
	Если ТипЗнч(Объект.Настройки) = Тип("Структура")
		И Объект.Настройки.Свойство("Используется", ВыполнятьТест) Тогда
		
		Возврат ВыполнятьТест = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ДобавитьТестыДляСправочника(НаборТестов, МетаОбъект)
	
	ПредставлениеТеста = "Проверка записи группы справочника - " + МетаОбъект.Имя;
	Сообщение = "Пропускаем из-за исключения по имени справочника - " + ПредставлениеТеста;
	ЭтоИсключение = Ложь;  
	
	Если КонтекстЯдра.ЕстьВИсключаемойКоллекции(МетаОбъект.Имя, Объект.Настройки.Исключения) Тогда
		КонтекстЯдра.Отладка(Сообщение); 
		
		Если Не Объект.Настройки.ВыводитьИсключения Тогда
		    Возврат;
		КонецЕсли;	
		
		ЭтоИсключение = Истина;
	КонецЕсли;  
	
	ТестыДляГруппСправочников = ПолучитьТестыДляГруппСправочников(МетаОбъект);
	
	Если ТестыДляГруппСправочников = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборТестов.НачатьГруппу(МетаОбъект.Синоним + " - Справочник."  + МетаОбъект.Имя);
		
	Если ЭтоИсключение Тогда
		ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
		НаборТестов.Добавить("Тест_ПропуститьЗаписьГруппыСправочника", ПараметрыТеста, Сообщение);
	Иначе
		Для каждого ТестСправочника Из ТестыДляГруппСправочников Цикл
			ПараметрыТеста = НаборТестов.ПараметрыТеста(ТестСправочника.Ссылка);
			ПредставлениеТеста = "Проверка записи группы справочника - " + ТестСправочника.Представление;
			
			НаборТестов.Добавить("Тест_ЗаписатьГруппуСправочника", ПараметрыТеста, ПредставлениеТеста);			
		КонецЦикла; 
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьТестыДляГруппСправочников(МетаОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ &КоличествоПервыхГрупп
	|	Ссылка
	|ПОМЕСТИТЬ вт_Первые
	|ИЗ
	|	Справочник." + МетаОбъект.Имя + "
	|ГДЕ
	|	ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ &КоличествоПоследнихГрупп
	|	Ссылка
	|ПОМЕСТИТЬ вт_Последние
	|ИЗ
	|	Справочник." + МетаОбъект.Имя + "
	|ГДЕ
	|	ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Первые.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_Все
	|ИЗ
	|	вт_Первые КАК вт_Первые
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	вт_Последние.Ссылка
	|ИЗ
	|	вт_Последние КАК вт_Последние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Все.Ссылка,
	|   ПРЕДСТАВЛЕНИЕ(вт_Все.Ссылка) КАК Представление
	|ИЗ
	|	вт_Все КАК вт_Все";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
								"ВЫБРАТЬ ПЕРВЫЕ &КоличествоПервыхГрупп", 
								"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Объект.Настройки.КоличествоПервыхГрупп, "ЧГ=")
								);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
								"ВЫБРАТЬ ПЕРВЫЕ &КоличествоПоследнихГрупп", 
								"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Объект.Настройки.КоличествоПоследнихГрупп, "ЧГ=")
								);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли; 

	СтруктурыСправочника = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСправочника = Новый Структура();
		СтруктураСправочника.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураСправочника.Вставить("Представление", Выборка.Представление); 
		
		СтруктурыСправочника.Добавить(СтруктураСправочника);
	КонецЦикла;
	
	Возврат СтруктурыСправочника;
		
КонецФункции 

&НаСервере
Функция РазрешенныеОбъектыМетаданных(Знач ОбъектКонтекстаЯдра)
	
	КонтекстЯдра = КонтекстЯдраНаСервере(ОбъектКонтекстаЯдра);
	
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	ЗапросыИзБД.Инициализация(КонтекстЯдра);

	РазрешенныеСправочники = Новый Массив;
	
	Для каждого ОбъектМетаданных Из Метаданные.Справочники Цикл 
		Если Объект.Настройки.ОтборПоПрефиксу 
			И Не СтрНачинаетсяС(ВРег(ОбъектМетаданных.Имя), ВРег(Объект.Настройки.Префикс)) Тогда
			
			Продолжить;
		КонецЕсли;
		
		МожноМенять = ЗапросыИзБД.РазрешеноИзменятьОбъектВМоделиСервиса(ОбъектМетаданных); 
		Иерархический = ОбъектМетаданных.Иерархический 
							И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
		Если МожноМенять И Иерархический И ПравоДоступа("Изменение", ОбъектМетаданных) Тогда	
			СтруктураСправочника = Новый Структура;
			СтруктураСправочника.Вставить("Имя", ОбъектМетаданных.Имя);
			СтруктураСправочника.Вставить("Синоним", ОбъектМетаданных.Синоним);
					
			РазрешенныеСправочники.Добавить(СтруктураСправочника);	
		КонецЕсли;
	КонецЦикла;             
	
	Возврат РазрешенныеСправочники;
	
КонецФункции

&НаКлиенте
Функция ИмяТеста()
	
	Возврат ИмяТестаНаСервере();
	
КонецФункции 

&НаСервере
Функция ИмяТестаНаСервере()
	
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтекстЯдраНаСервере(Знач ОбъектКонтекстаЯдра)

	КонтекстЯдра = ВнешниеОбработки.Создать("xddTestRunner");
	КонтекстЯдра.ИнициализацияНаСервере(ОбъектКонтекстаЯдра);  
	
	Возврат КонтекстЯдра;

КонецФункции

#КонецОбласти