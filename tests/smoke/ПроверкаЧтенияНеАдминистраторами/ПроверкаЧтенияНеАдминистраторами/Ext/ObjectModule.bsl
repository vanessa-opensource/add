#Область ОписаниеПеременных

Перем КонтекстЯдра;
Перем Ожидаем, ИтераторМетаданных;

Перем НаборТестов;
Перем ПривилегированныеРоли;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

Функция КлючНастройки() Экспорт
	Возврат "ПроверкаЧтенияНеАдминистраторами";
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт

	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	
	ЗагрузитьНастройки();
	
	Если Не ЗначениеЗаполнено(ПривилегированныеРоли) Или Не НужноВыполнятьТест() Тогда 
		Возврат;
	КонецЕсли;
	
	ИтераторМетаданных = КонтекстЯдра.Плагин("ИтераторМетаданных");
	ИтераторМетаданных.Инициализация(КонтекстЯдраПараметр); 	// Сброс реквизитов плагина. Необходимо сделать, т.к. плагин уже мог быть инициализирован другой тестовой обработкой	
	// Истина;   // В принципе, можно и не дополнять. Проверял работу этого флага.
	ИтераторМетаданных.ДополнятьЗависимымиОбъектами = Настройки.ДополнятьЗависимымиОбъектами;
	
	
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.Документы);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.Справочники);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.РегистрыСведений);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.Константы);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.РегистрыНакопления);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.ПланыВидовХарактеристик);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.Задачи);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.БизнесПроцессы);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.ПланыОбмена);
	
	// При ДополнятьЗависимымиОбъектами = Истина, в объектах проверки появляются и перечисления. 
	// Но настройки прав для перечислений - нет. Поэтому Перечисления исключаем.
	ИтераторМетаданных.ИсключаемыеМетаданные.Добавить(Метаданные.Перечисления); 
		
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестовПараметр, КонтекстЯдраПараметр) Экспорт
	
	НаборТестов = НаборТестовПараметр; 	// Запищем в переменную модуля, чтобы другие методы могли дополнять набор тестов
	Инициализация(КонтекстЯдраПараметр); // Все инициализируем. В т.ч. и ИтераторМетаданных
	
	НаборТестов.Добавить("Тест_РолиОпределены", Неопределено, "Есть роли с полными/администраторскими полномочиями чтения - "
		+ ЗаголовокОбщаяЧасть());
	
	// Заполним дерево тестов
	Если ЗначениеЗаполнено(ПривилегированныеРоли) Тогда 
		ИтераторМетаданных.Перечислить(ЭтотОбъект, "ПриСледующемОбъектеМетаданных", "ПриСледующемТипеМетаданных");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРоль(РолиСоответствие, ИмяРоли)
	
	Попытка
		РолиСоответствие.Вставить(Метаданные.Роли[ИмяРоли], Истина);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Тесты

Процедура Тест_РолиОпределены() Экспорт
	Ожидаем.Что(ПривилегированныеРоли, "Есть проверяемые роли").Заполнено();	
КонецПроцедуры

Процедура ПриСледующемТипеМетаданных(ОбъектМетаданных, Родитель) Экспорт
	
	ЗаголовокОбщаяЧасть = ЗаголовокОбщаяЧасть();
	Если Родитель = Неопределено И ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда 
		НаборТестов.НачатьГруппу(ЗаголовокОбщаяЧасть + " " + ОбъектМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСледующемОбъектеМетаданных(ОбъектМетаданных, Родитель) Экспорт
	
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	
	ЗаголовокОбщаяЧасть = ЗаголовокОбщаяЧасть();
	
	Если ОбъектМетаданных <> Неопределено Тогда
		Сообщение = "Пропускаем из-за исключения по имени метаданного - " + 
			СтрШаблон(ШаблонПредставления(), Родитель, ОбъектМетаданных.Имя);
		Если ДобавитьТестИсключениеЕслиЕстьВИсключаемойКоллекции(ОбъектМетаданных.Имя, Настройки.ИсключенияПоИмениМетаданных, 
					Сообщение, НаборТестов) Тогда
			Возврат;
		КонецЕсли;
		
		Сообщение = "Пропускаем из-за исключения по проверямым типам - " + 
			СтрШаблон(ШаблонПредставления(), Родитель, ОбъектМетаданных.Имя);
		Если ДобавитьТестИсключениеЕслиНетВСпискеПоТипам(ОбъектМетаданных.Имя, Родитель, Сообщение, НаборТестов) Тогда
			Возврат;
		КонецЕсли;
			
		ПараметрыТеста = НаборТестов.ПараметрыТеста(ПолноеИмяОбъекта, Родитель);
		ЗаголовокТеста = "" + ОбъектМетаданных.ПолноеИмя() + ": " + ЗаголовокОбщаяЧасть;
		НаборТестов.Добавить("Тест_ПроверитьНеАдминистраторскиеПраваНаЧтение", ПараметрыТеста, ЗаголовокТеста);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Тест_ПроверитьНеАдминистраторскиеПраваНаЧтение(ПолноеИмяМетаданного, Родитель) Экспорт
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданного);
	
	ЧтениеДоступно = Ложь;
	Для Каждого ТекРоль Из Метаданные.Роли Цикл 
		
		Если ПривилегированныеРоли.Получить(ТекРоль) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ПараметрыДоступаОбъекта = ПараметрыДоступа("Read", ОбъектМетаданных, , ТекРоль);
		Если ПараметрыДоступаОбъекта.Доступность Тогда 
			ЧтениеДоступно = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Ожидаем.Что(ЧтениеДоступно, ПолноеИмяМетаданного + " недоступно для чтения ролями без привилегий").ЕстьИстина();
	
КонецПроцедуры

Функция ЗаголовокОбщаяЧасть()
	Возврат "Проверка доступа на Чтение Не-Администраторами";
КонецФункции

Процедура Тест_ПропуститьМетаданное(Знач Сообщение) Экспорт
	КонтекстЯдра.ПропуститьТест(Сообщение);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ШаблонПредставления()
	Возврат ЗаголовокОбщаяЧасть() + " %1: %2";
КонецФункции

Функция ДобавитьТестИсключениеЕслиНетВСпискеПоТипам(Знач МетаобъектИмя, Знач Родитель, Знач Сообщение, Знач НаборТестов)
	Если Родитель = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОтборПоТипу = ПроверятьЭтотТипМетаданных(Родитель, Ложь);
	Если ОтборПоТипу <> Неопределено И ОтборПоТипу.Количество() > 0 Тогда
		Если НЕ КонтекстЯдра.ЕстьВИсключаемойКоллекции(МетаобъектИмя, ОтборПоТипу) Тогда
			КонтекстЯдра.Отладка(Сообщение);
			ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
			
			//НаборТестов.Добавить("Тест_ПропуститьМетаданное", ПараметрыТеста, Сообщение);
			
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ДобавитьТестИсключениеЕслиЕстьВИсключаемойКоллекции(Знач ЧтоИщем, Знач КоллекцияДляПоиска, Знач Сообщение,
			Знач НаборТестов)
			
	Если КонтекстЯдра.ЕстьВИсключаемойКоллекции(ЧтоИщем, КоллекцияДляПоиска) Тогда
		КонтекстЯдра.Отладка(Сообщение);
		ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
		
		//НаборТестов.Добавить("Тест_ПропуститьМетаданное", ПараметрыТеста, Сообщение);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#Область Настройки

Процедура ЗагрузитьНастройки()
	Если ЗначениеЗаполнено(Настройки) Тогда
		Возврат;
	КонецЕсли;

	ПлагинНастройки = КонтекстЯдра.Плагин("Настройки");
	ПлагинНастройки.Инициализация(КонтекстЯдра);
	
	Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройки());
	
	НастройкиПоУмолчанию = НастройкиПоУмолчанию();
    Если ТипЗнч(Настройки) <> Тип("Структура") Then
        Настройки = НастройкиПоУмолчанию;
	Иначе
		ЗаполнитьЗначенияСвойств(НастройкиПоУмолчанию, Настройки);
        Настройки = НастройкиПоУмолчанию;
	КонецЕсли;
	
	МассивПривилегированныеРоли = Настройки.ПривилегированныеРоли;
	
	ПривилегированныеРоли = Новый Соответствие;
	Если ЗначениеЗаполнено(МассивПривилегированныеРоли) Тогда
		Для Каждого ИмяРоли Из МассивПривилегированныеРоли Цикл
			ДобавитьРоль(ПривилегированныеРоли, ИмяРоли);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция НастройкиПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Используется", Истина);
	Результат.Вставить("ИсключенияПоИмениМетаданных", Новый Массив);
	Результат.Вставить("ПривилегированныеРоли", ЗаполнитьПривилегированныеРолиПоУмолчанию());
	Результат.Вставить("ПроверятьТолькоЭтиОбъекты", Новый Структура);
	Результат.Вставить("ДополнятьЗависимымиОбъектами", Истина);
	
	Возврат Результат;
КонецФункции

Функция ЗаполнитьПривилегированныеРолиПоУмолчанию()
	// Заполняем специализированные роли - это не администраторские роли и не общие роли на Чтение
	Результат = Новый Массив;
	
	Результат.Добавить("Админ");
	Результат.Добавить("Администратор");
	Результат.Добавить("ПолныеПрава");
	Результат.Добавить("АдминНСИ");
	Результат.Добавить("Тестирование");
	Результат.Добавить("РазработкаКонфигурации");
	Результат.Добавить("Обмен");
	Результат.Добавить("Пользователь"); // общая роль на Чтение
	
	Возврат Результат;
КонецФункции

Функция НужноВыполнятьТест()
	
	ЗагрузитьНастройки();
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КлючНастройки = КлючНастройки();
	
	ВыполнятьТест = Истина;
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Используется", ВыполнятьТест) Тогда

			Возврат ВыполнятьТест = Истина;	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ДобавитьДопустимоеМетаданное(ИтераторМетаданных, МетаОбъект)
	Если ПроверятьЭтотТипМетаданных(МетаОбъект) Тогда
		ИтераторМетаданных.ДопустимыеМетаданные.Добавить(МетаОбъект);
	Иначе
		ИтераторМетаданных.ИсключаемыеМетаданные.Добавить(МетаОбъект);
	КонецЕсли;
КонецПроцедуры

Функция ПроверятьЭтотТипМетаданных(МетаОбъект, ВернутьБулево = Истина)
	Если Настройки.ПроверятьТолькоЭтиОбъекты = Неопределено ИЛИ Настройки.ПроверятьТолькоЭтиОбъекты.Количество() = 0 
		ИЛИ МетаОбъект = Неопределено Тогда
		Возврат ?(ВернутьБулево, Истина, Неопределено);
	КонецЕсли;
	
	Если ТипЗнч(МетаОбъект) = Тип("КоллекцияОбъектовМетаданных") Тогда
		Если МетаОбъект.Количество() = 0 Тогда
			Возврат ?(ВернутьБулево, Истина, Неопределено);
		КонецЕсли;
		ПолнИмя = СтрРазделить(МетаОбъект[0].ПолноеИмя(),".")[0];
	ИначеЕсли ТипЗнч(МетаОбъект) = Тип("Строка") Тогда
		ПолнИмя = МетаОбъект;
	Иначе
		ПолнИмя = МетаОбъект.ПолноеИмя();
	КонецЕсли;
	
	СоставИмени = СтрРазделить(ПолнИмя,".");
	ТипИмя = СоставИмени[0];
	Если СоставИмени.Количество() > 1 Тогда
		МетаОбъектИмя = СоставИмени[1];
	Иначе
		МетаОбъектИмя = Неопределено;
	КонецЕсли;
	
	Знч = Неопределено;
	Рез = Настройки.ПроверятьТолькоЭтиОбъекты.Свойство(ТипИмя, Знч);
	
	Если Рез И МетаОбъектИмя <> Неопределено И Знч <> Неопределено И Знч.Количество() > 0 Тогда
		Рез = КонтекстЯдра.ЕстьВИсключаемойКоллекции(МетаобъектИмя, Знч);
	КонецЕсли;
	
	Если ВернутьБулево Тогда
		Возврат Рез;
	Иначе
		Возврат Знч;
	КонецЕсли;
КонецФункции

#КонецОбласти

Процедура ЗаписатьИнформациюВЖурналРегистрации(Знач Комментарий)
	ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Информация,,, Комментарий);
КонецПроцедуры

Процедура ЗаписатьПредупреждениеВЖурналРегистрацииСервер(Комментарий)
	ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение, , , Комментарий);
КонецПроцедуры
	
Процедура ЗаписатьОшибкуВЖурналРегистрации(Комментарий)
	ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
КонецПроцедуры

Функция ИмяСобытия()
	Возврат "VanessaADD.Дымовые.ПроверкаЧтенияНеАдминистраторами"; // по аналогии с другими тестами
КонецФункции


#КонецОбласти
