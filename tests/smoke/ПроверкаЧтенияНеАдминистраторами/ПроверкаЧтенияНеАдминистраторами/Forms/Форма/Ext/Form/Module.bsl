#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра; 

&НаКлиенте
Перем НаборТестов;  

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт

	КонтекстЯдра = КонтекстЯдраПараметр;
	
	ЗагрузитьНастройки();
	
	Если Не ЗначениеЗаполнено(Объект.Настройки.ПривилегированныеРоли) Или Не НужноВыполнятьТест() Тогда 
		Возврат;
	КонецЕсли;
			
КонецПроцедуры 
 
&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестовПараметр, КонтекстЯдраПараметр) Экспорт
	
	НаборТестов = НаборТестовПараметр; 	// Запищем в переменную модуля, чтобы другие методы могли дополнять набор тестов
	Инициализация(КонтекстЯдраПараметр); // Все инициализируем. В т.ч. и ИтераторМетаданных
	
	НаборТестов.Добавить("Тест_РолиОпределены", Неопределено, "Есть роли с полными/администраторскими полномочиями чтения - "
		+ ЗаголовокОбщаяЧасть());
	
	// Заполним дерево тестов
	Если ЗначениеЗаполнено(Объект.Настройки.ПривилегированныеРоли) Тогда 
		ЗаполнитьИтераторМетаданных(КонтекстЯдра.Объект);
		ЗаполнитьДеревоТестов();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьИтераторМетаданных(Знач ОбъектКонтекстаЯдра)
	
	ГруппыТестов.Очистить();
	ПодготовленныеТесты.Очистить();
	
    КонтекстЯдра = КонтекстЯдраНаСервере(ОбъектКонтекстаЯдра);
	
	ИтераторМетаданных = КонтекстЯдра.Плагин("ИтераторМетаданных");
	ИтераторМетаданных.Инициализация(КонтекстЯдра); 	
	ИтераторМетаданных.ДополнятьЗависимымиОбъектами = Объект.Настройки.ДополнятьЗависимымиОбъектами;
	
	ЗаполнитьСпискиМетаданных(ИтераторМетаданных); 
	
	ИтераторМетаданных.Перечислить(ЭтотОбъект, "ПриСледующемОбъектеМетаданных", "ПриСледующемТипеМетаданных");
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьСпискиМетаданных(ИтераторМетаданных)
	
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.Документы);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.Справочники);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.РегистрыСведений);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.Константы);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.РегистрыНакопления);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.ПланыВидовХарактеристик);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.Задачи);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.БизнесПроцессы);
	ДобавитьДопустимоеМетаданное(ИтераторМетаданных, Метаданные.ПланыОбмена); 
	
	// При ДополнятьЗависимымиОбъектами = Истина, в объектах проверки появляются и перечисления. 
	// Но настройки прав для перечислений - нет. Поэтому Перечисления исключаем.
	ИтераторМетаданных.ИсключаемыеМетаданные.Добавить(Метаданные.Перечисления); 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоТестов()
		
	ЗаголовокОбщаяЧасть = ЗаголовокОбщаяЧасть(); 
		
	Для каждого СтрокаГруппы Из ГруппыТестов Цикл
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ТипМетаданных", СтрокаГруппы.ТипГруппы);
				
		СтрокиСТестами = ПодготовленныеТесты.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиСТестами.Количество() <= 0 Тогда			
			Продолжить;
		КонецЕсли;    
		
		НаборТестов.НачатьГруппу(СтрокаГруппы.ИмяГруппы);
		
		Для каждого СтрокаСТестом Из СтрокиСТестами Цикл				
			Если ДобавитьТестИсключениеЕслиЕстьВИсключаемойКоллекции(СтрокаСТестом.Имя, 
					Объект.Настройки.ИсключенияПоИмениМетаданных, СтрокаСТестом.СообщениеПропускПоИмени, НаборТестов) Тогда 
					
				Продолжить;
			КонецЕсли;  
			
			Если ДобавитьТестИсключениеЕслиНетВСпискеПоТипам(СтрокаСТестом.Имя, СтрокаГруппы.ТипГруппы, 
					СтрокаСТестом.СообщениеПропускПоТипу, НаборТестов) Тогда 
					
				Продолжить;
			КонецЕсли;
			
			ПараметрыТеста = НаборТестов.ПараметрыТеста(СтрокаСТестом.ПолноеИмя);
			ЗаголовокТеста = "" + СтрокаСТестом.ПолноеИмя + ": " + ЗаголовокОбщаяЧасть;   
			
			НаборТестов.Добавить("Тест_ПроверитьНеАдминистраторскиеПраваНаЧтение", ПараметрыТеста, ЗаголовокТеста);
		КонецЦикла;
	КонецЦикла; 
	
	ГруппыТестов.Очистить();
	ПодготовленныеТесты.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура Тест_ПропуститьМетаданное(Знач Сообщение) Экспорт
	КонтекстЯдра.ПропуститьТест(Сообщение);
КонецПроцедуры

&НаСервере
Процедура Тест_РолиОпределены() Экспорт
	  
	Если НЕ ЗначениеЗаполнено(Объект.Настройки.ПривилегированныеРоли) Тогда
		СообщениеОшибки = СформироватьСообщениеОбОшибке(Объект.Настройки.ПривилегированныеРоли, "является ЗАПОЛНЕННЫМ.");
		
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
	
КонецПроцедуры    

&НаСервере
Процедура Тест_ПроверитьНеАдминистраторскиеПраваНаЧтение(ПолноеИмяМетаданного) Экспорт
		
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданного);	
	ЧтениеДоступно = Ложь;     
	
	МассивПривилегированныеРоли = Объект.Настройки.ПривилегированныеРоли;
	
	ПривилегированныеРоли = Новый Соответствие;
	Если ЗначениеЗаполнено(МассивПривилегированныеРоли) Тогда
		Для Каждого ИмяРоли Из МассивПривилегированныеРоли Цикл
			ДобавитьРоль(ПривилегированныеРоли, ИмяРоли);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекущаяРоль Из Метаданные.Роли Цикл 	
		Если ПривилегированныеРоли.Получить(ТекущаяРоль) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ПараметрыДоступаОбъекта = ПараметрыДоступа("Read", ОбъектМетаданных, , ТекущаяРоль);
		
		Если ПараметрыДоступаОбъекта.Доступность Тогда 
			ЧтениеДоступно = Истина;  	
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ЧтениеДоступно Тогда
		СообщениеОшибки = СформироватьСообщениеОбОшибке(Формат(ЧтениеДоступно, "БЛ=Ложь; БИ=Истина"), "является ИСТИНОЙ.");
		ВызватьОшибкуПроверки(СообщениеОшибки);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРоль(РолиСоответствие, ИмяРоли)
	
	Попытка
		РолиСоответствие.Вставить(Метаданные.Роли[ИмяРоли], Истина);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСледующемТипеМетаданных(ОбъектМетаданных, Родитель) Экспорт
	
	ЗаголовокОбщаяЧасть = ЗаголовокОбщаяЧасть();
	
	Если Родитель = Неопределено И ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда 	
		ИмяГруппы = ЗаголовокОбщаяЧасть + " " + ОбъектМетаданных;  

		НоваяСтрокаГрупп = ГруппыТестов.Добавить();
		НоваяСтрокаГрупп.ИмяГруппы = ИмяГруппы;
		НоваяСтрокаГрупп.ТипГруппы = ОбъектМетаданных;
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПриСледующемОбъектеМетаданных(ОбъектМетаданных, Родитель) Экспорт

	Если ОбъектМетаданных = Неопределено Тогда 
		Возврат;
	КонецЕсли;  
	
	Если Объект.Настройки.ОтборПоПрефиксу И Не СтрНачинаетсяС(ВРег(ОбъектМетаданных.Имя), ВРег(Объект.Настройки.Префикс)) Тогда
		Возврат;
	КонецЕсли;  
	
	ТипМетаданных = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".")[0];	
	
	СообщениеПропускПоИмени = "Пропускаем из-за исключения по имени метаданного - " + 
					СтрШаблон(ШаблонПредставления(), Родитель, ОбъектМетаданных.Имя); 
					
	СообщениеПропускПоТипу = "Пропускаем из-за исключения по проверямым типам - " + 
					СтрШаблон(ШаблонПредставления(), Родитель, ОбъектМетаданных.Имя);				
					
	НоваяСтрокаТестов = ПодготовленныеТесты.Добавить(); 
	НоваяСтрокаТестов.Имя = ОбъектМетаданных.Имя;
	НоваяСтрокаТестов.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();	 
	НоваяСтрокаТестов.ТипМетаданных = ТипМетаданных;
	НоваяСтрокаТестов.СообщениеПропускПоИмени = СообщениеПропускПоИмени;
	НоваяСтрокаТестов.СообщениеПропускПоТипу = СообщениеПропускПоТипу;  
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДопустимоеМетаданное(ИтераторМетаданных, ОбъектМетаданных)
	
	Если ПроверятьЭтотТипМетаданных(ОбъектМетаданных) Тогда
		ИтераторМетаданных.ДопустимыеМетаданные.Добавить(ОбъектМетаданных);
	Иначе
		ИтераторМетаданных.ИсключаемыеМетаданные.Добавить(ОбъектМетаданных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверятьЭтотТипМетаданных(ОбъектМетаданных, ВернутьБулево = Истина)
	
	Если Объект.Настройки.ПроверятьТолькоЭтиОбъекты = Неопределено 
		ИЛИ Объект.Настройки.ПроверятьТолькоЭтиОбъекты.Количество() = 0 
		ИЛИ ОбъектМетаданных = Неопределено Тогда 
		
		Возврат ?(ВернутьБулево, Истина, Неопределено);
	КонецЕсли;
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("КоллекцияОбъектовМетаданных") Тогда
		Если ОбъектМетаданных.Количество() = 0 Тогда
			Возврат ?(ВернутьБулево, Истина, Неопределено);
		КонецЕсли; 
		
		ПолноеИмя = СтрРазделить(ОбъектМетаданных[0].ПолноеИмя(), ".")[0];
	ИначеЕсли ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		ПолноеИмя = ОбъектМетаданных;
	Иначе
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	КонецЕсли;
	
	СоставИмени = СтрРазделить(ПолноеИмя, ".");	
	ИмяТипа = СоставИмени[0];
	
	Если СоставИмени.Количество() > 1 Тогда
		ИмяОбъектаМетаданных = СоставИмени[1];
	Иначе
		ИмяОбъектаМетаданных = Неопределено;
	КонецЕсли;
	
	ЗначениеВозврата = Неопределено;
	Результат = Объект.Настройки.ПроверятьТолькоЭтиОбъекты.Свойство(ИмяТипа, ЗначениеВозврата);  
		
	Если Результат И ИмяОбъектаМетаданных <> Неопределено 
		И ЗначениеВозврата <> Неопределено 
		И ЗначениеВозврата.Количество() > 0 Тогда    
		
		Результат = ЗначениеЗаполнено(ЗначениеВозврата.Найти(ИмяОбъектаМетаданных));
	КонецЕсли;
	
	Если ВернутьБулево Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеВозврата;
	КонецЕсли;  
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ДобавитьТестИсключениеЕслиНетВСпискеПоТипам(Знач ИмяОбъектаМетаданных, Знач Родитель, Знач Сообщение, Знач НаборТестов)
	
	Если Родитель = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОтборПоТипу = ПроверятьЭтотТипМетаданных(Родитель, Ложь);
	
	Если ОтборПоТипу <> Неопределено И ОтборПоТипу.Количество() > 0 Тогда
		Если НЕ КонтекстЯдра.ЕстьВИсключаемойКоллекции(ИмяОбъектаМетаданных, ОтборПоТипу) Тогда
			КонтекстЯдра.Отладка(Сообщение);
			
			ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
			
			//НаборТестов.Добавить("Тест_ПропуститьМетаданное", ПараметрыТеста, Сообщение);
			
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ДобавитьТестИсключениеЕслиЕстьВИсключаемойКоллекции(Знач ЧтоИщем, Знач КоллекцияДляПоиска, Знач Сообщение, Знач НаборТестов)
			
	Если КонтекстЯдра.ЕстьВИсключаемойКоллекции(ЧтоИщем, КоллекцияДляПоиска) Тогда
		КонтекстЯдра.Отладка(Сообщение);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
		
		//НаборТестов.Добавить("Тест_ПропуститьМетаданное", ПараметрыТеста, Сообщение);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонПредставления()
	Возврат ЗаголовокОбщаяЧасть() + " %1: %2";
КонецФункции 

&НаСервереБезКонтекста
Функция ЗаголовокОбщаяЧасть()
	Возврат "Проверка доступа на Чтение Не-Администраторами";
КонецФункции

&НаСервере
Функция СформироватьСообщениеОбОшибке(Знач ПроверяемоеЗначение, Знач Ожидание)   
	Возврат "Ожидали, что проверяемое значение (" + ПроверяемоеЗначение + ") " + Ожидание;	
КонецФункции  

&НаСервере
Процедура ВызватьОшибкуПроверки(Знач СообщениеОшибки)  
	
	Префикс = "[Failed]";
	
	ВызватьИсключение Префикс + " " + СообщениеОшибки;  
	
КонецПроцедуры

#Область Настройки

&НаКлиенте
Процедура ЗагрузитьНастройки()
	
	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;

	ПлагинНастройки = КонтекстЯдра.Плагин("Настройки");
	ПлагинНастройки.Инициализация(КонтекстЯдра);
	
	НастройкиПоУмолчанию = НастройкиПоУмолчанию();
	
	Объект.Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройки());	
	
	// обратная совместимость с именем ПроверкаЧтенияНеАдминистраторами
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройкиУстаревший()); 
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(Объект.Настройки) ИЛИ ТипЗнч(Объект.Настройки) <> Тип("Структура") Тогда
		Объект.Настройки = НастройкиПоУмолчанию;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НастройкиПоУмолчанию, Объект.Настройки);
	
	Объект.Настройки = НастройкиПоУмолчанию;

КонецПроцедуры

&НаКлиенте
Функция НастройкиПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Используется", Истина);
	Результат.Вставить("ИсключенияПоИмениМетаданных", Новый Массив);
	Результат.Вставить("ПривилегированныеРоли", ЗаполнитьПривилегированныеРолиПоУмолчанию());
	Результат.Вставить("ПроверятьТолькоЭтиОбъекты", Новый Структура);
	Результат.Вставить("ДополнятьЗависимымиОбъектами", Истина); 
	Результат.Вставить("ОтборПоПрефиксу", Ложь);
	Результат.Вставить("Префикс", "");
	
	Возврат Результат;  
	
КонецФункции

&НаКлиенте
Функция КлючНастройки()
	
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = ИмяТеста();
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;  
	
КонецФункции 

&НаКлиенте
Функция КлючНастройкиУстаревший() Экспорт
	Возврат "ПроверкаЧтенияНеАдминистраторами";
КонецФункции 

&НаКлиенте
Функция ЗаполнитьПривилегированныеРолиПоУмолчанию()
	
	// Заполняем специализированные роли - это не администраторские роли и не общие роли на Чтение
	Результат = Новый Массив;
	
	Результат.Добавить("Админ");
	Результат.Добавить("Администратор");
	Результат.Добавить("ПолныеПрава");
	Результат.Добавить("АдминНСИ");
	Результат.Добавить("Тестирование");
	Результат.Добавить("РазработкаКонфигурации");
	Результат.Добавить("Обмен");
	Результат.Добавить("Пользователь"); // общая роль на Чтение
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Функция НужноВыполнятьТест()
	
	ЗагрузитьНастройки();
	
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат Истина;
	КонецЕсли;
		
	ВыполнятьТест = Истина;   
	
	Если ТипЗнч(Объект.Настройки) = Тип("Структура") 
		И Объект.Настройки.Свойство("Используется", ВыполнятьТест) Тогда

		Возврат ВыполнятьТест = Истина;	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

&НаКлиенте
Функция ИмяТеста()
	
	Возврат ИмяТестаНаСервере();
	
КонецФункции 

&НаСервере
Функция ИмяТестаНаСервере()
	
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтекстЯдраНаСервере(Знач ОбъектКонтекстаЯдра)

	КонтекстЯдра = ВнешниеОбработки.Создать("xddTestRunner");
	КонтекстЯдра.ИнициализацияНаСервере(ОбъектКонтекстаЯдра);  
	
	Возврат КонтекстЯдра;

КонецФункции

&НаСервере
Процедура ЗаписатьИнформациюВЖурналРегистрации(Знач Комментарий)
	ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Информация,,, Комментарий);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПредупреждениеВЖурналРегистрацииСервер(Комментарий)
	ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Предупреждение, , , Комментарий);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурналРегистрации(Комментарий)
	ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСобытия()
	Возврат "VanessaADD.Дымовые.Тесты_ПроверкаЧтенияНеАдминистраторами"; // по аналогии с другими тестами
КонецФункции

#КонецОбласти
