#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем СтроковыеУтилиты;
&НаКлиенте
Перем ПроверятьОсновныеРоли;

#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
	
	Настройки(КонтекстЯдра, ИмяТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	Инициализация(КонтекстЯдраПараметр);
	
	Если Не ВыполнятьТест(КонтекстЯдра) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыМетаданных = ОбъектыМетаданных();
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если ОбъектМетаданных.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НаборТестов.НачатьГруппу(ОбъектМетаданных.Ключ, Ложь);
		Для Каждого Элемент Из ОбъектМетаданных.Значение Цикл
			НаборТестов.Добавить(
				"ТестДолжен_ПроверитьЧтоНетПравНаУдалениеИлиПометкуПредопределенныхДанных", 
				НаборТестов.ПараметрыТеста(Элемент.ПолноеИмя), 
				Элемент.ИмяТеста);	
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройками

&НаКлиенте
Процедура Настройки(КонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьОсновныеРоли = Истина;
	ПлагинНастроек = КонтекстЯдра.Плагин("Настройки");
	Объект.Настройки = ПлагинНастроек.ПолучитьНастройкиТеста(ПутьНастройки);
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Настройки.Свойство("ПроверятьОсновныеРоли") Тогда
		ПроверятьОсновныеРоли = Настройки.ПроверятьОсновныеРоли;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьЧтоНетПравНаУдалениеИлиПометкуПредопределенныхДанных(ПолноеИмяМетаданных) Экспорт
		
	Результат = ПроверитьЧтоНетПравНаУдалениеИлиПометкуПредопределенныхДанных(ПолноеИмяМетаданных, ПроверятьОсновныеРоли);
	ТекстШаблона = НСтр("ru = 'Есть право на удаление или пометку предопределенных объектов:%1'");
	ТекстРезультата = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ТекстШаблона, Результат);
	Утверждения.Проверить(Результат = "", ТекстРезультата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЧтоНетПравНаУдалениеИлиПометкуПредопределенныхДанных(ПолноеИмяМетаданных, ПроверятьОсновныеРоли)

	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);	
	Результат = "";
	
	ПроверитьПрава(Результат, ОбъектМетаданных, ПроверятьОсновныеРоли);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПроверитьПрава(Результат, ОбъектМетаданных, ПроверятьОсновныеРоли)
	
	СписокПрав = СписокПрав();
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		
		Если Не ПроверятьОсновныеРоли И Метаданные.ОсновныеРоли.Содержит(Роль) Тогда
			Продолжить;
		КонецЕсли;
				
		Для Каждого Право Из СписокПрав Цикл
			Попытка
				ЕстьПраво = ПравоДоступа(Право, ОбъектМетаданных, Роль);
			Исключение
				ЕстьПраво = Ложь;
			КонецПопытки;
			Если ЕстьПраво Тогда
				Результат = Результат + Символы.ПС + Роль.Имя + " право: " + Право;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция СписокПрав()

	СписокПрав = Новый Массив;
	СписокПрав.Добавить("ИнтерактивноеУдалениеПредопределенныхДанных");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных");
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных");
	
	Возврат СписокПрав;

КонецФункции 

&НаСервереБезКонтекста
Функция ОбъектыМетаданных()
	
	СтроковыеУтилиты = СтроковыеУтилиты();
	Пояснение = НСтр("ru = 'Проверка прав на предопределенные данные объекта'");
	
	ОбъектыМетаданных = Новый Структура;
	ОбъектыМетаданных.Вставить("Справочники", Новый Массив);
	ОбъектыМетаданных.Вставить("ПланыВидовХарактеристик", Новый Массив);
	ОбъектыМетаданных.Вставить("ПланыСчетов", Новый Массив);
	ОбъектыМетаданных.Вставить("ПланыВидовРасчета", Новый Массив);
		
	Для Каждого Элемент Из ОбъектыМетаданных Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[Элемент.Ключ] Цикл
			ИмяТеста = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 [%2]", ОбъектМетаданных.ПолноеИмя(), Пояснение);
			СтруктураЭлемента = Новый Структура;
			СтруктураЭлемента.Вставить("ИмяТеста", ИмяТеста);
			СтруктураЭлемента.Вставить("ПолноеИмя", ОбъектМетаданных.ПолноеИмя());
			ОбъектыМетаданных[Элемент.Ключ].Добавить(СтруктураЭлемента);	
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбъектыМетаданных;

КонецФункции

&НаСервереБезКонтекста
Функция СтроковыеУтилиты()
	Возврат ВнешниеОбработки.Создать("СтроковыеУтилиты");	
КонецФункции 

&НаКлиенте
Функция ИмяТеста()
	
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = ИмяТестаНаСервере();
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;
	
КонецФункции

&НаСервере
Функция ИмяТестаНаСервере()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
КонецФункции

&НаКлиенте
Функция ВыполнятьТест(КонтекстЯдра)
	
	ВыполнятьТест = Ложь;
	Настройки(КонтекстЯдра, ИмяТеста());
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ВыполнятьТест;
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Структура") И Настройки.Свойство("Используется") Тогда
		ВыполнятьТест = Настройки.Используется;	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

#КонецОбласти
