#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;

&НаКлиенте
Перем ПлагинТестКлиенты;

&НаКлиенте
Перем ТестируемаяФорма;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

// Процедура - Инициализация
//
// Параметры:
//  КонтекстЯдраПараметр - Произвольный	 - ВнешниеОбработки.xddTestRunner.УпрФорма
//
&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");

	Объект.ОткрываемФормыНаКлиентеТестирования = Истина;

	ЗагрузитьНастройки();
КонецПроцедуры

// Процедура - Заполнить набор тестов
//
// Параметры:
//  НаборТестов			 - Произвольный	 - объект для подготовки тестов - класс ЗагрузчикХХХ
//  КонтекстЯдраПараметр - Произвольный	 - ВнешниеОбработки.xddTestRunner.УпрФорма
//
&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт

	Инициализация(КонтекстЯдраПараметр);

	КонтекстЯдра.Плагин("Настройки").ПоказатьСвойстваВРежимеОтладки(Объект.Настройки);

	Если Не НужноВыполнятьТест() Тогда
		Возврат;
	КонецЕсли;

	ОписанияТестов = Новый Массив;

	НужноИсключениеЕслиНеНайденоДокументов = Ложь;

	ВключенСтрогийПорядокВыполнения = ВключенСтрогийПорядокВыполнения();

	Если ВключенСтрогийПорядокВыполнения Тогда
		НаборТестов.СтрогийПорядокВыполнения();
		НаборТестов.ПродолжитьВыполнениеПослеПаденияТеста();
	КонецЕсли;

	СоздатьИменаОсновныхФорм();

	НастройкаГруппировки = ПолучитьНастройкуГруппировки();

	ТолькоУправляемыеФормы = Истина;
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	ТолькоУправляемыеФормы = Ложь;
	#КонецЕсли
	Если Не ИспользоватьОбычныеФормыВТолстомКлиентеВУправляемомРежимеСервер() Тогда
		ТолькоУправляемыеФормы = Истина;
	КонецЕсли;

	ИменаОсновныхФорм_Объекты_Сервер = ИменаОсновныхФорм_Объекты_Сервер();
	мИменаОсновныхФорм_Списки_Сервер = мИменаОсновныхФорм_Списки_Сервер();
	ОтборПоОбъектам = ПолучитьОбъектыПодсистемНаСервере();
	
	ОчереднойВидМетаданного = "Справочники";
	Если НЕ ВидМетаданныхИсключенИзТестирования(ОчереднойВидМетаданного) Тогда

		ОписанияТестов = Новый Массив;

		ДобавитьТестыДляСправочниковСервер(
			КонтекстЯдра.Объект,
			ОписанияТестов, ТолькоУправляемыеФормы,
			ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки, ОтборПоОбъектам);

		ДобавитьТестыПоОписанию(ОчереднойВидМетаданного, ОписанияТестов, НаборТестов,
							НастройкаГруппировки, ВключенСтрогийПорядокВыполнения)

	КонецЕсли;

	ОчереднойВидМетаданного = "Документы";
	Если НЕ ВидМетаданныхИсключенИзТестирования(ОчереднойВидМетаданного) Тогда

		ОписанияТестов = Новый Массив;

		НастройкиГруппыТестов = НовыеНастройкиГруппыТестов();
		НастройкиГруппыТестов.Вставить("ТолькоУправляемыеФормы", ТолькоУправляемыеФормы);

		ДобавитьТестыДляДокументовСервер(
			КонтекстЯдра.Объект,
			ОписанияТестов, НастройкиГруппыТестов,
			ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки, ОтборПоОбъектам);

		ДобавитьТестыПоОписанию(ОчереднойВидМетаданного, ОписанияТестов, НаборТестов,
							НастройкаГруппировки, ВключенСтрогийПорядокВыполнения)

	КонецЕсли;

	ОписанияОтчетовОбработок = Новый Массив;
	ОписанияОтчетовОбработок.Добавить(Новый Структура("Вид,ДобавлятьОбработки", "Обработки", Истина));
	ОписанияОтчетовОбработок.Добавить(Новый Структура("Вид,ДобавлятьОбработки", "Отчеты", Ложь));

	Для каждого Описание Из ОписанияОтчетовОбработок Цикл
		Если НЕ ВидМетаданныхИсключенИзТестирования(Описание.Вид) Тогда

			ОписанияТестов = Новый Массив;

			ДобавитьТестыДляОтчетовОбработокСервер(
				КонтекстЯдра.Объект, ОписанияТестов, ТолькоУправляемыеФормы,
				Описание.ДобавлятьОбработки, НастройкаГруппировки, ОтборПоОбъектам);

			Если ЗначениеЗаполнено(ОписанияТестов) Тогда

				Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Тогда
					НаборТестов.НачатьГруппу(Описание.Вид, ВключенСтрогийПорядокВыполнения);
				КонецЕсли;

				ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, ВключенСтрогийПорядокВыполнения);

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ОчереднойВидМетаданного = "БизнесПроцессы";
	Если НЕ ВидМетаданныхИсключенИзТестирования(ОчереднойВидМетаданного) Тогда

		ОписанияТестов = Новый Массив;

		ДобавлятьОбработки = Ложь;
		ДобавитьТестыДляБизнесПроцессовСервер(
			КонтекстЯдра.Объект,
			ОписанияТестов, ТолькоУправляемыеФормы,
			ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки, ОтборПоОбъектам);

		ДобавитьТестыПоОписанию(ОчереднойВидМетаданного, ОписанияТестов, НаборТестов,
							НастройкаГруппировки, ВключенСтрогийПорядокВыполнения)

	КонецЕсли;

	Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Или НастройкаГруппировки.ГруппироватьПоКоличеству
		Или НастройкаГруппировки.ГруппироватьПоВидуОбъекта Тогда

		НаборТестов.НачатьГруппу("Прочее", ВключенСтрогийПорядокВыполнения);

	КонецЕсли;

	ИмяТеста = "ТестДолжен_ПроверитьБагПлатформыПриОткрытииУправляемойФормыПриОткрытииКоторойЕстьИсключение";
	НаборТестов.Добавить(ИмяТеста, , ИмяТеста);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Тесты

// TODO перенести область Тесты в СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт

	СоздаваемыйЭлемент = Неопределено;

	ОбновитьПовторноИспользуемыеЗначения();

	НужноИсключениеЕслиНеНайденоДокументов = Ложь;

	СоздатьИменаОсновныхФорм();
	
	ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");
	Если ЕстьНастройка(ПлагинТестКлиенты.КлючНастройкиМодальныхОкон(), Объект.Настройки) Тогда
		ПлагинТестКлиенты.УстановитьНастройкиМодальныхОкон(Объект.Настройки[ПлагинТестКлиенты.КлючНастройкиМодальныхОкон()]);
		
		// закрываем модальные окна что б не мешали (иногда даже при старте 1с может появится окно ошибки)
		// в этом окне достаточно нажать на "ok" и продолжить дальше работать
		ПлагинТестКлиенты.ЗакрытьВсеОткрытыеОкнаСУчетомНастроек(ПлагинТестКлиенты.ТестКлиентПоУмолчанию()); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт

	ЗакрытьФорму();

	УдалитьСозданныеОбъекты(СоздаваемыйЭлемент);

КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПропуститьТестФормы(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуПоПолномуИмениФормы(ПолноеИмяФормы) Экспорт
	ТестироватьФорму(ПолноеИмяФормы, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочника(Мета_ПолноеИмя) Экспорт
	СуществующийЭлемент = ПолучитьОбъектСуществующегоЭлементаСправочникаИВернутьСсылкуСервер(Мета_ПолноеИмя);
	Если ЗначениеЗаполнено(СуществующийЭлемент) Тогда
		ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СуществующийЭлемент);
	Иначе
		СоздаваемыйЭлемент = СоздатьЭлементИВернутьСсылкуСервер(Мета_ПолноеИмя);
		Если ЗначениеЗаполнено(СоздаваемыйЭлемент) Тогда
			ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СоздаваемыйЭлемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьЭлементИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	Возврат ОсновнойОбъект.СоздатьЭлементИВернутьСсылку(ИД, "существующий");

КонецФункции

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуНовогоЭлементаСправочника(Мета_ПолноеИмя) Экспорт
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуНовогоДокумента(Мета_ПолноеИмя) Экспорт
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокумента(Мета_ПолноеИмя) Экспорт
	Док = ПолучитьСуществующийДокументОбъектИВернутьСсылкуСервер(Мета_ПолноеИмя);
	Если Док <> Неопределено Тогда
		ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Док);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСуществующийДокументОбъектИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	Док = ОсновнойОбъект.ПолучитьСуществующийДокументОбъектИВернутьСсылку(ИД, НужноИсключениеЕслиНеНайденоДокументов,
			"ТестДолжен_ОткрытьФормуСуществующегоДокумента");
	Возврат Док;
КонецФункции

&НаСервере
Функция ПолучитьОбъектСуществующегоЭлементаСправочникаИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();

	Отбор = Новый Структура;
	МетаданныеОбъекта = Метаданные.Справочники[ИД];
	Если МетаданныеОбъекта.Иерархический
		И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		Отбор.Вставить("ЭтоГруппа", "Ложь");
		Если МетаданныеОбъекта.ОсновнаяФормаГруппы <> Неопределено
			И Найти(Мета_ПолноеИмя, МетаданныеОбъекта.ОсновнаяФормаГруппы.Имя) <> 0 Тогда
			Отбор.Вставить("ЭтоГруппа", "Истина");
		КонецЕсли;
	КонецЕсли;

	Элем = ОсновнойОбъект.ПолучитьОбъектСуществующегоЭлементаСправочникаИВернутьСсылку(ИД, Ложь,
			"ТестДолжен_ОткрытьФормуСуществующегоЭлементСправочника", Отбор);
	Возврат Элем;
КонецФункции

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуНовогоБизнесПроцесса(Мета_ПолноеИмя) Экспорт
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуСуществующегоБизнесПроцесса(Мета_ПолноеИмя) Экспорт
	СуществующийЭлемент = ПолучитьОбъектСуществующегоБизнесПроцессаИВернутьСсылкуСервер(Мета_ПолноеИмя);
	Если ЗначениеЗаполнено(СуществующийЭлемент) Тогда
		ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СуществующийЭлемент);
	Иначе
		СоздаваемыйЭлемент = СоздатьБизнесПроцессИВернутьСсылкуСервер(Мета_ПолноеИмя);
		Если ЗначениеЗаполнено(СоздаваемыйЭлемент) Тогда
			ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СоздаваемыйЭлемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектСуществующегоБизнесПроцессаИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	Элем = ОсновнойОбъект.ПолучитьОбъектСуществующегоБизнесПроцессаИВернутьСсылку(ИД, Ложь,
			"ТестДолжен_ОткрытьФормуСуществующегоБизнесПроцесса");
	Возврат Элем;
КонецФункции

&НаСервере
Функция СоздатьБизнесПроцессИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	Возврат ОсновнойОбъект.СоздатьБизнесПроцессИВернутьСсылку(ИД);
КонецФункции

// проверка бага https://github.com/xDrivenDevelopment/xUnitFor1C/issues/154
&НаКлиенте
Процедура ТестДолжен_ПроверитьБагПлатформыПриОткрытииУправляемойФормыПриОткрытииКоторойЕстьИсключение() Экспорт
	Мета_ПолноеИмя = "Обработка.ТестОбработка_Форма_ИсключениеПриОткрытии.Форма.УправляемаяФорма";
	ошибка = "";
	Попытка
		ОткрытьФорму(Мета_ПолноеИмя);
	Исключение
		ошибка = ОписаниеОшибки();
	КонецПопытки;
	Утверждения.ПроверитьЗаполненность(ошибка, "Ошибка");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеСпискаТестовыхСлучаев

&НаКлиенте
Процедура ДобавитьТестыПоОписанию(Знач ОчереднойВидМетаданного, Знач ОписанияТестов, Знач НаборТестов,
									Знач НастройкаГруппировки, Знач ВключенСтрогийПорядокВыполнения)

		Если ЗначениеЗаполнено(ОписанияТестов) Тогда

			Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Тогда
				НаборТестов.НачатьГруппу(ОчереднойВидМетаданного, ВключенСтрогийПорядокВыполнения);
			КонецЕсли;

			ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, ВключенСтрогийПорядокВыполнения);

		КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, СтрогийПорядокВыполнения)
	Для Каждого Описание Из ОписанияТестов Цикл
		Если ТипЗнч(Описание) = Тип("Строка") Тогда

			ПредставлениеТеста = Описание;
			НаборТестов.Добавить(Описание, , ПредставлениеТеста);

		ИначеЕсли ТипЗнч(Описание) = Тип("Структура") И Описание.Свойство("Набор") Тогда
			НаборТестов.НачатьГруппу(Описание.Имя, СтрогийПорядокВыполнения);
			ДобавитьОписанияТестовВНаборТестов(НаборТестов, Описание.Набор, СтрогийПорядокВыполнения);

		Иначе

			НаборТестов.Добавить(Описание.ИмяТеста, НаборТестов.ПараметрыТеста(Описание.Параметр),
				Описание.ПредставлениеТеста);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодробноеПредставлениеПрефикса(ПрефиксТеста)
	
	Если ПрефиксТеста = "Новые" Тогда
		
		Результат = "открытие формы нового объекта (при создании)";
		
	ИначеЕсли ПрефиксТеста = "Существующие" Тогда
		
		Результат = "открытие формы существующего объекта";
		
	ИначеЕсли ПрефиксТеста = "Списки" Тогда
		
		Результат = "открытие формы списка";
		
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьТестыДляСправочниковСервер(Знач ОбъектКонтекстаЯдра, ОписанияТестов, ТолькоУправляемыеФормы,
		ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки, ОтборПоОбъектам)

	ОсновнойОбъект = Объект();
	КонтекстЯдра = КонтекстЯдраНаСервере(ОбъектКонтекстаЯдра);

	СписокИсключений_Существующие = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Существующие();
	СписокИсключений_Новые = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Новые();
	СписокИсключений_Списки = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Списки();

	Счетчик = 0;

	ОтобранныеМетаданные = ОтобратьМетаданные("Справочники", Метаданные.Справочники, Объект.Настройки, ОсновнойОбъект, ОтборПоОбъектам, КонтекстЯдра);

	Для Каждого ОписаниеМетаданного Из ОтобранныеМетаданные Цикл
		МетаОбъект = ОписаниеМетаданного.МетаОбъект;
		ИмяМетаОбъекта = ОписаниеМетаданного.Имя;

		КоличествоЭлементовДо = ОписанияТестов.Количество();

		НаборОписанийТестов = ДобавитьГруппировкуЕслиНужно("Справочники", "Справочник." + МетаОбъект.Имя,
				ОписанияТестов, НастройкаГруппировки, Счетчик);

		Если ПравоДоступа("ИнтерактивноеДобавление", МетаОбъект) Тогда

			НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы,
					СписокИсключений_Новые, ИменаОсновныхФорм_Объекты_Сервер,
					"ТестДолжен_ОткрытьФормуНовогоЭлементаСправочника", "Новые");

			ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
				НаборОписанийТестов, ОсновнойОбъект, МетаОбъект, НастройкиТеста, КонтекстЯдра);

		КонецЕсли;

		НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы,
				СписокИсключений_Существующие, ИменаОсновныхФорм_Объекты_Сервер,
				"ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочника", "Существующие");

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
			НаборОписанийТестов, ОсновнойОбъект, МетаОбъект, НастройкиТеста, КонтекстЯдра);

		НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы,
				СписокИсключений_Списки, мИменаОсновныхФорм_Списки_Сервер,
				"ТестДолжен_ОткрытьФормуПоПолномуИмениФормы", "Списки");

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
			НаборОписанийТестов, ОсновнойОбъект, МетаОбъект, НастройкиТеста, КонтекстЯдра);

		Если Не ЗначениеЗаполнено(НаборОписанийТестов) И ЗначениеЗаполнено(ОписанияТестов) Тогда
			Для Счетчик = КоличествоЭлементовДо По ОписанияТестов.Количество() - 1 Цикл
				ОписанияТестов.Удалить(ОписанияТестов.ВГраница());
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьГруппировкуЕслиНужно(Знач ИмяВидаМетаданного, Знач ИмяМетаданного,
		Знач ОписанияТестов, Знач НастройкаГруппировки, Счетчик)

	НаборОписанийТестов = ОписанияТестов;
	Если НастройкаГруппировки.ГруппироватьПоКоличеству Тогда
		Если Счетчик % НастройкаГруппировки.КоличествоВГруппе = 0 Тогда
			ИмяГруппы = ИмяВидаМетаданного + " (" + Строка(Счетчик + 1) + "..."
				+ Строка(Счетчик + НастройкаГруппировки.КоличествоВГруппе) + ")";
			ОписаниеГруппы = Новый Структура("Имя, Набор", ИмяГруппы, Новый Массив);
			НаборОписанийТестов.Добавить(ОписаниеГруппы);
			НаборОписанийТестов = ОписаниеГруппы.Набор;
		КонецЕсли;
	ИначеЕсли НастройкаГруппировки.ГруппироватьПоВидуОбъекта Тогда
		ИмяГруппы = ИмяМетаданного;
		ОписаниеГруппы = Новый Структура("Имя, Набор", ИмяГруппы, Новый Массив);
		НаборОписанийТестов.Добавить(ОписаниеГруппы);
		НаборОписанийТестов = ОписаниеГруппы.Набор;
	КонецЕсли;

	Счетчик = Счетчик + 1;

	Возврат НаборОписанийТестов;
КонецФункции

&НаСервере
Процедура ДобавитьТестыДляДокументовСервер(Знач ОбъектКонтекстаЯдра, ОписанияТестов, НастройкиГруппыТестов,
		ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки, ОтборПоОбъектам)

	ОсновнойОбъект = Объект();
	КонтекстЯдра = КонтекстЯдраНаСервере(ОбъектКонтекстаЯдра);

	СписокИсключений_Существующие = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Существующие();
	СписокИсключений_Новые = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Новые();
	СписокИсключений_Списки = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Списки();

	ТолькоУправляемыеФормы = НастройкиГруппыТестов.ТолькоУправляемыеФормы;

	Счетчик = 0;

	ОтобранныеМетаданные = ОтобратьМетаданные("Документы", Метаданные.Документы, Объект.Настройки, ОсновнойОбъект, ОтборПоОбъектам, КонтекстЯдра);

	Для Каждого ОписаниеМетаданного Из ОтобранныеМетаданные Цикл
		МетаОбъект = ОписаниеМетаданного.МетаОбъект;
		ИмяМетаОбъекта = ОписаниеМетаданного.Имя;

		КоличествоЭлементовДо = ОписанияТестов.Количество();

		НаборОписанийТестов = ДобавитьГруппировкуЕслиНужно("Документы", "Документ." + ИмяМетаОбъекта,
				ОписанияТестов, НастройкаГруппировки, Счетчик);

		Если ПравоДоступа("ИнтерактивноеДобавление", МетаОбъект) Тогда

			НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы, СписокИсключений_Новые, ИменаОсновныхФорм_Объекты_Сервер,
					"ТестДолжен_ОткрытьФормуНовогоДокумента", "Новые");

			ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
				НаборОписанийТестов, ОсновнойОбъект, МетаОбъект, НастройкиТеста, КонтекстЯдра);
		КонецЕсли;

		НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы, СписокИсключений_Существующие, ИменаОсновныхФорм_Объекты_Сервер,
				"ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокумента", "Существующие");

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(НаборОписанийТестов, ОсновнойОбъект, МетаОбъект,
			НастройкиТеста, КонтекстЯдра);

		НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы, СписокИсключений_Списки, мИменаОсновныхФорм_Списки_Сервер,
				"ТестДолжен_ОткрытьФормуПоПолномуИмениФормы", "Списки");

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(НаборОписанийТестов, ОсновнойОбъект, МетаОбъект,
			НастройкиТеста, КонтекстЯдра);

		Если Не ЗначениеЗаполнено(НаборОписанийТестов) И ЗначениеЗаполнено(ОписанияТестов) Тогда
			Для Счетчик = КоличествоЭлементовДо По ОписанияТестов.Количество() - 1 Цикл
				ОписанияТестов.Удалить(ОписанияТестов.ВГраница());
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТестыДляОтчетовОбработокСервер(Знач ОбъектКонтекстаЯдра, ОписанияТестов, ТолькоУправляемыеФормы, Знач ДобавлятьОбработки,
		Знач НастройкаГруппировки, Знач ОтборПоОбъектам)

	ОсновнойОбъект = Объект();
	ОписаниеВидаМетаданного = Новый Структура;

	Если ДобавлятьОбработки Тогда

		ОписаниеВидаМетаданного.Вставить("Менеджер", Метаданные.Обработки);
		ОписаниеВидаМетаданного.Вставить("ИмяВидаМнЧисло", "Обработки");
		ОписаниеВидаМетаданного.Вставить("ИмяВидаЕдЧисло", "Обработка");

		СписокИсключений = ОсновнойОбъект.ПолучитьСписокИсключений_Обработки();

	Иначе

		ОписаниеВидаМетаданного.Вставить("Менеджер", Метаданные.Отчеты);
		ОписаниеВидаМетаданного.Вставить("ИмяВидаМнЧисло", "Отчеты");
		ОписаниеВидаМетаданного.Вставить("ИмяВидаЕдЧисло", "Отчет");

		СписокИсключений = ОсновнойОбъект.ПолучитьСписокИсключений_Отчеты();

	КонецЕсли;

	КонтекстЯдра = КонтекстЯдраНаСервере(ОбъектКонтекстаЯдра);

	ДобавитьТестыПереданныхВидовФормДляКаждогоОбъектаМенеджераМетаданных(
		КонтекстЯдра,
		ОписанияТестов, ОсновнойОбъект, ОписаниеВидаМетаданного,
		ТолькоУправляемыеФормы,
		СписокИсключений,
		мИменаОсновныхФорм_Сервер(),
		"ТестДолжен_ОткрытьФормуПоПолномуИмениФормы", "",
		НастройкаГруппировки,
		ОтборПоОбъектам);

КонецПроцедуры

&НаСервере
Процедура ДобавитьТестыДляБизнесПроцессовСервер(Знач ОбъектКонтекстаЯдра, ОписанияТестов, ТолькоУправляемыеФормы,
		ИменаОсновныхФорм_Объекты_Сервер, ИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки, ОтборПоОбъектам)

	ОсновнойОбъект = Объект();
	КонтекстЯдра = КонтекстЯдраНаСервере(ОбъектКонтекстаЯдра);

	СписокИсключений_Существующие = ОсновнойОбъект.ПолучитьСписокИсключений_БизнесПроцессы_Существующие();
	СписокИсключений_Новые = ОсновнойОбъект.ПолучитьСписокИсключений_БизнесПроцессы_Новые();
	СписокИсключений_Списки = ОсновнойОбъект.ПолучитьСписокИсключений_БизнесПроцессы_Списки();

	Счетчик = 0;

	ОтобранныеМетаданные = ОтобратьМетаданные("БизнесПроцессы", Метаданные.БизнесПроцессы, Объект.Настройки, ОсновнойОбъект, ОтборПоОбъектам, КонтекстЯдра);

	Для Каждого ОписаниеМетаданного Из ОтобранныеМетаданные Цикл
		МетаОбъект = ОписаниеМетаданного.МетаОбъект;
		ИмяМетаОбъекта = ОписаниеМетаданного.Имя;

		КоличествоЭлементовДо = ОписанияТестов.Количество();

		НаборОписанийТестов = ДобавитьГруппировкуЕслиНужно("БизнесПроцессы", "БизнесПроцесс." + МетаОбъект.Имя,
				ОписанияТестов, НастройкаГруппировки, Счетчик);

		Если ПравоДоступа("ИнтерактивноеДобавление", МетаОбъект) Тогда

			НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы,
					СписокИсключений_Новые, ИменаОсновныхФорм_Объекты_Сервер,
					"ТестДолжен_ОткрытьФормуНовогоБизнесПроцесса", "Новые");

			ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
				НаборОписанийТестов, ОсновнойОбъект, МетаОбъект, НастройкиТеста, КонтекстЯдра);

		КонецЕсли;

		НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы,
				СписокИсключений_Существующие, ИменаОсновныхФорм_Объекты_Сервер,
				"ТестДолжен_ОткрытьФормуСуществующегоБизнесПроцесса", "Существующие");

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
			НаборОписанийТестов, ОсновнойОбъект, МетаОбъект, НастройкиТеста, КонтекстЯдра);

		НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы,
				СписокИсключений_Списки, ИменаОсновныхФорм_Списки_Сервер,
				"ТестДолжен_ОткрытьФормуПоПолномуИмениФормы", "Списки");

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
			НаборОписанийТестов, ОсновнойОбъект, МетаОбъект, НастройкиТеста, КонтекстЯдра);

		Если Не ЗначениеЗаполнено(НаборОписанийТестов) И ЗначениеЗаполнено(ОписанияТестов) Тогда
			Для Счетчик = КоличествоЭлементовДо По ОписанияТестов.Количество() - 1 Цикл
				ОписанияТестов.Удалить(ОписанияТестов.ВГраница());
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТестыПереданныхВидовФормДляКаждогоОбъектаМенеджераМетаданных(КонтекстЯдра,
		ОписанияТестов, ОсновнойОбъект, ОписаниеВидаМетаданного,
		ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, ИмяТеста, ПрефиксПредставленияТеста,
		НастройкаГруппировки, ОтборПоОбъектам)

	Счетчик = 0;

	ОтобранныеМетаданные = ОтобратьМетаданные(ОписаниеВидаМетаданного.ИмяВидаМнЧисло, ОписаниеВидаМетаданного.Менеджер,
												Объект.Настройки, ОсновнойОбъект, ОтборПоОбъектам, КонтекстЯдра);

	ДлинаКонстанты = СтрДлина("xddTestRunner");

	Для Каждого ОписаниеМетаданного Из ОтобранныеМетаданные Цикл
		МетаОбъект = ОписаниеМетаданного.МетаОбъект;
		ИмяМетаОбъекта = ОписаниеМетаданного.Имя;

		Если Лев(ИмяМетаОбъекта, ДлинаКонстанты) = "xddTestRunner" Тогда
			Продолжить;
		КонецЕсли;

		КоличествоЭлементовДо = ОписанияТестов.Количество();

		НаборОписанийТестов = ДобавитьГруппировкуЕслиНужно(
				ОписаниеВидаМетаданного.ИмяВидаМнЧисло,
				ОписаниеВидаМетаданного.ИмяВидаЕдЧисло + "." + ИмяМетаОбъекта,
				ОписанияТестов, НастройкаГруппировки, Счетчик);

		НастройкиТеста = НастройкиТеста(ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, ИмяТеста,
				ПрефиксПредставленияТеста);

		Добавили = ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
				НаборОписанийТестов, ОсновнойОбъект, МетаОбъект, НастройкиТеста, КонтекстЯдра);

		Если Не Добавили Тогда

			Для Счетчик = КоличествоЭлементовДо По ОписанияТестов.Количество() - 1 Цикл
				ОписанияТестов.Удалить(ОписанияТестов.ВГраница());
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект,
		НастройкиТеста, КонтекстЯДра)

	СписокИменМетаФорм = Новый СписокЗначений;

	Успешно = ДобавитьИменаМетаФормДляОдногоОбъектаМетаданного(СписокИменМетаФорм, ОсновнойОбъект, МетаОбъект,
			НастройкиТеста, КонтекстЯдра);

	ДобавитьТестПоПереданнымМетаФормамСсылочногоОбъектаСервер(ОписанияТестов, СписокИменМетаФорм, НастройкиТеста);

	Возврат Успешно;
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьТестПоПереданнымМетаФормамСсылочногоОбъектаСервер(ОписанияТестов, СписокИменМетаФорм, НастройкиТеста)

	ПрефиксПредставленияТеста = НастройкиТеста.ПрефиксПредставленияТеста;

	Для каждого Элемент Из СписокИменМетаФорм Цикл
		МетаФорма_ПолноеИмя = Элемент.Значение;
		ПредставлениеТеста = МетаФорма_ПолноеИмя;
		Если НЕ ПустаяСтрока(ПрефиксПредставленияТеста) Тогда
			ПредставлениеТеста = МетаФорма_ПолноеИмя + " : " + ПодробноеПредставлениеПрефикса(ПрефиксПредставленияТеста);
		КонецЕсли;

		лПараметры = Новый Структура("ПредставлениеТеста,ИмяТеста,Транзакция,Параметр", ПредставлениеТеста, НастройкиТеста.ИмяТеста,
				Истина, МетаФорма_ПолноеИмя);
		ОписанияТестов.Добавить(лПараметры);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьИменаМетаФормДляОдногоОбъектаМетаданного(СписокИменМетаФорм, ОсновнойОбъект, МетаОбъект,
		НастройкиТеста, КонтекстЯдра)

	СписокИсключений = НастройкиТеста.СписокИсключений;

	Если ИсключаемПоИмени(МетаОбъект.Имя, СписокИсключений, КонтекстЯдра) Тогда
		Возврат Ложь;
	КонецЕсли;

	Мета_ПолноеИмя = МетаОбъект.ПолноеИмя();

	Результат = Ложь;

	МетаФормы = ОсновнойОбъект.ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, НастройкиТеста.ИменаОсновныхФорм);

	ФормыДобавлены = Ложь;

	Для каждого МетаФорма Из МетаФормы Цикл

		МетаФорма_ПолноеИмя = МетаФорма.ПолноеИмя();

		// В режиме клиента тестирования не нужно добавлять .Форма,
		// а необходимо указывать имя отчета, для формирования навигационной ссылки.
		Если Не ОсновнойОбъект.ОткрываемФормыНаКлиентеТестирования Тогда
			Если Метаданные.ОсновнаяФормаОтчета = МетаФорма Тогда
				МетаФорма_ПолноеИмя = МетаОбъект.ПолноеИмя() + ".Форма";

				// Форма настроек отчета из комплекта БСП не открывается без передачи параметра.
				//ИначеЕсли Метаданные.ОсновнаяФормаНастроекОтчета = МетаФорма Тогда
				//	МетаФорма_ПолноеИмя = МетаОбъект.ПолноеИмя() + ".ФормаНастроек";

			КонецЕсли;
		КонецЕсли;

		// МетаОбъект.Имя <Отчет1>, МетаФорма_ПолноеИмя <Отчет.Отчет1.Форма.УправляемаяФормаОтчета>
		// МетаОбъект.Имя <Отчет2>, МетаФорма_ПолноеИмя <ОбщаяФорма.ФормаОтчета> // в ОФ Отчет.Отчет2.Форма

		Если НастройкиТеста.ТолькоУправляемыеФормы Тогда
			Если Не ЭтоУправляемаяФорма(МетаФорма) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// исторически в списке исключений имя формы без имени коллекции объектов метаданных
		// "Справочник1.Форма.ФормаЭлемента", а не "Справочник.Справочник1.Форма.ФормаЭлемента"
		Если СписокИсключений.НайтиПоЗначению(Сред(МетаФорма_ПолноеИмя, Найти(МетаФорма_ПолноеИмя, ".") + 1))
			<> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// TODO Бессмысленно открывать для отчетов основную форму отчета, настроек, варианта из конфигурации
		Если Лев(НРег(МетаФорма_ПолноеИмя), СтрДлина(Мета_ПолноеИмя)) <> НРег(Мета_ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;

		ФормыДобавлены = Истина;

		СписокИменМетаФорм.Добавить(МетаФорма_ПолноеИмя);
		Результат = Истина;

	КонецЦикла;

	// добавить общие формы к отчётам, если они не указаны
	ДлинаСловаОтчет = 6;
	Если Метаданные.Отчеты.Найти(МетаОбъект.Имя) <> Неопределено И Лев(Мета_ПолноеИмя, ДлинаСловаОтчет) = "Отчет." Тогда
		ФормыДобавлены = ДобавитьОбщиеФормыДляОтчетов(СписокИменМетаФорм, МетаОбъект, ОсновнойОбъект.ОткрываемФормыНаКлиентеТестирования);
		Если НЕ Результат Тогда
			Результат = ФормыДобавлены;
		КонецЕсли;
	КонецЕсли;

	// Добавляем наименование отчета для режима клиента тестирования, без указания формы.
	// TODO Бессмысленно открывать для отчетов основную форму отчета, настроек, варианта из конфигурации.
	// Также нужно добавить стандартные формы для всяких объектов - справочники, документы
	Если Не ФормыДобавлены
		И ОсновнойОбъект.ОткрываемФормыНаКлиентеТестирования Тогда
		СписокИменМетаФорм.Добавить(Мета_ПолноеИмя);
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСФормами

&НаСервереБезКонтекста
Функция ДобавитьОбщиеФормыДляОтчетов(СписокИменМетаФорм, МетаОбъект, ОткрываемФормыНаКлиентеТестирования)

	Результат = Ложь;

	// В режиме клиента тестирования не нужно добавлять .Форма,
	// а необходимо указывать имя отчета, для формирования навигационной ссылки.
	Если ОткрываемФормыНаКлиентеТестирования Тогда
		СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя());
		Результат = Истина;
		Возврат Результат;
	КонецЕсли;

	Если ПолучитьФормуОбъекта(МетаОбъект, "ОсновнаяФорма") = Неопределено
		И ПолучитьФормуОбъекта(Метаданные, "ОсновнаяФормаОтчета") <> Неопределено Тогда

		СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя() + ".Форма");
		Результат = Истина;

	КонецЕсли;

	// Форма настроек отчета из комплекта БСП не открывается без передачи параметра.
	//Если ПолучитьФормуОбъекта(МетаОбъект, "ОсновнаяФормаНастроек") = Неопределено
	//	И ПолучитьФормуОбъекта(Метаданные, "ОсновнаяФормаНастроекОтчета") <> Неопределено Тогда
	//
	//	СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя() + ".ФормаНастроек");
	//	Результат = Истина;
	//
	//КонецЕсли;

	ФормаВарианта = ПолучитьФормуОбъекта(МетаОбъект, "ОсновнаяФормаВарианта");
	Если ФормаВарианта = Неопределено Тогда
		Если ПолучитьФормуОбъекта(Метаданные, "ОсновнаяФормаВариантаОтчета") <> Неопределено Тогда

			СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя() + ".ФормаВарианта");
			Результат = Истина;

		КонецЕсли;
	Иначе
		// 	Общая форма "ВариантыОтчета" не открывается самостоятельно. // СписокИменМетаФорм.Добавить(ФормаВарианта.ПолноеИмя());
		СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя() + ".ФормаВарианта");
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФормуОбъекта(ОбъектФормы, ИмяФормы)

	Попытка
		Результат = ОбъектФормы[ИмяФормы];
	Исключение
		Результат = Неопределено;
	КонецПопытки;

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьОбычныеФормыВТолстомКлиентеВУправляемомРежимеСервер()
	Возврат Метаданные.ИспользоватьОбычныеФормыВУправляемомПриложении;
КонецФункции

&НаКлиенте
Процедура ТестироватьФорму(ПолноеИмяФормы, ПараметрыФормы)
	
	Если Объект.ВыводитьСообщенияВЖурналРегистрации Тогда
		ЗаписатьИнформациюВЖурналРегистрации("Операция: " + ПолноеИмяФормы);
	КонецЕсли;
	
	Если Объект.ОткрываемФормыНаКлиентеТестирования Тогда
		ТестироватьФормуНаКлиентеТестирования(ПолноеИмяФормы, ПараметрыФормы);
	Иначе
		ТестироватьФормуВТекущемКлиенте(ПолноеИмяФормы, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестироватьФормуВТекущемКлиенте(ПолноеИмяФормы, ПараметрыФормы)

	ПредыдущиеОкна = ПолучитьОкна();

	Попытка

		// К сожалению, здесь часто исключения не ловятся
		// https://github.com/xDrivenDevelopment/xUnitFor1C/issues/154

		ТестируемаяФорма = ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, , Новый УникальныйИдентификатор);

	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();

		Если Не ПропускаемОшибкуПоТекстуИсключенияСервер(ИнфоОшибки.Описание) Тогда
			ВызватьИсключение;
		КонецЕсли;

		Возврат;
	КонецПопытки;

	Если ТестируемаяФорма = Неопределено Или Не ТестируемаяФорма.Открыта() Тогда

		НеПроверятьФорму = ТестируемаяФорма = Неопределено;

		НовыеОкна = ПолучитьОкна();

		МассивНовыхОкон = Новый Массив;
		Для Каждого НовоеОкно Из НовыеОкна Цикл
			НашлиОкно = Ложь;
			Для Каждого ОкноДо Из ПредыдущиеОкна Цикл
				Если ОкноДо.Заголовок = НовоеОкно.Заголовок Тогда
					НашлиОкно = Истина;
					Продолжить;
				КонецЕсли;
			КонецЦикла;

			Если НашлиОкно Тогда
				Продолжить;
			КонецЕсли;

			МассивНовыхОкон.Добавить(НовоеОкно);
		КонецЦикла;

		Если МассивНовыхОкон.Количество() = 0 И НеПроверятьФорму Тогда
			Возврат;
		КонецЕсли;

		Если МассивНовыхОкон.Количество() > 0 Тогда
			МассивФорм = МассивНовыхОкон[0].Содержимое;
			Если МассивНовыхОкон.Количество() = 0 И НеПроверятьФорму Тогда
				Возврат;
			КонецЕсли;
			Если МассивНовыхОкон.Количество() > 0 Тогда
				ТестируемаяФорма = МассивФорм[0];
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Утверждения.Проверить(ТестируемаяФорма.Открыта(), "ТестируемаяФорма """ + ПолноеИмяФормы
		+ """ не открылась, а должна была открыться");

	Если ТипЗнч(ТестируемаяФорма) = Тип("УправляемаяФорма") Тогда
		ТестируемаяФорма.ОбновитьОтображениеДанных();
	Иначе
		ТестируемаяФорма.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СсылочныйОбъект)
	ПараметрыФормы = Новый Структура("Ключ", СсылочныйОбъект);
	ТестироватьФорму(Мета_ПолноеИмя, ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Если ТипЗнч(ТестируемаяФорма) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	ТестируемаяФорма.Модифицированность = Ложь;
	Если ТестируемаяФорма.Открыта() Тогда
		ТестируемаяФорма.Модифицированность = Ложь;
		// Попытка
		ТестируемаяФорма.Закрыть();
		// Исключение
		//	Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//	ЗакрытьФормуБезусловноСОтменойТранзакции(ТестируемаяФорма);
		//	//Если ТранзакцияАктивна() Тогда
		//	//	ОтменитьТранзакцию();
		//	//КонецЕсли;
		//	//	//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
		//	//НачатьТранзакцию();
		//	//ТестируемаяФорма.УстановитьДействие("ПередЗакрытием", Неопределено);
		//	//ТестируемаяФорма.УстановитьДействие("ПриЗакрытии", Неопределено);
		//	//ТестируемаяФорма.Закрыть();
		//	ВызватьИсключение Ошибка;
		//КонецПопытки;
	Иначе
		Попытка
			ТестируемаяФорма.Закрыть();
		Исключение
			// стандарт по исключениям https://its.1c.ru/db/v8std/content/499/hdoc
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПолныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

			ЗаписатьПредупреждениеВЖурналРегистрацииСервер("Не удалось закрыть форму
				|" + ПолныйТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	ТестируемаяФорма = "";

КонецПроцедуры

&НаСервере
Процедура СоздатьИменаОсновныхФорм()
	ОсновнойОбъект = Объект();
	ОсновнойОбъект.СоздатьИменаОсновныхФорм();
	ОсновнойОбъект.ВидыМетаданных = ОсновнойОбъект.ВидыМетаданных();
	ОсновнойОбъект.ВидыПроверок = ОсновнойОбъект.ВидыПроверок();
	ОсновнойОбъект.СпособыГруппировки = ОсновнойОбъект.СпособыГруппировки();
	ЗначениеВРеквизитФормы(ОсновнойОбъект, "Объект");
КонецПроцедуры

&НаСервере
Функция ИменаОсновныхФорм_Объекты_Сервер()
	Возврат Объект().мИменаОсновныхФорм_Объекты;
КонецФункции

&НаСервере
Функция мИменаОсновныхФорм_Списки_Сервер()
	Возврат Объект().мИменаОсновныхФорм_Списки;
КонецФункции

&НаСервере
Функция мИменаОсновныхФорм_Сервер()
	Возврат Объект().мИменаОсновныхФорм;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУправляемаяФорма(МетаФорма)
	Возврат МетаФорма <> Неопределено И МетаФорма.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая;
КонецФункции

#КонецОбласти

#Область Настройки

// Функция - Ключ настройки
// 
// Возвращаемое значение:
//   Строка - smoke 
//
&НаКлиенте
Функция КлючНастройкиУстаревший()
	Возврат "smoke";
КонецФункции

&НаКлиенте
Функция КлючНастройки()
  Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
    Объект.ИмяТеста = ИмяТестаНаСервере();
  КонецЕсли;
  
  Возврат Объект.ИмяТеста;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройки()
	
	ПутьНастройки = КлючНастройки();
	ПлагинНастроек = КонтекстЯдра.Плагин("Настройки");
	ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");
	НастройкиМодальныхОкон = ПлагинНастроек.ПолучитьНастройку(ПлагинТестКлиенты.КлючНастройкиМодальныхОкон());
		
	Объект.Настройки = ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = ПлагинНастроек.ПолучитьНастройку(КлючНастройкиУстаревший());   // обратная совместимость
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = Новый Структура;
	КонецЕсли;

	
	Если ЕстьНастройка("ВыводитьСообщенияВЖурналРегистрации", Объект.Настройки) Тогда
		Объект.ВыводитьСообщенияВЖурналРегистрации = Объект.Настройки.ВыводитьСообщенияВЖурналРегистрации;
	КонецЕсли;
	
	Если ЕстьНастройка("ОткрываемФормыНаКлиентеТестирования", Объект.Настройки) Тогда
		Объект.ОткрываемФормыНаКлиентеТестирования = Объект.Настройки.ОткрываемФормыНаКлиентеТестирования;
	КонецЕсли;
	
	НаборНастроекПоУмолчанию = СоздатьНаборНастроекПоУмолчанию();
	
	ЗаменитьНесуществующиеНастройкиЗначениямиПоУмолчанию(Объект.Настройки, НаборНастроекПоУмолчанию);
	
	Если ЗначениеЗаполнено(НастройкиМодальныхОкон) Тогда
		Объект.Настройки.Вставить(ПлагинТестКлиенты.КлючНастройкиМодальныхОкон(), НастройкиМодальныхОкон);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьНаборНастроекПоУмолчанию()

	Возврат Объект().СоздатьНаборНастроекПоУмолчанию();

КонецФункции

&НаКлиенте
Процедура ЗаменитьНесуществующиеНастройкиЗначениямиПоУмолчанию(Знач Настройки, Знач НаборНастроекПоУмолчанию)

	Для каждого КлючЗначение Из НаборНастроекПоУмолчанию Цикл
		Если Не ЕстьНастройка(КлючЗначение.Ключ) Тогда
			Настройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Позволяет одним вызовом получить значение из вложенных друг в друга структур
// по строке ключей, объединенных точкой.
//
// Параметры:
//  ПутьНастроек		 - Строка	 - Путь или ключ настроек
//  СтруктураНастроек	 - Произвольный, Неопределено - полученное значение
//		( необязательно )
//
// Возвращаемое значение:
//   Булево - Истина, если ключ/путь найден, иначе Ложь
//
// Пример:
// 		Структура = Новый Структура("Ключ1", Новый Структура("Ключ2", Новый Структура("Ключ3", 42)));
//		РезультатПроверки = ЕстьНастройка("Ключ1.Ключ2.Ключ3", ВремЗнач);
// В результате получим ВремЗнач == 42
//
&НаКлиенте
Функция ЕстьНастройка(Знач ПутьНастроек, СтруктураНастроек = Неопределено)

	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = Объект.Настройки;
	КонецЕсли;

	Возврат КонтекстЯдра.Плагин("Настройки").ЕстьНастройка(ПутьНастроек, СтруктураНастроек);

КонецФункции

&НаКлиенте
Функция НужноВыполнятьТест()

	ЗначениеПоУмолчанию = Истина;

	ЗагрузитьНастройки();

	Настройки = ОБъект.Настройки;

	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	КлючНастройки = КлючНастройки();

	ВыполнятьТест = Неопределено;
	Если ТипЗнч(Настройки) = Тип("Структура")
		И Настройки.Свойство("Используется", ВыполнятьТест) Тогда

		Возврат ВыполнятьТест = Истина;
	КонецЕсли;

	Возврат ЗначениеПоУмолчанию;

КонецФункции

&НаКлиенте
Функция ВключенСтрогийПорядокВыполнения()
	Если ЕстьНастройка("СтрогийПорядокВыполнения", Объект.Настройки)
		И Объект.Настройки.СтрогийПорядокВыполнения = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьНастройкуГруппировки()
	Возврат Объект().ПолучитьНастройкуГруппировки(Объект.Настройки);
КонецФункции

&НаСервере
Функция ПолучитьОбъектыПодсистемНаСервере()
	ИмяПодсистемы = ЗначениеИзСтруктуры(Объект.Настройки, "Подсистема", ""); 
	Возврат Объект().ПолучитьОбъектыПодсистем(ИмяПодсистемы);
КонецФункции	

#КонецОбласти

#Область Исключения

&НаКлиенте
Функция ВидМетаданныхИсключенИзТестирования(ВидМетаданных)
	Если ЕстьНастройка(ВидМетаданных) Тогда
		Возврат (ТипЗнч(Объект.Настройки[ВидМетаданных]) = Тип("Булево") И НЕ Объект.Настройки[ВидМетаданных]);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПропускаемОшибкуПоТекстуИсключенияСервер(Знач ТекстИсключения)
	Возврат Объект().ПропускаемОшибкуПоТекстуИсключения(ТекстИсключения);
КонецФункции

&НаСервере
Функция ТекстыИсключенийСервер()
	Возврат Объект().ТекстыИсключений();
КонецФункции

&НаСервереБезКонтекста
Функция ИсключаемПоИмени(Знач ЧтоИщем, Знач КоллекцияДляПоиска, Знач КонтекстЯдра)

	Если КоллекцияДляПоиска = Ложь Тогда // TODO для включения не подходит (
		Возврат Истина;
	КонецЕсли;

	Возврат НайтиИмяВКоллекции(ЧтоИщем, КоллекцияДляПоиска, КонтекстЯдра);

КонецФункции

&НаСервереБезКонтекста
Функция НайтиИмяВКоллекции(Знач ЧтоИщем, Знач КоллекцияДляПоиска, Знач КонтекстЯдра)

	Если Не ЗначениеЗаполнено(КоллекцияДляПоиска) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат КонтекстЯдра.ЕстьВИсключаемойКоллекции(ЧтоИщем, КоллекцияДляПоиска);

КонецФункции

&НаСервереБезКонтекста
Функция ВключитьПоИмени(Знач КлючМетаданных, Знач МетаОбъект, Знач Настройки, Знач ОтборПоОбъектам, Знач КонтекстЯдра)

	ИмяМетаданного = МетаОбъект.Имя;

	Отобрали = ОтобралиПоПрефиксуИПодсистеме(Настройки, МетаОбъект, ОтборПоОбъектам);
	Если ЗначениеЗаполнено(Отобрали) Тогда
		Возврат Отобрали;
	КонецЕсли;

	ФильтрМетаданных = НайтиКоллекциюФильтрМетаданныхИзНастроек(КлючМетаданных, Настройки, "ПроверятьТолькоИзбранные");
	ЕстьОтборТолькоДляВключенияМетаданных = ЗначениеЗаполнено(ФильтрМетаданных );

	Если ЕстьОтборТолькоДляВключенияМетаданных Тогда
		Возврат НайтиИмяВКоллекции(ИмяМетаданного, ФильтрМетаданных, КонтекстЯдра);
	КонецЕсли;

	ФильтрИсключаемыхМетаданных = НайтиКоллекциюФильтрМетаданныхИзНастроек(КлючМетаданных, Настройки, "ИсключатьПоИмени");
	Если ЗначениеЗаполнено(ФильтрИсключаемыхМетаданных)
		И НайтиИмяВКоллекции(ИмяМетаданного, ФильтрИсключаемыхМетаданных, КонтекстЯдра) Тогда

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина; // если нет ни включений, ни исключения, разрешаем тест, как и сейчас

КонецФункции

&НаСервереБезКонтекста
Функция ОтобралиПоПрефиксуИПодсистеме(Знач Настройки, Знач МетаОбъект, Знач ОтборПоОбъектам)

	ИмяМетаданного = МетаОбъект.Имя;

	ВключенОтборПоПрефиксу = ЗначениеИзСтруктуры(Настройки, "ОтборПоПрефиксу", Ложь);
	ВключенОтборПоПодсистеме = ЗначениеЗаполнено(ОтборПоОбъектам);

	Если ВключенОтборПоПрефиксу И ВключенОтборПоПодсистеме Тогда
		Возврат ОтобралиПоПрефиксу(Настройки, ИмяМетаданного) 
				И ОтобралиПоПодсистеме(МетаОбъект, ОтборПоОбъектам);
	ИначеЕсли ВключенОтборПоПрефиксу Тогда
		Возврат ОтобралиПоПрефиксу(Настройки, ИмяМетаданного);
	ИначеЕсли ВключенОтборПоПодсистеме Тогда
		Возврат ОтобралиПоПодсистеме(МетаОбъект, ОтборПоОбъектам);
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция ОтобралиПоПрефиксу(Знач Настройки, Знач ИмяМетаданного)

	ПрефиксДляОтбора = ЗначениеИзСтруктуры(Настройки, "Префикс", "");
	Возврат СтрНайти(ИмяМетаданного, ПрефиксДляОтбора) = 1;

КонецФункции

&НаСервереБезКонтекста
Функция ОтобралиПоПодсистеме(Знач МетаОбъект, Знач ОтборПоОбъектам)
	
	Возврат ОтборПоОбъектам.Получить(МетаОбъект.ПолноеИмя()) <> Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция НайтиКоллекциюФильтрМетаданныхИзНастроек(Знач КлючМетаданных, Знач Настройки, Знач ИмяОбщейКоллекции)

	//	 TODO использовать метод плагина Настройки.ЕстьНастройка

	ОбщаяКоллекция = ЗначениеИзСтруктуры(Настройки, ИмяОбщейКоллекции, Новый Структура);

	ЗначениеПоУмолчанию = Новый Массив;

	Если Не ЗначениеЗаполнено(ОбщаяКоллекция) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат ЗначениеИзСтруктуры(ОбщаяКоллекция, КлючМетаданных, ЗначениеПоУмолчанию);

КонецФункции

&НаСервереБезКонтекста
Функция ОтобратьМетаданные(КлючМетаданных, МенеджерМетаданного, Настройки, ОсновнойОбъект, ОтборПоОбъектам, КонтекстЯдра)

	Результат = Новый Массив;

	Для Каждого МетаОбъект Из МенеджерМетаданного Цикл
		ИмяМетаОбъекта = МетаОбъект.Имя;

		Если ОсновнойОбъект.ЭтоУстаревшийМетаОбъектДляУдаления(МетаОбъект)
			Или Не ПравоДоступа("Просмотр", МетаОбъект)
			Или Не ВключитьПоИмени(КлючМетаданных, МетаОбъект, Настройки, ОтборПоОбъектам, КонтекстЯдра) Тогда

			Продолжить;
		КонецЕсли;

		НовоеОписаниеМетаданного = НовоеОписаниеМетаданного();
		НовоеОписаниеМетаданного.Вставить("МетаОбъект", МетаОбъект);
		НовоеОписаниеМетаданного.Вставить("Имя", ИмяМетаОбъекта);

		Результат.Добавить(НовоеОписаниеМетаданного);

	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция НовоеОписаниеМетаданного()

	Результат = Новый Структура;
	Результат.Вставить("МетаОбъект", Неопределено);
	Результат.Вставить("Имя", "");

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция НовыеНастройкиГруппыТестов()

	Результат = Новый Структура;
	Результат.Вставить("СписокИсключений", Новый СписокЗначений);
	Результат.Вставить("ТолькоУправляемыеФормы", Истина);
	Результат.Вставить("КоллекцияПроверятьТолькоИзбранные", Объект.Настройки.ПроверятьТолькоИзбранные);

	Возврат Результат;

КонецФункции

&НаСервере
Функция НовыеНастройкиТеста()

	Результат = Новый Структура;
	Результат.Вставить("ТолькоУправляемыеФормы", Истина);
	Результат.Вставить("СписокИсключений", Новый СписокЗначений);
	Результат.Вставить("ИменаОсновныхФорм", Новый Массив);
	Результат.Вставить("ИмяТеста", "");
	Результат.Вставить("ПрефиксПредставленияТеста", "");

	Возврат Результат;

КонецФункции

&НаСервере
Функция НастройкиТеста(ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, ИмяТеста, ПрефиксПредставленияТеста)

	Результат = НовыеНастройкиТеста();

	Результат.Вставить("ТолькоУправляемыеФормы", ТолькоУправляемыеФормы);
	Результат.Вставить("СписокИсключений", СписокИсключений);
	Результат.Вставить("ИменаОсновныхФорм", ИменаОсновныхФорм);
	Результат.Вставить("ИмяТеста", ИмяТеста);
	Результат.Вставить("ПрефиксПредставленияТеста", ПрефиксПредставленияТеста);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ВспомогательныеМетоды

&НаСервереБезКонтекста
Процедура УдалитьСозданныеОбъекты(Знач СоздаваемыйЭлемент)
	Перем Владелец;
	Если Не ЗначениеЗаполнено(СоздаваемыйЭлемент) Тогда
		Возврат;
	КонецЕсли;

	Попытка
		// не у всех метаданных есть свойство Владельцы, например у ПВХ нет и тогда получим ошибку поле объекта не обноркжено, а ПВХ может выступать владельцем у справочника
		// лучше проверять через реквизиты
		// у СтандартныеРеквизиты нет метода Найти. В попытке, это принцип EAFP
		Попытка
			Владелец = СоздаваемыйЭлемент.Метаданные().СтандартныеРеквизиты["Владелец"];
		Исключение
		КонецПопытки;

		Если Владелец <> Неопределено Тогда
			УдалитьСозданныеОбъекты(СоздаваемыйЭлемент.Владелец);
		КонецЕсли;

		СозданныйОбъект = СоздаваемыйЭлемент.ПолучитьОбъект();  // обязательно объект нужно получить непосредственно перед удалением
		Если СозданныйОбъект <> Неопределено Тогда
			СозданныйОбъект.Удалить();
		КонецЕсли;

	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяТеста(),
			УровеньЖурналаРегистрации.Ошибка,
			СозданныйОбъект,
			СоздаваемыйЭлемент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВидМетаданного(Мета_ПолноеИмя)

	Поз = Найти(Мета_ПолноеИмя, ".Форма.");
	Если Поз = 0 Тогда
		Поз = Найти(Мета_ПолноеИмя, ".Form.");
	КонецЕсли;
	Если Поз <> 0 Тогда
		ИД = Лев(Мета_ПолноеИмя, Поз - 1);
		// TODO локализация Английская - Мета_ПолноеИмя	"Catalog.ПростойСправочник.Form.УпрФормаЭлемента"	String;
		ИД = Сред(ИД, Найти(ИД, ".") + 1);
	Иначе
		// Если нет формы и мы открываем по имени справочника,
		// то в качестве его ИД просто берем 2ю часть наименования //
		ИД = Прав(Мета_ПолноеИмя, СтрДлина(Мета_ПолноеИмя) - Найти(Мета_ПолноеИмя, "."));
	КонецЕсли;

	Возврат ИД;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетодаПропускаТестов()
	Возврат "ТестДолжен_ПропуститьТестФормы";
КонецФункции
  
&НаСервереБезКонтекста
Процедура ЗаписатьПредупреждениеВЖурналРегистрацииСервер(Комментарий)
	ЗаписьЖурналаРегистрации(ИмяТеста(), УровеньЖурналаРегистрации.Предупреждение, , , Комментарий);
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗаписатьИнформациюВЖурналРегистрации(Комментарий)
	ЗаписьЖурналаРегистрации(ИмяТеста(), УровеньЖурналаРегистрации.Информация, , , Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура Отладка(Знач Сообщение)
	КонтекстЯдра.Отладка(Сообщение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВключенаАнглийскаяЛокализация()
	ВариантВстроенногоЯзыкаАнглийский = Ложь;
	Если Metadata.ScriptVariant = Metadata.ObjectProperties.ScriptVariant.English Или
		ТекущийЯзыкСистемы() = "en" Тогда

		ВариантВстроенногоЯзыкаАнглийский = Истина;
	КонецЕсли;

	Возврат ВариантВстроенногоЯзыкаАнглийский;
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтруктуры(Знач Структура, Знач ИмяНастройки, Знач ЗначениеПоУмолчанию)

	Результат = Неопределено;

	Если Не Структура.Свойство(ИмяНастройки, Результат) Или Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Результат;

КонецФункции


#КонецОбласти

#Область ТестыЧерезКлиентТестирования

&НаКлиенте
Процедура ТестироватьФормуНаКлиентеТестирования(ПолноеИмяФормы, ПараметрыФормы)
	
	ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");
	ТестКлиент = ПлагинТестКлиенты.ТестКлиентПоУмолчанию();
	ОсновноеОкно = ОсновноеОкно(ТестКлиент);
	ОткрытыеОкнаДо = ПлагинТестКлиенты.ОткрытыеОкна(ТестКлиент);	
		
	Попытка
		// Если ссылка задана - открываем просто форму Элемента/Документа
		СсылкаНаОбъект = Неопределено;
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") И ПараметрыФормы.Свойство("Ключ", СсылкаНаОбъект)
			И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПарамНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
		Иначе
			// Иначе открываем просто по контексту - для справочника или документа это будет новый объект //
			ПарамНавигационнаяСсылка = "e1cib/app/" + ПолноеИмяФормы;
		КонецЕсли;  
		
		ОсновноеОкно.ВыполнитьКоманду(ПарамНавигационнаяСсылка);         
		Отладка(СтрШаблон("ОКНА: НавигационнаяСсылка: %1", ПарамНавигационнаяСсылка));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПолныйТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписатьПредупреждениеВЖурналРегистрацииСервер(ПолныйТекстСообщения);
		
		// очень нехватает понимания что ж за окно такое заблокировало интерфейс, вот для этого добавлено сюда логирование
		ОткрытыеОкна = ПлагинТестКлиенты.ПредставленияОткрытыхОкон(ТестКлиент);
		Отладка(СтрШаблон("ОКНА: Открытые окна:
							|	%1", ОткрытыеОкна));
		
		ПлагинТестКлиенты.ЗакрытьВсеОткрытыеОкна(ТестКлиент); 
		ВызватьИсключение КонтекстЯдра.СтрШаблон_("Не удалось выполнить команду %1 на тест-клиенте.
			|Возможно, сеанс тест-клиента заблокирован модальным окном", ПарамНавигационнаяСсылка);
	КонецПопытки;
	
	ПлагинТестКлиенты.ИдентифицироватьОкноПредупреждение(ТестКлиент, ПереходПоКнопкеКомандногоИнтерфейса(), ТекстыИсключенийСервер(), ОткрытыеОкнаДо);
	ПлагинТестКлиенты.ЗакрытьВсеОткрытыеОкна(ТестКлиент); 

	// при закрытии может появится вопрос о сохранении, по этому мы вызываем ИдентифицироватьОкноПредупреждение
	// а потом еще раз ЗакрытьВсеОткрытыеОкна и если после всех этих манипуляций останутся открытые окна, будем ругаться
	// т.к. нет правил под модальное окно
	ПлагинТестКлиенты.ИдентифицироватьОкноПредупреждение(ТестКлиент, ПереходПоКнопкеКомандногоИнтерфейса(), ТекстыИсключенийСервер(), ОткрытыеОкнаДо);
	ПлагинТестКлиенты.ЗакрытьВсеОткрытыеОкна(ТестКлиент); 
	
	ПлагинТестКлиенты.ПроверитьНаНовыеМодальныеОкна(ТестКлиент, ОткрытыеОкнаДо);    
КонецПроцедуры

// TODO исправить дублирование кода с тестами командного интерфейса и плагином ТестКлиент

&НаКлиенте
Функция ОсновноеОкно(ТестКлиент)

	Для Каждого ТестируемоеОкно Из ТестКлиент.ПолучитьПодчиненныеОбъекты() Цикл
		Если ТипЗнч(ТестируемоеОкно) = Тип("ТестируемоеОкноКлиентскогоПриложения")
			И ТестируемоеОкно.Основное Тогда
			Возврат ТестируемоеОкно;
		КонецЕсли;
	КонецЦикла;

	ВызватьИсключение "Не удалось найти основное окно";

КонецФункции

&НаКлиенте
Функция ПереходПоКнопкеКомандногоИнтерфейса()

	Возврат "Переход по кнопке командного интерфейса";

КонецФункции

&НаКлиенте
Функция ТекстИсключения(ОкноПредупреждение)

	ТекстыЗаголовков = Новый Массив;
	Для Каждого ТекОбъект Из ОкноПредупреждение.НайтиОбъекты(Тип("ТестируемоеПолеФормы")) Цикл
		ТекстыЗаголовков.Добавить(ТекОбъект.ТекстЗаголовка);
	КонецЦикла;

	Возврат СтрСоединить(ТекстыЗаголовков, " ");

КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция КонтекстЯдраНаСервере(Знач ОбъектКонтекстаЯдра)

	КонтекстЯдра = ВнешниеОбработки.Создать("xddTestRunner");
	КонтекстЯдра.ИнициализацияНаСервере(ОбъектКонтекстаЯдра);
	Возврат КонтекстЯдра;

КонецФункции

&НаСервереБезКонтекста
Функция ИмяТеста()
	Возврат "VanessaADD.Дымовые.Тесты_ОткрытиеФормКонфигурации"; // по аналогии с другими тестами
КонецФункции

&НаСервере
Функция ИмяТестаНаСервере()
  Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
КонецФункции

#КонецОбласти
