&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;

&НаКлиенте
Перем ПлагинТестКлиенты;

&НаКлиенте
Перем ТестируемаяФорма;

// { интерфейс тестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");

	Объект.ОткрываемФормыНаКлиентеТестирования = Истина;

	ЗагрузитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт

	Инициализация(КонтекстЯдраПараметр);
	
	Если Не НужноВыполнятьТест() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОткрываемФормыНаКлиентеТестирования Тогда
		ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");
		ТестКлиент = ПлагинТестКлиенты.ТестКлиентПоУмолчанию();
		ПлагинТестКлиенты.ЗакрытьВсеОткрытыеОкна(ТестКлиент);
		
		ОсновноеОкно = ОсновноеОкно(ТестКлиент);
	КонецЕсли;

	ОписанияТестов = Новый Массив;

	НужноИсключениеЕслиНеНайденоДокументов = Ложь;

	ВключенСтрогийПорядокВыполнения= ВключенСтрогийПорядокВыполнения();

	Если ВключенСтрогийПорядокВыполнения Тогда
		НаборТестов.СтрогийПорядокВыполнения();
		НаборТестов.ПродолжитьВыполнениеПослеПаденияТеста();
	КонецЕсли;

	СоздатьИменаОсновныхФорм();

	НастройкаГруппировки = ПолучитьНастройкуГруппировки();

	ТолькоУправляемыеФормы = Истина;
	#Если ТолстыйКлиентОбычноеПриложение или ТолстыйКлиентУправляемоеПриложение  Тогда
		ТолькоУправляемыеФормы = Ложь;
	#КонецЕсли

	Если Не ИспользоватьОбычныеФормыВТолстомКлиентеВУправляемомРежимеСервер() Тогда
		ТолькоУправляемыеФормы = Истина;
	КонецЕсли;

	ИменаОсновныхФорм_Объекты_Сервер = ИменаОсновныхФорм_Объекты_Сервер();
	мИменаОсновныхФорм_Списки_Сервер = мИменаОсновныхФорм_Списки_Сервер();

	Если НЕ ВидМетаданныхИсключенИзТестирования("Справочники") Тогда

		ОписанияТестов = Новый Массив;

		ДобавитьТестыДляСправочниковСервер(
			ОписанияТестов, ТолькоУправляемыеФормы,
			ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки);

		Если ЗначениеЗаполнено(ОписанияТестов) Тогда

			Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Тогда
				НаборТестов.НачатьГруппу("Справочники", ВключенСтрогийПорядокВыполнения);
			КонецЕсли;

			ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, ВключенСтрогийПорядокВыполнения);

		КонецЕсли;
	КонецЕсли;

	Если НЕ ВидМетаданныхИсключенИзТестирования("Документы") Тогда

		ОписанияТестов = Новый Массив;

		ДобавитьТестыДляДокументовСервер(
			ОписанияТестов, ТолькоУправляемыеФормы,
			ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки);

		Если ЗначениеЗаполнено(ОписанияТестов) Тогда

			Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Тогда
				НаборТестов.НачатьГруппу("Документы", ВключенСтрогийПорядокВыполнения);
			КонецЕсли;

			ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, ВключенСтрогийПорядокВыполнения);

		КонецЕсли;
	КонецЕсли;

	Если НЕ ВидМетаданныхИсключенИзТестирования("Обработки") Тогда

		ОписанияТестов = Новый Массив;

		ДобавлятьОбработки = Истина;
		ДобавитьТестыДляОтчетовОбработокСервер(ОписанияТестов, ТолькоУправляемыеФормы, ДобавлятьОбработки,
			НастройкаГруппировки);

		Если ЗначениеЗаполнено(ОписанияТестов) Тогда

			Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Тогда
				НаборТестов.НачатьГруппу("Обработки", ВключенСтрогийПорядокВыполнения);
			КонецЕсли;

			ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, ВключенСтрогийПорядокВыполнения);

		КонецЕсли;
	КонецЕсли;

	Если НЕ ВидМетаданныхИсключенИзТестирования("Отчеты") Тогда

		ОписанияТестов = Новый Массив;

		ДобавлятьОбработки = Ложь;
		ДобавитьТестыДляОтчетовОбработокСервер(ОписанияТестов, ТолькоУправляемыеФормы, ДобавлятьОбработки,
			НастройкаГруппировки);

		Если ЗначениеЗаполнено(ОписанияТестов) Тогда

			Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Тогда
				НаборТестов.НачатьГруппу("Отчеты", ВключенСтрогийПорядокВыполнения);
			КонецЕсли;

			ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, ВключенСтрогийПорядокВыполнения);

		КонецЕсли;

	КонецЕсли;

	Если НЕ ВидМетаданныхИсключенИзТестирования("БизнесПроцессы") Тогда

		ОписанияТестов = Новый Массив;

		ДобавлятьОбработки = Ложь;
		ДобавитьТестыДляБизнесПроцессовСервер(
			ОписанияТестов, ТолькоУправляемыеФормы,
			ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки);

		Если ЗначениеЗаполнено(ОписанияТестов) Тогда

			Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Тогда
				НаборТестов.НачатьГруппу("БизнесПроцессы", ВключенСтрогийПорядокВыполнения);
			КонецЕсли;

			ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, ВключенСтрогийПорядокВыполнения);

		КонецЕсли;

	КонецЕсли;

	Если НастройкаГруппировки.ГруппироватьПоВидуМетаданных Или НастройкаГруппировки.ГруппироватьПоКоличеству
			Или НастройкаГруппировки.ГруппироватьПоВидуОбъекта Тогда

			НаборТестов.НачатьГруппу("Прочее", ВключенСтрогийПорядокВыполнения);

	КонецЕсли;

	ИмяТеста = "ТестДолжен_ПроверитьБагПлатформыПриОткрытииУправляемойФормыПриОткрытииКоторойЕстьИсключение";
	НаборТестов.Добавить(ИмяТеста, , ИмяТеста);

КонецПроцедуры

// } интерфейс тестирования

//{ ФормированиеСпискаТестовыхСлучаев

&НаКлиенте
Процедура ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов, СтрогийПорядокВыполнения)
	Для Каждого Описание Из ОписанияТестов Цикл
		Если ТипЗнч(Описание) = Тип("Строка") Тогда

			ПредставлениеТеста = Описание;
			НаборТестов.Добавить(Описание, , ПредставлениеТеста);

		ИначеЕсли ТипЗнч(Описание) = Тип("Структура") И Описание.Свойство("Набор") Тогда
			НаборТестов.НачатьГруппу(Описание.Имя, СтрогийПорядокВыполнения);
			ДобавитьОписанияТестовВНаборТестов(НаборТестов, Описание.Набор, СтрогийПорядокВыполнения);

		Иначе

			НаборТестов.Добавить(Описание.ИмяТеста, НаборТестов.ПараметрыТеста(Описание.Параметр),
				Описание.ПредставлениеТеста);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПодробноеПредставлениеПрефикса(ПрефиксТеста)
	
	Результат = "";
	
	Если ПрефиксТеста = "Новые" Тогда
		
		Результат = "открытие формы объекта при создании";
		
	ИначеЕсли ПрефиксТеста = "Существующие" Тогда
		
		Результат = "открытие формы записанного объекта";
		
	ИначеЕсли ПрефиксТеста = "Списки" Тогда
		
		Результат = "открытие формы списка";
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьТестыДляСправочниковСервер(ОписанияТестов, ТолькоУправляемыеФормы,
				ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки)

	ОсновнойОбъект = Объект();
	КонтекстЯдра = КонтекстЯдраНаСервере(КонтекстЯдра);
	
	СписокИсключений_Существующие = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Существующие();
	СписокИсключений_Новые = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Новые();
	СписокИсключений_Списки = ОсновнойОбъект.ПолучитьСписокИсключений_Справочники_Списки();

	Счетчик = 0;

	МенеджерМетаданного = Метаданные.Справочники;
	Для Каждого МетаОбъект Из МенеджерМетаданного Цикл

		КоличествоЭлементовДо = ОписанияТестов.Количество();

		НаборОписанийТестов = ДобавитьГруппировкуЕслиНужно("Справочники", "Справочник." + МетаОбъект.Имя,
			ОписанияТестов, НастройкаГруппировки, Счетчик);

		Если ПравоДоступа("ИнтерактивноеДобавление", МетаОбъект) Тогда

			ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
				НаборОписанийТестов,
				ОсновнойОбъект, МетаОбъект,
				ТолькоУправляемыеФормы,
				СписокИсключений_Новые, ИменаОсновныхФорм_Объекты_Сервер,
				"ТестДолжен_ОткрытьФормуНовогоЭлементаСправочника", "Новые", КонтекстЯдра);

		КонецЕсли;

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
			НаборОписанийТестов,
			ОсновнойОбъект, МетаОбъект,
			ТолькоУправляемыеФормы,
			СписокИсключений_Существующие, ИменаОсновныхФорм_Объекты_Сервер,
			"ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочника", "Существующие", КонтекстЯдра);

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
			НаборОписанийТестов,
			ОсновнойОбъект, МетаОбъект,
			ТолькоУправляемыеФормы,
			СписокИсключений_Списки, мИменаОсновныхФорм_Списки_Сервер,
			"ТестДолжен_ОткрытьФормуПоПолномуИмениФормы", "Списки", КонтекстЯдра);

		Если Не ЗначениеЗаполнено(НаборОписанийТестов) И ЗначениеЗаполнено(ОписанияТестов) Тогда
			Для Счетчик = КоличествоЭлементовДо По ОписанияТестов.Количество() - 1 Цикл
				ОписанияТестов.Удалить(ОписанияТестов.ВГраница());
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьГруппировкуЕслиНужно(Знач ИмяВидаМетаданного, Знач ИмяМетаданного,
									Знач ОписанияТестов, Знач НастройкаГруппировки, Счетчик)

	НаборОписанийТестов = ОписанияТестов;
	Если НастройкаГруппировки.ГруппироватьПоКоличеству Тогда
		Если Счетчик % НастройкаГруппировки.КоличествоВГруппе = 0 Тогда
			ИмяГруппы = ИмяВидаМетаданного + " (" + Строка(Счетчик + 1) + "..."
				+ Строка(Счетчик + НастройкаГруппировки.КоличествоВГруппе) + ")";
			ОписаниеГруппы = Новый Структура("Имя, Набор", ИмяГруппы, Новый Массив);
			НаборОписанийТестов.Добавить(ОписаниеГруппы);
			НаборОписанийТестов = ОписаниеГруппы.Набор;
		КонецЕсли;
	ИначеЕсли НастройкаГруппировки.ГруппироватьПоВидуОбъекта Тогда
		ИмяГруппы = ИмяМетаданного;
		ОписаниеГруппы = Новый Структура("Имя, Набор", ИмяГруппы, Новый Массив);
		НаборОписанийТестов.Добавить(ОписаниеГруппы);
		НаборОписанийТестов = ОписаниеГруппы.Набор;
	КонецЕсли;

	Счетчик = Счетчик + 1;

	Возврат НаборОписанийТестов;
КонецФункции

&НаСервере
Процедура ДобавитьТестыДляДокументовСервер(ОписанияТестов, ТолькоУправляемыеФормы,
			ИменаОсновныхФорм_Объекты_Сервер, мИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки)

	ОсновнойОбъект = Объект();
	КонтекстЯдра = КонтекстЯдраНаСервере(КонтекстЯдра);
	
	СписокИсключений_Существующие = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Существующие();
	СписокИсключений_Новые = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Новые();
	СписокИсключений_Списки = ОсновнойОбъект.ПолучитьСписокИсключений_Документы_Списки();

	Счетчик = 0;

	МенеджерМетаданного = Метаданные.Документы;
	Для Каждого МетаОбъект Из МенеджерМетаданного Цикл

		КоличествоЭлементовДо = ОписанияТестов.Количество();

		НаборОписанийТестов = ДобавитьГруппировкуЕслиНужно("Документы", "Документ." + МетаОбъект.Имя,
			ОписанияТестов, НастройкаГруппировки, Счетчик);

		Если ПравоДоступа("ИнтерактивноеДобавление", МетаОбъект) Тогда
			имяТеста = "ТестДолжен_ОткрытьФормуНовогоДокумента";
			ПрефиксПредставленияТеста = "Новые";
			СписокИсключений = СписокИсключений_Новые;
			ИменаОсновныхФорм = ИменаОсновныхФорм_Объекты_Сервер;
			ПроверяемоеПравоДоступа = "ИнтерактивноеДобавление";
			ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(НаборОписанийТестов, ОсновнойОбъект, МетаОбъект,
				ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста, КонтекстЯдра);
		КонецЕсли;

		имяТеста = "ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокумента";
		ПрефиксПредставленияТеста = "Существующие";
		СписокИсключений = СписокИсключений_Существующие;
		ИменаОсновныхФорм = ИменаОсновныхФорм_Объекты_Сервер;

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(НаборОписанийТестов, ОсновнойОбъект, МетаОбъект,
			ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста, КонтекстЯдра);

		имяТеста = "ТестДолжен_ОткрытьФормуПоПолномуИмениФормы";
		ПрефиксПредставленияТеста = "Списки";
		СписокИсключений = СписокИсключений_Списки;
		ИменаОсновныхФорм = мИменаОсновныхФорм_Списки_Сервер;

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(НаборОписанийТестов, ОсновнойОбъект, МетаОбъект,
			ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста, КонтекстЯдра);

		Если Не ЗначениеЗаполнено(НаборОписанийТестов) И ЗначениеЗаполнено(ОписанияТестов) Тогда
			Для Счетчик = КоличествоЭлементовДо По ОписанияТестов.Количество() - 1 Цикл
				ОписанияТестов.Удалить(ОписанияТестов.ВГраница());
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТестыДляОтчетовОбработокСервер(ОписанияТестов, ТолькоУправляемыеФормы, Знач ДобавлятьОбработки,
		Знач НастройкаГруппировки)
	ОсновнойОбъект = Объект();

	ОписаниеВидаМетаданного = Новый Структура;

	ИменаОсновныхФорм = мИменаОсновныхФорм_Сервер();
	Если ДобавлятьОбработки Тогда

		ОписаниеВидаМетаданного.Вставить("Менеджер", Метаданные.Обработки);
		ОписаниеВидаМетаданного.Вставить("ИмяВидаМнЧисло", "Обработки");
		ОписаниеВидаМетаданного.Вставить("ИмяВидаЕдЧисло", "Обработка");

		ДобавитьТестыПереданныхВидовФормДляКаждогоОбъектаМенеджераМетаданных(
			ОписанияТестов, ОсновнойОбъект, ОписаниеВидаМетаданного,
			ТолькоУправляемыеФормы,
			ОсновнойОбъект.ПолучитьСписокИсключений_Обработки(),
			ИменаОсновныхФорм,
			"ТестДолжен_ОткрытьФормуПоПолномуИмениФормы", "",
			НастройкаГруппировки);

	Иначе

		ОписаниеВидаМетаданного.Вставить("Менеджер", Метаданные.Отчеты);
		ОписаниеВидаМетаданного.Вставить("ИмяВидаМнЧисло", "Отчеты");
		ОписаниеВидаМетаданного.Вставить("ИмяВидаЕдЧисло", "Отчет");

		ДобавитьТестыПереданныхВидовФормДляКаждогоОбъектаМенеджераМетаданных(
			ОписанияТестов, ОсновнойОбъект, ОписаниеВидаМетаданного,
			ТолькоУправляемыеФормы,
			ОсновнойОбъект.ПолучитьСписокИсключений_Отчеты(),
			ИменаОсновныхФорм,
			"ТестДолжен_ОткрытьФормуПоПолномуИмениФормы", "",
			НастройкаГруппировки);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьТестыДляБизнесПроцессовСервер(ОписанияТестов, ТолькоУправляемыеФормы,
				ИменаОсновныхФорм_Объекты_Сервер, ИменаОсновныхФорм_Списки_Сервер, НастройкаГруппировки)

	ОсновнойОбъект = Объект();
	КонтекстЯдра = КонтекстЯдраНаСервере(КонтекстЯдра);
	
	СписокИсключений_Существующие = ОсновнойОбъект.ПолучитьСписокИсключений_БизнесПроцессы_Существующие();
	СписокИсключений_Новые = ОсновнойОбъект.ПолучитьСписокИсключений_БизнесПроцессы_Новые();
	СписокИсключений_Списки = ОсновнойОбъект.ПолучитьСписокИсключений_БизнесПроцессы_Списки();

	Счетчик = 0;

	МенеджерМетаданного = Метаданные.БизнесПроцессы;
	Для Каждого МетаОбъект Из МенеджерМетаданного Цикл

		КоличествоЭлементовДо = ОписанияТестов.Количество();

		НаборОписанийТестов = ДобавитьГруппировкуЕслиНужно("БизнесПроцессы", "БизнесПроцесс." + МетаОбъект.Имя,
			ОписанияТестов, НастройкаГруппировки, Счетчик);

		Если ПравоДоступа("ИнтерактивноеДобавление", МетаОбъект) Тогда

			ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
				НаборОписанийТестов,
				ОсновнойОбъект, МетаОбъект,
				ТолькоУправляемыеФормы,
				СписокИсключений_Новые, ИменаОсновныхФорм_Объекты_Сервер,
				"ТестДолжен_ОткрытьФормуНовогоБизнесПроцесса", "Новые", КонтекстЯдра);

		КонецЕсли;

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
			НаборОписанийТестов,
			ОсновнойОбъект, МетаОбъект,
			ТолькоУправляемыеФормы,
			СписокИсключений_Существующие, ИменаОсновныхФорм_Объекты_Сервер,
			"ТестДолжен_ОткрытьФормуСуществующегоБизнесПроцесса", "Существующие", КонтекстЯдра);

		ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(
			НаборОписанийТестов,
			ОсновнойОбъект, МетаОбъект,
			ТолькоУправляемыеФормы,
			СписокИсключений_Списки, ИменаОсновныхФорм_Списки_Сервер,
			"ТестДолжен_ОткрытьФормуПоПолномуИмениФормы", "Списки", КонтекстЯдра);

		Если Не ЗначениеЗаполнено(НаборОписанийТестов) И ЗначениеЗаполнено(ОписанияТестов) Тогда
			Для Счетчик = КоличествоЭлементовДо По ОписанияТестов.Количество() - 1 Цикл
				ОписанияТестов.Удалить(ОписанияТестов.ВГраница());
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТестыПереданныхВидовФормДляКаждогоОбъектаМенеджераМетаданных(
		ОписанияТестов, ОсновнойОбъект, ОписаниеВидаМетаданного,
		ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста,
			НастройкаГруппировки)

	КонтекстЯдра = КонтекстЯдраНаСервере(КонтекстЯдра);
	Счетчик = 0;

	Для Каждого МетаОбъект Из ОписаниеВидаМетаданного.Менеджер Цикл
		Если ОсновнойОбъект.ЭтоУстаревшийМетаОбъектДляУдаления(МетаОбъект) Тогда
			Продолжить;
		КонецЕсли;
		Если Лев(МетаОбъект.Имя, СтрДлина("xddTestRunner")) = "xddTestRunner" Тогда
			Продолжить;
		КонецЕсли;

		КоличествоЭлементовДо = ОписанияТестов.Количество();

		НаборОписанийТестов = ДобавитьГруппировкуЕслиНужно(
			ОписаниеВидаМетаданного.ИмяВидаМнЧисло,
			ОписаниеВидаМетаданного.ИмяВидаЕдЧисло + "." + МетаОбъект.Имя,
			ОписанияТестов, НастройкаГруппировки, Счетчик);

		Добавили = ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект,
			МетаОбъект, ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста,
			ПрефиксПредставленияТеста, КонтекстЯдра);

		Если Не Добавили Тогда

			Для Счетчик = КоличествоЭлементовДо По ОписанияТестов.Количество() - 1 Цикл
				ОписанияТестов.Удалить(ОписанияТестов.ВГраница());
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДобавитьТестыПереданныхВидовФормПоОдномОбъектуМетаданных(ОписанияТестов, ОсновнойОбъект, МетаОбъект,
		ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, имяТеста, ПрефиксПредставленияТеста, КонтекстЯДра)

	Если ОсновнойОбъект.ЭтоУстаревшийМетаОбъектДляУдаления(МетаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;

	СписокИменМетаФорм = Новый СписокЗначений;
	Успешно = ДобавитьИменаМетаФормДляОдногоОбъектаМетаданного(СписокИменМетаФорм, ОсновнойОбъект, МетаОбъект,
		ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, КонтекстЯдра);
	ДобавитьТестПоПереданнымМетаФормамСсылочногоОбъектаСервер(ОписанияТестов, СписокИменМетаФорм, имяТеста,
		ПрефиксПредставленияТеста);

	Возврат Успешно;
КонецФункции

&НаСервере
Процедура ДобавитьТестПоПереданнымМетаФормамСсылочногоОбъектаСервер(ОписанияТестов, СписокИменМетаФорм, имяТеста,
		ПрефиксПредставленияТеста)
	Для каждого Элемент Из СписокИменМетаФорм  Цикл
		МетаФорма_ПолноеИмя = Элемент.Значение;
		ПредставлениеТеста = МетаФорма_ПолноеИмя;
		Если НЕ ПустаяСтрока(ПрефиксПредставленияТеста) Тогда
			ПредставлениеТеста =  МетаФорма_ПолноеИмя + " : " + ПодробноеПредставлениеПрефикса(ПрефиксПредставленияТеста);
		КонецЕсли;

		лПараметры = Новый Структура("ПредставлениеТеста,ИмяТеста,Транзакция,Параметр", ПредставлениеТеста, имяТеста,
			Истина, МетаФорма_ПолноеИмя);
		ОписанияТестов.Добавить(лПараметры);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьИменаМетаФормДляОдногоОбъектаМетаданного(СписокИменМетаФорм, ОсновнойОбъект, МетаОбъект,
		ТолькоУправляемыеФормы, СписокИсключений, ИменаОсновныхФорм, КонтекстЯдра)
		
	Если ИсключаемПоИмени(МетаОбъект.Имя, СписокИсключений) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ПравоДоступа("Просмотр", МетаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Мета_ПолноеИмя = МетаОбъект.ПолноеИмя();
	
	Результат = Ложь;
	
	МетаФормы = ОсновнойОбъект.ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, ИменаОсновныхФорм);
	
	ФормыДобавлены = Ложь;

	Для каждого МетаФорма Из МетаФормы Цикл
		
		МетаФорма_ПолноеИмя = МетаФорма.ПолноеИмя();
		
		// В режиме клиента тестирования не нужно добавлять .Форма, 
		// а необходимо указывать имя отчета, для формирования навигационной ссылки.
		Если Не ОсновнойОбъект.ОткрываемФормыНаКлиентеТестирования Тогда
			Если Метаданные.ОсновнаяФормаОтчета = МетаФорма Тогда
				МетаФорма_ПолноеИмя = МетаОбъект.ПолноеИмя() + ".Форма";
				
			// Форма настроек отчета из комплекта БСП не открывается без передачи параметра.
			//ИначеЕсли Метаданные.ОсновнаяФормаНастроекОтчета = МетаФорма Тогда
			//	МетаФорма_ПолноеИмя = МетаОбъект.ПолноеИмя() + ".ФормаНастроек";
			
			КонецЕсли;	
		КонецЕсли;
		
		//МетаОбъект.Имя <Отчет1>, МетаФорма_ПолноеИмя <Отчет.Отчет1.Форма.УправляемаяФормаОтчета>
		//МетаОбъект.Имя <Отчет2>, МетаФорма_ПолноеИмя <ОбщаяФорма.ФормаОтчета> // в ОФ Отчет.Отчет2.Форма
		
		Если ТолькоУправляемыеФормы Тогда
			Если Не ЭтоУправляемаяФорма(МетаФорма) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// исторически в списке исключений имя формы без имени коллекции объектов метаданных
		// "Справочник1.Форма.ФормаЭлемента", а не "Справочник.Справочник1.Форма.ФормаЭлемента"
		Если СписокИсключений.НайтиПоЗначению(Сред(МетаФорма_ПолноеИмя, Найти(МетаФорма_ПолноеИмя, ".") + 1))
			<> Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		// TODO Бессмысленно открывать для отчетов основную форму отчета, настроек, варианта из конфигурации
		Если Лев(НРег(МетаФорма_ПолноеИмя), СтрДлина(Мета_ПолноеИмя)) <> НРег(Мета_ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
	
		ФормыДобавлены = Истина;
	
		СписокИменМетаФорм.Добавить(МетаФорма_ПолноеИмя);
		Результат = Истина;
      
	КонецЦикла;

	//добавить общие формы к отчётам, если они не указаны
	ДлинаСловаОтчет = 6;
	Если Метаданные.Отчеты.Найти(МетаОбъект.Имя) <> Неопределено И Лев(Мета_ПолноеИмя, ДлинаСловаОтчет) = "Отчет." Тогда
		ФормыДобавлены = ДобавитьОбщиеФормыДляОтчетов(СписокИменМетаФорм, МетаОбъект, ОсновнойОбъект.ОткрываемФормыНаКлиентеТестирования);
		Если НЕ Результат Тогда
			Результат = ФормыДобавлены;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем наименование отчета для режима клиента тестирования, без указания формы.
	// TODO Бессмысленно открывать для отчетов основную форму отчета, настроек, варианта из конфигурации.
	// Также нужно добавить стандартные формы для всяких объектов - справочники, документы
	Если Не ФормыДобавлены
		И ОсновнойОбъект.ОткрываемФормыНаКлиентеТестирования Тогда
		СписокИменМетаФорм.Добавить(Мета_ПолноеИмя);
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

//}

//{ РаботаСФормами

&НаСервереБезКонтекста
Функция ДобавитьОбщиеФормыДляОтчетов(СписокИменМетаФорм, МетаОбъект, ОткрываемФормыНаКлиентеТестирования)
	
	Результат = Ложь;
	
	// В режиме клиента тестирования не нужно добавлять .Форма, 
	// а необходимо указывать имя отчета, для формирования навигационной ссылки.
	Если ОткрываемФормыНаКлиентеТестирования Тогда
		СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя());
		Результат = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьФормуОбъекта(МетаОбъект, "ОсновнаяФорма") = Неопределено 
		И ПолучитьФормуОбъекта(Метаданные, "ОсновнаяФормаОтчета") <> Неопределено Тогда
		
		СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя() + ".Форма");
		Результат = Истина;
		
	КонецЕсли;
	
	// Форма настроек отчета из комплекта БСП не открывается без передачи параметра.
	//Если ПолучитьФормуОбъекта(МетаОбъект, "ОсновнаяФормаНастроек") = Неопределено 
	//	И ПолучитьФормуОбъекта(Метаданные, "ОсновнаяФормаНастроекОтчета") <> Неопределено Тогда
	//	
	//	СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя() + ".ФормаНастроек");
	//	Результат = Истина;
	//	
	//КонецЕсли;
		
	ФормаВарианта = ПолучитьФормуОбъекта(МетаОбъект, "ОсновнаяФормаВарианта");
	Если ФормаВарианта = Неопределено Тогда
		Если ПолучитьФормуОбъекта(Метаданные, "ОсновнаяФормаВариантаОтчета") <> Неопределено Тогда
			
			СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя() + ".ФормаВарианта");
			Результат = Истина;
			
		КонецЕсли;
	Иначе
	// 	Общая форма "ВариантыОтчета" не открываются самостоятельно.
		//СписокИменМетаФорм.Добавить(ФормаВарианта.ПолноеИмя());
	 	СписокИменМетаФорм.Добавить(МетаОбъект.ПолноеИмя() + ".ФормаВарианта");
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФормуОбъекта(ОбъектФормы, ИмяФормы)
	
	Попытка
		Результат = ОбъектФормы[ИмяФормы];
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьОбычныеФормыВТолстомКлиентеВУправляемомРежимеСервер()
	Возврат Метаданные.ИспользоватьОбычныеФормыВУправляемомПриложении;
КонецФункции

&НаКлиенте
Процедура ТестироватьФорму(ПолноеИмяФормы, ПараметрыФормы) Экспорт
	Если Объект.ВыводитьСообщенияВЖурналРегистрации Тогда
		ВыполнитьЗаписьВЖурналРегистрации(ПолноеИмяФормы);
	КонецЕсли;

	Если Объект.ОткрываемФормыНаКлиентеТестирования Тогда
		ТестироватьФормуНаКлиентеТестирования(ПолноеИмяФормы, ПараметрыФормы);
	Иначе
		ТестироватьФормуВТекущемКлиенте(ПолноеИмяФормы, ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестироватьФормуВТекущемКлиенте(ПолноеИмяФормы, ПараметрыФормы) Экспорт

	ПредыдущиеОкна = ПолучитьОкна();

	Попытка

		// К сожалению, здесь часто исключения не ловятся
		//https://github.com/xDrivenDevelopment/xUnitFor1C/issues/154

		ТестируемаяФорма = ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы,, Новый УникальныйИдентификатор);

	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();

		Если Не ПропускаемОшибкуПоТекстуИсключенияСервер(ИнфоОшибки.Описание) Тогда
			ВызватьИсключение;
		КонецЕсли;

		Возврат;
	КонецПопытки;

	Если ТестируемаяФорма = Неопределено Или Не ТестируемаяФорма.Открыта() Тогда

		НеПроверятьФорму = ТестируемаяФорма = Неопределено;

		НовыеОкна = ПолучитьОкна();

		МассивНовыхОкон = Новый Массив;
		Для Каждого НовоеОкно Из НовыеОкна Цикл
			НашлиОкно = Ложь;
			Для Каждого ОкноДо Из ПредыдущиеОкна Цикл
				Если ОкноДо.Заголовок = НовоеОкно.Заголовок Тогда
					НашлиОкно = Истина;
					Продолжить;
				КонецЕсли;
			КонецЦикла;

			Если НашлиОкно Тогда
				Продолжить;
			КонецЕсли;

			МассивНовыхОкон.Добавить(НовоеОкно);
		КонецЦикла;

		Если МассивНовыхОкон.Количество() = 0 И НеПроверятьФорму Тогда
			Возврат;
		КонецЕсли;

		Если МассивНовыхОкон.Количество() > 0 Тогда
			МассивФорм = МассивНовыхОкон[0].Содержимое;
			Если МассивНовыхОкон.Количество() = 0 И НеПроверятьФорму Тогда
				Возврат;
			КонецЕсли;
			Если МассивНовыхОкон.Количество() > 0 Тогда
				ТестируемаяФорма = МассивФорм[0];
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Утверждения.Проверить(ТестируемаяФорма.Открыта(), "ТестируемаяФорма """+ПолноеИмяФормы
		+""" не открылась, а должна была открыться");

	Если ТипЗнч(ТестируемаяФорма) = Тип("УправляемаяФорма") Тогда
		ТестируемаяФорма.ОбновитьОтображениеДанных();
	Иначе
		ТестируемаяФорма.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СсылочныйОбъект)
	ПараметрыФормы = Новый Структура("Ключ", СсылочныйОбъект);
	ТестироватьФорму(Мета_ПолноеИмя, ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Если ТипЗнч(ТестируемаяФорма) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	ТестируемаяФорма.Модифицированность = Ложь;
	Если ТестируемаяФорма.Открыта() Тогда
		ТестируемаяФорма.Модифицированность = Ложь;
		//Попытка
			ТестируемаяФорма.Закрыть();
		//Исключение
		//	Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//	ЗакрытьФормуБезусловноСОтменойТранзакции(ТестируемаяФорма);
		//	//Если ТранзакцияАктивна() Тогда
		//	//	ОтменитьТранзакцию();
		//	//КонецЕсли;
		//	//	//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
		//	//НачатьТранзакцию();
		//	//ТестируемаяФорма.УстановитьДействие("ПередЗакрытием", Неопределено);
		//	//ТестируемаяФорма.УстановитьДействие("ПриЗакрытии", Неопределено);
		//	//ТестируемаяФорма.Закрыть();
		//	ВызватьИсключение Ошибка;
		//КонецПопытки;
	Иначе
		Попытка
			ТестируемаяФорма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	ТестируемаяФорма = "";

КонецПроцедуры

&НаСервере
Процедура СоздатьИменаОсновныхФорм()
	ОсновнойОбъект = Объект();
	ОсновнойОбъект.СоздатьИменаОсновныхФорм();
	ОсновнойОбъект.ВидыМетаданных = ОсновнойОбъект.ВидыМетаданных();
	ОсновнойОбъект.ВидыПроверок = ОсновнойОбъект.ВидыПроверок();
	ОсновнойОбъект.СпособыГруппировки = ОсновнойОбъект.СпособыГруппировки();
	ЗначениеВРеквизитФормы(ОсновнойОбъект, "Объект");
КонецПроцедуры

&НаСервере
Функция ИменаОсновныхФорм_Объекты_Сервер()
	Возврат Объект().мИменаОсновныхФорм_Объекты;
КонецФункции

&НаСервере
Функция мИменаОсновныхФорм_Списки_Сервер()
	Возврат Объект().мИменаОсновныхФорм_Списки;
КонецФункции

&НаСервере
Функция мИменаОсновныхФорм_Сервер()
	Возврат Объект().мИменаОсновныхФорм;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУправляемаяФорма(МетаФорма)
	Возврат МетаФорма <> Неопределено И МетаФорма.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая;
КонецФункции

//}

//{ РаботаСНастройками
#Область Настройки

&НаКлиенте
Функция КлючНастройки() Экспорт
	Возврат "smoke";
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройки()
	
	ПутьНастройки = КлючНастройки();

	//Отладка(СтрШаблон("Дымовые ФлагОтладки %1", КонтекстЯдра.Объект.ФлагОтладки));

	ПлагинНастроек = КонтекстЯдра.Плагин("Настройки");
	
	ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");
	НастройкиМодальныхОкон = ПлагинНастроек.ПолучитьНастройку(ПлагинТестКлиенты.КлючНастройкиМодальныхОкон());
	
	Объект.Настройки = ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = Новый Структура;
	КонецЕсли;

	Если ЕстьНастройка("ВыводитьСообщенияВЖурналРегистрации", Объект.Настройки) Тогда
		Объект.ВыводитьСообщенияВЖурналРегистрации = Объект.Настройки.ВыводитьСообщенияВЖурналРегистрации;
		//Отладка(СтрШаблон("ВыводитьСообщенияВЖурналРегистрации %1", Объект.ВыводитьСообщенияВЖурналРегистрации));
	КонецЕсли;

	Если ЕстьНастройка("ОткрываемФормыНаКлиентеТестирования", Объект.Настройки) Тогда
		Объект.ОткрываемФормыНаКлиентеТестирования = Объект.Настройки.ОткрываемФормыНаКлиентеТестирования;
	КонецЕсли;

	НаборНастроекПоУмолчанию = СоздатьНаборНастроекПоУмолчанию();

	ЗаменитьНесуществующиеНастройкиЗначениямиПоУмолчанию(Объект.Настройки, НаборНастроекПоУмолчанию);
	
	Если ЗначениеЗаполнено(НастройкиМодальныхОкон) Тогда
		Объект.Настройки.Вставить(ПлагинТестКлиенты.КлючНастройкиМодальныхОкон(), НастройкиМодальныхОкон);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьНаборНастроекПоУмолчанию() Экспорт

	Возврат Объект().СоздатьНаборНастроекПоУмолчанию();

КонецФункции // ()

&НаКлиенте
Процедура ЗаменитьНесуществующиеНастройкиЗначениямиПоУмолчанию(Знач Настройки, Знач НаборНастроекПоУмолчанию)

	Для каждого КлючЗначение Из НаборНастроекПоУмолчанию Цикл
		Если Не ЕстьНастройка(КлючЗначение.Ключ) Тогда
			Настройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Позволяет одним вызовом получить значение из вложенных друг в друга структур
// по строке ключей, объединенных точкой.
//
// Параметры:
//  ПутьНастроек		 - Строка	 - Путь или ключ настроек
//  СтруктураНастроек	 - Произвольный, Неопределено - полученное значение
//		( необязательно )
//
// Возвращаемое значение:
//   Булево - Истина, если ключ/путь найден, иначе Ложь
//
// Пример:
// 		Структура = Новый Структура("Ключ1", Новый Структура("Ключ2", Новый Структура("Ключ3", 42)));
//		РезультатПроверки = ЕстьНастройка("Ключ1.Ключ2.Ключ3", ВремЗнач);
// В результате получим ВремЗнач == 42
//
&НаКлиенте
Функция ЕстьНастройка(Знач ПутьНастроек, СтруктураНастроек = Неопределено) Экспорт

	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = Объект.Настройки;
	КонецЕсли;

	Возврат КонтекстЯдра.Плагин("Настройки").ЕстьНастройка(ПутьНастроек, СтруктураНастроек);

КонецФункции

&НаКлиенте
Функция НужноВыполнятьТест()
	
	ЗначениеПоУмолчанию = Истина;
	
	ЗагрузитьНастройки();
	
	Настройки = ОБъект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	КлючНастройки = КлючНастройки();
	
	ВыполнятьТест = Неопределено;
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Используется", ВыполнятьТест) Тогда

			Возврат ВыполнятьТест = Истина;	
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;

КонецФункции

&НаКлиенте
Функция ВключенСтрогийПорядокВыполнения()
	Если ЕстьНастройка("СтрогийПорядокВыполнения", Объект.Настройки)
			И Объект.Настройки.СтрогийПорядокВыполнения = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьНастройкуГруппировки()
	Возврат Объект().ПолучитьНастройкуГруппировки(Объект.Настройки);
КонецФункции

#КонецОбласти 

#Область Исключения

&НаКлиенте
Функция ВидМетаданныхИсключенИзТестирования(ВидМетаданных)
	Если ЕстьНастройка(ВидМетаданных) Тогда
		Возврат (ТипЗнч(Объект.Настройки[ВидМетаданных]) = Тип("Булево") И НЕ Объект.Настройки[ВидМетаданных]);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПропускаемОшибкуПоТекстуИсключенияСервер(Знач ТекстИсключения)
	Возврат Объект().ПропускаемОшибкуПоТекстуИсключения(ТекстИсключения);
КонецФункции

&НаСервереБезКонтекста
Функция ИсключаемПоИмени(Знач ЧтоИщем, Знач КоллекцияДляПоиска, Знач КонтекстЯдра = Неопределено)
	
	Если КоллекцияДляПоиска = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	КонтекстЯдра = КонтекстЯдраНаСервере(КонтекстЯдра);
	Возврат КонтекстЯдра.ЕстьВИсключаемойКоллекции(ЧтоИщем, КоллекцияДляПоиска);
	
КонецФункции

#КонецОбласти 

//}

//{ блок юнит-тестов - САМИ ТЕСТЫ

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт

	СоздаваемыйЭлемент = Неопределено;

	ОбновитьПовторноИспользуемыеЗначения();

	НужноИсключениеЕслиНеНайденоДокументов = Ложь;

	СоздатьИменаОсновныхФорм();
	
	ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");
	Если ЕстьНастройка(ПлагинТестКлиенты.КлючНастройкиМодальныхОкон(), Объект.Настройки) Тогда
		ПлагинТестКлиенты.УстановитьНастройкиМодальныхОкон(Объект.Настройки[ПлагинТестКлиенты.КлючНастройкиМодальныхОкон()]);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт

	ЗакрытьФорму();
	Попытка
		УдалитьСозданныеОбъекты(СоздаваемыйЭлемент);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПропуститьТестФормы(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуПоПолномуИмениФормы(ПолноеИмяФормы) Экспорт
	ТестироватьФорму(ПолноеИмяФормы, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочника(Мета_ПолноеИмя) Экспорт
	СуществующийЭлемент = ПолучитьОбъектСуществующегоЭлементаСправочникаИВернутьСсылкуСервер(Мета_ПолноеИмя);
	Если ЗначениеЗаполнено(СуществующийЭлемент) Тогда
		ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СуществующийЭлемент);
	Иначе
		СоздаваемыйЭлемент = СоздатьЭлементИВернутьСсылкуСервер(Мета_ПолноеИмя);
		Если ЗначениеЗаполнено(СоздаваемыйЭлемент) Тогда
			ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СоздаваемыйЭлемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьЭлементИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	Возврат ОсновнойОбъект.СоздатьЭлементИВернутьСсылку(ИД, "существующий");
	
КонецФункции

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуНовогоЭлементаСправочника(Мета_ПолноеИмя) Экспорт
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуНовогоДокумента(Мета_ПолноеИмя) Экспорт
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокумента(Мета_ПолноеИмя) Экспорт
	Док = ПолучитьСуществующийДокументОбъектИВернутьСсылкуСервер(Мета_ПолноеИмя);
	Если Док <> Неопределено Тогда
		ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Док);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСуществующийДокументОбъектИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	Док = ОсновнойОбъект.ПолучитьСуществующийДокументОбъектИВернутьСсылку(ИД, НужноИсключениеЕслиНеНайденоДокументов,
		"ТестДолжен_ОткрытьФормуСуществующегоДокумента");
	Возврат Док;
КонецФункции

&НаСервере
Функция ПолучитьОбъектСуществующегоЭлементаСправочникаИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();

	Отбор = Новый Структура;
	МетаданныеОбъекта = Метаданные.Справочники[ИД];
	Если МетаданныеОбъекта.Иерархический
		И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда	
		Отбор.Вставить("ЭтоГруппа", "Ложь");	
		Если МетаданныеОбъекта.ОсновнаяФормаГруппы <> Неопределено
			И Найти(Мета_ПолноеИмя, МетаданныеОбъекта.ОсновнаяФормаГруппы.Имя) <> 0 Тогда
			Отбор.Вставить("ЭтоГруппа", "Истина");
		КонецЕсли;
	КонецЕсли;

	Элем = ОсновнойОбъект.ПолучитьОбъектСуществующегоЭлементаСправочникаИВернутьСсылку(ИД, Ложь,
		"ТестДолжен_ОткрытьФормуСуществующегоЭлементСправочника", Отбор);
	Возврат Элем;
КонецФункции

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуНовогоБизнесПроцесса(Мета_ПолноеИмя) Экспорт
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьФормуСуществующегоБизнесПроцесса(Мета_ПолноеИмя) Экспорт
	СуществующийЭлемент = ПолучитьОбъектСуществующегоБизнесПроцессаИВернутьСсылкуСервер(Мета_ПолноеИмя);
	Если ЗначениеЗаполнено(СуществующийЭлемент) Тогда
		ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СуществующийЭлемент);
	Иначе
		СоздаваемыйЭлемент = СоздатьБизнесПроцессИВернутьСсылкуСервер(Мета_ПолноеИмя);
		Если ЗначениеЗаполнено(СоздаваемыйЭлемент) Тогда
			ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СоздаваемыйЭлемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектСуществующегоБизнесПроцессаИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	Элем = ОсновнойОбъект.ПолучитьОбъектСуществующегоБизнесПроцессаИВернутьСсылку(ИД, Ложь,
		"ТестДолжен_ОткрытьФормуСуществующегоБизнесПроцесса");
	Возврат Элем;
КонецФункции

&НаСервере
Функция СоздатьБизнесПроцессИВернутьСсылкуСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	ОсновнойОбъект = Объект();
	Возврат ОсновнойОбъект.СоздатьБизнесПроцессИВернутьСсылку(ИД);
КонецФункции

// проверка бага https://github.com/xDrivenDevelopment/xUnitFor1C/issues/154
&НаКлиенте
Процедура ТестДолжен_ПроверитьБагПлатформыПриОткрытииУправляемойФормыПриОткрытииКоторойЕстьИсключение() Экспорт
	Мета_ПолноеИмя = "Обработка.ТестОбработка_Форма_ИсключениеПриОткрытии.Форма.УправляемаяФорма";
	ошибка ="";
	Попытка
		ОткрытьФорму(Мета_ПолноеИмя);
	Исключение
		ошибка = ОписаниеОшибки();
	КонецПопытки;
	Утверждения.ПроверитьЗаполненность(ошибка, "Ошибка");
КонецПроцедуры

//}

//{ Переопределение исключений, чтобы не открывать формы.
//}

//{ ВспомогательныеМетоды

&НаСервереБезКонтекста
Процедура УдалитьСозданныеОбъекты(СоздаваемыйЭлемент)
	
	Если СоздаваемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		СозданныйОбъект = СоздаваемыйЭлемент.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(СоздаваемыйЭлемент.Владелец) Тогда
			
			Если СоздаваемыйЭлемент.Метаданные().Владельцы.Количество() > 0
				И Не СоздаваемыйЭлемент.Владелец.Пустая() Тогда
				УдалитьСозданныеОбъекты(СозданныйОбъект.Владелец);
				Возврат;
			КонецЕсли;
		
		КонецЕсли;

		СозданныйОбъект.Удалить();
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Тесты_ОткрытиеФормКонфигурации'", "ru"),
			УровеньЖурналаРегистрации.Ошибка,
			СозданныйОбъект,
			СоздаваемыйЭлемент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	СоздаваемыйЭлемент = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВидМетаданного(Мета_ПолноеИмя)
	//Если ВключенаАнглийскаяЛокализация() Тогда
	//	СтрокаФорма = ".Form.";
	//Иначе
	//	СтрокаФорма = ".Форма.";
	//КонецЕсли;

	Поз = Найти(Мета_ПолноеИмя, ".Форма.");
	Если Поз = 0 Тогда
		Поз = Найти(Мета_ПолноеИмя, ".Form.");
	КонецЕсли;
	Если Поз <> 0 Тогда
		ИД = Лев(Мета_ПолноеИмя, Поз - 1);
		//TODO локализация Английская - Мета_ПолноеИмя	"Catalog.ПростойСправочник.Form.УпрФормаЭлемента"	String;
		ИД = Сред(ИД, Найти(ИД, ".") + 1);
	Иначе
		// Если нет формы и мы открываем по имени справочника,
		// то в качестве его ИД просто берем 2ю часть наименования //
		ИД = Прав(Мета_ПолноеИмя, СтрДлина(Мета_ПолноеИмя) - Найти(Мета_ПолноеИмя,"."));
	КонецЕсли;

	Возврат ИД;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетодаПропускаТестов()
	Возврат "ТестДолжен_ПропуститьТестФормы";
КонецФункции

&НаСервере
Процедура ВыполнитьЗаписьВЖурналРегистрации(ПолноеИмяФормы)
	ЗаписьЖурналаРегистрации(Объект().Метаданные().Синоним, УровеньЖурналаРегистрации.Информация, , ,
		"Операция: " + ПолноеИмяФормы);
КонецПроцедуры

&НаКлиенте
Процедура Отладка(Знач Сообщение)
	КонтекстЯдра.Отладка(Сообщение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВключенаАнглийскаяЛокализация()
	ВариантВстроенногоЯзыкаАнглийский = Ложь;
	Если Metadata.ScriptVariant = Metadata.ObjectProperties.ScriptVariant.English Или
			ТекущийЯзыкСистемы() = "en" Тогда

		ВариантВстроенногоЯзыкаАнглийский = Истина;
	КонецЕсли;

	Возврат ВариантВстроенногоЯзыкаАнглийский;
КонецФункции

//}

//{ Тесты с помощью клиента тестирования

&НаКлиенте
Процедура ТестироватьФормуНаКлиентеТестирования(ПолноеИмяФормы, ПараметрыФормы) Экспорт

	ПлагинТестКлиенты = КонтекстЯдра.Плагин("ТестКлиенты");
	ТестКлиент = ПлагинТестКлиенты.ТестКлиентПоУмолчанию();
	ОсновноеОкно = ОсновноеОкно(ТестКлиент);
	
	ОткрытыеОкнаДо = ПлагинТестКлиенты.ОткрытыеОкна(ТестКлиент);
	
	Попытка
		// Если ссылка задана - открываем просто форму Элемента/Документа
		СсылкаНаОбъект           = Неопределено;
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") И ПараметрыФормы.Свойство("Ключ",СсылкаНаОбъект)
				И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПарамНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
		Иначе
			// Иначе открываем просто по контексту - для справочника или документа это будет новый объект //
			ПарамНавигационнаяСсылка = "e1cib/app/" + ПолноеИмяФормы;
		КонецЕсли;
		ОсновноеОкно.ВыполнитьКоманду(ПарамНавигационнаяСсылка);
	Исключение
		ВызватьИсключение КонтекстЯдра.СтрШаблон_("Не удалось выполнить команду %1 на тест-клиенте.
		|Возможно, сеанс тест-клиента заблокирован модальным окном", ПарамНавигационнаяСсылка);
	КонецПопытки;
	
	ПлагинТестКлиенты.ИдентифицироватьОкноПредупреждение(ТестКлиент, ПереходПоКнопкеКомандногоИнтерфейса(), Ложь);

	ПлагинТестКлиенты.ЗакрытьВсеОткрытыеОкна(ТестКлиент);
	
	ПлагинТестКлиенты.ПроверитьНаНовыеМодальныеОкна(ТестКлиент, ОткрытыеОкнаДо);
	
КонецПроцедуры

// TODO исправить дублирование кода с тестами командного интерфейса и плагином ТестКлиент

&НаКлиенте
Функция ОсновноеОкно(ТестКлиент)

	Для Каждого ТестируемоеОкно Из ТестКлиент.ПолучитьПодчиненныеОбъекты() Цикл
		Если ТипЗнч(ТестируемоеОкно) = Тип("ТестируемоеОкноКлиентскогоПриложения") 
				И ТестируемоеОкно.Основное Тогда
			Возврат ТестируемоеОкно;
		КонецЕсли;
	КонецЦикла;

	ВызватьИсключение "Не удалось найти основное окно";

КонецФункции

&НаКлиенте
Функция ПереходПоКнопкеКомандногоИнтерфейса()

	Возврат "Переход по кнопке командного интерфейса";

КонецФункции

&НаКлиенте
Функция ТекстИсключения(ОкноПредупреждение)

	ТекстыЗаголовков = Новый Массив;
	Для Каждого ТекОбъект Из ОкноПредупреждение.НайтиОбъекты(Тип("ТестируемоеПолеФормы")) Цикл
		ТекстыЗаголовков.Добавить(ТекОбъект.ТекстЗаголовка);
	КонецЦикла;

	Возврат СтрСоединить_(ТекстыЗаголовков, " ");

КонецФункции

//}

//&НаКлиентеНаСервереБезКонтекста
Функция СтрСоединить_(МассивЭлементов, Символ = "") Экспорт
	СтрокаРезультат = "";
	Если МассивЭлементов.Количество() > 0 Тогда
		СтрокаРезультат = МассивЭлементов.Получить(0) + Символ;
		Для сч = 0 по МассивЭлементов.ВГраница() Цикл
			Элемент = МассивЭлементов.Получить(сч);
			Если ЗначениеЗаполнено(Элемент) Тогда
				СтрокаРезультат = МассивЭлементов.Получить(сч) + Символ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтрокаРезультат;

КонецФункции

&НаСервереБезКонтекста
Функция КонтекстЯдраНаСервере(Знач КонтекстЯдра = Неопределено)
	
	Если КонтекстЯдра = Неопределено Тогда
		Возврат ВнешниеОбработки.Создать("xddTestRunner");	
	КонецЕсли;
	Возврат КонтекстЯдра;
	
КонецФункции 
