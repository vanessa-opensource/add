#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;  

&НаКлиенте
Перем Утверждения;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	
	ЗагрузитьНастройки();  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	ЗагрузитьНастройки();
	
	Если Не НужноВыполнятьТест() Тогда
		Возврат;
	КонецЕсли;
	
	РазрешенныеДокументы = РазрешенныеОбъектыМетаданных(); 
	
	Для каждого ОбъектМетаданных Из РазрешенныеДокументы Цикл
		ДобавитьТестыДляДокумента(НаборТестов, ОбъектМетаданных);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КлючНастройки()
	Возврат КлючНастройкиНаСервере();
КонецФункции   

&НаСервере
Функция КлючНастройкиНаСервере()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;	
КонецФункции

&НаКлиенте
Функция КлючНастройкиУстаревший()
	Возврат "ФормированиеПечатныхФорм";
КонецФункции 

&НаКлиенте
Функция КлючНастройкиУстаревший2()
	Возврат "тесты_ФормированиеПечатныхФорм";
КонецФункции

#КонецОбласти                                           

#Область Тесты

&НаКлиенте
Процедура Тест_ПолучитьПечатнуюФорму(ИмяМетаданного, КомандаПечати) Экспорт
	
	ПлагинНастройки = КонтекстЯдра.Плагин("Настройки");   
	ПропускатьПустыеФормы = Ложь;    
	Пропустить = Объект.Настройки.Свойство("ПропускатьПустыеФормы", ПропускатьПустыеФормы) И ПропускатьПустыеФормы;
	
	ДокументыДляПечати = ПолучитьДокументыДляПечати(ИмяМетаданного, КомандаПечати.УсловияВидимости);
	Если ДокументыДляПечати.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого СтруктураДокумента Из ДокументыДляПечати Цикл
		НачалоСообщенияОбОшибке = "Печать документа " + СтруктураДокумента.ПредставлениеДокумента + ": ";
		
		КоллекцияПечатныхФорм = ПолучитьКоллекциюПечатныхФорм(КомандаПечати, СтруктураДокумента.АдресСсылки);
		
		Утверждения.Проверить(КоллекцияПечатныхФорм.КоллекцияЯвляетсяТаблицей = Истина, 
								НачалоСообщенияОбОшибке + "Ожидалось, что КоллекцияПечатныхФорм будет иметь тип Таблица значений!"); 
								
		Утверждения.Проверить(КоллекцияПечатныхФорм.ТабличныеДокументыПечатныхФорм.Количество() > 0, 
								НачалоСообщенияОбОшибке + "Ожидалось, что количество элементов в КоллекцияПечатныхФорм будет больше 0!");
		
		Для Каждого ТабличныйДокумент Из КоллекцияПечатныхФорм.ТабличныеДокументыПечатныхФорм Цикл
			Утверждения.Проверить(ТабличныйДокумент <> Неопределено, 
					НачалоСообщенияОбОшибке + "Ожидалось, что будет получен табличный документ, а получено значение <Неопределено>!");
			
			// Высота таб документа = 0 не означает что это ошибка, в типовой форме ПечатьДокументов есть проверка на высоту 
			// и если высота 0, то просто показывается надпись "Печатная форма недоступна."
			// предлагаю пропускать такой тест
			Если ТабличныйДокумент.ВысотаТаблицы = 0 И Пропустить Тогда
				КонтекстЯдра.ПропуститьТест(НСтр("ru = 'Тест пропущен: ВысотаТаблицы равна 0'"));  
			ИначеЕсли Не Пропустить Тогда
				Утверждения.Проверить(ТабличныйДокумент.ВысотаТаблицы > 0, 
										НачалоСообщенияОбОшибке + "Ожидалось, что высота полученного табличного документа будет больше 0!");	
			КонецЕсли;
		КонецЦикла; 	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПропуститьПечатнуюФорму(Знач Сообщение) Экспорт

	КонтекстЯдра.ПропуститьТест(Сообщение); 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗапускомТеста() Экспорт
	//НачатьТранзакцию();
КонецПроцедуры

&НаСервере
Процедура ПослеЗапускаТеста() Экспорт
	//Если ТранзакцияАктивна() Тогда
	//    ОтменитьТранзакцию();
	//КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

&НаКлиенте
Процедура ЗагрузитьНастройки()
	
	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПлагинНастройки = КонтекстЯдра.Плагин("Настройки");
    ПлагинНастройки.Инициализация(КонтекстЯдра);
    
    Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройки()); 
	
	// обратная совместимость с именем ФормированиеПечатныхФорм
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройкиУстаревший());
	КонецЕсли;   
	
	// обратная совместимость с именем тесты_ФормированиеПечатныхФорм
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = ПлагинНастройки.ПолучитьНастройку(КлючНастройкиУстаревший2());
	КонецЕсли;
	
	НастройкиПоУмолчанию = НастройкиПоУмолчанию();
	
    Если ТипЗнч(Объект.Настройки) <> Тип("Структура") Then
        Объект.Настройки = НастройкиПоУмолчанию;
	Иначе
		ЗаполнитьЗначенияСвойств(НастройкиПоУмолчанию, Объект.Настройки);
        Объект.Настройки = НастройкиПоУмолчанию;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НастройкиПоУмолчанию()
	
	Результат = Новый Структура;
	Результат.Вставить("Используется", Истина);
	Результат.Вставить("КоличествоДокументов", 1);     
	Результат.Вставить("ПропускатьПустыеФормы", Ложь);     
	Результат.Вставить("ВыводитьИсключения", Ложь);
	Результат.Вставить("ИсключенияПоИдентификатору", Новый Массив);
	Результат.Вставить("ИсключенияПоИмени", Новый Массив);
	Результат.Вставить("ИсключенияПоОбъекту", Новый Массив);
	Результат.Вставить("Префикс", "");
	Результат.Вставить("ОтборПоПрефиксу", Ложь);
		
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Функция НужноВыполнятьТест()
	
	ЗагрузитьНастройки();
	
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КлючНастройки = КлючНастройки();
	
	ВыполнятьТест = Истина;
	Если ТипЗнч(Объект.Настройки) = Тип("Структура") 
		И Объект.Настройки.Свойство("Используется", ВыполнятьТест) Тогда
	
		Возврат ВыполнятьТест = Истина;	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ДобавитьТестыДляДокумента(НаборТестов, СтруктураМетаданных)
	
	// TODO реализовать возможность указания исключаемых объектов, а то у некоторых документов в менеджере нет процедуры ДобавитьКомандыПечати()	
	ОбъектИсключен = Ложь;  
	
	Если КонтекстЯдра.ЕстьВИсключаемойКоллекции(СтруктураМетаданных.Имя, Объект.Настройки.ИсключенияПоОбъекту) Тогда 
		ПредставлениеТеста = "Печатные формы " + СтруктураМетаданных.Имя;  
		
		Сообщение = "Пропускаем из-за исключения по имени объекта - " + ПредставлениеТеста;
		КонтекстЯдра.Отладка(Сообщение); 
		
		Если Не Объект.Настройки.ВыводитьИсключения Тогда
		    Возврат;
		КонецЕсли;	
		
		ОбъектИсключен = Истина;
	КонецЕсли;  
	
	НаборТестов.НачатьГруппу("Печатные формы " + СтруктураМетаданных.Синоним + " - Документ."  + СтруктураМетаданных.Имя); 
	
	КомандыПечатиОбъекта = ПодготовитьКомандыПечатиОбъекта(СтруктураМетаданных);
	
	Для Каждого ТекущаяКомандаПечати Из КомандыПечатиОбъекта Цикл
				
		ЭтоИсключение = Ложь;  
		
		Если КонтекстЯдра.ЕстьВИсключаемойКоллекции(ТекущаяКомандаПечати.ИдентификаторКоманды, Объект.Настройки.ИсключенияПоИдентификатору) Тогда
			Сообщение = "Пропускаем из-за исключения по идентификатору - " + ТекущаяКомандаПечати.ПредставлениеТеста;  
			ЭтоИсключение = Истина;
		ИначеЕсли КонтекстЯдра.ЕстьВИсключаемойКоллекции(ТекущаяКомандаПечати.ПредставлениеКоманды, Объект.Настройки.ИсключенияПоИмени) Тогда
			Сообщение = "Пропускаем из-за исключения по имени - " + ТекущаяКомандаПечати.ПредставлениеТеста;
			ЭтоИсключение = Истина;
		ИначеЕсли ОбъектИсключен Тогда
			Сообщение = "Пропускаем из-за исключения по имени объекта - " + ТекущаяКомандаПечати.ПредставлениеТеста;
			ЭтоИсключение = Истина;
		КонецЕсли;
		
		Если ЭтоИсключение Тогда
			КонтекстЯдра.Отладка(Сообщение);  
			
			Если Объект.Настройки.ВыводитьИсключения Тогда
				ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
				НаборТестов.Добавить("Тест_ПропуститьПечатнуюФорму", ПараметрыТеста, Сообщение);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;  
		
		Если Не ТекущаяКомандаПечати.ВидимостьКоманды Тогда
			Сообщение = СтрШаблон("%1. Форма пропущена из-за отключенной функциональной опции ""%2""", 
									ТекущаяКомандаПечати.ПредставлениеТеста, ТекущаяКомандаПечати.ФункциональныеОпции); 
									
			КонтекстЯдра.Отладка(Сообщение);
			
			Если Объект.Настройки.ВыводитьИсключения Тогда
				ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
				НаборТестов.Добавить("Тест_ПропуститьПечатнуюФорму", ПараметрыТеста, Сообщение); 
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
				
		ПараметрыТеста = НаборТестов.ПараметрыТеста(СтруктураМетаданных.Имя, ТекущаяКомандаПечати.СтруктураКоманды);
		
		НаборТестов.Добавить("Тест_ПолучитьПечатнуюФорму", ПараметрыТеста, ТекущаяКомандаПечати.ПредставлениеТеста);
	КонецЦикла; 
		
КонецПроцедуры   

&НаСервере
Функция ПодготовитьКомандыПечатиОбъекта(СтруктураМетаданных)
	
	ПодготовленныеКомандыПечати = Новый Массив;
	
	КомандыПечати = ПолучитьИзВременногоХранилища(СтруктураМетаданных.АдресКомандПечати);  
	
	Для Каждого ТекущаяКомандаПечати Из КомандыПечати Цикл
		
		ДопИнфо = "Идентификатор = " + ТекущаяКомандаПечати.Идентификатор;   
		
		Если ТекущаяКомандаПечати.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" Тогда
			ДопИнфо = "Ссылка = " + ТекущаяКомандаПечати.ДополнительныеПараметры.Ссылка + "; " + ДопИнфо;
		КонецЕсли;      
		
		ПредставлениеТеста = "Печатная форма " + СтруктураМетаданных.Имя + ": " + ТекущаяКомандаПечати.Представление + " : " + "{" + ДопИнфо + "}";
		
		// Фильтр по функциональным опциям. (код взят из типового модуля ПодключаемыеКоманды)
		ФункциональныеОпции = СтрРазделить(ТекущаяКомандаПечати.ФункциональныеОпции, ",", Ложь);
		ВидимостьКоманды = ФункциональныеОпции.Количество() = 0; 
		
		Для Каждого ИмяОпции Из ФункциональныеОпции Цикл
			Если ПолучитьФункциональнуюОпциюНаСервере(ИмяОпции) Тогда
				ВидимостьКоманды = Истина;  
				
				Прервать;
			КонецЕсли;
		КонецЦикла;   
				
		СтруктураКоманды = Новый Структура;
		
		Для Каждого Колонка Из КомандыПечати.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			СтруктураКоманды.Вставить(ИмяКолонки, ТекущаяКомандаПечати[ИмяКолонки]);
		КонецЦикла;  
		
		СтруктураКомандыПечати = Новый Структура;
		СтруктураКомандыПечати.Вставить("ПредставлениеТеста", ПредставлениеТеста);
		СтруктураКомандыПечати.Вставить("ИдентификаторКоманды", ТекущаяКомандаПечати.Идентификатор);
		СтруктураКомандыПечати.Вставить("ПредставлениеКоманды", ТекущаяКомандаПечати.Представление);
		СтруктураКомандыПечати.Вставить("ВидимостьКоманды", ВидимостьКоманды);
		СтруктураКомандыПечати.Вставить("СтруктураКоманды", СтруктураКоманды);
		СтруктураКомандыПечати.Вставить("ФункциональныеОпции", ФункциональныеОпции);
		
		ПодготовленныеКомандыПечати.Добавить(СтруктураКомандыПечати);

	КонецЦикла;
	
	Возврат ПодготовленныеКомандыПечати;
	
КонецФункции        

&НаСервере
Функция ПолучитьКомандыПечати(МетаданныеОбъекта)
	
	МодульУправлениеПечатью = Вычислить("УправлениеПечатью");
	КомандыПечати = МодульУправлениеПечатью.КомандыПечатиОбъекта(МетаданныеОбъекта);
	
	Возврат КомандыПечати;
	
КонецФункции

&НаСервере
Функция ПолучитьДокументыДляПечати(ИмяМетаданного, УсловияВидимости = Неопределено)
	
	МетаданныеДокумента = Метаданные.Документы[ИмяМетаданного];
	
	КоличествоТестируемыхДокументов = Объект.Настройки.КоличествоДокументов;
	
	Результат = Новый Массив; 
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ВидДокумента
	|ГДЕ
	|	&ДополнительныеУсловия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ВидДокумента.Проведен
	|			ТОГДА 0
	|		КОГДА ВидДокумента.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВидДокумента.Дата УБЫВ"; 
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "Документ.СчетНаОплатуПокупателю", "Документ." + МетаданныеДокумента.Имя);
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоТестируемыхДокументов, "ЧГ="));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонТекстаЗапроса;
	
	ОперацииУсловий = Новый Соответствие;
	ОперацииУсловий.Вставить(ВидСравнения.Равно, "=");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.Равно, "=");
	ОперацииУсловий.Вставить(ВидСравнения.Больше, ">");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.Больше, ">");
	ОперацииУсловий.Вставить(ВидСравнения.БольшеИлиРавно, ">=");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ">=");
	ОперацииУсловий.Вставить(ВидСравнения.Меньше, "<");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.Меньше, "<");
	ОперацииУсловий.Вставить(ВидСравнения.МеньшеИлиРавно, "<=");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, "<=");
	ОперацииУсловий.Вставить(ВидСравнения.НеРавно, "<>");
	ОперацииУсловий.Вставить(ВидСравненияКомпоновкиДанных.НеРавно, "<>");
	
	ДополнительныеУсловия = "";
	Если ТипЗнч(УсловияВидимости) = Тип("Массив") Тогда
		Для Каждого Условие Из УсловияВидимости Цикл
			Если МетаданныеДокумента.Реквизиты.Найти(Условие.Реквизит) = Неопределено Тогда
				Продолжить;				
			КонецЕсли;
			
			ТекущийТекстУсловия = "";
			ТекОперация = ОперацииУсловий.Получить(Условие.ВидСравнения);  
			
			Если ТекОперация <> Неопределено Тогда
				ТекущийТекстУсловия = Условие.Реквизит + " " + ТекОперация + " &" + Условие.Реквизит;
			ИначеЕсли Условие.ВидСравнения = ВидСравнения.ВСписке
				Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ТекущийТекстУсловия = Условие.Реквизит + " В(&" + Условие.Реквизит + ")";
			ИначеЕсли Условие.ВидСравнения = ВидСравнения.НеВСписке
				Или Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				ТекущийТекстУсловия = "НЕ " + Условие.Реквизит + " В(&" + Условие.Реквизит + ")";
			ИначеЕсли Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				// TODO: обработать условие видимости "Заполнено"
			ИначеЕсли Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				// TODO: обработать условие видимости "Не заполнено"
			КонецЕсли;  
			
			Если НЕ ПустаяСтрока(ТекущийТекстУсловия) Тогда
				ДополнительныеУсловия = ДополнительныеУсловия + ?(ПустаяСтрока(ДополнительныеУсловия), "", " И ") + ТекущийТекстУсловия;
				Запрос.УстановитьПараметр(Условие.Реквизит, Условие.Значение);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныеУсловия) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеУсловия", ДополнительныеУсловия);
	Иначе 
		Запрос.УстановитьПараметр("ДополнительныеУсловия", Истина);
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// нет документов для тестирования :(
		Если НЕ ПустаяСтрока(ДополнительныеУсловия) Тогда
			// возможно причина пустого результата в доп.условиях:
			// попробуем без них
			Запрос = Новый Запрос;
			Запрос.Текст = ШаблонТекстаЗапроса;
			Запрос.УстановитьПараметр("ДополнительныеУсловия", Истина);   
			
			РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДокументыДляПечати = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если ДокументыДляПечати.Количество() = 0 Тогда
			Возврат Результат;
		КонецЕсли; 
		
		МассивДокументов = Новый Массив;
		
		Для каждого ДокументПечати Из ДокументыДляПечати Цикл
			СтруктураДокументов = Новый Структура;
			СтруктураДокументов.Вставить("ПредставлениеДокумента", Строка(ДокументПечати));
			СтруктураДокументов.Вставить("АдресСсылки", ПоместитьВоВременноеХранилище(ДокументПечати, ЭтаФорма.УникальныйИдентификатор));
			
			МассивДокументов.Добавить(СтруктураДокументов);
		КонецЦикла; 
		
		Результат = МассивДокументов;

	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьКоллекциюПечатныхФорм(КомандаПечати, ДокументДляПечати) 
	
	ДокументСсылка = ПолучитьИзВременногоХранилища(ДокументДляПечати);
	
	Результат = Неопределено;
	
	ДокументыДляПечати = Новый Массив;
	ДокументыДляПечати.Добавить(ДокументСсылка);
	
	Если КомандаПечати.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" 
		И Вычислить("ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"")") Тогда
			// печать внешней печатной формы
			ДополнительнаяОбработкаСсылка	= КомандаПечати.ДополнительныеПараметры.Ссылка;
			ПараметрыИсточника				= Новый Структура;
			ПараметрыИсточника.Вставить("ИдентификаторКоманды", КомандаПечати.Идентификатор);
			ПараметрыИсточника.Вставить("ОбъектыНазначения",    ДокументыДляПечати);
			КоллекцияПечатныхФорм			= Неопределено;
			ОбъектыПечати					= Новый СписокЗначений;
			ПараметрыВывода					= Неопределено;
			
			МодульУправлениеПечатью = Вычислить("УправлениеПечатью");
			
			МодульУправлениеПечатью.ПечатьПоВнешнемуИсточнику(
				ДополнительнаяОбработкаСсылка, 
				ПараметрыИсточника, 
				КоллекцияПечатныхФорм,
				ОбъектыПечати, 
				ПараметрыВывода
			);
			
			Результат = КоллекцияПечатныхФорм;
	Иначе 
		// печать встроенной печатной формы
		ИмяМенеджераПечати              = КомандаПечати.МенеджерПечати;
		ИменаМакетов					= КомандаПечати.Идентификатор;
		МассивОбъектов					= ДокументыДляПечати;
		ПараметрыПечати					= ?(КомандаПечати.Свойство("ДополнительныеПараметры"), 
			КомандаПечати.ДополнительныеПараметры, Новый Структура);
		ДопустимыеТипыОбъектовПечати	= Неопределено;
		
		МодульУправлениеПечатью = Вычислить("УправлениеПечатью");
		
		ПечатныеФормы = МодульУправлениеПечатью.СформироватьПечатныеФормы(
			ИмяМенеджераПечати, 
			ИменаМакетов, 
			МассивОбъектов, 
			ПараметрыПечати, 
			ДопустимыеТипыОбъектовПечати
		);
		
		Результат = ПечатныеФормы.КоллекцияПечатныхФорм;
	КонецЕсли;
	
	КоллекцияЯвляетсяТаблицей = ТипЗнч(Результат) = Тип("ТаблицаЗначений");
	
	СтруктураПечатныхФорм = Новый Структура; 
	СтруктураПечатныхФорм.Вставить("КоллекцияЯвляетсяТаблицей", КоллекцияЯвляетсяТаблицей);
	
	ТабличныеДокументыПечатныхФорм = Новый Массив;  
	
	Для каждого СтрокаРезультата Из Результат Цикл
		ТабличныеДокументыПечатныхФорм.Добавить(СтрокаРезультата.ТабличныйДокумент);
		
		СтруктураПечатныхФорм.Вставить("ТабличныеДокументыПечатныхФорм", ТабличныеДокументыПечатныхФорм);
	КонецЦикла;
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции 

&НаСервере
Функция РазрешенныеОбъектыМетаданных()
	
	РазрешенныеДокументы = Новый Массив;               
	
	Для каждого ОбъектМетаданных Из Метаданные.Документы Цикл 	
		Если Объект.Настройки.ОтборПоПрефиксу 
			И Не СтрНачинаетсяС(ВРег(ОбъектМетаданных.Имя), ВРег(Объект.Настройки.Префикс)) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
			КомандыПечатиОбъекта = Неопределено; 
	
			Попытка
				КомандыПечатиОбъекта = ПолучитьКомандыПечати(ОбъектМетаданных);        
			Исключение
				Продолжить;
			КонецПопытки; 
			
			Если КомандыПечатиОбъекта.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;    
			
			СтруктураДокумента = Новый Структура;
			СтруктураДокумента.Вставить("Имя", ОбъектМетаданных.Имя);
			СтруктураДокумента.Вставить("Синоним", ОбъектМетаданных.Синоним);
			
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(КомандыПечатиОбъекта, ЭтаФорма.УникальныйИдентификатор);
			СтруктураДокумента.Вставить("АдресКомандПечати", АдресВоВременномХранилище); 
			
			РазрешенныеДокументы.Добавить(СтруктураДокумента);		
		КонецЕсли;	
	КонецЦикла;
		
	Возврат РазрешенныеДокументы;
	
КонецФункции         

&НаСервереБезКонтекста
Функция ПолучитьФункциональнуюОпциюНаСервере(ИмяОпции)

	Возврат ПолучитьФункциональнуюОпцию(СокрЛП(ИмяОпции));
	
КонецФункции

#КонецОбласти
