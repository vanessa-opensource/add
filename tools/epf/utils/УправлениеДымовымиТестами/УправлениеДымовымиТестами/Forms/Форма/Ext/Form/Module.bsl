#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДеревоМетаданныхНаСервере();
	НастройкиПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхПриАктивизацииСтроки(Элемент)
	
	СтрокаДЗ = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если СтрокаДЗ<>Неопределено Тогда
		Отбор = Новый ФиксированнаяСтруктура(Новый Структура("ВидМетаданных,ИмяМетаданного",СтрокаДЗ.ВидМетаданныхДляПоиска,СтрокаДЗ.ИмяМетаданного));
		Элементы.ЗначенияРеквизитовНовых.ОтборСтрок = Отбор;	
	Иначе
		Отбор = Новый ФиксированнаяСтруктура(Новый Структура("ВидМетаданных,ИмяМетаданного","",""));
		Элементы.ЗначенияРеквизитовНовых.ОтборСтрок = Отбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыборПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоМетаданных.ТекущиеДанные;
	ЗначениеФлажка = ТекущаяСтрока.Исключено;
	ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	УстановитьЗначениеВыбораВПодчиненных(ПодчиненныеСтроки,ЗначениеФлажка);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаДокументы

&НаКлиенте
Процедура ТаблицаДокументыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый ФиксированнаяСтруктура(Новый Структура("ИмяМетаданного", ТекущиеДанные.ИмяМетаданного));
	Иначе
		Отбор = Новый ФиксированнаяСтруктура(Новый Структура("ИмяМетаданного", ""));
	КонецЕсли;
	
	Элементы.ТаблицаПечатныеФормы.ОтборСтрок = Отбор;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияРеквизитовНовых

&НаКлиенте
Процедура ЗначенияРеквизитовНовыхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СтрокаДЗ = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаДЗ.ИмяМетаданного) ТОгда
		СообщитьПользователю("Выберите объект метаданных, для добавления значений реквизитов", Отказ);
	ИначеЕсли СтрокаДЗ.ВидМетаданныхДляПоиска<>"Справочники" И СтрокаДЗ.ВидМетаданныхДляПоиска<>"Документы" Тогда
		СообщитьПользователю("Данная настройка доступна только для справочников или документов", Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияРеквизитовНовыхРеквизитПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗначенияРеквизитовНовых.ТекущиеДанные;
	
	УстановитьТипПоляВСтроке(ТекущаяСтрока);
			
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияРеквизитовНовыхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаДЗ = Элементы.ДеревоМетаданных.ТекущиеДанные;
	ТекущаяСтрока = Элементы.ЗначенияРеквизитовНовых.ТекущиеДанные;
	ТекущаяСтрока.ВидМетаданных = СтрокаДЗ.ВидМетаданныхДляПоиска;
	ТекущаяСтрока.ИмяМетаданного = СтрокаДЗ.ИмяМетаданного;
	
	ЗаполнитьСписокРеквизитов(ТекущаяСтрока); 
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияРеквизитовНовыхЗначениеРеквизитаПриИзменении(Элемент)
	ЗначенияРеквизитовНовыхЗначениеРеквизитаПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДеревоМетаданных(Команда)
	ЗаполнитьДеревоМетаданныхНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНастроек(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗагрузитьНастройкуПослеВыбораФайла",ЭтаФорма);
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ВыборФайла.Показать(ОбработчикОповещения);
	ВыборФайла.Фильтр = "Файлы JSON (*.json)|*.json";
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлНастроек(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗаписатьНастройкуПослеВыбораФайла",ЭтаФорма);
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ВыборФайла.Показать(ОбработчикОповещения);
	ВыборФайла.Фильтр = "Файлы JSON (*.json)|*.json";
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьОбъектыНеРасширение(Команда)
	ИсключитьОбъектыНеРасширениеНаСервере();
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастройкиПоУмолчанию()
	
	ТестироватьОткрытиеФорм				= Истина;
	ОткрываемФормыНаКлиентеТестирования	= Истина;
	
	ТестироватьПроведение				= Истина;
	КоличествоДокументовПроведение		= 2;
	
	ТестироватьПечатныеФормы			= Истина;
	КоличествоДокументовПечатныеФормы	= 2;
	
	ТестироватьМакетыСКД				= Истина;
	
	ЗакрыватьМодальныеОкна				= Истина;
	ТестироватьКомандныйИнтерфейс		= Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданныхНаСервере()
		
	ДЗ = РеквизитФормыВЗначение("ДеревоМетаданных");
	
	ДЗ.Строки.Очистить();
	
	ВидыПроверок = Новый Массив;
	ВидыПроверок.Добавить("Списки");
	ВидыПроверок.Добавить("Новые");
	ВидыПроверок.Добавить("Существующие");
	
	//добавляем справочники
	ДобавитьМетаданныеВДерево(ВидыПроверок,ДЗ,"Справочники");
	
	//добавляем документв
	ДобавитьМетаданныеВДерево(ВидыПроверок,ДЗ,"Документы");
	
	//добавляем отчеты
	ДобавитьМетаданныеВДерево(Новый Массив,ДЗ,"Отчеты");
	
	//добавляем обработки
	ДобавитьМетаданныеВДерево(Новый Массив,ДЗ,"Обработки");
	
	//добавляем бизнес процессы
	ДобавитьМетаданныеВДерево(Новый Массив,ДЗ,"БизнесПроцессы"); 
	
	ЗначениеВРеквизитФормы(ДЗ,"ДеревоМетаданных");
	
	ДобавитьМетаданныеВТаблицуДокументов();
	ДобавитьМетаданныеВТаблицуМакетовСКД();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетаданныеВДерево(ВидыПроверок,Дерево,ВидМетаданных)
	
	СтрокаМетаданных = Дерево.Строки.Добавить();
	СтрокаМетаданных.ВидМетаданных          = ВидМетаданных;
	СтрокаМетаданных.ВидМетаданныхДляПоиска = ВидМетаданных;
	
	Если ВидыПроверок.Количество() Тогда
		Для каждого ВидПроверки из ВидыПроверок Цикл
			
			СтрокаПроверки = СтрокаМетаданных.Строки.Добавить();
			СтрокаПроверки.ВидМетаданныхДляПоиска = ВидМетаданных;
			СтрокаПроверки.ВидПроверкиДляПоиска   = ВидПроверки;
			СтрокаПроверки.ВидПроверки = ВидПроверки;
			
			Для каждого Метаданное из Метаданные[ВидМетаданных] Цикл
				
				СтрокаОбъекта = СтрокаПроверки.Строки.Добавить();
				СтрокаОбъекта.ИмяМетаданного         = Метаданное.Имя;
				СтрокаОбъекта.ВидМетаданныхДляПоиска = ВидМетаданных;
				СтрокаОбъекта.ВидПроверкиДляПоиска   = ВидПроверки;
				
				УстановитьПризнакИзмененияРасширениями(СтрокаОбъекта, Метаданное);

			КонецЦикла;
		КонецЦикла;
	Иначе
		Для каждого Метаданное из Метаданные[ВидМетаданных] Цикл
			
			СтрокаОбъекта = СтрокаМетаданных.Строки.Добавить();
			СтрокаОбъекта.ВидМетаданныхДляПоиска = ВидМетаданных;
			СтрокаОбъекта.ИмяМетаданного         = Метаданное.Имя;	
			
			УстановитьПризнакИзмененияРасширениями(СтрокаОбъекта, Метаданное);
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкуПослеВыбораФайла(Результат,ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ИмяФайла = Результат[0];
		
		Файл = Новый Файл(ИмяФайла);
		
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON( , Символы.Таб);
		ЗаписьJSON = Новый ЗаписьJSON;
		
		Если ЗначениеЗаполнено(СтрокаJSON) Тогда
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
		Иначе 
			ЗаписьJSON.ОткрытьФайл(ИмяФайла);
		КонецЕсли;
		 	
		ЗаписатьJSON(ЗаписьJSON, СоответствиеНастроек());
			
		Если ЗначениеЗаполнено(СтрокаJSON) Тогда
			ВремСтрокаJSON = ЗаписьJSON.Закрыть();
			
			НастроенноеСоответствие = ПрочитатьСоответствиеИзСтрокиJSON(ВремСтрокаJSON);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.ОткрытьФайл(ИмяФайла, , , ПараметрыЗаписи);
			ЗаписатьJSON(ЗаписьJSON, НастроенноеСоответствие);
			ЗаписьJSON.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоответствиеНастроек()
	
	НастройкиОткрытияФорм = Новый Соответствие;
	
	Для каждого СтрокаМетаданного из ДеревоМетаданных.ПолучитьЭлементы() Цикл
		
		ВидыПроверки = Новый Структура;
		ДобавлятьМетаданное = Истина;
		
		Если СтрокаМетаданного.ВидМетаданных = "Справочники" Или СтрокаМетаданного.ВидМетаданных = "Документы" Тогда		
			//сначала добавляем данные о значениях реквизитов 
			Если СтрокаМетаданного.Исключено Тогда
				ДобавлятьМетаданное = Ложь;
			Иначе
				НастройкаЗаполненияРеквизитов = ПолучитьНастройкуЗаполненияРеквизитов(СтрокаМетаданного.ВидМетаданных);
				
				Если НастройкаЗаполненияРеквизитов.Количество() Тогда
					ВидыПроверки.Вставить("ЗначенияРеквизитовНовых",НастройкаЗаполненияРеквизитов);
				КонецЕсли;
				
				//для справочников и документов есть еще подраздел виды проверки
				Для каждого СтрокаВидаПроверки Из СтрокаМетаданного.ПолучитьЭлементы() Цикл
					
					ДобавлятьВидПроверки = Истина;
					Если СтрокаВидаПроверки.Исключено Тогда
						ДобавлятьВидПроверки = Ложь;
						ВидыПроверки.Вставить(СтрокаВидаПроверки.ВидПроверки, Ложь);
					Иначе
						МетаданныеПроверки = Новый Массив;
						
						Для каждого СтрокаИмяМетаданного из СтрокаВидаПроверки.ПолучитьЭлементы() Цикл
							
							Если СтрокаИмяМетаданного.Исключено Тогда
								МетаданныеПроверки.Добавить(СтрокаИмяМетаданного.ИмяМетаданного);
							КонецЕсли;
							
						КонецЦикла;
						
						Если МетаданныеПроверки.Количество() Тогда
							ВидыПроверки.Вставить(СтрокаВидаПроверки.ВидПроверки,МетаданныеПроверки);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			МетаданныеПроверки = Новый Массив;
			
			Если СтрокаМетаданного.Исключено Тогда
				ДобавлятьМетаданное = Ложь;
			Иначе
				Для каждого СтрокаИмяМетаданного из СтрокаМетаданного.ПолучитьЭлементы() Цикл
					
					Если СтрокаИмяМетаданного.Исключено Тогда
						МетаданныеПроверки.Добавить(СтрокаИмяМетаданного.ИмяМетаданного);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если МетаданныеПроверки.Количество() Тогда
				ВидыПроверки = МетаданныеПроверки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДобавлятьМетаданное Тогда
			Если ВидыПроверки.Количество() Тогда
				НастройкиОткрытияФорм.Вставить(СтрокаМетаданного.ВидМетаданных, ВидыПроверки);
			КонецЕсли;
		Иначе
			НастройкиОткрытияФорм.Вставить(СтрокаМетаданного.ВидМетаданных, Ложь);
		КонецЕсли; 
		
	КонецЦикла;
	
	НастройкиОткрытияФорм.Вставить("Используется"							, ТестироватьОткрытиеФорм);
	НастройкиОткрытияФорм.Вставить("ОткрываемФормыНаКлиентеТестирования"	, ОткрываемФормыНаКлиентеТестирования);
	
	Результат = Новый Соответствие;
	Результат.Вставить(КлючНастройкиОткрытиеФорм(), НастройкиОткрытияФорм);
	
	ЗаписатьНастройкуПоКлючу(КлючНастройкиМодальныеОкна(), Результат);
	ЗаписатьНастройкуПоКлючу(КлючНастройкиКомандныйИнтерфейс(), Результат);
	ЗаписатьНастройкуПоКлючу(КлючНастройкиМакетыСКД(), Результат);
	ЗаписатьНастройкуПоКлючу(КлючНастройкиПроведениеДокументов(), Результат);
	ЗаписатьНастройкуПоКлючу(КлючНастройкиФормированиеПечатныхФорм(), Результат);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПолучитьНастройкуЗаполненияРеквизитов(ВидМетаданных)
	
	НастройкаЗаполненияРеквизитов = Новый Структура;
	
	Отбор = Новый Структура("ВидМетаданных", ВидМетаданных);
	
	ТЗ = ЗначенияРеквизитовНовых.Выгрузить(Отбор);
	
	ТЗИменМетаданных = ТЗ.Скопировать();
	ТЗИменМетаданных.Свернуть("ИмяМетаданного");
	
	Для каждого СтрокаМетаданного из ТЗИменМетаданных Цикл
		
		ЗначенияРеквизитов = Новый Структура;
		Отбор = Новый Структура("ИмяМетаданного",СтрокаМетаданного.ИмяМетаданного);
		СтрокиРеквизитов = ТЗ.НайтиСтроки(Отбор);
		
		Для каждого СтрокаРеквзита из СтрокиРеквизитов Цикл
			ЗначенияРеквизитов.Вставить(СтрокаРеквзита.Реквизит,СтрокаРеквзита.ЗначениеРеквизитаСтрокой);
		КонецЦИкла;
		
		НастройкаЗаполненияРеквизитов.Вставить(СтрокаМетаданного.ИмяМетаданного,ЗначенияРеквизитов);
		
	КонецЦикла;
	
	Возврат НастройкаЗаполненияРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеВыбораВПодчиненных(ПодчиненныеСтроки,ЗначениеФлажка)
	
	Для каждого Строка из ПодчиненныеСтроки Цикл
		Строка.Исключено = ЗначениеФлажка;
		УстановитьЗначениеВыбораВПодчиненных(Строка.ПолучитьЭлементы(),ЗначениеФлажка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРеквизитов(ТекущаяСтрока)

	МассивРеквизитов = ПолучитьМассивРеквизитовНаСервере(ТекущаяСтрока.ВидМетаданных,ТекущаяСтрока.ИмяМетаданного); 
	
	Элементы.ЗначенияРеквизитовНовыхРеквизит.СписокВыбора.ЗагрузитьЗначения(МассивРеквизитов);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивРеквизитовНаСервере(ЗНАЧ ВидМетаданных,ЗНАЧ ИмяМетаданного)
	ОбМетаданных = ПолучитьОбъектМетаданных(ВидМетаданных,ИмяМетаданного); 
	
	МассивРеквизитов = Новый Массив;
	
	Для каждого Реквизит Из ОбМетаданных.Реквизиты Цикл
		МассивРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для каждого Реквизит Из ОбМетаданных.СтандартныеРеквизиты Цикл
		МассивРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;

	Возврат МассивРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройкуПослеВыбораФайла(Результат,ДопПараметры) Экспорт
	
	Если Результат<>Неопределено Тогда
		
		ИмяФайла = Результат[0];
		
		КоллекцияИсключаемыхКлючей = Новый Соответствие;
		КоллекцияИсключаемыхКлючей.Вставить("$schema", "$schema");	
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	
		Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		СтрокаJSON = "";
				
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(,Символы.Таб);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
		ЗаписатьJSON(ЗаписьJSON, Соответствие);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		Результат = ПреобразоватьСоответствиеВСтруктуру(Соответствие, КоллекцияИсключаемыхКлючей);

		ЗагрузитьФайлНастроекНаСервере(Результат);	
		
		ДеревоМетаданныхПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьСоответствиеВСтруктуру(Знач Соответствие, Знач КоллекцияИсключаемыхКлючей)
	Результат = Новый Структура;
	Для каждого КлючЗначение Из Соответствие Цикл
		Если КоллекцияИсключаемыхКлючей.Получить(КлючЗначение.Ключ) = Неопределено Тогда
			Значение = КлючЗначение.Значение;
			Если ТипЗнч(Значение) = Тип("Соответствие") Тогда
				Значение = ПреобразоватьСоответствиеВСтруктуру(Значение, КоллекцияИсключаемыхКлючей);
			КонецЕсли;
			Результат.Вставить(КлючЗначение.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗагрузитьФайлНастроекНаСервере(Результат)
	
	ЗначенияРеквизитовНовых.Очистить();
	ЗаполнитьДеревоМетаданныхНаСервере();
	
	ДЗ = РеквизитФормыВЗначение("ДеревоМетаданных");

	Попытка
		Настройки = Результат[КлючНастройкиОткрытиеФорм()];
		Для каждого Элемент из Настройки Цикл
			ЗагрузитьНастройкиВДерево(ДЗ,Элемент);
		КонецЦикла;
	Исключение
		СообщитьПользователю("Ошибка при загрузке настроек открытия форм из файла: "+ОписаниеОшибки());
	КонецПопытки;
	
	ЗначениеВРеквизитФормы(ДЗ,"ДеревоМетаданных");
	
	ТестироватьОткрытиеФорм				= НастройкаИспользуется(Результат, КлючНастройкиОткрытиеФорм());
	ОткрываемФормыНаКлиентеТестирования	= НастройкаИспользуется(Результат, КлючНастройкиОткрытиеФорм(),
		"ОткрываемФормыНаКлиентеТестирования");
	
	ТестироватьПечатныеФормы			= НастройкаИспользуется(Результат, КлючНастройкиФормированиеПечатныхФорм());
	ТестироватьПроведение			 	= НастройкаИспользуется(Результат, КлючНастройкиПроведениеДокументов());
	
	ТестироватьМакетыСКД				= НастройкаИспользуется(Результат, КлючНастройкиМакетыСКД());
	
	ЗакрыватьМодальныеОкна				= Результат.Свойство(КлючНастройкиМодальныеОкна());
	ТестироватьКомандныйИнтерфейс		= НастройкаИспользуется(Результат, КлючНастройкиКомандныйИнтерфейс());
	
	ЗагрузитьНастройкиВТаблицу(Результат, КлючНастройкиПроведениеДокументов());
	ЗагрузитьНастройкиВТаблицу(Результат, КлючНастройкиФормированиеПечатныхФорм());
	ЗагрузитьНастройкиВТаблицу(Результат, КлючНастройкиМакетыСКД());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВДерево(ДЗ,Элемент)
	
	//1. Исключаем из проверки формы указанные в файле настроек
	Если Элемент.Ключ = "Документы" Или  Элемент.Ключ = "Справочники" Тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("Булево") И Элемент.Значение = Ложь Тогда
			Отбор = Новый Структура("ВидМетаданныхДляПоиска", Элемент.Ключ);
			МассивСтрокМетаданного = ДЗ.Строки.НайтиСтроки(Отбор, Ложь);
			Для каждого СтрокаМетаданного из МассивСтрокМетаданного Цикл
				СтрокаМетаданного.Исключено = Истина;
			КонецЦикла;
		Иначе
			Для каждого ПодчЭлемент из Элемент.Значение Цикл
				Если ПодчЭлемент.Ключ <> "ЗначенияРеквизитовНовых" Тогда
					Если ТипЗнч(ПодчЭлемент.Значение) = Тип("Булево") И ПодчЭлемент.Значение = Ложь Тогда
						Отбор = Новый Структура("ВидМетаданныхДляПоиска,ВидПроверкиДляПоиска", Элемент.Ключ, ПодчЭлемент.Ключ);
						МассивСтрокМетаданного = ДЗ.Строки.НайтиСтроки(Отбор,Истина);
						Для каждого СтрокаМетаданного из МассивСтрокМетаданного Цикл
							СтрокаМетаданного.Исключено = Истина;
						КонецЦикла;
					Иначе
						Для каждого Метаданное из ПодчЭлемент.Значение Цикл 
							//ключ - вид проверки, значение массив метаданных
							Отбор = Новый Структура("ВидМетаданныхДляПоиска,ВидПроверкиДляПоиска,ИмяМетаданного", Элемент.Ключ, ПодчЭлемент.Ключ, Метаданное);
							МассивСтрокМетаданного = ДЗ.Строки.НайтиСтроки(Отбор,Истина);
							Для каждого СтрокаМетаданного из МассивСтрокМетаданного Цикл
								СтрокаМетаданного.Исключено = Истина;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				Иначе
					
					ВидМетаданных = Элемент.Ключ;
					//заполним таблицу со значениями реквизитов для запролнения
					Для каждого Метаданное из ПодчЭлемент.Значение Цикл
						
						ОбМетаданных = ПолучитьОбъектМетаданных(ВидМетаданных,Метаданное.Ключ);
						
						Для каждого Реквизит из Метаданное.Значение Цикл
							ЗначениеРеквизита = ЗначениеРеквизита(ОбМетаданных,Реквизит.Ключ,Реквизит.Значение);
							СтрокаРеквизита = ЗначенияРеквизитовНовых.Добавить();
							СтрокаРеквизита.ИмяМетаданного           = Метаданное.Ключ;
							СтрокаРеквизита.Реквизит                 = Реквизит.Ключ;
							СтрокаРеквизита.ЗначениеРеквизита        = ЗначениеРеквизита;
							СтрокаРеквизита.ЗначениеРеквизитаСтрокой = Реквизит.Значение;
							СтрокаРеквизита.ВидМетаданных            = ВидМетаданных;
							
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
	ИначеЕсли Элемент.Ключ = "Обработки" Или Элемент.Ключ = "Отчеты" Тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("Булево") И Элемент.Значение = Ложь Тогда
			Отбор = Новый Структура("ВидМетаданныхДляПоиска", Элемент.Ключ);
			МассивСтрокМетаданного = ДЗ.Строки.НайтиСтроки(Отбор, Ложь);
			Для каждого СтрокаМетаданного из МассивСтрокМетаданного Цикл
				СтрокаМетаданного.Исключено = Истина;
			КонецЦикла;
		Иначе
			//находим строки по виду метаданного
			Отбор = Новый Структура("ВидМетаданных",Элемент.Ключ);
			МассивСтрокВидовМетаданных = ДЗ.Строки.НайтиСтроки(Отбор);
			
			Для каждого Метаданное из Элемент.Значение Цикл
				
				Отбор = Новый Структура("ВидМетаданныхДляПоиска,ИмяМетаданного",Элемент.Ключ,Метаданное);
				МассивСтрокМетаданного = ДЗ.Строки.НайтиСтроки(Отбор,Истина);
				
				Для каждого СтрокаМетаданного из МассивСтрокМетаданного Цикл
					СтрокаМетаданного.Исключено = Истина;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектМетаданных(ВидМетаданных,ИмяМетаданного)
	
	ПолноеИмяМетаданного = Лев(ВидМетаданных,СтрДлина(ВидМетаданных)-1)+"."+ИмяМетаданного;
	ОбМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданного);
	
	Возврат ОбМетаданных;
	
КонецФункции

&НаСервере
Функция ЗначениеРеквизита(МетаданныеОбъекта, ИмяРеквизита, ЗначениеРеквизитаИзФайла)

	//Плевако Е. добавил попытку для возможности указания значений стандартных реквизитов 
	ЭтоСтандартныйРеквизит = Ложь;
	Попытка	
		ТипРеквизита = МетаданныеОбъекта.Реквизиты[ИмяРеквизита].Тип.Типы()[0];
	Исключение
		ТипРеквизита = МетаданныеОбъекта.СтандартныеРеквизиты[ИмяРеквизита].Тип.Типы()[0];
		ЭтоСтандартныйРеквизит = Истина;
	КонецПопытки;

	Если ЭтоПримитивныйТипДанных(ТипРеквизита) Тогда
		Если ЭтоСтандартныйРеквизит Тогда
			Возврат МетаданныеОбъекта.СтандартныеРеквизиты[ИмяРеквизита].Тип.ПривестиЗначение(ЗначениеРеквизитаИзФайла);
		Иначе
			Возврат МетаданныеОбъекта.Реквизиты[ИмяРеквизита].Тип.ПривестиЗначение(ЗначениеРеквизитаИзФайла);
		КонецЕсли;
	КонецЕсли;

	// Значит, это ссылочный тип данных.
	Попытка
		МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипРеквизита);
		Если Метаданные.Справочники.Содержит(МетаданныеЗначения) Тогда
			Возврат Справочники[МетаданныеЗначения.Имя].НайтиПоНаименованию(ЗначениеРеквизитаИзФайла,Истина);
		ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеЗначения) Тогда
			Возврат Перечисления[МетаданныеЗначения.Имя][ЗначениеРеквизитаИзФайла];
		КонецЕсли;
		// TODO: поддержку документов и других ссылочных типов данных (добавим по необходимости)
	Исключение
	КонецПопытки;

	Возврат Неопределено;

КонецФункции

&НаСервере
Функция ЭтоПримитивныйТипДанных(Тип)
	Возврат Тип = Тип("Строка") Или Тип = Тип("Число")
		Или Тип = Тип("Дата") Или Тип = Тип("Булево");
КонецФункции

&НаКлиенте
Процедура УстановитьТипПоляВСтроке(ТекущаяСтрока)
	
	Элементы.ЗначенияРеквизитовНовыхЗначениеРеквизита.ОграничениеТипа = ПолучитьОписаниеТиповРеквизита(ТекущаяСтрока.ВидМетаданных,ТекущаяСтрока.ИмяМетаданного,ТекущаяСтрока.Реквизит);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеТиповРеквизита(ВидМетаданных,ИмяМетаданного,ИмяРеквизита)
	
	ОбМетаданных = ПолучитьОбъектМетаданных(ВидМетаданных,ИмяМетаданного);
	
	Попытка	
		ТипРеквизита = ОбМетаданных.Реквизиты[ИмяРеквизита].Тип;
	Исключение
		ТипРеквизита = ОбМетаданных.СтандартныеРеквизиты[ИмяРеквизита].Тип;
	КонецПопытки;

	Возврат ТипРеквизита;
	
КонецФункции

&НаСервере
Процедура ЗначенияРеквизитовНовыхЗначениеРеквизитаПриИзмененииНаСервере()
	
	СтрокаТЗ = ЗначенияРеквизитовНовых.НайтиПоИдентификатору(Элементы.ЗначенияРеквизитовНовых.ТекущаяСтрока);
	ЗначениеРеквизита = СтрокаТЗ.ЗначениеРеквизита;
	
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	
	Если ЭтоПримитивныйТипДанных(ТипРеквизита) Тогда
		СтрокаТЗ.ЗначениеРеквизитаСтрокой = ЗначениеРеквизита;
		Возврат;
	КонецЕсли;
	
	МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипРеквизита);
	Если Метаданные.Справочники.Содержит(МетаданныеЗначения) Тогда
		СтрокаТЗ.ЗначениеРеквизитаСтрокой = ЗначениеРеквизитаОбъекта(ЗначениеРеквизита,"Наименование");
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеЗначения) Тогда
		Для каждого ЭлементПеречисления из МетаданныеЗначения.ЗначенияПеречисления Цикл
			Если ЭлементПеречисления.Синоним = Строка(ЗначениеРеквизита) Тогда
				СтрокаТЗ.ЗначениеРеквизитаСтрокой = ЭлементПеречисления.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Знач Сообщение, Отказ = Ложь)
	Сообщить(Сообщение);	
	Отказ = Истина;
КонецПроцедуры

#область ФункцииДляСовместимости

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено для всех реквизитов.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то все реквизиты вернутся со значением Неопределено;
//                                если Ложь, то возникнет исключение при отсутствии прав на любой из реквизитов.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
&НаСервере
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет исключение прав доступа,
//  а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//  ИмяРеквизита - Строка - имя получаемого реквизита.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя, и в случае,
//                                если выборка будет пустая, то вернется значение Неопределено.
// 
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
// 
&НаСервере
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает значения реквизитов, прочитанные из информационной базы
// для нескольких объектов.
// 
//  Если доступа к одному из реквизитов какого-либо объекта нет, то в случае "ВыбратьРазрешенные = Ложь" возникнет
//  исключение прав доступа, а в случае "ВыбратьРазрешенные = Истина" вернется значение Неопределено для всех
//  реквизитов этого объекта.
//
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  МассивСсылок - Массив - массив ссылок на объекты одного типа.
//                 ВАЖНО! Значения массива должны быть ссылками на объекты ОДНОГО типа!
//  ИменаРеквизитов - Строка - имена реквизитов перечисленные через запятую, в формате требований к свойствам структуры.
//                             Например, "Код, Наименование, Родитель".
// 
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя, и в случае,
//                                если какой-либо объект будет исключен из выборки по правам, то все реквизиты этого объекта
//                                вернутся со значением Неопределено;
//                                если Ложь, то возникнет исключение при отсутствии прав на любой из реквизитов любого
//                                из объектов.
// Возвращаемое значение:
//  Соответствие - список объектов и значений их реквизитов:
//   * Ключ - ЛюбаяСсылка - ссылка на объект;
//   * Значение - Структура - значения реквизитов:
//    ** Ключ - Строка - имя реквизита;
//    ** Значение - Произвольный - значение реквизита.
// 
&НаСервере
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов, ВыбратьРазрешенные = Ложь) Экспорт
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Ссылка КАК Ссылка, " + ИменаРеквизитов + "
		|ИЗ
		|	" + МассивСсылок[0].Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		ЗначенияРеквизитов.Вставить(Ссылка, Новый Структура(ИменаРеквизитов));
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов[Выборка.Ссылка], Выборка);
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции


// Преобразует строку таблицы значений в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений - строка таблицы значений.
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
&НаСервере
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
//                           например, "%1 пошел в %2");
//  Параметр<n>   - Строка - значение подставляемого параметра.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел
//  в Зоопарк".
//
&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%") > 0
		Или Найти(Параметр2, "%") > 0
		Или Найти(Параметр3, "%") > 0
		Или Найти(Параметр4, "%") > 0
		Или Найти(Параметр5, "%") > 0
		Или Найти(Параметр6, "%") > 0
		Или Найти(Параметр7, "%") > 0
		Или Найти(Параметр8, "%") > 0
		Или Найти(Параметр9, "%") > 0;
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
&НаСервере
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

//
&НаКлиенте
Функция ПрочитатьСоответствиеИзСтрокиJSON(Знач ИсхСтрока) 
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ИсхСтрока);
	
	НастроенноеСоответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
		
	Возврат НастроенноеСоответствие;
	
КонецФункции

#Область КлючиНастроек

//
&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиОткрытиеФорм() 
		
	Возврат "smoke";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиМодальныеОкна() 
	
	Возврат "МодальныеОкна";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиКомандныйИнтерфейс() 
	
	Возврат "CommandInterface";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиМакетыСКД() 
	
	Возврат "МакетыСКД";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиПроведениеДокументов() 
	
	Возврат "ПроведениеДокументов";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастройкиФормированиеПечатныхФорм() 
	
	Возврат "ФормированиеПечатныхФорм";
	
КонецФункции

#КонецОбласти

#Область ИсключениеОбъектов

&НаСервере
Процедура ИсключитьОбъектыНеРасширениеНаСервере()
	
	ДеревоПроверкаФорм = РеквизитФормыВЗначение("ДеревоМетаданных");
	ОбойтиУровеньДерева(ДеревоПроверкаФорм.Строки);
	ЗначениеВРеквизитФормы(ДеревоПроверкаФорм, "ДеревоМетаданных");
	
	Для Каждого Строка Из ТаблицаДокументы Цикл
		Строка.ИсключеноПроведение 		= НЕ Строка.ЕстьИзмененияРасширениями;		
		Строка.ИсключеноПечатныеФормы	= НЕ Строка.ЕстьИзмененияРасширениями;			
	КонецЦикла; 
	
	Для Каждого Строка Из ТаблицаМакетыСКД Цикл
		Строка.Исключено = НЕ Строка.ЕстьИзмененияРасширениями;		
	КонецЦикла; 
		
КонецПроцедуры

&НаСервере
Процедура ОбойтиУровеньДерева(Строки)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если НЕ СтрокаДерева.ИмяМетаданного = "" Тогда
			СтрокаДерева.Исключено = НЕ СтрокаДерева.ЕстьИзмененияРасширениями;
		КонецЕсли;
		
		ОбойтиУровеньДерева(СтрокаДерева.Строки);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакИзмененияРасширениями(СтрокаОбъекта, Метаданное)
	
	СтрокаОбъекта.ЕстьИзмененияРасширениями = Метаданное.ЕстьИзмененияРасширениямиКонфигурации() 
		ИЛИ Метаданное.РасширениеКонфигурации() <> Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеМетаданных

&НаСервере
Процедура ДобавитьМетаданныеВТаблицуДокументов()
	
	ТаблицаДокументы.Очистить();
	ТаблицаПечатныеФормы.Очистить();
	
	Попытка
		МодульУправлениеПечатью = Вычислить("УправлениеПечатью"); //todo
	Исключение
		Сообщить("Не найден модуль ""УправлениеПечатью"". Анализ печатных форм не выполнен!");
		Возврат;
	КонецПопытки; 

	Для каждого Метаданное Из Метаданные.Документы Цикл
		
		СтрокаОбъекта					= ТаблицаДокументы.Добавить();
		СтрокаОбъекта.ИмяМетаданного	= Метаданное.Имя;
		
		УстановитьПризнакИзмененияРасширениями(СтрокаОбъекта, Метаданное);
		
		КомандыПечати = Неопределено;
		Попытка
			КомандыПечати			= МодульУправлениеПечатью.КомандыПечатиОбъекта(Метаданное);
		Исключение
			Продолжить;
		КонецПопытки; 
		
		Если Не ЗначениеЗаполнено(КомандыПечати) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяКомандаПечати Из КомандыПечати Цикл
			
			Если ТекущаяКомандаПечати.МенеджерПечати = "" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяПФ 				= ТаблицаПечатныеФормы.Добавить();
			НоваяПФ.ИмяМетаданного	= Метаданное.Имя;
			НоваяПФ.Идентификатор	= ТекущаяКомандаПечати.Идентификатор;
			НоваяПФ.Исключено 		= СтрокаОбъекта.ИсключеноПечатныеФормы;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетаданныеВТаблицуМакетовСКД()
	
	ТаблицаМакетыСКД.Очистить();
	
	Для Каждого ОбщийМакет Из Метаданные.ОбщиеМакеты Цикл
		
		Если ОбщийМакет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъекта					= ТаблицаМакетыСКД.Добавить();
		СтрокаОбъекта.Объект			= ОбщиеМакеты();
		СтрокаОбъекта.ИмяМетаданного	= ОбщийМакет.Имя;
		
		УстановитьПризнакИзмененияРасширениями(СтрокаОбъекта, ОбщийМакет);
		
	КонецЦикла;
	
	ПроверяемыеОбъекты = ПроверяемыеМетаданныеМакетыСКД();
	
	Для Каждого ПроверяемыйОбъект Из ПроверяемыеОбъекты Цикл
		
		Для Каждого ТекОбъект Из Метаданные[ПроверяемыйОбъект] Цикл
			
			Для Каждого ТекДанныеМакета Из ТекОбъект.Макеты Цикл
				
				Если ТекДанныеМакета.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОбъекта					= ТаблицаМакетыСКД.Добавить();
				СтрокаОбъекта.Объект			= ТекОбъект.Имя;
				СтрокаОбъекта.ИмяМетаданного	= МакетыОбъекта();
				
				УстановитьПризнакИзмененияРасширениями(СтрокаОбъекта, ТекДанныеМакета);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаМакетыСКД");
	ТЗ.Свернуть("ИмяМетаданного, ЕстьИзмененияРасширениями, Исключено, Объект");
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаМакетыСКД");
		
КонецПроцедуры

#КонецОбласти

#Область ЗаписьНастроекПоКлючам

&НаСервере
Процедура ЗаписатьНастройкуПоКлючу(Ключ, СоответствиеНастроек)
	
	СоответствиеНастроек.Удалить(Ключ);
	Если Ключ = КлючНастройкиМодальныеОкна() Тогда
		ЗаписатьНастройкуМодальныеОкна(СоответствиеНастроек);
	ИначеЕсли Ключ = КлючНастройкиКомандныйИнтерфейс() Тогда
		ЗаписатьНастройкуКомандныйИнтерфейс(СоответствиеНастроек);
	ИначеЕсли Ключ = КлючНастройкиМакетыСКД() Тогда
		ЗаписатьНастройкуМакетыСКД(СоответствиеНастроек);
	ИначеЕсли Ключ = КлючНастройкиПроведениеДокументов() Тогда
		ЗаписатьНастройкуПроведениеДокументов(СоответствиеНастроек);
	ИначеЕсли Ключ = КлючНастройкиФормированиеПечатныхФорм() Тогда
		ЗаписатьНастройкуФормированиеПечатныхФорм(СоответствиеНастроек);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуМодальныеОкна(СоответствиеНастроек)
	
	Если НЕ ЗакрыватьМодальныеОкна Тогда
		Возврат;
	КонецЕсли;
	
	Поля = Новый Массив;
	Поля.Добавить("*Закрыть *?");
	
	Заголовки = Новый Массив;
	Заголовки.Добавить("* Шаблон *");
	
	ШаблонПомощника = Новый Соответствие;
	ШаблонПомощника.Вставить("Поля", Поля);
	ШаблонПомощника.Вставить("Заголовки", Заголовки);
	ШаблонПомощника.Вставить("Кнопка", 0);
	
	НастройкиМодальныеОкна = Новый Соответствие;
	НастройкиМодальныеОкна.Вставить("ШаблонПомощника", ШаблонПомощника);
	
	СоответствиеНастроек.Вставить(КлючНастройкиМодальныеОкна(), НастройкиМодальныеОкна);            
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуКомандныйИнтерфейс(СоответствиеНастроек)
		
	НастройкиОткрытиеФорм = СоответствиеНастроек.Получить(КлючНастройкиОткрытиеФорм());
	
	НастройкаКомандныйИнтерфейс = Новый Соответствие;
	НастройкаКомандныйИнтерфейс.Вставить("Используется"					, ТестироватьКомандныйИнтерфейс);
	НастройкаКомандныйИнтерфейс.Вставить("СтрогийПорядокВыполнения"		, Истина);

	Для Каждого ЭлементНастройки Из НастройкиОткрытиеФорм Цикл
		
		ТипМетаданных 		= ЭлементНастройки.Ключ;
		ЗначениеИсключений	= ЭлементНастройки.Значение;
		
		Если ТипЗнч(ЗначениеИсключений) = Тип("Массив") Тогда
			НастройкаКомандныйИнтерфейс.Вставить(ТипМетаданных, ЗначениеИсключений);
		ИначеЕсли ТипЗнч(ЗначениеИсключений) = Тип("Структура") 
			 И ЗначениеИсключений.Свойство("Существующие")
		Тогда
			НастройкаКомандныйИнтерфейс.Вставить(ТипМетаданных, ЗначениеИсключений.Существующие);
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ИсключенияОбщиеКоманды = Новый Массив;
	ИсключенияОбщиеКоманды.Добавить("Удалить*");
	ИсключенияОбщиеКоманды.Добавить("ЗагрузитьДанныеИзФайла");
	ИсключенияОбщиеКоманды.Добавить("СверткаИнформационнойБазы");
	ИсключенияОбщиеКоманды.Добавить("УдалениеПомеченныхОбъектов");
	
	ИсключенияРазделы = Новый Массив;
	ИсключенияРазделы.Добавить("Настройки и администрирование");
	
	НастройкаКомандныйИнтерфейс.Вставить("ОбщиеКоманды",	ИсключенияОбщиеКоманды);
	НастройкаКомандныйИнтерфейс.Вставить("Разделы",			ИсключенияРазделы);
	
	СоответствиеНастроек.Вставить(КлючНастройкиКомандныйИнтерфейс(), НастройкаКомандныйИнтерфейс);  
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуМакетыСКД(СоответствиеНастроек)
	
	СтрокиИсключения = ТаблицаМакетыСКД.НайтиСтроки(Новый Структура("Исключено", Истина));
	
	МассивИсключенийОбщиеМакеты	= Новый Массив;
	МассивИсключенийМетаданных	= Новый Массив;
	
	Для Каждого СтрокаИсключение Из СтрокиИсключения Цикл
		
		Если СтрокаИсключение.Объект = ОбщиеМакеты() Тогда
			МассивИсключенийОбщиеМакеты.Добавить(СтрокаИсключение.ИмяМетаданного);
		Иначе
			МассивИсключенийМетаданных.Добавить(СтрокаИсключение.Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкаМакетыСКД = Новый Соответствие;
	НастройкаМакетыСКД.Вставить("Используется", 				ТестироватьМакетыСКД);
	НастройкаМакетыСКД.Вставить("ИсключенияОбщихМакетов", 		МассивИсключенийОбщиеМакеты);
	НастройкаМакетыСКД.Вставить("ИсключенияПоИмениМетаданных",	МассивИсключенийМетаданных);
	
	СоответствиеНастроек.Вставить(КлючНастройкиМакетыСКД(), НастройкаМакетыСКД);  
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуПроведениеДокументов(СоответствиеНастроек)
	
	СтрокиИсключения = ТаблицаДокументы.НайтиСтроки(Новый Структура("ИсключеноПроведение", Истина));
	
	МассивИсключений = Новый Массив;
	Для Каждого СтрокаИсключение Из СтрокиИсключения Цикл
		МассивИсключений.Добавить(СтрокаИсключение.ИмяМетаданного);
	КонецЦикла;
	
	НастройкаПроведениеДокументов = Новый Соответствие;
	НастройкаПроведениеДокументов.Вставить("Используется", 			ТестироватьПроведение);
	НастройкаПроведениеДокументов.Вставить("КоличествоДокументов", 	КоличествоДокументовПроведение);
	НастройкаПроведениеДокументов.Вставить("Исключения", 			МассивИсключений);
	
	СоответствиеНастроек.Вставить(КлючНастройкиПроведениеДокументов(), НастройкаПроведениеДокументов);  
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуФормированиеПечатныхФорм(СоответствиеНастроек)
	
	СтрокиИсключения = ТаблицаДокументы.НайтиСтроки(Новый Структура("ИсключеноПечатныеФормы", Истина));
		
	ИсключенияПоОбъекту = Новый Массив;
	Для Каждого СтрокаИсключение Из СтрокиИсключения Цикл
		ИсключенияПоОбъекту.Добавить(СтрокаИсключение.ИмяМетаданного);
	КонецЦикла;

	ИсключенияПоИдентификатору = Новый Массив;
	ИсключенияПоИдентификатору.Добавить("Комплект*");
	
	СтрокиИсключенныеМакеты = ТаблицаПечатныеФормы.НайтиСтроки(Новый Структура("Исключено", Истина));
	Для Каждого СтрокаИсключение Из СтрокиИсключенныеМакеты Цикл
		ИсключенияПоИдентификатору.Добавить(СтрокаИсключение.Идентификатор);
	КонецЦикла;
	
	НастройкаФормированиеПечатныхФорм = Новый Соответствие;
	НастройкаФормированиеПечатныхФорм.Вставить("Используется", 					ТестироватьПечатныеФормы);
	НастройкаФормированиеПечатныхФорм.Вставить("КоличествоДокументов",			КоличествоДокументовПечатныеФормы);
	НастройкаФормированиеПечатныхФорм.Вставить("ИсключенияПоОбъекту", 			ИсключенияПоОбъекту);
	НастройкаФормированиеПечатныхФорм.Вставить("ИсключенияПоИдентификатору", 	ИсключенияПоИдентификатору);

	СоответствиеНастроек.Вставить(КлючНастройкиФормированиеПечатныхФорм(), НастройкаФормированиеПечатныхФорм);  
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаНастроекПоКлючам

&НаСервере
Процедура ЗагрузитьНастройкиВТаблицу(Результат, Ключ)
	
	Если НЕ Результат.Свойство(Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Настройки = Результат[Ключ];
		Если Ключ = КлючНастройкиМакетыСКД() Тогда
			
			ИсключенияОбщихМакетов 		= Новый Массив; 
			ИсключенияПоИмениМетаданных = Новый Массив;
			
			Настройки.Свойство("ИсключенияОбщихМакетов", 		ИсключенияОбщихМакетов); 
			Настройки.Свойство("ИсключенияПоИмениМетаданных",	ИсключенияПоИмениМетаданных); 
			
			УстановитьПризнакИсключенияМакетаСКД(ИсключенияОбщихМакетов, ИсключенияПоИмениМетаданных);
			
		ИначеЕсли Ключ = КлючНастройкиПроведениеДокументов() Тогда
			
			Исключения = Новый Массив;
			
			Настройки.Свойство("Исключения",			Исключения); 
			Настройки.Свойство("КоличествоДокументов",	КоличествоДокументовПроведение);
			
			УстановитьПризнакИсключенияДокумента(Исключения, "ИсключеноПроведение");
			
		ИначеЕсли Ключ = КлючНастройкиФормированиеПечатныхФорм() Тогда
			
			ИсключенияПоОбъекту			= Новый Массив; 
			ИсключенияПоИдентификатору	= Новый Массив; 
			
			Настройки.Свойство("КоличествоДокументов",			КоличествоДокументовПечатныеФормы);
			Настройки.Свойство("ИсключенияПоОбъекту",			ИсключенияПоОбъекту); 	
			Настройки.Свойство("ИсключенияПоИдентификатору",	ИсключенияПоИдентификатору); 
			
			УстановитьПризнакИсключенияПечатныеФормы(ИсключенияПоИдентификатору);
			УстановитьПризнакИсключенияДокумента(ИсключенияПоОбъекту, "ИсключеноПечатныеФормы");
			
		Иначе
			Возврат;
		КонецЕсли;
	Исключение
		ТекстОшибки = ПодставитьПараметрыВСтроку("Ошибка при загрузке настроек по ключу %1 из файла: %2", Ключ, ОписаниеОшибки());
		СообщитьПользователю(ТекстОшибки);
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакИсключенияМакетаСКД(ИсключенияОбщихМакетов, ИсключенияПоИмениМетаданных)
	
	Для Каждого СтрокаИсключение Из ИсключенияОбщихМакетов Цикл
		
		СтрокиОбъекта = ТаблицаМакетыСКД.НайтиСтроки(Новый Структура("Объект, ИмяМетаданного", 
			ОбщиеМакеты(), СтрокаИсключение));
			
		Если СтрокиОбъекта.Количество() > 0 Тогда
			СтрокиОбъекта[0].Исключено 	= Истина;
		Иначе
			НоваяСтрока 				= ТаблицаМакетыСКД.Добавить();
			НоваяСтрока.ИмяМетаданного	= СтрокаИсключение;
			НоваяСтрока.Объект			= ОбщиеМакеты();
			НоваяСтрока.Исключено		= Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаИсключение Из ИсключенияПоИмениМетаданных Цикл
		
		СтрокиОбъекта = ТаблицаМакетыСКД.НайтиСтроки(Новый Структура("Объект, ИмяМетаданного", 
			СтрокаИсключение, МакетыОбъекта()));
			
		Если СтрокиОбъекта.Количество() > 0 Тогда
			СтрокиОбъекта[0].Исключено 	= Истина;
		Иначе
			НоваяСтрока 				= ТаблицаМакетыСКД.Добавить();
			НоваяСтрока.ИмяМетаданного	= МакетыОбъекта();
			НоваяСтрока.Объект			= СтрокаИсключение;
			НоваяСтрока.Исключено		= Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакИсключенияДокумента(Исключения, ИмяПризнака)
	
	Для Каждого СтрокаИсключение Из Исключения Цикл
		
		СтрокиДокумента = ТаблицаДокументы.НайтиСтроки(Новый Структура("ИмяМетаданного", СтрокаИсключение));
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокиДокумента[0][ИмяПризнака] = Истина;
		Иначе
			НоваяСтрока 				= ТаблицаДокументы.Добавить();
			НоваяСтрока.ИмяМетаданного	= СтрокаИсключение;
			НоваяСтрока[ИмяПризнака]	= Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакИсключенияПечатныеФормы(Исключения)
	
	Для Каждого СтрокаИсключение Из Исключения Цикл
		
		СтрокиДокумента = ТаблицаПечатныеФормы.НайтиСтроки(Новый Структура("Идентификатор", СтрокаИсключение));
		Для Каждого СтрокаДокумент Из СтрокиДокумента Цикл
			СтрокаДокумент.Исключено = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

&НаСервере
Функция НастройкаИспользуется(СтруктураНастроек, КлючТеста, КлючНастройки = "Используется")
	
	Возврат СтруктураНастроек.Свойство(КлючТеста) 
		И СтруктураНастроек[КлючТеста].Свойство(КлючНастройки)
		И СтруктураНастроек[КлючТеста][КлючНастройки];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбщиеМакеты()
	Возврат "ОбщиеМакеты";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МакетыОбъекта()
	Возврат "МакетыОбъекта";
КонецФункции

&НаСервере
Функция ПроверяемыеМетаданныеМакетыСКД()
	
	ПроверяемыеОбъекты = Новый Массив();
	ПроверяемыеОбъекты.Добавить("Справочники");
	ПроверяемыеОбъекты.Добавить("Документы");
	ПроверяемыеОбъекты.Добавить("Обработки");
	ПроверяемыеОбъекты.Добавить("Отчеты");
	ПроверяемыеОбъекты.Добавить("Перечисления");
	ПроверяемыеОбъекты.Добавить("ПланыВидовХарактеристик");
	ПроверяемыеОбъекты.Добавить("ПланыСчетов");
	ПроверяемыеОбъекты.Добавить("ПланыВидовРасчета");
	ПроверяемыеОбъекты.Добавить("РегистрыСведений");
	ПроверяемыеОбъекты.Добавить("РегистрыНакопления");
	ПроверяемыеОбъекты.Добавить("РегистрыБухгалтерии");
	ПроверяемыеОбъекты.Добавить("РегистрыРасчета");
	ПроверяемыеОбъекты.Добавить("БизнесПроцессы");
	ПроверяемыеОбъекты.Добавить("Задачи");
	
	Возврат ПроверяемыеОбъекты;
	
КонецФункции

#КонецОбласти

#КонецОбласти
